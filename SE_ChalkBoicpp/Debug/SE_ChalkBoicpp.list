
SE_ChalkBoicpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee38  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800f018  0800f018  0001f018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1b4  0800f1b4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1b4  0800f1b4  0001f1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1bc  0800f1bc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1bc  0800f1bc  0001f1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1c0  0800f1c0  0001f1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800f1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054c8  20000094  0800f258  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000555c  0800f258  0002555c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000390c9  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b3a  00000000  00000000  0005918d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002950  00000000  00000000  0005fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026c8  00000000  00000000  00062618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009b29  00000000  00000000  00064ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c52  00000000  00000000  0006e809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd2d4  00000000  00000000  000a045b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019d72f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2f0  00000000  00000000  0019d784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f000 	.word	0x0800f000

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000098 	.word	0x20000098
 800021c:	0800f000 	.word	0x0800f000

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 fbcc 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f89a 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fb40 	bl	8000ba8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000528:	f000 f936 	bl	8000798 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800052c:	f000 f986 	bl	800083c <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000530:	f000 f9bc 	bl	80008ac <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000534:	f000 fa24 	bl	8000980 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000538:	f000 fc9c 	bl	8000e74 <MX_FSMC_Init>
  MX_I2S2_Init();
 800053c:	f000 fa56 	bl	80009ec <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000540:	f000 fa82 	bl	8000a48 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000544:	f000 faac 	bl	8000aa0 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000548:	f000 fada 	bl	8000b00 <MX_UART10_Init>
  MX_USART6_UART_Init();
 800054c:	f000 fb02 	bl	8000b54 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f00b f824 	bl	800b59c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Motor1PIDUpdate */
  Motor1PIDUpdateHandle = osTimerNew(RunMotor1PIDUpdate, osTimerPeriodic, NULL, &Motor1PIDUpdate_attributes);
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <main+0xd8>)
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	4826      	ldr	r0, [pc, #152]	; (80005f4 <main+0xdc>)
 800055c:	f00b f92a 	bl	800b7b4 <osTimerNew>
 8000560:	4603      	mov	r3, r0
 8000562:	4a25      	ldr	r2, [pc, #148]	; (80005f8 <main+0xe0>)
 8000564:	6013      	str	r3, [r2, #0]

  /* creation of Motor2PIDUpdate */
  Motor2PIDUpdateHandle = osTimerNew(RunMotor2PIDUpdate, osTimerPeriodic, NULL, &Motor2PIDUpdate_attributes);
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <main+0xe4>)
 8000568:	2200      	movs	r2, #0
 800056a:	2101      	movs	r1, #1
 800056c:	4824      	ldr	r0, [pc, #144]	; (8000600 <main+0xe8>)
 800056e:	f00b f921 	bl	800b7b4 <osTimerNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a23      	ldr	r2, [pc, #140]	; (8000604 <main+0xec>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of Motor3PIDUpdate */
  Motor3PIDUpdateHandle = osTimerNew(RunMotor3PIDUpdate, osTimerPeriodic, NULL, &Motor3PIDUpdate_attributes);
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <main+0xf0>)
 800057a:	2200      	movs	r2, #0
 800057c:	2101      	movs	r1, #1
 800057e:	4823      	ldr	r0, [pc, #140]	; (800060c <main+0xf4>)
 8000580:	f00b f918 	bl	800b7b4 <osTimerNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a22      	ldr	r2, [pc, #136]	; (8000610 <main+0xf8>)
 8000588:	6013      	str	r3, [r2, #0]

  /* creation of DriveTrainPID */
  DriveTrainPIDHandle = osTimerNew(RunDriveTrainPID, osTimerPeriodic, NULL, &DriveTrainPID_attributes);
 800058a:	4b22      	ldr	r3, [pc, #136]	; (8000614 <main+0xfc>)
 800058c:	2200      	movs	r2, #0
 800058e:	2101      	movs	r1, #1
 8000590:	4821      	ldr	r0, [pc, #132]	; (8000618 <main+0x100>)
 8000592:	f00b f90f 	bl	800b7b4 <osTimerNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <main+0x104>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <main+0x108>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4820      	ldr	r0, [pc, #128]	; (8000624 <main+0x10c>)
 80005a2:	f00b f845 	bl	800b630 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <main+0x110>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of Motor1PWM */
  Motor1PWMHandle = osThreadNew(StartMotor1PWM, NULL, &Motor1PWM_attributes);
 80005ac:	4a1f      	ldr	r2, [pc, #124]	; (800062c <main+0x114>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	481f      	ldr	r0, [pc, #124]	; (8000630 <main+0x118>)
 80005b2:	f00b f83d 	bl	800b630 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <main+0x11c>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of Motor2PWM */
  Motor2PWMHandle = osThreadNew(StartMotor2PWM, NULL, &Motor2PWM_attributes);
 80005bc:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <main+0x120>)
 80005be:	2100      	movs	r1, #0
 80005c0:	481e      	ldr	r0, [pc, #120]	; (800063c <main+0x124>)
 80005c2:	f00b f835 	bl	800b630 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <main+0x128>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of Motor3PWM */
  Motor3PWMHandle = osThreadNew(StartMotor3PWM, NULL, &Motor3PWM_attributes);
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <main+0x12c>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	481d      	ldr	r0, [pc, #116]	; (8000648 <main+0x130>)
 80005d2:	f00b f82d 	bl	800b630 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <main+0x134>)
 80005da:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 80005dc:	481c      	ldr	r0, [pc, #112]	; (8000650 <main+0x138>)
 80005de:	f00b f965 	bl	800b8ac <osEventFlagsNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <main+0x13c>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f00a fffc 	bl	800b5e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0xd4>
 80005ee:	bf00      	nop
 80005f0:	0800f14c 	.word	0x0800f14c
 80005f4:	0800101d 	.word	0x0800101d
 80005f8:	20004d14 	.word	0x20004d14
 80005fc:	0800f15c 	.word	0x0800f15c
 8000600:	08001031 	.word	0x08001031
 8000604:	20004bf0 	.word	0x20004bf0
 8000608:	0800f16c 	.word	0x0800f16c
 800060c:	08001045 	.word	0x08001045
 8000610:	20004d18 	.word	0x20004d18
 8000614:	0800f17c 	.word	0x0800f17c
 8000618:	08001059 	.word	0x08001059
 800061c:	20004ccc 	.word	0x20004ccc
 8000620:	0800f0bc 	.word	0x0800f0bc
 8000624:	08000fd9 	.word	0x08000fd9
 8000628:	20004a4c 	.word	0x20004a4c
 800062c:	0800f0e0 	.word	0x0800f0e0
 8000630:	08000fed 	.word	0x08000fed
 8000634:	20004a50 	.word	0x20004a50
 8000638:	0800f104 	.word	0x0800f104
 800063c:	08000ffd 	.word	0x08000ffd
 8000640:	20004bf4 	.word	0x20004bf4
 8000644:	0800f128 	.word	0x0800f128
 8000648:	0800100d 	.word	0x0800100d
 800064c:	20004d1c 	.word	0x20004d1c
 8000650:	0800f18c 	.word	0x0800f18c
 8000654:	20004a8c 	.word	0x20004a8c

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0aa      	sub	sp, #168	; 0xa8
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00e fbfa 	bl	800ee60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2258      	movs	r2, #88	; 0x58
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f00e fbeb 	bl	800ee60 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <SystemClock_Config+0x138>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a3f      	ldr	r2, [pc, #252]	; (8000790 <SystemClock_Config+0x138>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemClock_Config+0x138>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <SystemClock_Config+0x13c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a39      	ldr	r2, [pc, #228]	; (8000794 <SystemClock_Config+0x13c>)
 80006b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemClock_Config+0x13c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006c2:	2303      	movs	r3, #3
 80006c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006e6:	230f      	movs	r3, #15
 80006e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006ec:	2390      	movs	r3, #144	; 0x90
 80006ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006f8:	2305      	movs	r3, #5
 80006fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000708:	4618      	mov	r0, r3
 800070a:	f005 fb69 	bl	8005de0 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000714:	f000 fcbc 	bl	8001090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fd62 	bl	80051fc <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800073e:	f000 fca7 	bl	8001090 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000742:	f240 1371 	movw	r3, #369	; 0x171
 8000746:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000748:	2332      	movs	r3, #50	; 0x32
 800074a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 800074c:	230c      	movs	r3, #12
 800074e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000760:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000766:	2300      	movs	r3, #0
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4618      	mov	r0, r3
 8000778:	f004 ff42 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000782:	f000 fc85 	bl	8001090 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	37a8      	adds	r7, #168	; 0xa8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <MX_ADC1_Init+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_ADC1_Init+0x98>)
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_ADC1_Init+0xa0>)
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_ADC1_Init+0x98>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_ADC1_Init+0x98>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <MX_ADC1_Init+0x98>)
 80007f8:	f001 fac4 	bl	8001d84 <HAL_ADC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 fc45 	bl	8001090 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000806:	230a      	movs	r3, #10
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_ADC1_Init+0x98>)
 8000818:	f001 faf8 	bl	8001e0c <HAL_ADC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000822:	f000 fc35 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20004b5c 	.word	0x20004b5c
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000842:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <MX_DFSDM1_Init+0x6c>)
 8000844:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000848:	2201      	movs	r2, #1
 800084a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000854:	2202      	movs	r2, #2
 8000856:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 800086c:	2202      	movs	r2, #2
 800086e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 800087e:	2201      	movs	r2, #1
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_DFSDM1_Init+0x68>)
 8000890:	f001 fdcc 	bl	800242c <HAL_DFSDM_ChannelInit>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800089a:	f000 fbf9 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20004a14 	.word	0x20004a14
 80008a8:	40016020 	.word	0x40016020

080008ac <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008b2:	4a30      	ldr	r2, [pc, #192]	; (8000974 <MX_DFSDM2_Init+0xc8>)
 80008b4:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008dc:	2202      	movs	r2, #2
 80008de:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80008fe:	481c      	ldr	r0, [pc, #112]	; (8000970 <MX_DFSDM2_Init+0xc4>)
 8000900:	f001 fd94 	bl	800242c <HAL_DFSDM_ChannelInit>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 800090a:	f000 fbc1 	bl	8001090 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000910:	4a1a      	ldr	r2, [pc, #104]	; (800097c <MX_DFSDM2_Init+0xd0>)
 8000912:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000916:	2201      	movs	r2, #1
 8000918:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000922:	2202      	movs	r2, #2
 8000924:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 800093a:	2202      	movs	r2, #2
 800093c:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 800094c:	2201      	movs	r2, #1
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <MX_DFSDM2_Init+0xcc>)
 800095e:	f001 fd65 	bl	800242c <HAL_DFSDM_ChannelInit>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000968:	f000 fb92 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20004b24 	.word	0x20004b24
 8000974:	40016420 	.word	0x40016420
 8000978:	20004a54 	.word	0x20004a54
 800097c:	400164e0 	.word	0x400164e0

08000980 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_FMPI2C1_Init+0x64>)
 8000988:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 800098c:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <MX_FMPI2C1_Init+0x68>)
 800098e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 80009bc:	f001 fe8a 	bl	80026d4 <HAL_FMPI2C_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f000 fb63 	bl	8001090 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_FMPI2C1_Init+0x60>)
 80009ce:	f001 ff10 	bl	80027f2 <HAL_FMPI2CEx_ConfigAnalogFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f000 fb5a 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20004ba4 	.word	0x20004ba4
 80009e4:	40006000 	.word	0x40006000
 80009e8:	00303d5b 	.word	0x00303d5b

080009ec <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_I2S2_Init+0x54>)
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <MX_I2S2_Init+0x58>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_I2S2_Init+0x54>)
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_I2S2_Init+0x54>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_I2S2_Init+0x54>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_I2S2_Init+0x54>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a10:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_I2S2_Init+0x54>)
 8000a14:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a18:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_I2S2_Init+0x54>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_I2S2_Init+0x54>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_I2S2_Init+0x54>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_I2S2_Init+0x54>)
 8000a2e:	f003 fe61 	bl	80046f4 <HAL_I2S_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000a38:	f000 fb2a 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20004d20 	.word	0x20004d20
 8000a44:	40003800 	.word	0x40003800

08000a48 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <MX_QUADSPI_Init+0x54>)
 8000a50:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a60:	2210      	movs	r2, #16
 8000a62:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a66:	2218      	movs	r2, #24
 8000a68:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a70:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_QUADSPI_Init+0x50>)
 8000a86:	f004 faf7 	bl	8005078 <HAL_QSPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f000 fafe 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20004d68 	.word	0x20004d68
 8000a9c:	a0001000 	.word	0xa0001000

08000aa0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <MX_SDIO_SD_Init+0x5c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000ad0:	f005 fc0a 	bl	80062e8 <HAL_SD_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000ada:	f000 fad9 	bl	8001090 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000ade:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_SDIO_SD_Init+0x58>)
 8000ae4:	f005 fe52 	bl	800678c <HAL_SD_ConfigWideBusOperation>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000aee:	f000 facf 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20004c48 	.word	0x20004c48
 8000afc:	40012c00 	.word	0x40012c00

08000b00 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_UART10_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_UART10_Init+0x4c>)
 8000b38:	f006 fc76 	bl	8007428 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 faa5 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20004a90 	.word	0x20004a90
 8000b50:	40011c00 	.word	0x40011c00

08000b54 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART6_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART6_UART_Init+0x4c>)
 8000b8c:	f006 fc4c 	bl	8007428 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 fa7b 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20004cd0 	.word	0x20004cd0
 8000ba4:	40011400 	.word	0x40011400

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
 8000bc2:	4ba4      	ldr	r3, [pc, #656]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4aa3      	ldr	r2, [pc, #652]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000bc8:	f043 0310 	orr.w	r3, r3, #16
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4ba1      	ldr	r3, [pc, #644]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	623b      	str	r3, [r7, #32]
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	4b9d      	ldr	r3, [pc, #628]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a9c      	ldr	r2, [pc, #624]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b9a      	ldr	r3, [pc, #616]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b96      	ldr	r3, [pc, #600]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a95      	ldr	r2, [pc, #596]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b93      	ldr	r3, [pc, #588]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b8f      	ldr	r3, [pc, #572]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a8e      	ldr	r2, [pc, #568]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b8c      	ldr	r3, [pc, #560]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b88      	ldr	r3, [pc, #544]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a87      	ldr	r2, [pc, #540]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b85      	ldr	r3, [pc, #532]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b81      	ldr	r3, [pc, #516]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a80      	ldr	r2, [pc, #512]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b7e      	ldr	r3, [pc, #504]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b7a      	ldr	r3, [pc, #488]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a79      	ldr	r2, [pc, #484]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b77      	ldr	r3, [pc, #476]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b73      	ldr	r3, [pc, #460]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a72      	ldr	r2, [pc, #456]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b70      	ldr	r3, [pc, #448]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|Motor2Dir2_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2178      	movs	r1, #120	; 0x78
 8000ca2:	486d      	ldr	r0, [pc, #436]	; (8000e58 <MX_GPIO_Init+0x2b0>)
 8000ca4:	f001 ff84 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor3Dir1_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f242 0120 	movw	r1, #8224	; 0x2020
 8000cae:	486b      	ldr	r0, [pc, #428]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000cb0:	f001 ff7e 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Motor1PWM_Pin|Motor2PWM_Pin|Motor1Dir2_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000cba:	4869      	ldr	r0, [pc, #420]	; (8000e60 <MX_GPIO_Init+0x2b8>)
 8000cbc:	f001 ff78 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor3Dir2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f242 0110 	movw	r1, #8208	; 0x2010
 8000cc6:	4867      	ldr	r0, [pc, #412]	; (8000e64 <MX_GPIO_Init+0x2bc>)
 8000cc8:	f001 ff72 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor3PWM_Pin|D15_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f24e 4141 	movw	r1, #58433	; 0xe441
 8000cd2:	4865      	ldr	r0, [pc, #404]	; (8000e68 <MX_GPIO_Init+0x2c0>)
 8000cd4:	f001 ff6c 	bl	8002bb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|Motor2Dir1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|Motor1Dir1_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000cde:	4863      	ldr	r0, [pc, #396]	; (8000e6c <MX_GPIO_Init+0x2c4>)
 8000ce0:	f001 ff66 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 Motor2Dir2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|Motor2Dir2_Pin;
 8000ce4:	2378      	movs	r3, #120	; 0x78
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4857      	ldr	r0, [pc, #348]	; (8000e58 <MX_GPIO_Init+0x2b0>)
 8000cfc:	f001 fdc4 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3Dir1_Pin PC5 */
  GPIO_InitStruct.Pin = Motor3Dir1_Pin|GPIO_PIN_5;
 8000d00:	f242 0320 	movw	r3, #8224	; 0x2020
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4850      	ldr	r0, [pc, #320]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000d1a:	f001 fdb5 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1PWM_Pin Motor2PWM_Pin Motor1Dir2_Pin */
  GPIO_InitStruct.Pin = Motor1PWM_Pin|Motor2PWM_Pin|Motor1Dir2_Pin;
 8000d1e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	484a      	ldr	r0, [pc, #296]	; (8000e60 <MX_GPIO_Init+0x2b8>)
 8000d38:	f001 fda6 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d40:	4b4b      	ldr	r3, [pc, #300]	; (8000e70 <MX_GPIO_Init+0x2c8>)
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4843      	ldr	r0, [pc, #268]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000d50:	f001 fd9a 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Motor1Enc2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Motor1Enc2_Pin;
 8000d54:	f248 0301 	movw	r3, #32769	; 0x8001
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5a:	4b45      	ldr	r3, [pc, #276]	; (8000e70 <MX_GPIO_Init+0x2c8>)
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	483e      	ldr	r0, [pc, #248]	; (8000e64 <MX_GPIO_Init+0x2bc>)
 8000d6a:	f001 fd8d 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3Dir2_Pin PA13 */
  GPIO_InitStruct.Pin = Motor3Dir2_Pin|GPIO_PIN_13;
 8000d6e:	f242 0310 	movw	r3, #8208	; 0x2010
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4837      	ldr	r0, [pc, #220]	; (8000e64 <MX_GPIO_Init+0x2bc>)
 8000d88:	f001 fd7e 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3PWM_Pin D15_Pin PB13 PB14
                           PB15 Motor2Dir1_Pin */
  GPIO_InitStruct.Pin = Motor3PWM_Pin|D15_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000d8c:	f24e 4341 	movw	r3, #58433	; 0xe441
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|Motor2Dir1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4830      	ldr	r0, [pc, #192]	; (8000e68 <MX_GPIO_Init+0x2c0>)
 8000da6:	f001 fd6f 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3Enc2_Pin Motor3Enc1_Pin Motor2Enc2_Pin Motor2Enc1_Pin
                           Motor1Enc1_Pin */
  GPIO_InitStruct.Pin = Motor3Enc2_Pin|Motor3Enc1_Pin|Motor2Enc2_Pin|Motor2Enc1_Pin
 8000daa:	f641 1330 	movw	r3, #6448	; 0x1930
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
                          |Motor1Enc1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <MX_GPIO_Init+0x2c8>)
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	482a      	ldr	r0, [pc, #168]	; (8000e68 <MX_GPIO_Init+0x2c0>)
 8000dc0:	f001 fd62 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <MX_GPIO_Init+0x2c8>)
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4825      	ldr	r0, [pc, #148]	; (8000e6c <MX_GPIO_Init+0x2c4>)
 8000dd8:	f001 fd56 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG8 Motor1Dir1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|Motor1Dir1_Pin;
 8000ddc:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	481d      	ldr	r0, [pc, #116]	; (8000e6c <MX_GPIO_Init+0x2c4>)
 8000df6:	f001 fd47 	bl	8002888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f001 faea 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e04:	2006      	movs	r0, #6
 8000e06:	f001 fb03 	bl	8002410 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	2007      	movs	r0, #7
 8000e10:	f001 fae2 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e14:	2007      	movs	r0, #7
 8000e16:	f001 fafb 	bl	8002410 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	200a      	movs	r0, #10
 8000e20:	f001 fada 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f001 faf3 	bl	8002410 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	2017      	movs	r0, #23
 8000e30:	f001 fad2 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e34:	2017      	movs	r0, #23
 8000e36:	f001 faeb 	bl	8002410 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2028      	movs	r0, #40	; 0x28
 8000e40:	f001 faca 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e44:	2028      	movs	r0, #40	; 0x28
 8000e46:	f001 fae3 	bl	8002410 <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3738      	adds	r7, #56	; 0x38
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40021400 	.word	0x40021400
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40021800 	.word	0x40021800
 8000e70:	10110000 	.word	0x10110000

08000e74 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000e8e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e92:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e94:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000e96:	4a4e      	ldr	r2, [pc, #312]	; (8000fd0 <MX_FSMC_Init+0x15c>)
 8000e98:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e9a:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ea0:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000eac:	4b47      	ldr	r3, [pc, #284]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000eae:	2210      	movs	r2, #16
 8000eb0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000eb2:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000eb8:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ebe:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000ec4:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000edc:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000eee:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000efc:	23ff      	movs	r3, #255	; 0xff
 8000efe:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f00:	230f      	movs	r3, #15
 8000f02:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f04:	2310      	movs	r3, #16
 8000f06:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f08:	2311      	movs	r3, #17
 8000f0a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	4619      	mov	r1, r3
 8000f16:	482d      	ldr	r0, [pc, #180]	; (8000fcc <MX_FSMC_Init+0x158>)
 8000f18:	f005 ff95 	bl	8006e46 <HAL_SRAM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8000f22:	f000 f8b5 	bl	8001090 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f26:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f28:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f2c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f30:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <MX_FSMC_Init+0x15c>)
 8000f32:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f36:	2204      	movs	r2, #4
 8000f38:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f48:	2210      	movs	r2, #16
 8000f4a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f90:	230f      	movs	r3, #15
 8000f92:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f94:	230f      	movs	r3, #15
 8000f96:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f98:	23ff      	movs	r3, #255	; 0xff
 8000f9a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000fa4:	2311      	movs	r3, #17
 8000fa6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <MX_FSMC_Init+0x160>)
 8000fb4:	f005 ff47 	bl	8006e46 <HAL_SRAM_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 8000fbe:	f000 f867 	bl	8001090 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3720      	adds	r7, #32
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20004ad4 	.word	0x20004ad4
 8000fd0:	a0000104 	.word	0xa0000104
 8000fd4:	20004bf8 	.word	0x20004bf8

08000fd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000fe0:	f00d fbf4 	bl	800e7cc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f00a fbb5 	bl	800b754 <osDelay>
 8000fea:	e7fb      	b.n	8000fe4 <StartDefaultTask+0xc>

08000fec <StartMotor1PWM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor1PWM */
void StartMotor1PWM(void *argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor1PWM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f00a fbad 	bl	800b754 <osDelay>
 8000ffa:	e7fb      	b.n	8000ff4 <StartMotor1PWM+0x8>

08000ffc <StartMotor2PWM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor2PWM */
void StartMotor2PWM(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor2PWM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f00a fba5 	bl	800b754 <osDelay>
 800100a:	e7fb      	b.n	8001004 <StartMotor2PWM+0x8>

0800100c <StartMotor3PWM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor3PWM */
void StartMotor3PWM(void *argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor3PWM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001014:	2001      	movs	r0, #1
 8001016:	f00a fb9d 	bl	800b754 <osDelay>
 800101a:	e7fb      	b.n	8001014 <StartMotor3PWM+0x8>

0800101c <RunMotor1PIDUpdate>:
  /* USER CODE END StartMotor3PWM */
}

/* RunMotor1PIDUpdate function */
void RunMotor1PIDUpdate(void *argument)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunMotor1PIDUpdate */

  /* USER CODE END RunMotor1PIDUpdate */
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <RunMotor2PIDUpdate>:

/* RunMotor2PIDUpdate function */
void RunMotor2PIDUpdate(void *argument)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunMotor2PIDUpdate */

  /* USER CODE END RunMotor2PIDUpdate */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <RunMotor3PIDUpdate>:

/* RunMotor3PIDUpdate function */
void RunMotor3PIDUpdate(void *argument)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunMotor3PIDUpdate */

  /* USER CODE END RunMotor3PIDUpdate */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <RunDriveTrainPID>:

/* RunDriveTrainPID function */
void RunDriveTrainPID(void *argument)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunDriveTrainPID */

  /* USER CODE END RunDriveTrainPID */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800107e:	f000 fe3d 	bl	8001cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40001000 	.word	0x40001000

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001098:	e7fe      	b.n	8001098 <Error_Handler+0x8>
	...

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_MspInit+0x54>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_MspInit+0x54>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_MspInit+0x54>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_MspInit+0x54>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_MspInit+0x54>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_MspInit+0x54>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	210f      	movs	r1, #15
 80010de:	f06f 0001 	mvn.w	r0, #1
 80010e2:	f001 f979 	bl	80023d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <HAL_ADC_MspInit+0xe4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d15b      	bne.n	80011ce <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_ADC_MspInit+0xe8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001186:	2311      	movs	r3, #17
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4811      	ldr	r0, [pc, #68]	; (80011e0 <HAL_ADC_MspInit+0xec>)
 800119a:	f001 fb75 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800119e:	2326      	movs	r3, #38	; 0x26
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <HAL_ADC_MspInit+0xf0>)
 80011b2:	f001 fb69 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ba:	2303      	movs	r3, #3
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <HAL_ADC_MspInit+0xf4>)
 80011ca:	f001 fb5d 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40012000 	.word	0x40012000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400

080011ec <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08e      	sub	sp, #56	; 0x38
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a77      	ldr	r2, [pc, #476]	; (80013e8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00e      	beq.n	800122c <HAL_DFSDM_ChannelMspInit+0x40>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a76      	ldr	r2, [pc, #472]	; (80013ec <HAL_DFSDM_ChannelMspInit+0x200>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d009      	beq.n	800122c <HAL_DFSDM_ChannelMspInit+0x40>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a74      	ldr	r2, [pc, #464]	; (80013f0 <HAL_DFSDM_ChannelMspInit+0x204>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d004      	beq.n	800122c <HAL_DFSDM_ChannelMspInit+0x40>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d154      	bne.n	80012d6 <HAL_DFSDM_ChannelMspInit+0xea>
 800122c:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d150      	bne.n	80012d6 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	4b70      	ldr	r3, [pc, #448]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	4a6f      	ldr	r2, [pc, #444]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 800123e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001242:	6453      	str	r3, [r2, #68]	; 0x44
 8001244:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800124c:	623b      	str	r3, [r7, #32]
 800124e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	4b69      	ldr	r3, [pc, #420]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a68      	ldr	r2, [pc, #416]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	4b62      	ldr	r3, [pc, #392]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a61      	ldr	r2, [pc, #388]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800129a:	2306      	movs	r3, #6
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4856      	ldr	r0, [pc, #344]	; (8001400 <HAL_DFSDM_ChannelMspInit+0x214>)
 80012a6:	f001 faef 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012ba:	2306      	movs	r3, #6
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	484f      	ldr	r0, [pc, #316]	; (8001404 <HAL_DFSDM_ChannelMspInit+0x218>)
 80012c6:	f001 fadf 	bl	8002888 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012ca:	4b4b      	ldr	r3, [pc, #300]	; (80013f8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a49      	ldr	r2, [pc, #292]	; (80013f8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80012d2:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80012d4:	e084      	b.n	80013e0 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d07f      	beq.n	80013e0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a41      	ldr	r2, [pc, #260]	; (80013ec <HAL_DFSDM_ChannelMspInit+0x200>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d07a      	beq.n	80013e0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <HAL_DFSDM_ChannelMspInit+0x204>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d075      	beq.n	80013e0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <HAL_DFSDM_ChannelMspInit+0x208>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d070      	beq.n	80013e0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012fe:	4b42      	ldr	r3, [pc, #264]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d16c      	bne.n	80013e0 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a3b      	ldr	r2, [pc, #236]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b35      	ldr	r3, [pc, #212]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a34      	ldr	r2, [pc, #208]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x210>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001386:	2307      	movs	r3, #7
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	481b      	ldr	r0, [pc, #108]	; (8001400 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001392:	f001 fa79 	bl	8002888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001396:	2304      	movs	r3, #4
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80013a6:	2303      	movs	r3, #3
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4814      	ldr	r0, [pc, #80]	; (8001404 <HAL_DFSDM_ChannelMspInit+0x218>)
 80013b2:	f001 fa69 	bl	8002888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80013c6:	2306      	movs	r3, #6
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	480e      	ldr	r0, [pc, #56]	; (800140c <HAL_DFSDM_ChannelMspInit+0x220>)
 80013d2:	f001 fa59 	bl	8002888 <HAL_GPIO_Init>
  DFSDM2_Init++;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	; 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40016000 	.word	0x40016000
 80013ec:	40016020 	.word	0x40016020
 80013f0:	40016040 	.word	0x40016040
 80013f4:	40016060 	.word	0x40016060
 80013f8:	200000b0 	.word	0x200000b0
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020c00 	.word	0x40020c00
 8001408:	200000b4 	.word	0x200000b4
 800140c:	40020400 	.word	0x40020400

08001410 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_FMPI2C_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_FMPI2C_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_FMPI2C_MspInit+0x88>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_FMPI2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800144e:	23c0      	movs	r3, #192	; 0xc0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001456:	2301      	movs	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800145e:	2304      	movs	r3, #4
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <HAL_FMPI2C_MspInit+0x8c>)
 800146a:	f001 fa0d 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_FMPI2C_MspInit+0x88>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_FMPI2C_MspInit+0x88>)
 8001478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_FMPI2C_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40006000 	.word	0x40006000
 8001498:	40023800 	.word	0x40023800
 800149c:	40020800 	.word	0x40020800

080014a0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a4f      	ldr	r2, [pc, #316]	; (80015fc <HAL_I2S_MspInit+0x15c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	f040 8097 	bne.w	80015f2 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	4b4d      	ldr	r3, [pc, #308]	; (8001600 <HAL_I2S_MspInit+0x160>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <HAL_I2S_MspInit+0x160>)
 80014ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <HAL_I2S_MspInit+0x160>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	4b46      	ldr	r3, [pc, #280]	; (8001600 <HAL_I2S_MspInit+0x160>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a45      	ldr	r2, [pc, #276]	; (8001600 <HAL_I2S_MspInit+0x160>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b43      	ldr	r3, [pc, #268]	; (8001600 <HAL_I2S_MspInit+0x160>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_I2S_MspInit+0x160>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <HAL_I2S_MspInit+0x160>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6313      	str	r3, [r2, #48]	; 0x30
 800150c:	4b3c      	ldr	r3, [pc, #240]	; (8001600 <HAL_I2S_MspInit+0x160>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_I2S_MspInit+0x160>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <HAL_I2S_MspInit+0x160>)
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	6313      	str	r3, [r2, #48]	; 0x30
 8001528:	4b35      	ldr	r3, [pc, #212]	; (8001600 <HAL_I2S_MspInit+0x160>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_I2S_MspInit+0x160>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a30      	ldr	r2, [pc, #192]	; (8001600 <HAL_I2S_MspInit+0x160>)
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_I2S_MspInit+0x160>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001550:	2304      	movs	r3, #4
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001560:	2306      	movs	r3, #6
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <HAL_I2S_MspInit+0x164>)
 800156c:	f001 f98c 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001570:	2308      	movs	r3, #8
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001580:	2305      	movs	r3, #5
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	481e      	ldr	r0, [pc, #120]	; (8001604 <HAL_I2S_MspInit+0x164>)
 800158c:	f001 f97c 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001590:	2308      	movs	r3, #8
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a0:	2305      	movs	r3, #5
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4817      	ldr	r0, [pc, #92]	; (8001608 <HAL_I2S_MspInit+0x168>)
 80015ac:	f001 f96c 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80015b0:	2308      	movs	r3, #8
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c0:	2305      	movs	r3, #5
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <HAL_I2S_MspInit+0x16c>)
 80015cc:	f001 f95c 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e2:	2305      	movs	r3, #5
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4808      	ldr	r0, [pc, #32]	; (8001610 <HAL_I2S_MspInit+0x170>)
 80015ee:	f001 f94b 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	; 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40003800 	.word	0x40003800
 8001600:	40023800 	.word	0x40023800
 8001604:	40020800 	.word	0x40020800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40020400 	.word	0x40020400

08001614 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a56      	ldr	r2, [pc, #344]	; (800178c <HAL_QSPI_MspInit+0x178>)
 8001632:	4293      	cmp	r3, r2
 8001634:	f040 80a6 	bne.w	8001784 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	4b54      	ldr	r3, [pc, #336]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	4a53      	ldr	r2, [pc, #332]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	6393      	str	r3, [r2, #56]	; 0x38
 8001648:	4b51      	ldr	r3, [pc, #324]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a4c      	ldr	r2, [pc, #304]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a45      	ldr	r2, [pc, #276]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4a3e      	ldr	r2, [pc, #248]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
 800169c:	4b3c      	ldr	r3, [pc, #240]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a37      	ldr	r2, [pc, #220]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a30      	ldr	r2, [pc, #192]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 80016ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_QSPI_MspInit+0x17c>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80016e0:	2304      	movs	r3, #4
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80016f0:	2309      	movs	r3, #9
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4826      	ldr	r0, [pc, #152]	; (8001794 <HAL_QSPI_MspInit+0x180>)
 80016fc:	f001 f8c4 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001712:	230a      	movs	r3, #10
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	481e      	ldr	r0, [pc, #120]	; (8001798 <HAL_QSPI_MspInit+0x184>)
 800171e:	f001 f8b3 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001722:	2304      	movs	r3, #4
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001732:	2309      	movs	r3, #9
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	4817      	ldr	r0, [pc, #92]	; (800179c <HAL_QSPI_MspInit+0x188>)
 800173e:	f001 f8a3 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001754:	2309      	movs	r3, #9
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <HAL_QSPI_MspInit+0x18c>)
 8001760:	f001 f892 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001774:	230a      	movs	r3, #10
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4809      	ldr	r0, [pc, #36]	; (80017a4 <HAL_QSPI_MspInit+0x190>)
 8001780:	f001 f882 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3738      	adds	r7, #56	; 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	a0001000 	.word	0xa0001000
 8001790:	40023800 	.word	0x40023800
 8001794:	40021000 	.word	0x40021000
 8001798:	40021400 	.word	0x40021400
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020c00 	.word	0x40020c00
 80017a4:	40021800 	.word	0x40021800

080017a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_SD_MspInit+0xc0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d14a      	bne.n	8001860 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_SD_MspInit+0xc4>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_SD_MspInit+0xc4>)
 80017d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_SD_MspInit+0xc4>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_SD_MspInit+0xc4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a1f      	ldr	r2, [pc, #124]	; (800186c <HAL_SD_MspInit+0xc4>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_SD_MspInit+0xc4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_SD_MspInit+0xc4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_SD_MspInit+0xc4>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_SD_MspInit+0xc4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800182e:	230c      	movs	r3, #12
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <HAL_SD_MspInit+0xc8>)
 800183a:	f001 f825 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 800183e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001842:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001850:	230c      	movs	r3, #12
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <HAL_SD_MspInit+0xcc>)
 800185c:	f001 f814 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40012c00 	.word	0x40012c00
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020800 	.word	0x40020800

08001878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a33      	ldr	r2, [pc, #204]	; (8001964 <HAL_UART_MspInit+0xec>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12d      	bne.n	80018f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_UART_MspInit+0xf0>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a31      	ldr	r2, [pc, #196]	; (8001968 <HAL_UART_MspInit+0xf0>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_UART_MspInit+0xf0>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_UART_MspInit+0xf0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <HAL_UART_MspInit+0xf0>)
 80018c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_UART_MspInit+0xf0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 80018d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 80018e4:	230b      	movs	r3, #11
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	481f      	ldr	r0, [pc, #124]	; (800196c <HAL_UART_MspInit+0xf4>)
 80018f0:	f000 ffca 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018f4:	e031      	b.n	800195a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d12c      	bne.n	800195a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_UART_MspInit+0xf0>)
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_UART_MspInit+0xf0>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	6453      	str	r3, [r2, #68]	; 0x44
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_UART_MspInit+0xf0>)
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_UART_MspInit+0xf0>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_UART_MspInit+0xf0>)
 8001926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_UART_MspInit+0xf0>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001938:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800194a:	2308      	movs	r3, #8
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_UART_MspInit+0xf4>)
 8001956:	f000 ff97 	bl	8002888 <HAL_GPIO_Init>
}
 800195a:	bf00      	nop
 800195c:	3730      	adds	r7, #48	; 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40011c00 	.word	0x40011c00
 8001968:	40023800 	.word	0x40023800
 800196c:	40021800 	.word	0x40021800
 8001970:	40011400 	.word	0x40011400

08001974 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_FSMC_MspInit+0xc8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d151      	bne.n	8001a34 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_FSMC_MspInit+0xc8>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_FSMC_MspInit+0xcc>)
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <HAL_FSMC_MspInit+0xcc>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6393      	str	r3, [r2, #56]	; 0x38
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_FSMC_MspInit+0xcc>)
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 80019b2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80019b6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80019c4:	230c      	movs	r3, #12
 80019c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	4619      	mov	r1, r3
 80019cc:	481d      	ldr	r0, [pc, #116]	; (8001a44 <HAL_FSMC_MspInit+0xd0>)
 80019ce:	f000 ff5b 	bl	8002888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 80019d2:	f240 433f 	movw	r3, #1087	; 0x43f
 80019d6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80019e4:	230c      	movs	r3, #12
 80019e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4816      	ldr	r0, [pc, #88]	; (8001a48 <HAL_FSMC_MspInit+0xd4>)
 80019ee:	f000 ff4b 	bl	8002888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 80019f2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80019f6:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a04:	230c      	movs	r3, #12
 8001a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480f      	ldr	r0, [pc, #60]	; (8001a4c <HAL_FSMC_MspInit+0xd8>)
 8001a0e:	f000 ff3b 	bl	8002888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001a12:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001a16:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a24:	230c      	movs	r3, #12
 8001a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4808      	ldr	r0, [pc, #32]	; (8001a50 <HAL_FSMC_MspInit+0xdc>)
 8001a2e:	f000 ff2b 	bl	8002888 <HAL_GPIO_Init>
 8001a32:	e000      	b.n	8001a36 <HAL_FSMC_MspInit+0xc2>
    return;
 8001a34:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200000b8 	.word	0x200000b8
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40021400 	.word	0x40021400
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40020c00 	.word	0x40020c00

08001a54 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001a5c:	f7ff ff8a 	bl	8001974 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	2036      	movs	r0, #54	; 0x36
 8001a7e:	f000 fcab 	bl	80023d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a82:	2036      	movs	r0, #54	; 0x36
 8001a84:	f000 fcc4 	bl	8002410 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_InitTick+0xa0>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_InitTick+0xa0>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_InitTick+0xa0>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa4:	f107 0210 	add.w	r2, r7, #16
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fd74 	bl	800559c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ab4:	f003 fd4a 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 8001ab8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_InitTick+0xa4>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_InitTick+0xa8>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <HAL_InitTick+0xac>)
 8001acc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_InitTick+0xa8>)
 8001ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_InitTick+0xa8>)
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ada:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_InitTick+0xa8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_InitTick+0xa8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ae8:	4809      	ldr	r0, [pc, #36]	; (8001b10 <HAL_InitTick+0xa8>)
 8001aea:	f005 f9f0 	bl	8006ece <HAL_TIM_Base_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d104      	bne.n	8001afe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001af4:	4806      	ldr	r0, [pc, #24]	; (8001b10 <HAL_InitTick+0xa8>)
 8001af6:	f005 fa43 	bl	8006f80 <HAL_TIM_Base_Start_IT>
 8001afa:	4603      	mov	r3, r0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	431bde83 	.word	0x431bde83
 8001b10:	20004db4 	.word	0x20004db4
 8001b14:	40001000 	.word	0x40001000

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f001 f84b 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b56:	2002      	movs	r0, #2
 8001b58:	f001 f844 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b64:	2010      	movs	r0, #16
 8001b66:	f001 f83d 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001b72:	2020      	movs	r0, #32
 8001b74:	f001 f836 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b78:	2080      	movs	r0, #128	; 0x80
 8001b7a:	f001 f833 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b82:	f001 f82f 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b92:	f001 f827 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b9a:	f001 f823 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ba2:	f001 f81f 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM6_DAC_IRQHandler+0x10>)
 8001bb2:	f005 fa55 	bl	8007060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20004db4 	.word	0x20004db4

08001bc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <OTG_FS_IRQHandler+0x10>)
 8001bc6:	f001 fa9b 	bl	8003100 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20005248 	.word	0x20005248

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f00d f8e4 	bl	800edd0 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20050000 	.word	0x20050000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	200000bc 	.word	0x200000bc
 8001c3c:	20005560 	.word	0x20005560

08001c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c6a:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c8e:	f7ff ffd7 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f00d f8a3 	bl	800eddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7fe fc3f 	bl	8000518 <main>
  bx  lr    
 8001c9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001ca8:	0800f1c4 	.word	0x0800f1c4
  ldr r2, =_sbss
 8001cac:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001cb0:	2000555c 	.word	0x2000555c

08001cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <ADC_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_Init+0x40>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_Init+0x40>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x40>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 fb6e 	bl	80023c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff febe 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff f9d6 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20004dfc 	.word	0x20004dfc

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20004dfc 	.word	0x20004dfc

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008

08001d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e033      	b.n	8001e02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff f9a6 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dca:	f023 0302 	bic.w	r3, r3, #2
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f94a 	bl	8002070 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
 8001df2:	e001      	b.n	8001df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1c>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e113      	b.n	8002050 <HAL_ADC_ConfigChannel+0x244>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d925      	bls.n	8001e84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b1e      	subs	r3, #30
 8001e4e:	2207      	movs	r2, #7
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43da      	mvns	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68d9      	ldr	r1, [r3, #12]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4403      	add	r3, r0
 8001e76:	3b1e      	subs	r3, #30
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	e022      	b.n	8001eca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	2207      	movs	r2, #7
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6919      	ldr	r1, [r3, #16]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4403      	add	r3, r0
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d824      	bhi.n	8001f1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b05      	subs	r3, #5
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b05      	subs	r3, #5
 8001f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1a:	e04c      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d824      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b23      	subs	r3, #35	; 0x23
 8001f36:	221f      	movs	r2, #31
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	400a      	ands	r2, r1
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b23      	subs	r3, #35	; 0x23
 8001f60:	fa00 f203 	lsl.w	r2, r0, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6c:	e023      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b41      	subs	r3, #65	; 0x41
 8001f80:	221f      	movs	r2, #31
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b41      	subs	r3, #65	; 0x41
 8001faa:	fa00 f203 	lsl.w	r2, r0, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_ADC_ConfigChannel+0x250>)
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a28      	ldr	r2, [pc, #160]	; (8002060 <HAL_ADC_ConfigChannel+0x254>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1d8>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b12      	cmp	r3, #18
 8001fca:	d10b      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_ADC_ConfigChannel+0x254>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12b      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x23a>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <HAL_ADC_ConfigChannel+0x258>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <HAL_ADC_ConfigChannel+0x1f4>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b11      	cmp	r3, #17
 8001ffe:	d122      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_ADC_ConfigChannel+0x258>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d111      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x25c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_ADC_ConfigChannel+0x260>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	0c9a      	lsrs	r2, r3, #18
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002038:	e002      	b.n	8002040 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3b01      	subs	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40012300 	.word	0x40012300
 8002060:	40012000 	.word	0x40012000
 8002064:	10000012 	.word	0x10000012
 8002068:	20000000 	.word	0x20000000
 800206c:	431bde83 	.word	0x431bde83

08002070 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002078:	4b79      	ldr	r3, [pc, #484]	; (8002260 <ADC_Init+0x1f0>)
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	431a      	orrs	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	021a      	lsls	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	4a58      	ldr	r2, [pc, #352]	; (8002264 <ADC_Init+0x1f4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6899      	ldr	r1, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	e00f      	b.n	800216e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800215c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800216c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0202 	bic.w	r2, r2, #2
 800217c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6899      	ldr	r1, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7e1b      	ldrb	r3, [r3, #24]
 8002188:	005a      	lsls	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01b      	beq.n	80021d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	3b01      	subs	r3, #1
 80021c8:	035a      	lsls	r2, r3, #13
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	e007      	b.n	80021e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	3b01      	subs	r3, #1
 8002200:	051a      	lsls	r2, r3, #20
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002226:	025a      	lsls	r2, r3, #9
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6899      	ldr	r1, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	029a      	lsls	r2, r3, #10
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40012300 	.word	0x40012300
 8002264:	0f000001 	.word	0x0f000001

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff4c 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ea:	f7ff ff61 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 80023ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f7ff ffb1 	bl	800235c <NVIC_EncodePriority>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff80 	bl	8002308 <__NVIC_SetPriority>
}
 8002408:	bf00      	nop
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff54 	bl	80022cc <__NVIC_EnableIRQ>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0cf      	b.n	80025de <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a69      	ldr	r2, [pc, #420]	; (80025e8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00e      	beq.n	8002466 <HAL_DFSDM_ChannelInit+0x3a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a67      	ldr	r2, [pc, #412]	; (80025ec <HAL_DFSDM_ChannelInit+0x1c0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_DFSDM_ChannelInit+0x3a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a66      	ldr	r2, [pc, #408]	; (80025f0 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_DFSDM_ChannelInit+0x3a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a64      	ldr	r2, [pc, #400]	; (80025f4 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d106      	bne.n	8002474 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002466:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002468:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800246a:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_DFSDM_ChannelInit+0x1d0>)
 800246c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800246e:	4b5e      	ldr	r3, [pc, #376]	; (80025e8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e005      	b.n	8002480 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002474:	4b62      	ldr	r3, [pc, #392]	; (8002600 <HAL_DFSDM_ChannelInit+0x1d4>)
 8002476:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002478:	4b62      	ldr	r3, [pc, #392]	; (8002604 <HAL_DFSDM_ChannelInit+0x1d8>)
 800247a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 800247c:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_DFSDM_ChannelInit+0x1dc>)
 800247e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f8c1 	bl	800260c <DFSDM_GetChannelFromInstance>
 800248a:	4603      	mov	r3, r0
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0a0      	b.n	80025de <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe fea5 	bl	80011ec <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d125      	bne.n	8002500 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800250e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800251e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002524:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 020f 	bic.w	r2, r2, #15
 800253c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002564:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 0207 	and.w	r2, r2, #7
 8002590:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025bc:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f81e 	bl	800260c <DFSDM_GetChannelFromInstance>
 80025d0:	4603      	mov	r3, r0
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40016000 	.word	0x40016000
 80025ec:	40016020 	.word	0x40016020
 80025f0:	40016040 	.word	0x40016040
 80025f4:	40016060 	.word	0x40016060
 80025f8:	200000c0 	.word	0x200000c0
 80025fc:	200000c4 	.word	0x200000c4
 8002600:	200000d4 	.word	0x200000d4
 8002604:	200000d8 	.word	0x200000d8
 8002608:	40016400 	.word	0x40016400

0800260c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a24      	ldr	r2, [pc, #144]	; (80026a8 <DFSDM_GetChannelFromInstance+0x9c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d003      	beq.n	8002624 <DFSDM_GetChannelFromInstance+0x18>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <DFSDM_GetChannelFromInstance+0xa0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d102      	bne.n	800262a <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e037      	b.n	800269a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <DFSDM_GetChannelFromInstance+0xa4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <DFSDM_GetChannelFromInstance+0x2e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <DFSDM_GetChannelFromInstance+0xa8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d102      	bne.n	8002640 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 800263a:	2301      	movs	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e02c      	b.n	800269a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <DFSDM_GetChannelFromInstance+0xac>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d003      	beq.n	8002650 <DFSDM_GetChannelFromInstance+0x44>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <DFSDM_GetChannelFromInstance+0xb0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d102      	bne.n	8002656 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8002650:	2302      	movs	r3, #2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e021      	b.n	800269a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <DFSDM_GetChannelFromInstance+0xb4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d003      	beq.n	8002666 <DFSDM_GetChannelFromInstance+0x5a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <DFSDM_GetChannelFromInstance+0xb8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d102      	bne.n	800266c <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002666:	2303      	movs	r3, #3
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e016      	b.n	800269a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <DFSDM_GetChannelFromInstance+0xbc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d102      	bne.n	800267a <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002674:	2304      	movs	r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e00f      	b.n	800269a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <DFSDM_GetChannelFromInstance+0xc0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d102      	bne.n	8002688 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8002682:	2305      	movs	r3, #5
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e008      	b.n	800269a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <DFSDM_GetChannelFromInstance+0xc4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d102      	bne.n	8002696 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8002690:	2306      	movs	r3, #6
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e001      	b.n	800269a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8002696:	2307      	movs	r3, #7
 8002698:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40016000 	.word	0x40016000
 80026ac:	40016400 	.word	0x40016400
 80026b0:	40016020 	.word	0x40016020
 80026b4:	40016420 	.word	0x40016420
 80026b8:	40016040 	.word	0x40016040
 80026bc:	40016440 	.word	0x40016440
 80026c0:	40016060 	.word	0x40016060
 80026c4:	40016460 	.word	0x40016460
 80026c8:	40016480 	.word	0x40016480
 80026cc:	400164a0 	.word	0x400164a0
 80026d0:	400164c0 	.word	0x400164c0

080026d4 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e081      	b.n	80027ea <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fe88 	bl	8001410 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	; 0x24
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002724:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002734:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d107      	bne.n	800274e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	e006      	b.n	800275c <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800275a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d104      	bne.n	800276e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800276c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002780:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002790:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	ea42 0103 	orr.w	r1, r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69d9      	ldr	r1, [r3, #28]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	d138      	bne.n	800287a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8002812:	2302      	movs	r3, #2
 8002814:	e032      	b.n	800287c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2224      	movs	r2, #36	; 0x24
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002844:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800287a:	2302      	movs	r3, #2
  }
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e165      	b.n	8002b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f040 8154 	bne.w	8002b6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d005      	beq.n	80028da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d130      	bne.n	800293c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 0201 	and.w	r2, r3, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b03      	cmp	r3, #3
 8002946:	d017      	beq.n	8002978 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d123      	bne.n	80029cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80ae 	beq.w	8002b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a5c      	ldr	r2, [pc, #368]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2a:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	220f      	movs	r2, #15
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4f      	ldr	r2, [pc, #316]	; (8002b90 <HAL_GPIO_Init+0x308>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d025      	beq.n	8002aa2 <HAL_GPIO_Init+0x21a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4e      	ldr	r2, [pc, #312]	; (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01f      	beq.n	8002a9e <HAL_GPIO_Init+0x216>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4d      	ldr	r2, [pc, #308]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_Init+0x212>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <HAL_GPIO_Init+0x314>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4b      	ldr	r2, [pc, #300]	; (8002ba0 <HAL_GPIO_Init+0x318>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_Init+0x20a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4a      	ldr	r2, [pc, #296]	; (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x206>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a49      	ldr	r2, [pc, #292]	; (8002ba8 <HAL_GPIO_Init+0x320>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_Init+0x202>
 8002a86:	2306      	movs	r3, #6
 8002a88:	e00c      	b.n	8002aa4 <HAL_GPIO_Init+0x21c>
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	e00a      	b.n	8002aa4 <HAL_GPIO_Init+0x21c>
 8002a8e:	2305      	movs	r3, #5
 8002a90:	e008      	b.n	8002aa4 <HAL_GPIO_Init+0x21c>
 8002a92:	2304      	movs	r3, #4
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x21c>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e004      	b.n	8002aa4 <HAL_GPIO_Init+0x21c>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_Init+0x21c>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_GPIO_Init+0x21c>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	f002 0203 	and.w	r2, r2, #3
 8002aaa:	0092      	lsls	r2, r2, #2
 8002aac:	4093      	lsls	r3, r2
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab4:	4935      	ldr	r1, [pc, #212]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae6:	4a31      	ldr	r2, [pc, #196]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aec:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b0f      	cmp	r3, #15
 8002b74:	f67f ae96 	bls.w	80028a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40021400 	.word	0x40021400
 8002ba8:	40021800 	.word	0x40021800
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bfa:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f806 	bl	8002c14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40013c00 	.word	0x40013c00

08002c14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2c:	b08f      	sub	sp, #60	; 0x3c
 8002c2e:	af0a      	add	r7, sp, #40	; 0x28
 8002c30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e054      	b.n	8002ce6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f00b fe0c 	bl	800e874 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f005 fc08 	bl	8008490 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	687e      	ldr	r6, [r7, #4]
 8002c88:	466d      	mov	r5, sp
 8002c8a:	f106 0410 	add.w	r4, r6, #16
 8002c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c9e:	1d33      	adds	r3, r6, #4
 8002ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca2:	6838      	ldr	r0, [r7, #0]
 8002ca4:	f005 fb82 	bl	80083ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f005 fbff 	bl	80084b2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	687e      	ldr	r6, [r7, #4]
 8002cbc:	466d      	mov	r5, sp
 8002cbe:	f106 0410 	add.w	r4, r6, #16
 8002cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cd2:	1d33      	adds	r3, r6, #4
 8002cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd6:	6838      	ldr	r0, [r7, #0]
 8002cd8:	f005 fd12 	bl	8008700 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002cee:	b590      	push	{r4, r7, lr}
 8002cf0:	b089      	sub	sp, #36	; 0x24
 8002cf2:	af04      	add	r7, sp, #16
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	4608      	mov	r0, r1
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	70fb      	strb	r3, [r7, #3]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70bb      	strb	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_HCD_HC_Init+0x28>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e076      	b.n	8002e04 <HAL_HCD_HC_Init+0x116>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	333d      	adds	r3, #61	; 0x3d
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3338      	adds	r3, #56	; 0x38
 8002d3e:	787a      	ldrb	r2, [r7, #1]
 8002d40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3340      	adds	r3, #64	; 0x40
 8002d50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d52:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3339      	adds	r3, #57	; 0x39
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	333f      	adds	r3, #63	; 0x3f
 8002d74:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	78ba      	ldrb	r2, [r7, #2]
 8002d7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d82:	b2d0      	uxtb	r0, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	333a      	adds	r3, #58	; 0x3a
 8002d90:	4602      	mov	r2, r0
 8002d92:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002d94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	da09      	bge.n	8002db0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	333b      	adds	r3, #59	; 0x3b
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	e008      	b.n	8002dc2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	333b      	adds	r3, #59	; 0x3b
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	333c      	adds	r3, #60	; 0x3c
 8002dd0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002dd4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	787c      	ldrb	r4, [r7, #1]
 8002ddc:	78ba      	ldrb	r2, [r7, #2]
 8002dde:	78f9      	ldrb	r1, [r7, #3]
 8002de0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	4623      	mov	r3, r4
 8002df2:	f005 fe01 	bl	80089f8 <USB_HC_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd90      	pop	{r4, r7, pc}

08002e0c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_HCD_HC_Halt+0x1e>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e00f      	b.n	8002e4a <HAL_HCD_HC_Halt+0x3e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f006 f83d 	bl	8008eba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	70fb      	strb	r3, [r7, #3]
 8002e66:	460b      	mov	r3, r1
 8002e68:	70bb      	strb	r3, [r7, #2]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	333b      	adds	r3, #59	; 0x3b
 8002e7c:	78ba      	ldrb	r2, [r7, #2]
 8002e7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	333f      	adds	r3, #63	; 0x3f
 8002e8e:	787a      	ldrb	r2, [r7, #1]
 8002e90:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e92:	7c3b      	ldrb	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d112      	bne.n	8002ebe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3342      	adds	r3, #66	; 0x42
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	333d      	adds	r3, #61	; 0x3d
 8002eb8:	7f3a      	ldrb	r2, [r7, #28]
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e008      	b.n	8002ed0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3342      	adds	r3, #66	; 0x42
 8002ecc:	2202      	movs	r2, #2
 8002ece:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	f200 80c6 	bhi.w	8003064 <HAL_HCD_HC_SubmitRequest+0x210>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08003051 	.word	0x08003051
 8002ee8:	08002f55 	.word	0x08002f55
 8002eec:	08002fd3 	.word	0x08002fd3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002ef0:	7c3b      	ldrb	r3, [r7, #16]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	f040 80b8 	bne.w	8003068 <HAL_HCD_HC_SubmitRequest+0x214>
 8002ef8:	78bb      	ldrb	r3, [r7, #2]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80b4 	bne.w	8003068 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002f00:	8b3b      	ldrh	r3, [r7, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d108      	bne.n	8002f18 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3355      	adds	r3, #85	; 0x55
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3355      	adds	r3, #85	; 0x55
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3342      	adds	r3, #66	; 0x42
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f3e:	e093      	b.n	8003068 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3342      	adds	r3, #66	; 0x42
 8002f4e:	2202      	movs	r2, #2
 8002f50:	701a      	strb	r2, [r3, #0]
      break;
 8002f52:	e089      	b.n	8003068 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f54:	78bb      	ldrb	r3, [r7, #2]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d11d      	bne.n	8002f96 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3355      	adds	r3, #85	; 0x55
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3342      	adds	r3, #66	; 0x42
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f80:	e073      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3342      	adds	r3, #66	; 0x42
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
      break;
 8002f94:	e069      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3354      	adds	r3, #84	; 0x54
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3342      	adds	r3, #66	; 0x42
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
      break;
 8002fbc:	e055      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3342      	adds	r3, #66	; 0x42
 8002fcc:	2202      	movs	r2, #2
 8002fce:	701a      	strb	r2, [r3, #0]
      break;
 8002fd0:	e04b      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002fd2:	78bb      	ldrb	r3, [r7, #2]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11d      	bne.n	8003014 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3355      	adds	r3, #85	; 0x55
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3342      	adds	r3, #66	; 0x42
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ffe:	e034      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3342      	adds	r3, #66	; 0x42
 800300e:	2202      	movs	r2, #2
 8003010:	701a      	strb	r2, [r3, #0]
      break;
 8003012:	e02a      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3354      	adds	r3, #84	; 0x54
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3342      	adds	r3, #66	; 0x42
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
      break;
 800303a:	e016      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3342      	adds	r3, #66	; 0x42
 800304a:	2202      	movs	r2, #2
 800304c:	701a      	strb	r2, [r3, #0]
      break;
 800304e:	e00c      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3342      	adds	r3, #66	; 0x42
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
      break;
 8003062:	e002      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003068:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3344      	adds	r3, #68	; 0x44
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	8b3a      	ldrh	r2, [r7, #24]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	202c      	movs	r0, #44	; 0x2c
 8003084:	fb00 f303 	mul.w	r3, r0, r3
 8003088:	440b      	add	r3, r1
 800308a:	334c      	adds	r3, #76	; 0x4c
 800308c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	3360      	adds	r3, #96	; 0x60
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	3350      	adds	r3, #80	; 0x50
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3339      	adds	r3, #57	; 0x39
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3361      	adds	r3, #97	; 0x61
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	222c      	movs	r2, #44	; 0x2c
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	3338      	adds	r3, #56	; 0x38
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	18d1      	adds	r1, r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	f005 fd90 	bl	8008c14 <USB_HC_StartXfer>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop

08003100 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f005 faaf 	bl	800867a <USB_GetMode>
 800311c:	4603      	mov	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	f040 80ef 	bne.w	8003302 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f005 fa93 	bl	8008654 <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80e5 	beq.w	8003300 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f005 fa8a 	bl	8008654 <USB_ReadInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800314a:	d104      	bne.n	8003156 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003154:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f005 fa7a 	bl	8008654 <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800316a:	d104      	bne.n	8003176 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003174:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f005 fa6a 	bl	8008654 <USB_ReadInterrupts>
 8003180:	4603      	mov	r3, r0
 8003182:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003186:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800318a:	d104      	bne.n	8003196 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003194:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f005 fa5a 	bl	8008654 <USB_ReadInterrupts>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d103      	bne.n	80031b2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2202      	movs	r2, #2
 80031b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f005 fa4c 	bl	8008654 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c6:	d115      	bne.n	80031f4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031d0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d108      	bne.n	80031f4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f00b fbc4 	bl	800e970 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f005 fb3c 	bl	800886c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f005 fa2b 	bl	8008654 <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003208:	d102      	bne.n	8003210 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f001 f9ff 	bl	800460e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f005 fa1d 	bl	8008654 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d106      	bne.n	8003232 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f00b fb87 	bl	800e938 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2208      	movs	r2, #8
 8003230:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f005 fa0c 	bl	8008654 <USB_ReadInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b10      	cmp	r3, #16
 8003244:	d101      	bne.n	800324a <HAL_HCD_IRQHandler+0x14a>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_HCD_IRQHandler+0x14c>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0210 	bic.w	r2, r2, #16
 800325e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f001 f902 	bl	800446a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0210 	orr.w	r2, r2, #16
 8003274:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f005 f9ea 	bl	8008654 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800328a:	d13a      	bne.n	8003302 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f005 fe01 	bl	8008e98 <USB_HC_ReadInterrupt>
 8003296:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e025      	b.n	80032ea <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c8:	d106      	bne.n	80032d8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	4619      	mov	r1, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8ab 	bl	800342c <HCD_HC_IN_IRQHandler>
 80032d6:	e005      	b.n	80032e4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fcc6 	bl	8003c70 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3301      	adds	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3d4      	bcc.n	800329e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fc:	615a      	str	r2, [r3, #20]
 80032fe:	e000      	b.n	8003302 <HAL_HCD_IRQHandler+0x202>
      return;
 8003300:	bf00      	nop
    }
  }
}
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_HCD_Start+0x16>
 800331a:	2302      	movs	r3, #2
 800331c:	e013      	b.n	8003346 <HAL_HCD_Start+0x3e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f005 f89f 	bl	800846e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f005 fafc 	bl	8008934 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_HCD_Stop+0x16>
 8003360:	2302      	movs	r3, #2
 8003362:	e00d      	b.n	8003380 <HAL_HCD_Stop+0x32>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f005 fefb 	bl	800916c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f005 faa3 	bl	80088e0 <USB_ResetPort>
 800339a:	4603      	mov	r3, r0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	781b      	ldrb	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	3350      	adds	r3, #80	; 0x50
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f005 fae7 	bl	80089d4 <USB_GetCurrentFrame>
 8003406:	4603      	mov	r3, r0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f005 fac2 	bl	80089a6 <USB_GetHostSpeed>
 8003422:	4603      	mov	r3, r0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d119      	bne.n	8003490 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	2304      	movs	r3, #4
 800346c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	0151      	lsls	r1, r2, #5
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	440a      	add	r2, r1
 8003484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	60d3      	str	r3, [r2, #12]
 800348e:	e101      	b.n	8003694 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a6:	d12b      	bne.n	8003500 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b4:	461a      	mov	r2, r3
 80034b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3361      	adds	r3, #97	; 0x61
 80034ca:	2207      	movs	r2, #7
 80034cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	0151      	lsls	r1, r2, #5
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	440a      	add	r2, r1
 80034e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 fcde 	bl	8008eba <USB_HC_Halt>
 80034fe:	e0c9      	b.n	8003694 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b20      	cmp	r3, #32
 8003514:	d109      	bne.n	800352a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003522:	461a      	mov	r2, r3
 8003524:	2320      	movs	r3, #32
 8003526:	6093      	str	r3, [r2, #8]
 8003528:	e0b4      	b.n	8003694 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d133      	bne.n	80035a8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	440a      	add	r2, r1
 8003556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	212c      	movs	r1, #44	; 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3361      	adds	r3, #97	; 0x61
 800356e:	2205      	movs	r2, #5
 8003570:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357e:	461a      	mov	r2, r3
 8003580:	2310      	movs	r3, #16
 8003582:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	2308      	movs	r3, #8
 8003594:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f005 fc8a 	bl	8008eba <USB_HC_Halt>
 80035a6:	e075      	b.n	8003694 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d134      	bne.n	800362a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	0151      	lsls	r1, r2, #5
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	440a      	add	r2, r1
 80035d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	3361      	adds	r3, #97	; 0x61
 80035ee:	2208      	movs	r2, #8
 80035f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	461a      	mov	r2, r3
 8003600:	2310      	movs	r3, #16
 8003602:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003610:	461a      	mov	r2, r3
 8003612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003616:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f005 fc49 	bl	8008eba <USB_HC_Halt>
 8003628:	e034      	b.n	8003694 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d129      	bne.n	8003694 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	0151      	lsls	r1, r2, #5
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	440a      	add	r2, r1
 8003656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	3361      	adds	r3, #97	; 0x61
 800366e:	2206      	movs	r2, #6
 8003670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f005 fc1c 	bl	8008eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4413      	add	r3, r2
 800368a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368e:	461a      	mov	r2, r3
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036aa:	d122      	bne.n	80036f2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 fbef 	bl	8008eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	461a      	mov	r2, r3
 80036ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80036f0:	e2ba      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	f040 811b 	bne.w	8003940 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d019      	beq.n	8003746 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	3348      	adds	r3, #72	; 0x48
 8003720:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	0159      	lsls	r1, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	440b      	add	r3, r1
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003734:	1ad2      	subs	r2, r2, r3
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	202c      	movs	r0, #44	; 0x2c
 800373c:	fb00 f303 	mul.w	r3, r0, r3
 8003740:	440b      	add	r3, r1
 8003742:	3350      	adds	r3, #80	; 0x50
 8003744:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	212c      	movs	r1, #44	; 0x2c
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	3361      	adds	r3, #97	; 0x61
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	335c      	adds	r3, #92	; 0x5c
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	2301      	movs	r3, #1
 800377a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	333f      	adds	r3, #63	; 0x3f
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	333f      	adds	r3, #63	; 0x3f
 800379e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d121      	bne.n	80037e8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037be:	f043 0302 	orr.w	r3, r3, #2
 80037c2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f005 fb73 	bl	8008eba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e0:	461a      	mov	r2, r3
 80037e2:	2310      	movs	r3, #16
 80037e4:	6093      	str	r3, [r2, #8]
 80037e6:	e066      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	333f      	adds	r3, #63	; 0x3f
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d127      	bne.n	800384c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	440a      	add	r2, r1
 8003812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003816:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800381a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3360      	adds	r3, #96	; 0x60
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	b2d9      	uxtb	r1, r3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	202c      	movs	r0, #44	; 0x2c
 8003838:	fb00 f303 	mul.w	r3, r0, r3
 800383c:	4413      	add	r3, r2
 800383e:	3360      	adds	r3, #96	; 0x60
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f00b f8a1 	bl	800e98c <HAL_HCD_HC_NotifyURBChange_Callback>
 800384a:	e034      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	333f      	adds	r3, #63	; 0x3f
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d12a      	bne.n	80038b6 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3360      	adds	r3, #96	; 0x60
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3354      	adds	r3, #84	; 0x54
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	f083 0301 	eor.w	r3, r3, #1
 8003886:	b2d8      	uxtb	r0, r3
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	3354      	adds	r3, #84	; 0x54
 8003896:	4602      	mov	r2, r0
 8003898:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	b2d9      	uxtb	r1, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	202c      	movs	r0, #44	; 0x2c
 80038a4:	fb00 f303 	mul.w	r3, r0, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3360      	adds	r3, #96	; 0x60
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f00b f86b 	bl	800e98c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d12b      	bne.n	8003916 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3348      	adds	r3, #72	; 0x48
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	202c      	movs	r0, #44	; 0x2c
 80038d4:	fb00 f202 	mul.w	r2, r0, r2
 80038d8:	440a      	add	r2, r1
 80038da:	3240      	adds	r2, #64	; 0x40
 80038dc:	8812      	ldrh	r2, [r2, #0]
 80038de:	fbb3 f3f2 	udiv	r3, r3, r2
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 81be 	beq.w	8003c68 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3354      	adds	r3, #84	; 0x54
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	f083 0301 	eor.w	r3, r3, #1
 8003900:	b2d8      	uxtb	r0, r3
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	3354      	adds	r3, #84	; 0x54
 8003910:	4602      	mov	r2, r0
 8003912:	701a      	strb	r2, [r3, #0]
}
 8003914:	e1a8      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3354      	adds	r3, #84	; 0x54
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	f083 0301 	eor.w	r3, r3, #1
 800392a:	b2d8      	uxtb	r0, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3354      	adds	r3, #84	; 0x54
 800393a:	4602      	mov	r2, r0
 800393c:	701a      	strb	r2, [r3, #0]
}
 800393e:	e193      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	f040 8106 	bne.w	8003b64 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	440a      	add	r2, r1
 800396e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003972:	f023 0302 	bic.w	r3, r3, #2
 8003976:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	212c      	movs	r1, #44	; 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	3361      	adds	r3, #97	; 0x61
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d109      	bne.n	80039a0 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	3360      	adds	r3, #96	; 0x60
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e0c9      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3361      	adds	r3, #97	; 0x61
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d109      	bne.n	80039c8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3360      	adds	r3, #96	; 0x60
 80039c2:	2205      	movs	r2, #5
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e0b5      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	3361      	adds	r3, #97	; 0x61
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d009      	beq.n	80039f0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3361      	adds	r3, #97	; 0x61
 80039ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d150      	bne.n	8003a92 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	335c      	adds	r3, #92	; 0x5c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	202c      	movs	r0, #44	; 0x2c
 8003a08:	fb00 f303 	mul.w	r3, r0, r3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	335c      	adds	r3, #92	; 0x5c
 8003a10:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	335c      	adds	r3, #92	; 0x5c
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d912      	bls.n	8003a4c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	335c      	adds	r3, #92	; 0x5c
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3360      	adds	r3, #96	; 0x60
 8003a46:	2204      	movs	r2, #4
 8003a48:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a4a:	e073      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3360      	adds	r3, #96	; 0x60
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a74:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a90:	e050      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3361      	adds	r3, #97	; 0x61
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d122      	bne.n	8003aec <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3360      	adds	r3, #96	; 0x60
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ace:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ad6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e023      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	212c      	movs	r1, #44	; 0x2c
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	3361      	adds	r3, #97	; 0x61
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b07      	cmp	r3, #7
 8003afe:	d119      	bne.n	8003b34 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	335c      	adds	r3, #92	; 0x5c
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	202c      	movs	r0, #44	; 0x2c
 8003b18:	fb00 f303 	mul.w	r3, r0, r3
 8003b1c:	440b      	add	r3, r1
 8003b1e:	335c      	adds	r3, #92	; 0x5c
 8003b20:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3360      	adds	r3, #96	; 0x60
 8003b30:	2204      	movs	r2, #4
 8003b32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	461a      	mov	r2, r3
 8003b42:	2302      	movs	r3, #2
 8003b44:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	b2d9      	uxtb	r1, r3
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	202c      	movs	r0, #44	; 0x2c
 8003b50:	fb00 f303 	mul.w	r3, r0, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	3360      	adds	r3, #96	; 0x60
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f00a ff15 	bl	800e98c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b62:	e081      	b.n	8003c68 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d176      	bne.n	8003c68 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	212c      	movs	r1, #44	; 0x2c
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	333f      	adds	r3, #63	; 0x3f
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d121      	bne.n	8003bd2 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	335c      	adds	r3, #92	; 0x5c
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bba:	f043 0302 	orr.w	r3, r3, #2
 8003bbe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f005 f975 	bl	8008eba <USB_HC_Halt>
 8003bd0:	e041      	b.n	8003c56 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	333f      	adds	r3, #63	; 0x3f
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	333f      	adds	r3, #63	; 0x3f
 8003bf4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d12d      	bne.n	8003c56 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	212c      	movs	r1, #44	; 0x2c
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	335c      	adds	r3, #92	; 0x5c
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d120      	bne.n	8003c56 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3361      	adds	r3, #97	; 0x61
 8003c22:	2203      	movs	r2, #3
 8003c24:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	0151      	lsls	r1, r2, #5
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	440a      	add	r2, r1
 8003c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f005 f932 	bl	8008eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c62:	461a      	mov	r2, r3
 8003c64:	2310      	movs	r3, #16
 8003c66:	6093      	str	r3, [r2, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d119      	bne.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cac:	461a      	mov	r2, r3
 8003cae:	2304      	movs	r3, #4
 8003cb0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003cd2:	e3c6      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d13e      	bne.n	8003d68 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	333d      	adds	r3, #61	; 0x3d
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 83a8 	bne.w	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	333d      	adds	r3, #61	; 0x3d
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	212c      	movs	r1, #44	; 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	3360      	adds	r3, #96	; 0x60
 8003d32:	2202      	movs	r2, #2
 8003d34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	0151      	lsls	r1, r2, #5
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	440a      	add	r2, r1
 8003d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f005 f8aa 	bl	8008eba <USB_HC_Halt>
}
 8003d66:	e37c      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7e:	d122      	bne.n	8003dc6 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f005 f885 	bl	8008eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dc2:	6093      	str	r3, [r2, #8]
}
 8003dc4:	e34d      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d150      	bne.n	8003e7e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	335c      	adds	r3, #92	; 0x5c
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d111      	bne.n	8003e28 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	333d      	adds	r3, #61	; 0x3d
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e22:	461a      	mov	r2, r3
 8003e24:	2340      	movs	r3, #64	; 0x40
 8003e26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	4611      	mov	r1, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f005 f831 	bl	8008eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e64:	461a      	mov	r2, r3
 8003e66:	2301      	movs	r3, #1
 8003e68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3361      	adds	r3, #97	; 0x61
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
}
 8003e7c:	e2f1      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d13c      	bne.n	8003f0e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3361      	adds	r3, #97	; 0x61
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	333d      	adds	r3, #61	; 0x3d
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	335c      	adds	r3, #92	; 0x5c
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f004 ffe0 	bl	8008eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f06:	461a      	mov	r2, r3
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	6093      	str	r3, [r2, #8]
}
 8003f0c:	e2a9      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d12a      	bne.n	8003f7a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	2308      	movs	r3, #8
 8003f34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f004 ffaa 	bl	8008eba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	212c      	movs	r1, #44	; 0x2c
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	3361      	adds	r3, #97	; 0x61
 8003f74:	2205      	movs	r2, #5
 8003f76:	701a      	strb	r2, [r3, #0]
}
 8003f78:	e273      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d150      	bne.n	8004032 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	335c      	adds	r3, #92	; 0x5c
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	3361      	adds	r3, #97	; 0x61
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	333d      	adds	r3, #61	; 0x3d
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d112      	bne.n	8003fee <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	333c      	adds	r3, #60	; 0x3c
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	212c      	movs	r1, #44	; 0x2c
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	333d      	adds	r3, #61	; 0x3d
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	440a      	add	r2, r1
 8004004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004008:	f043 0302 	orr.w	r3, r3, #2
 800400c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f004 ff4e 	bl	8008eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402a:	461a      	mov	r2, r3
 800402c:	2310      	movs	r3, #16
 800402e:	6093      	str	r3, [r2, #8]
}
 8004030:	e217      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004044:	2b80      	cmp	r3, #128	; 0x80
 8004046:	d174      	bne.n	8004132 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d121      	bne.n	8004094 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	3361      	adds	r3, #97	; 0x61
 800405e:	2206      	movs	r2, #6
 8004060:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	440a      	add	r2, r1
 8004078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800407c:	f043 0302 	orr.w	r3, r3, #2
 8004080:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f004 ff14 	bl	8008eba <USB_HC_Halt>
 8004092:	e044      	b.n	800411e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	335c      	adds	r3, #92	; 0x5c
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	202c      	movs	r0, #44	; 0x2c
 80040ac:	fb00 f303 	mul.w	r3, r0, r3
 80040b0:	440b      	add	r3, r1
 80040b2:	335c      	adds	r3, #92	; 0x5c
 80040b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	335c      	adds	r3, #92	; 0x5c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d920      	bls.n	800410c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	335c      	adds	r3, #92	; 0x5c
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3360      	adds	r3, #96	; 0x60
 80040ea:	2204      	movs	r2, #4
 80040ec:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	b2d9      	uxtb	r1, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	202c      	movs	r0, #44	; 0x2c
 80040f8:	fb00 f303 	mul.w	r3, r0, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3360      	adds	r3, #96	; 0x60
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f00a fc41 	bl	800e98c <HAL_HCD_HC_NotifyURBChange_Callback>
 800410a:	e008      	b.n	800411e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3360      	adds	r3, #96	; 0x60
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	461a      	mov	r2, r3
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	6093      	str	r3, [r2, #8]
}
 8004130:	e197      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d134      	bne.n	80041b4 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	0151      	lsls	r1, r2, #5
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	440a      	add	r2, r1
 8004160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f004 fea0 	bl	8008eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004186:	461a      	mov	r2, r3
 8004188:	2310      	movs	r3, #16
 800418a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	461a      	mov	r2, r3
 800419a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800419e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	212c      	movs	r1, #44	; 0x2c
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	3361      	adds	r3, #97	; 0x61
 80041ae:	2208      	movs	r2, #8
 80041b0:	701a      	strb	r2, [r3, #0]
}
 80041b2:	e156      	b.n	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	f040 814b 	bne.w	8004462 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e6:	f023 0302 	bic.w	r3, r3, #2
 80041ea:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3361      	adds	r3, #97	; 0x61
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d179      	bne.n	80042f4 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	212c      	movs	r1, #44	; 0x2c
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	4413      	add	r3, r2
 800420c:	3360      	adds	r3, #96	; 0x60
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	333f      	adds	r3, #63	; 0x3f
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d00a      	beq.n	800423c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	333f      	adds	r3, #63	; 0x3f
 8004234:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004236:	2b03      	cmp	r3, #3
 8004238:	f040 80fc 	bne.w	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d142      	bne.n	80042ca <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	334c      	adds	r3, #76	; 0x4c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80ed 	beq.w	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	334c      	adds	r3, #76	; 0x4c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	202c      	movs	r0, #44	; 0x2c
 8004270:	fb00 f202 	mul.w	r2, r0, r2
 8004274:	440a      	add	r2, r1
 8004276:	3240      	adds	r2, #64	; 0x40
 8004278:	8812      	ldrh	r2, [r2, #0]
 800427a:	4413      	add	r3, r2
 800427c:	3b01      	subs	r3, #1
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	202c      	movs	r0, #44	; 0x2c
 8004284:	fb00 f202 	mul.w	r2, r0, r2
 8004288:	440a      	add	r2, r1
 800428a:	3240      	adds	r2, #64	; 0x40
 800428c:	8812      	ldrh	r2, [r2, #0]
 800428e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80ca 	beq.w	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	3355      	adds	r3, #85	; 0x55
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	f083 0301 	eor.w	r3, r3, #1
 80042b4:	b2d8      	uxtb	r0, r3
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	3355      	adds	r3, #85	; 0x55
 80042c4:	4602      	mov	r2, r0
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e0b4      	b.n	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3355      	adds	r3, #85	; 0x55
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	f083 0301 	eor.w	r3, r3, #1
 80042de:	b2d8      	uxtb	r0, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	3355      	adds	r3, #85	; 0x55
 80042ee:	4602      	mov	r2, r0
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	e09f      	b.n	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3361      	adds	r3, #97	; 0x61
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d109      	bne.n	800431c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	4413      	add	r3, r2
 8004314:	3360      	adds	r3, #96	; 0x60
 8004316:	2202      	movs	r2, #2
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e08b      	b.n	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3361      	adds	r3, #97	; 0x61
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d109      	bne.n	8004344 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	3360      	adds	r3, #96	; 0x60
 800433e:	2202      	movs	r2, #2
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e077      	b.n	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	212c      	movs	r1, #44	; 0x2c
 800434a:	fb01 f303 	mul.w	r3, r1, r3
 800434e:	4413      	add	r3, r2
 8004350:	3361      	adds	r3, #97	; 0x61
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b05      	cmp	r3, #5
 8004356:	d109      	bne.n	800436c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	212c      	movs	r1, #44	; 0x2c
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	4413      	add	r3, r2
 8004364:	3360      	adds	r3, #96	; 0x60
 8004366:	2205      	movs	r2, #5
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e063      	b.n	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	212c      	movs	r1, #44	; 0x2c
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	4413      	add	r3, r2
 8004378:	3361      	adds	r3, #97	; 0x61
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b06      	cmp	r3, #6
 800437e:	d009      	beq.n	8004394 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	3361      	adds	r3, #97	; 0x61
 800438e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004390:	2b08      	cmp	r3, #8
 8004392:	d14f      	bne.n	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	212c      	movs	r1, #44	; 0x2c
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	4413      	add	r3, r2
 80043a0:	335c      	adds	r3, #92	; 0x5c
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	202c      	movs	r0, #44	; 0x2c
 80043ac:	fb00 f303 	mul.w	r3, r0, r3
 80043b0:	440b      	add	r3, r1
 80043b2:	335c      	adds	r3, #92	; 0x5c
 80043b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	335c      	adds	r3, #92	; 0x5c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d912      	bls.n	80043f0 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	335c      	adds	r3, #92	; 0x5c
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	3360      	adds	r3, #96	; 0x60
 80043ea:	2204      	movs	r2, #4
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e021      	b.n	8004434 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	3360      	adds	r3, #96	; 0x60
 80043fe:	2202      	movs	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004418:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004420:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	461a      	mov	r2, r3
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004440:	461a      	mov	r2, r3
 8004442:	2302      	movs	r3, #2
 8004444:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	b2d9      	uxtb	r1, r3
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	202c      	movs	r0, #44	; 0x2c
 8004450:	fb00 f303 	mul.w	r3, r0, r3
 8004454:	4413      	add	r3, r2
 8004456:	3360      	adds	r3, #96	; 0x60
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f00a fa95 	bl	800e98c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004462:	bf00      	nop
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b08a      	sub	sp, #40	; 0x28
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	0c5b      	lsrs	r3, r3, #17
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800449e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d004      	beq.n	80044b0 <HCD_RXQLVL_IRQHandler+0x46>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	f000 80a9 	beq.w	8004600 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044ae:	e0aa      	b.n	8004606 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80a6 	beq.w	8004604 <HCD_RXQLVL_IRQHandler+0x19a>
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	212c      	movs	r1, #44	; 0x2c
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	3344      	adds	r3, #68	; 0x44
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 809b 	beq.w	8004604 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	212c      	movs	r1, #44	; 0x2c
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	3350      	adds	r3, #80	; 0x50
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	441a      	add	r2, r3
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	202c      	movs	r0, #44	; 0x2c
 80044e8:	fb00 f303 	mul.w	r3, r0, r3
 80044ec:	440b      	add	r3, r1
 80044ee:	334c      	adds	r3, #76	; 0x4c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d87a      	bhi.n	80045ec <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	3344      	adds	r3, #68	; 0x44
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	b292      	uxth	r2, r2
 800450e:	4619      	mov	r1, r3
 8004510:	f004 f877 	bl	8008602 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	212c      	movs	r1, #44	; 0x2c
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	3344      	adds	r3, #68	; 0x44
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	441a      	add	r2, r3
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	202c      	movs	r0, #44	; 0x2c
 800452e:	fb00 f303 	mul.w	r3, r0, r3
 8004532:	440b      	add	r3, r1
 8004534:	3344      	adds	r3, #68	; 0x44
 8004536:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3350      	adds	r3, #80	; 0x50
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	441a      	add	r2, r3
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	202c      	movs	r0, #44	; 0x2c
 8004552:	fb00 f303 	mul.w	r3, r0, r3
 8004556:	440b      	add	r3, r1
 8004558:	3350      	adds	r3, #80	; 0x50
 800455a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	4413      	add	r3, r2
 8004564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	0cdb      	lsrs	r3, r3, #19
 800456c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004570:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	3340      	adds	r3, #64	; 0x40
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4293      	cmp	r3, r2
 8004588:	d13c      	bne.n	8004604 <HCD_RXQLVL_IRQHandler+0x19a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d039      	beq.n	8004604 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	461a      	mov	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	212c      	movs	r1, #44	; 0x2c
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	4413      	add	r3, r2
 80045ce:	3354      	adds	r3, #84	; 0x54
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	f083 0301 	eor.w	r3, r3, #1
 80045d6:	b2d8      	uxtb	r0, r3
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3354      	adds	r3, #84	; 0x54
 80045e6:	4602      	mov	r2, r0
 80045e8:	701a      	strb	r2, [r3, #0]
      break;
 80045ea:	e00b      	b.n	8004604 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	212c      	movs	r1, #44	; 0x2c
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	3360      	adds	r3, #96	; 0x60
 80045fa:	2204      	movs	r2, #4
 80045fc:	701a      	strb	r2, [r3, #0]
      break;
 80045fe:	e001      	b.n	8004604 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004600:	bf00      	nop
 8004602:	e000      	b.n	8004606 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004604:	bf00      	nop
  }
}
 8004606:	bf00      	nop
 8004608:	3728      	adds	r7, #40	; 0x28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800463a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d10b      	bne.n	800465e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f00a f97f 	bl	800e954 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b08      	cmp	r3, #8
 8004666:	d132      	bne.n	80046ce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f043 0308 	orr.w	r3, r3, #8
 800466e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d126      	bne.n	80046c8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d113      	bne.n	80046aa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800468c:	d106      	bne.n	800469c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2102      	movs	r1, #2
 8004694:	4618      	mov	r0, r3
 8004696:	f004 f8e9 	bl	800886c <USB_InitFSLSPClkSel>
 800469a:	e011      	b.n	80046c0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f004 f8e2 	bl	800886c <USB_InitFSLSPClkSel>
 80046a8:	e00a      	b.n	80046c0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d106      	bne.n	80046c0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b8:	461a      	mov	r2, r3
 80046ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80046be:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f00a f975 	bl	800e9b0 <HAL_HCD_PortEnabled_Callback>
 80046c6:	e002      	b.n	80046ce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f00a f97f 	bl	800e9cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d103      	bne.n	80046e0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f043 0320 	orr.w	r3, r3, #32
 80046de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046e6:	461a      	mov	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	bf00      	nop
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e154      	b.n	80049b0 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a98      	ldr	r2, [pc, #608]	; (8004980 <HAL_I2S_Init+0x28c>)
 800471e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fc febd 	bl	80014a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800473c:	f023 030f 	bic.w	r3, r3, #15
 8004740:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2202      	movs	r2, #2
 8004748:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d06f      	beq.n	8004832 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800475a:	2310      	movs	r3, #16
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	e001      	b.n	8004764 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004760:	2320      	movs	r3, #32
 8004762:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b20      	cmp	r3, #32
 800476a:	d802      	bhi.n	8004772 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a83      	ldr	r2, [pc, #524]	; (8004984 <HAL_I2S_Init+0x290>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_I2S_Init+0x92>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a81      	ldr	r2, [pc, #516]	; (8004988 <HAL_I2S_Init+0x294>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d104      	bne.n	8004790 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004786:	2001      	movs	r0, #1
 8004788:	f001 f9c6 	bl	8005b18 <HAL_RCCEx_GetPeriphCLKFreq>
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	e003      	b.n	8004798 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8004790:	2002      	movs	r0, #2
 8004792:	f001 f9c1 	bl	8005b18 <HAL_RCCEx_GetPeriphCLKFreq>
 8004796:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a0:	d125      	bne.n	80047ee <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	3305      	adds	r3, #5
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e01f      	b.n	800480c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	3305      	adds	r3, #5
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e00e      	b.n	800480c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	3305      	adds	r3, #5
 800480a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4a5f      	ldr	r2, [pc, #380]	; (800498c <HAL_I2S_Init+0x298>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	e003      	b.n	800483a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004832:	2302      	movs	r3, #2
 8004834:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d902      	bls.n	8004846 <HAL_I2S_Init+0x152>
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2bff      	cmp	r3, #255	; 0xff
 8004844:	d907      	bls.n	8004856 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	f043 0210 	orr.w	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0ac      	b.n	80049b0 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	ea42 0103 	orr.w	r1, r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	430a      	orrs	r2, r1
 8004868:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004874:	f023 030f 	bic.w	r3, r3, #15
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6851      	ldr	r1, [r2, #4]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6892      	ldr	r2, [r2, #8]
 8004880:	4311      	orrs	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	68d2      	ldr	r2, [r2, #12]
 8004886:	4311      	orrs	r1, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6992      	ldr	r2, [r2, #24]
 800488c:	430a      	orrs	r2, r1
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004898:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b30      	cmp	r3, #48	; 0x30
 80048a0:	d003      	beq.n	80048aa <HAL_I2S_Init+0x1b6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2bb0      	cmp	r3, #176	; 0xb0
 80048a8:	d107      	bne.n	80048ba <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048b8:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d16e      	bne.n	80049a0 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a32      	ldr	r2, [pc, #200]	; (8004990 <HAL_I2S_Init+0x29c>)
 80048c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2d      	ldr	r2, [pc, #180]	; (8004984 <HAL_I2S_Init+0x290>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <HAL_I2S_Init+0x1e2>
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <HAL_I2S_Init+0x2a0>)
 80048d4:	e001      	b.n	80048da <HAL_I2S_Init+0x1e6>
 80048d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	4928      	ldr	r1, [pc, #160]	; (8004984 <HAL_I2S_Init+0x290>)
 80048e2:	428a      	cmp	r2, r1
 80048e4:	d101      	bne.n	80048ea <HAL_I2S_Init+0x1f6>
 80048e6:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <HAL_I2S_Init+0x2a0>)
 80048e8:	e001      	b.n	80048ee <HAL_I2S_Init+0x1fa>
 80048ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80048ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048f2:	f023 030f 	bic.w	r3, r3, #15
 80048f6:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a21      	ldr	r2, [pc, #132]	; (8004984 <HAL_I2S_Init+0x290>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <HAL_I2S_Init+0x212>
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_I2S_Init+0x2a0>)
 8004904:	e001      	b.n	800490a <HAL_I2S_Init+0x216>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490a:	2202      	movs	r2, #2
 800490c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_I2S_Init+0x290>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_I2S_Init+0x228>
 8004918:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <HAL_I2S_Init+0x2a0>)
 800491a:	e001      	b.n	8004920 <HAL_I2S_Init+0x22c>
 800491c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492c:	d003      	beq.n	8004936 <HAL_I2S_Init+0x242>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	e001      	b.n	8004942 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800494c:	4313      	orrs	r3, r2
 800494e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004956:	4313      	orrs	r3, r2
 8004958:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004960:	4313      	orrs	r3, r2
 8004962:	b29a      	uxth	r2, r3
 8004964:	897b      	ldrh	r3, [r7, #10]
 8004966:	4313      	orrs	r3, r2
 8004968:	b29b      	uxth	r3, r3
 800496a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800496e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a03      	ldr	r2, [pc, #12]	; (8004984 <HAL_I2S_Init+0x290>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10e      	bne.n	8004998 <HAL_I2S_Init+0x2a4>
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_I2S_Init+0x2a0>)
 800497c:	e00e      	b.n	800499c <HAL_I2S_Init+0x2a8>
 800497e:	bf00      	nop
 8004980:	08004aaf 	.word	0x08004aaf
 8004984:	40003800 	.word	0x40003800
 8004988:	40003c00 	.word	0x40003c00
 800498c:	cccccccd 	.word	0xcccccccd
 8004990:	08004bc5 	.word	0x08004bc5
 8004994:	40003400 	.word	0x40003400
 8004998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800499c:	897a      	ldrh	r2, [r7, #10]
 800499e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	1c9a      	adds	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10e      	bne.n	8004a48 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a38:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff ffb8 	bl	80049b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	b292      	uxth	r2, r2
 8004a64:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	1c9a      	adds	r2, r3, #2
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10e      	bne.n	8004aa6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff ff93 	bl	80049cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b086      	sub	sp, #24
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d13a      	bne.n	8004b40 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d109      	bne.n	8004ae8 <I2S_IRQHandler+0x3a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d102      	bne.n	8004ae8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ffb4 	bl	8004a50 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	d126      	bne.n	8004b40 <I2S_IRQHandler+0x92>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d11f      	bne.n	8004b40 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f043 0202 	orr.w	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff50 	bl	80049e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d136      	bne.n	8004bba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d109      	bne.n	8004b6a <I2S_IRQHandler+0xbc>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b60:	2b80      	cmp	r3, #128	; 0x80
 8004b62:	d102      	bne.n	8004b6a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff ff45 	bl	80049f4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d122      	bne.n	8004bba <I2S_IRQHandler+0x10c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d11b      	bne.n	8004bba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b90:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	f043 0204 	orr.w	r2, r3, #4
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ff13 	bl	80049e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4aa2      	ldr	r2, [pc, #648]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004bde:	4ba2      	ldr	r3, [pc, #648]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004be0:	e001      	b.n	8004be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a9b      	ldr	r2, [pc, #620]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004bfc:	4b9a      	ldr	r3, [pc, #616]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bfe:	e001      	b.n	8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c10:	d004      	beq.n	8004c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 8099 	bne.w	8004d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d107      	bne.n	8004c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f925 	bl	8004e80 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d107      	bne.n	8004c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f9c8 	bl	8004fe0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d13a      	bne.n	8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d035      	beq.n	8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a7e      	ldr	r2, [pc, #504]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c6e:	4b7e      	ldr	r3, [pc, #504]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c70:	e001      	b.n	8004c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4979      	ldr	r1, [pc, #484]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c7e:	428b      	cmp	r3, r1
 8004c80:	d101      	bne.n	8004c86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c82:	4b79      	ldr	r3, [pc, #484]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c84:	e001      	b.n	8004c8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c8e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f043 0202 	orr.w	r2, r3, #2
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fe88 	bl	80049e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	f040 80be 	bne.w	8004e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 80b8 	beq.w	8004e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cf6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a59      	ldr	r2, [pc, #356]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d101      	bne.n	8004d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d02:	4b59      	ldr	r3, [pc, #356]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d04:	e001      	b.n	8004d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4954      	ldr	r1, [pc, #336]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d12:	428b      	cmp	r3, r1
 8004d14:	d101      	bne.n	8004d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d16:	4b54      	ldr	r3, [pc, #336]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d18:	e001      	b.n	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d22:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d24:	2300      	movs	r3, #0
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f043 0204 	orr.w	r2, r3, #4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fe4a 	bl	80049e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d4c:	e084      	b.n	8004e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d107      	bne.n	8004d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8be 	bl	8004ee4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d107      	bne.n	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8fd 	bl	8004f7c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d12f      	bne.n	8004dec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02a      	beq.n	8004dec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004da4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2e      	ldr	r2, [pc, #184]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004db0:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004db2:	e001      	b.n	8004db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4929      	ldr	r1, [pc, #164]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004dc4:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dc6:	e001      	b.n	8004dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dd0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f043 0202 	orr.w	r2, r3, #2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fdfa 	bl	80049e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d131      	bne.n	8004e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02c      	beq.n	8004e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d101      	bne.n	8004e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e0c:	e001      	b.n	8004e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4912      	ldr	r1, [pc, #72]	; (8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e1a:	428b      	cmp	r3, r1
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004e1e:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e20:	e001      	b.n	8004e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e3a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e48:	f043 0204 	orr.w	r2, r3, #4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fdc5 	bl	80049e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e56:	e000      	b.n	8004e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e58:	bf00      	nop
}
 8004e5a:	bf00      	nop
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40003800 	.word	0x40003800
 8004e68:	40003400 	.word	0x40003400

08004e6c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	1c99      	adds	r1, r3, #2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6251      	str	r1, [r2, #36]	; 0x24
 8004e92:	881a      	ldrh	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d113      	bne.n	8004eda <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ec0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ffc9 	bl	8004e6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	1c99      	adds	r1, r3, #2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ef6:	8819      	ldrh	r1, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <I2SEx_TxISR_I2SExt+0x90>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d101      	bne.n	8004f06 <I2SEx_TxISR_I2SExt+0x22>
 8004f02:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <I2SEx_TxISR_I2SExt+0x94>)
 8004f04:	e001      	b.n	8004f0a <I2SEx_TxISR_I2SExt+0x26>
 8004f06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f0a:	460a      	mov	r2, r1
 8004f0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d121      	bne.n	8004f6a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <I2SEx_TxISR_I2SExt+0x90>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <I2SEx_TxISR_I2SExt+0x50>
 8004f30:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <I2SEx_TxISR_I2SExt+0x94>)
 8004f32:	e001      	b.n	8004f38 <I2SEx_TxISR_I2SExt+0x54>
 8004f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	490d      	ldr	r1, [pc, #52]	; (8004f74 <I2SEx_TxISR_I2SExt+0x90>)
 8004f40:	428b      	cmp	r3, r1
 8004f42:	d101      	bne.n	8004f48 <I2SEx_TxISR_I2SExt+0x64>
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <I2SEx_TxISR_I2SExt+0x94>)
 8004f46:	e001      	b.n	8004f4c <I2SEx_TxISR_I2SExt+0x68>
 8004f48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff81 	bl	8004e6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40003800 	.word	0x40003800
 8004f78:	40003400 	.word	0x40003400

08004f7c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68d8      	ldr	r0, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	1c99      	adds	r1, r3, #2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f94:	b282      	uxth	r2, r0
 8004f96:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d113      	bne.n	8004fd8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fbe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ff4a 	bl	8004e6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a20      	ldr	r2, [pc, #128]	; (8005070 <I2SEx_RxISR_I2SExt+0x90>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d101      	bne.n	8004ff6 <I2SEx_RxISR_I2SExt+0x16>
 8004ff2:	4b20      	ldr	r3, [pc, #128]	; (8005074 <I2SEx_RxISR_I2SExt+0x94>)
 8004ff4:	e001      	b.n	8004ffa <I2SEx_RxISR_I2SExt+0x1a>
 8004ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ffa:	68d8      	ldr	r0, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	1c99      	adds	r1, r3, #2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005006:	b282      	uxth	r2, r0
 8005008:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d121      	bne.n	8005066 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a12      	ldr	r2, [pc, #72]	; (8005070 <I2SEx_RxISR_I2SExt+0x90>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <I2SEx_RxISR_I2SExt+0x50>
 800502c:	4b11      	ldr	r3, [pc, #68]	; (8005074 <I2SEx_RxISR_I2SExt+0x94>)
 800502e:	e001      	b.n	8005034 <I2SEx_RxISR_I2SExt+0x54>
 8005030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	490d      	ldr	r1, [pc, #52]	; (8005070 <I2SEx_RxISR_I2SExt+0x90>)
 800503c:	428b      	cmp	r3, r1
 800503e:	d101      	bne.n	8005044 <I2SEx_RxISR_I2SExt+0x64>
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <I2SEx_RxISR_I2SExt+0x94>)
 8005042:	e001      	b.n	8005048 <I2SEx_RxISR_I2SExt+0x68>
 8005044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005048:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800504c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff03 	bl	8004e6c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40003800 	.word	0x40003800
 8005074:	40003400 	.word	0x40003400

08005078 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005080:	f7fc fe50 	bl	8001d24 <HAL_GetTick>
 8005084:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e069      	b.n	8005164 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fc fab5 	bl	8001614 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80050aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f85e 	bl	8005170 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	021a      	lsls	r2, r3, #8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	2120      	movs	r1, #32
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f856 	bl	800518c <QSPI_WaitFlagStateUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80050e4:	7afb      	ldrb	r3, [r7, #11]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d137      	bne.n	800515a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050f4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6852      	ldr	r2, [r2, #4]
 80050fc:	0611      	lsls	r1, r2, #24
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68d2      	ldr	r2, [r2, #12]
 8005102:	4311      	orrs	r1, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	69d2      	ldr	r2, [r2, #28]
 8005108:	4311      	orrs	r1, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6a12      	ldr	r2, [r2, #32]
 800510e:	4311      	orrs	r1, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	430b      	orrs	r3, r1
 8005116:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <HAL_QSPI_Init+0xf4>)
 8005120:	4013      	ands	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6912      	ldr	r2, [r2, #16]
 8005126:	0411      	lsls	r1, r2, #16
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6952      	ldr	r2, [r2, #20]
 800512c:	4311      	orrs	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6992      	ldr	r2, [r2, #24]
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005162:	7afb      	ldrb	r3, [r7, #11]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	ffe0f8fe 	.word	0xffe0f8fe

08005170 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800519c:	e01a      	b.n	80051d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d016      	beq.n	80051d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fc fdbd 	bl	8001d24 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2204      	movs	r2, #4
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c8:	f043 0201 	orr.w	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e00e      	b.n	80051f2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d1d6      	bne.n	800519e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0cc      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005210:	4b68      	ldr	r3, [pc, #416]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d90c      	bls.n	8005238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	4b65      	ldr	r3, [pc, #404]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0b8      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d020      	beq.n	8005286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800525a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005268:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005274:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	494d      	ldr	r1, [pc, #308]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d044      	beq.n	800531c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d107      	bne.n	80052aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d119      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d003      	beq.n	80052ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d107      	bne.n	80052ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ba:	4b3f      	ldr	r3, [pc, #252]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e06f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ca:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e067      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052da:	4b37      	ldr	r3, [pc, #220]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f023 0203 	bic.w	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4934      	ldr	r1, [pc, #208]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ec:	f7fc fd1a 	bl	8001d24 <HAL_GetTick>
 80052f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f2:	e00a      	b.n	800530a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f4:	f7fc fd16 	bl	8001d24 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e04f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530a:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 020c 	and.w	r2, r3, #12
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	429a      	cmp	r2, r3
 800531a:	d1eb      	bne.n	80052f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d20c      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532a:	4b22      	ldr	r3, [pc, #136]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e032      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4916      	ldr	r1, [pc, #88]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	490e      	ldr	r1, [pc, #56]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005382:	f000 f821 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8005386:	4602      	mov	r2, r0
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	490a      	ldr	r1, [pc, #40]	; (80053bc <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	5ccb      	ldrb	r3, [r1, r3]
 8005396:	fa22 f303 	lsr.w	r3, r2, r3
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1c8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fc fb60 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023c00 	.word	0x40023c00
 80053b8:	40023800 	.word	0x40023800
 80053bc:	0800f19c 	.word	0x0800f19c
 80053c0:	20000000 	.word	0x20000000
 80053c4:	20000004 	.word	0x20000004

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b5b0      	push	{r4, r5, r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053ce:	2100      	movs	r1, #0
 80053d0:	6079      	str	r1, [r7, #4]
 80053d2:	2100      	movs	r1, #0
 80053d4:	60f9      	str	r1, [r7, #12]
 80053d6:	2100      	movs	r1, #0
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80053da:	2100      	movs	r1, #0
 80053dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053de:	4952      	ldr	r1, [pc, #328]	; (8005528 <HAL_RCC_GetSysClockFreq+0x160>)
 80053e0:	6889      	ldr	r1, [r1, #8]
 80053e2:	f001 010c 	and.w	r1, r1, #12
 80053e6:	2908      	cmp	r1, #8
 80053e8:	d00d      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x3e>
 80053ea:	2908      	cmp	r1, #8
 80053ec:	f200 8094 	bhi.w	8005518 <HAL_RCC_GetSysClockFreq+0x150>
 80053f0:	2900      	cmp	r1, #0
 80053f2:	d002      	beq.n	80053fa <HAL_RCC_GetSysClockFreq+0x32>
 80053f4:	2904      	cmp	r1, #4
 80053f6:	d003      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x38>
 80053f8:	e08e      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053fa:	4b4c      	ldr	r3, [pc, #304]	; (800552c <HAL_RCC_GetSysClockFreq+0x164>)
 80053fc:	60bb      	str	r3, [r7, #8]
       break;
 80053fe:	e08e      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005400:	4b4b      	ldr	r3, [pc, #300]	; (8005530 <HAL_RCC_GetSysClockFreq+0x168>)
 8005402:	60bb      	str	r3, [r7, #8]
      break;
 8005404:	e08b      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005406:	4948      	ldr	r1, [pc, #288]	; (8005528 <HAL_RCC_GetSysClockFreq+0x160>)
 8005408:	6849      	ldr	r1, [r1, #4]
 800540a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800540e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005410:	4945      	ldr	r1, [pc, #276]	; (8005528 <HAL_RCC_GetSysClockFreq+0x160>)
 8005412:	6849      	ldr	r1, [r1, #4]
 8005414:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005418:	2900      	cmp	r1, #0
 800541a:	d024      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541c:	4942      	ldr	r1, [pc, #264]	; (8005528 <HAL_RCC_GetSysClockFreq+0x160>)
 800541e:	6849      	ldr	r1, [r1, #4]
 8005420:	0989      	lsrs	r1, r1, #6
 8005422:	4608      	mov	r0, r1
 8005424:	f04f 0100 	mov.w	r1, #0
 8005428:	f240 14ff 	movw	r4, #511	; 0x1ff
 800542c:	f04f 0500 	mov.w	r5, #0
 8005430:	ea00 0204 	and.w	r2, r0, r4
 8005434:	ea01 0305 	and.w	r3, r1, r5
 8005438:	493d      	ldr	r1, [pc, #244]	; (8005530 <HAL_RCC_GetSysClockFreq+0x168>)
 800543a:	fb01 f003 	mul.w	r0, r1, r3
 800543e:	2100      	movs	r1, #0
 8005440:	fb01 f102 	mul.w	r1, r1, r2
 8005444:	1844      	adds	r4, r0, r1
 8005446:	493a      	ldr	r1, [pc, #232]	; (8005530 <HAL_RCC_GetSysClockFreq+0x168>)
 8005448:	fba2 0101 	umull	r0, r1, r2, r1
 800544c:	1863      	adds	r3, r4, r1
 800544e:	4619      	mov	r1, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	461a      	mov	r2, r3
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	f7fa fee2 	bl	8000220 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e04a      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005466:	4b30      	ldr	r3, [pc, #192]	; (8005528 <HAL_RCC_GetSysClockFreq+0x160>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	099b      	lsrs	r3, r3, #6
 800546c:	461a      	mov	r2, r3
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005476:	f04f 0100 	mov.w	r1, #0
 800547a:	ea02 0400 	and.w	r4, r2, r0
 800547e:	ea03 0501 	and.w	r5, r3, r1
 8005482:	4620      	mov	r0, r4
 8005484:	4629      	mov	r1, r5
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	014b      	lsls	r3, r1, #5
 8005490:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005494:	0142      	lsls	r2, r0, #5
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	1b00      	subs	r0, r0, r4
 800549c:	eb61 0105 	sbc.w	r1, r1, r5
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	018b      	lsls	r3, r1, #6
 80054aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054ae:	0182      	lsls	r2, r0, #6
 80054b0:	1a12      	subs	r2, r2, r0
 80054b2:	eb63 0301 	sbc.w	r3, r3, r1
 80054b6:	f04f 0000 	mov.w	r0, #0
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	00d9      	lsls	r1, r3, #3
 80054c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054c4:	00d0      	lsls	r0, r2, #3
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	1912      	adds	r2, r2, r4
 80054cc:	eb45 0303 	adc.w	r3, r5, r3
 80054d0:	f04f 0000 	mov.w	r0, #0
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	0299      	lsls	r1, r3, #10
 80054da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054de:	0290      	lsls	r0, r2, #10
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4610      	mov	r0, r2
 80054e6:	4619      	mov	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	f7fa fe96 	bl	8000220 <__aeabi_uldivmod>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4613      	mov	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_RCC_GetSysClockFreq+0x160>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	3301      	adds	r3, #1
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	60bb      	str	r3, [r7, #8]
      break;
 8005516:	e002      	b.n	800551e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <HAL_RCC_GetSysClockFreq+0x164>)
 800551a:	60bb      	str	r3, [r7, #8]
      break;
 800551c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800551e:	68bb      	ldr	r3, [r7, #8]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bdb0      	pop	{r4, r5, r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	00f42400 	.word	0x00f42400
 8005530:	017d7840 	.word	0x017d7840

08005534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <HAL_RCC_GetHCLKFreq+0x14>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20000000 	.word	0x20000000

0800554c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005550:	f7ff fff0 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	0a9b      	lsrs	r3, r3, #10
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4903      	ldr	r1, [pc, #12]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40023800 	.word	0x40023800
 8005570:	0800f1ac 	.word	0x0800f1ac

08005574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005578:	f7ff ffdc 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	0b5b      	lsrs	r3, r3, #13
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4903      	ldr	r1, [pc, #12]	; (8005598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40023800 	.word	0x40023800
 8005598:	0800f1ac 	.word	0x0800f1ac

0800559c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	220f      	movs	r2, #15
 80055aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	08db      	lsrs	r3, r3, #3
 80055d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <HAL_RCC_GetClockConfig+0x60>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0207 	and.w	r2, r3, #7
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	601a      	str	r2, [r3, #0]
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40023800 	.word	0x40023800
 80055fc:	40023c00 	.word	0x40023c00

08005600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d010      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005624:	4b7a      	ldr	r3, [pc, #488]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	4977      	ldr	r1, [pc, #476]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8005642:	2301      	movs	r3, #1
 8005644:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d010      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005652:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005658:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	496b      	ldr	r1, [pc, #428]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005670:	2301      	movs	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d022      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005680:	4b63      	ldr	r3, [pc, #396]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568e:	4960      	ldr	r1, [pc, #384]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800569e:	2301      	movs	r3, #1
 80056a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056aa:	d10c      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80056ac:	4b58      	ldr	r3, [pc, #352]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	4954      	ldr	r1, [pc, #336]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d022      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80056d2:	4b4f      	ldr	r3, [pc, #316]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	494b      	ldr	r1, [pc, #300]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80056f0:	2301      	movs	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056fc:	d10c      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80056fe:	4b44      	ldr	r3, [pc, #272]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005704:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	3b01      	subs	r3, #1
 800570e:	021b      	lsls	r3, r3, #8
 8005710:	493f      	ldr	r1, [pc, #252]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 808a 	beq.w	800583a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	4b39      	ldr	r3, [pc, #228]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	4a38      	ldr	r2, [pc, #224]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005734:	6413      	str	r3, [r2, #64]	; 0x40
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005742:	4b34      	ldr	r3, [pc, #208]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a33      	ldr	r2, [pc, #204]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800574e:	f7fc fae9 	bl	8001d24 <HAL_GetTick>
 8005752:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005756:	f7fc fae5 	bl	8001d24 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e1d1      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005768:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005774:	4b26      	ldr	r3, [pc, #152]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02f      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	429a      	cmp	r2, r3
 8005790:	d028      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005792:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800579c:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057a2:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057a8:	4a19      	ldr	r2, [pc, #100]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057ae:	4b18      	ldr	r3, [pc, #96]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d114      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057ba:	f7fc fab3 	bl	8001d24 <HAL_GetTick>
 80057be:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c2:	f7fc faaf 	bl	8001d24 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e199      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d8:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ee      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057f0:	d114      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005806:	4902      	ldr	r1, [pc, #8]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005808:	4313      	orrs	r3, r2
 800580a:	608b      	str	r3, [r1, #8]
 800580c:	e00c      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800580e:	bf00      	nop
 8005810:	40023800 	.word	0x40023800
 8005814:	40007000 	.word	0x40007000
 8005818:	42470e40 	.word	0x42470e40
 800581c:	4b89      	ldr	r3, [pc, #548]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4a88      	ldr	r2, [pc, #544]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005822:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005826:	6093      	str	r3, [r2, #8]
 8005828:	4b86      	ldr	r3, [pc, #536]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800582a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005834:	4983      	ldr	r1, [pc, #524]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005836:	4313      	orrs	r3, r2
 8005838:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800584c:	4b7e      	ldr	r3, [pc, #504]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800584e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800585c:	4b79      	ldr	r3, [pc, #484]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800585e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005862:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	4976      	ldr	r1, [pc, #472]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d011      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800587e:	4b71      	ldr	r3, [pc, #452]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005884:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	496d      	ldr	r1, [pc, #436]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589c:	d101      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800589e:	2301      	movs	r3, #1
 80058a0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80058ae:	4b65      	ldr	r3, [pc, #404]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	4961      	ldr	r1, [pc, #388]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d004      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b80      	cmp	r3, #128	; 0x80
 80058d0:	f040 80c6 	bne.w	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058d4:	4b5d      	ldr	r3, [pc, #372]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058da:	f7fc fa23 	bl	8001d24 <HAL_GetTick>
 80058de:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058e2:	f7fc fa1f 	bl	8001d24 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e10b      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f0      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005900:	4a53      	ldr	r2, [pc, #332]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005906:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d023      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d019      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005944:	d00e      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800594e:	2b00      	cmp	r3, #0
 8005950:	d019      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d115      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005962:	d110      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	019b      	lsls	r3, r3, #6
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	061b      	lsls	r3, r3, #24
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	071b      	lsls	r3, r3, #28
 800597e:	4931      	ldr	r1, [pc, #196]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d026      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d122      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059ae:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b4:	0e1b      	lsrs	r3, r3, #24
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	431a      	orrs	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	061b      	lsls	r3, r3, #24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	071b      	lsls	r3, r3, #28
 80059d4:	491b      	ldr	r1, [pc, #108]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e2:	f023 021f 	bic.w	r2, r3, #31
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	4915      	ldr	r1, [pc, #84]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	061b      	lsls	r3, r3, #24
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	071b      	lsls	r3, r3, #28
 8005a1a:	490a      	ldr	r1, [pc, #40]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a28:	f7fc f97c 	bl	8001d24 <HAL_GetTick>
 8005a2c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a2e:	e011      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a30:	f7fc f978 	bl	8001d24 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d90a      	bls.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e064      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
 8005a48:	424711e0 	.word	0x424711e0
 8005a4c:	42470068 	.word	0x42470068
 8005a50:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a54:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0e7      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a6c:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	4926      	ldr	r1, [pc, #152]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a8e:	4b21      	ldr	r3, [pc, #132]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a94:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	491d      	ldr	r1, [pc, #116]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005ab0:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	4915      	ldr	r1, [pc, #84]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	490c      	ldr	r1, [pc, #48]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005af4:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	4904      	ldr	r1, [pc, #16]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40023800 	.word	0x40023800

08005b18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d004      	beq.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	f000 80a1 	beq.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005b3e:	e13f      	b.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005b40:	4ba3      	ldr	r3, [pc, #652]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b46:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005b52:	f000 8084 	beq.w	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005b5c:	f200 808c 	bhi.w	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b66:	d04f      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b6e:	f200 8083 	bhi.w	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d006      	beq.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b7e:	d17b      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b80:	4b94      	ldr	r3, [pc, #592]	; (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005b82:	617b      	str	r3, [r7, #20]
          break;
 8005b84:	e07b      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005b86:	4b92      	ldr	r3, [pc, #584]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b94:	d109      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b96:	4b8e      	ldr	r3, [pc, #568]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba0:	4a8c      	ldr	r2, [pc, #560]	; (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	e019      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005baa:	4b89      	ldr	r3, [pc, #548]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb6:	d109      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005bb8:	4b85      	ldr	r3, [pc, #532]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc2:	4a85      	ldr	r2, [pc, #532]	; (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e008      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005bcc:	4b80      	ldr	r3, [pc, #512]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd6:	4a81      	ldr	r2, [pc, #516]	; (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005bde:	4b7c      	ldr	r3, [pc, #496]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
 8005bf0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005bf2:	4b77      	ldr	r3, [pc, #476]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf8:	0f1b      	lsrs	r3, r3, #28
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]
          break;
 8005c06:	e03a      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c08:	4b71      	ldr	r3, [pc, #452]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c14:	d108      	bne.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c16:	4b6e      	ldr	r3, [pc, #440]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c1e:	4a6e      	ldr	r2, [pc, #440]	; (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e007      	b.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c28:	4b69      	ldr	r3, [pc, #420]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c30:	4a6a      	ldr	r2, [pc, #424]	; (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005c38:	4b65      	ldr	r3, [pc, #404]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	099b      	lsrs	r3, r3, #6
 8005c3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	fb02 f303 	mul.w	r3, r2, r3
 8005c48:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005c4a:	4b61      	ldr	r3, [pc, #388]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	0f1b      	lsrs	r3, r3, #28
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5a:	617b      	str	r3, [r7, #20]
          break;
 8005c5c:	e00f      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c5e:	4b5c      	ldr	r3, [pc, #368]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8005c6c:	4b5a      	ldr	r3, [pc, #360]	; (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c6e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005c70:	e005      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8005c72:	4b5a      	ldr	r3, [pc, #360]	; (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005c74:	617b      	str	r3, [r7, #20]
          break;
 8005c76:	e002      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]
          break;
 8005c7c:	bf00      	nop
        }
      }
      break;
 8005c7e:	e09f      	b.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005c80:	4b53      	ldr	r3, [pc, #332]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c86:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c92:	f000 8084 	beq.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c9c:	f200 808c 	bhi.w	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ca6:	d04f      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cae:	f200 8083 	bhi.w	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d006      	beq.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cbe:	d17b      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cc0:	4b44      	ldr	r3, [pc, #272]	; (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cc2:	617b      	str	r3, [r7, #20]
          break;
 8005cc4:	e07b      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005cc6:	4b42      	ldr	r3, [pc, #264]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd4:	d109      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005cd6:	4b3e      	ldr	r3, [pc, #248]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce0:	4a3c      	ldr	r2, [pc, #240]	; (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e019      	b.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cea:	4b39      	ldr	r3, [pc, #228]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf6:	d109      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005cf8:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d02:	4a35      	ldr	r2, [pc, #212]	; (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	e008      	b.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d0c:	4b30      	ldr	r3, [pc, #192]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d16:	4a31      	ldr	r2, [pc, #196]	; (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d1e:	4b2c      	ldr	r3, [pc, #176]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d24:	099b      	lsrs	r3, r3, #6
 8005d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
 8005d30:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d32:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d38:	0f1b      	lsrs	r3, r3, #28
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
          break;
 8005d46:	e03a      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d48:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d54:	d108      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d56:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e007      	b.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d68:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d70:	4a1a      	ldr	r2, [pc, #104]	; (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005d78:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	099b      	lsrs	r3, r3, #6
 8005d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
 8005d88:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005d8a:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	0f1b      	lsrs	r3, r3, #28
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9a:	617b      	str	r3, [r7, #20]
          break;
 8005d9c:	e00f      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005daa:	d102      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dae:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005db0:	e005      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8005db2:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005db4:	617b      	str	r3, [r7, #20]
          break;
 8005db6:	e002      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
          break;
 8005dbc:	bf00      	nop
        }
      }
      break;
 8005dbe:	bf00      	nop
    }
  }
  return frequency;
 8005dc0:	697b      	ldr	r3, [r7, #20]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	00bb8000 	.word	0x00bb8000
 8005dd8:	017d7840 	.word	0x017d7840
 8005ddc:	00f42400 	.word	0x00f42400

08005de0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e270      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d075      	beq.n	8005eea <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005dfe:	4ba3      	ldr	r3, [pc, #652]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d00c      	beq.n	8005e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e0a:	4ba0      	ldr	r3, [pc, #640]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d112      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e16:	4b9d      	ldr	r3, [pc, #628]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e22:	d10b      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e24:	4b99      	ldr	r3, [pc, #612]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d05b      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x108>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d157      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e24b      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e44:	d106      	bne.n	8005e54 <HAL_RCC_OscConfig+0x74>
 8005e46:	4b91      	ldr	r3, [pc, #580]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a90      	ldr	r2, [pc, #576]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e01d      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b8b      	ldr	r3, [pc, #556]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a8a      	ldr	r2, [pc, #552]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b88      	ldr	r3, [pc, #544]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a87      	ldr	r2, [pc, #540]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e00b      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e78:	4b84      	ldr	r3, [pc, #528]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a83      	ldr	r2, [pc, #524]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	4b81      	ldr	r3, [pc, #516]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a80      	ldr	r2, [pc, #512]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d013      	beq.n	8005ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fb ff44 	bl	8001d24 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fb ff40 	bl	8001d24 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e210      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb2:	4b76      	ldr	r3, [pc, #472]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0xc0>
 8005ebe:	e014      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fb ff30 	bl	8001d24 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec8:	f7fb ff2c 	bl	8001d24 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b64      	cmp	r3, #100	; 0x64
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e1fc      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eda:	4b6c      	ldr	r3, [pc, #432]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0xe8>
 8005ee6:	e000      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d063      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ef6:	4b65      	ldr	r3, [pc, #404]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f02:	4b62      	ldr	r3, [pc, #392]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d11c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0e:	4b5f      	ldr	r3, [pc, #380]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d116      	bne.n	8005f48 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	4b5c      	ldr	r3, [pc, #368]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_RCC_OscConfig+0x152>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e1d0      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f32:	4b56      	ldr	r3, [pc, #344]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4952      	ldr	r1, [pc, #328]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	e03a      	b.n	8005fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d020      	beq.n	8005f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f50:	4b4f      	ldr	r3, [pc, #316]	; (8006090 <HAL_RCC_OscConfig+0x2b0>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fb fee5 	bl	8001d24 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f5e:	f7fb fee1 	bl	8001d24 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e1b1      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f70:	4b46      	ldr	r3, [pc, #280]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4940      	ldr	r1, [pc, #256]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]
 8005f90:	e015      	b.n	8005fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f92:	4b3f      	ldr	r3, [pc, #252]	; (8006090 <HAL_RCC_OscConfig+0x2b0>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fb fec4 	bl	8001d24 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa0:	f7fb fec0 	bl	8001d24 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e190      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fb2:	4b36      	ldr	r3, [pc, #216]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d030      	beq.n	800602c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <HAL_RCC_OscConfig+0x2b4>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd8:	f7fb fea4 	bl	8001d24 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe0:	f7fb fea0 	bl	8001d24 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e170      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ff2:	4b26      	ldr	r3, [pc, #152]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x200>
 8005ffe:	e015      	b.n	800602c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006000:	4b24      	ldr	r3, [pc, #144]	; (8006094 <HAL_RCC_OscConfig+0x2b4>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006006:	f7fb fe8d 	bl	8001d24 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600e:	f7fb fe89 	bl	8001d24 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e159      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f0      	bne.n	800600e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80a0 	beq.w	800617a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10f      	bne.n	800606a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	4a0e      	ldr	r2, [pc, #56]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006058:	6413      	str	r3, [r2, #64]	; 0x40
 800605a:	4b0c      	ldr	r3, [pc, #48]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <HAL_RCC_OscConfig+0x2b8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d121      	bne.n	80060ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <HAL_RCC_OscConfig+0x2b8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a07      	ldr	r2, [pc, #28]	; (8006098 <HAL_RCC_OscConfig+0x2b8>)
 800607c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006082:	f7fb fe4f 	bl	8001d24 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006088:	e011      	b.n	80060ae <HAL_RCC_OscConfig+0x2ce>
 800608a:	bf00      	nop
 800608c:	40023800 	.word	0x40023800
 8006090:	42470000 	.word	0x42470000
 8006094:	42470e80 	.word	0x42470e80
 8006098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609c:	f7fb fe42 	bl	8001d24 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e112      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ae:	4b8b      	ldr	r3, [pc, #556]	; (80062dc <HAL_RCC_OscConfig+0x4fc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0f0      	beq.n	800609c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d106      	bne.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
 80060c2:	4b87      	ldr	r3, [pc, #540]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	4a86      	ldr	r2, [pc, #536]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	6713      	str	r3, [r2, #112]	; 0x70
 80060ce:	e01c      	b.n	800610a <HAL_RCC_OscConfig+0x32a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	d10c      	bne.n	80060f2 <HAL_RCC_OscConfig+0x312>
 80060d8:	4b81      	ldr	r3, [pc, #516]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	4a80      	ldr	r2, [pc, #512]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80060de:	f043 0304 	orr.w	r3, r3, #4
 80060e2:	6713      	str	r3, [r2, #112]	; 0x70
 80060e4:	4b7e      	ldr	r3, [pc, #504]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e8:	4a7d      	ldr	r2, [pc, #500]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6713      	str	r3, [r2, #112]	; 0x70
 80060f0:	e00b      	b.n	800610a <HAL_RCC_OscConfig+0x32a>
 80060f2:	4b7b      	ldr	r3, [pc, #492]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	4a7a      	ldr	r2, [pc, #488]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	6713      	str	r3, [r2, #112]	; 0x70
 80060fe:	4b78      	ldr	r3, [pc, #480]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	4a77      	ldr	r2, [pc, #476]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006104:	f023 0304 	bic.w	r3, r3, #4
 8006108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d015      	beq.n	800613e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006112:	f7fb fe07 	bl	8001d24 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006118:	e00a      	b.n	8006130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800611a:	f7fb fe03 	bl	8001d24 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	f241 3288 	movw	r2, #5000	; 0x1388
 8006128:	4293      	cmp	r3, r2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e0d1      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006130:	4b6b      	ldr	r3, [pc, #428]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0ee      	beq.n	800611a <HAL_RCC_OscConfig+0x33a>
 800613c:	e014      	b.n	8006168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613e:	f7fb fdf1 	bl	8001d24 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006144:	e00a      	b.n	800615c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006146:	f7fb fded 	bl	8001d24 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f241 3288 	movw	r2, #5000	; 0x1388
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e0bb      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615c:	4b60      	ldr	r3, [pc, #384]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1ee      	bne.n	8006146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616e:	4b5c      	ldr	r3, [pc, #368]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	4a5b      	ldr	r2, [pc, #364]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 80a7 	beq.w	80062d2 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006184:	4b56      	ldr	r3, [pc, #344]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b08      	cmp	r3, #8
 800618e:	d060      	beq.n	8006252 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d145      	bne.n	8006224 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006198:	4b52      	ldr	r3, [pc, #328]	; (80062e4 <HAL_RCC_OscConfig+0x504>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619e:	f7fb fdc1 	bl	8001d24 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fb fdbd 	bl	8001d24 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e08d      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b8:	4b49      	ldr	r3, [pc, #292]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f0      	bne.n	80061a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	019b      	lsls	r3, r3, #6
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	3b01      	subs	r3, #1
 80061de:	041b      	lsls	r3, r3, #16
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	061b      	lsls	r3, r3, #24
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	071b      	lsls	r3, r3, #28
 80061f0:	493b      	ldr	r1, [pc, #236]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f6:	4b3b      	ldr	r3, [pc, #236]	; (80062e4 <HAL_RCC_OscConfig+0x504>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fb fd92 	bl	8001d24 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006204:	f7fb fd8e 	bl	8001d24 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e05e      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006216:	4b32      	ldr	r3, [pc, #200]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x424>
 8006222:	e056      	b.n	80062d2 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006224:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <HAL_RCC_OscConfig+0x504>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622a:	f7fb fd7b 	bl	8001d24 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006232:	f7fb fd77 	bl	8001d24 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e047      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006244:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <HAL_RCC_OscConfig+0x452>
 8006250:	e03f      	b.n	80062d2 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e03a      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d030      	beq.n	80062ce <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006276:	429a      	cmp	r2, r3
 8006278:	d129      	bne.n	80062ce <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006284:	429a      	cmp	r2, r3
 8006286:	d122      	bne.n	80062ce <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800628e:	4013      	ands	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006294:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006296:	4293      	cmp	r3, r2
 8006298:	d119      	bne.n	80062ce <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	3b01      	subs	r3, #1
 80062a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d10f      	bne.n	80062ce <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d107      	bne.n	80062ce <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d001      	beq.n	80062d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40007000 	.word	0x40007000
 80062e0:	40023800 	.word	0x40023800
 80062e4:	42470060 	.word	0x42470060

080062e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e022      	b.n	8006340 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7fb fa4b 	bl	80017a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2203      	movs	r2, #3
 8006316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f814 	bl	8006348 <HAL_SD_InitCard>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e00a      	b.n	8006340 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006348:	b5b0      	push	{r4, r5, r7, lr}
 800634a:	b08e      	sub	sp, #56	; 0x38
 800634c:	af04      	add	r7, sp, #16
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006350:	2300      	movs	r3, #0
 8006352:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006360:	2300      	movs	r3, #0
 8006362:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006364:	2376      	movs	r3, #118	; 0x76
 8006366:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681d      	ldr	r5, [r3, #0]
 800636c:	466c      	mov	r4, sp
 800636e:	f107 0314 	add.w	r3, r7, #20
 8006372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006380:	4628      	mov	r0, r5
 8006382:	f001 fb7b 	bl	8007a7c <SDIO_Init>
 8006386:	4603      	mov	r3, r0
 8006388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800638c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e04c      	b.n	8006432 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006398:	4b28      	ldr	r3, [pc, #160]	; (800643c <HAL_SD_InitCard+0xf4>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fba2 	bl	8007aec <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80063a8:	4b24      	ldr	r3, [pc, #144]	; (800643c <HAL_SD_InitCard+0xf4>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fb52 	bl	8006a58 <SD_PowerON>
 80063b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e02e      	b.n	8006432 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fa73 	bl	80068c0 <SD_InitCard>
 80063da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e01b      	b.n	8006432 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006402:	4618      	mov	r0, r3
 8006404:	f001 fc05 	bl	8007c12 <SDMMC_CmdBlockLength>
 8006408:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00f      	beq.n	8006430 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <HAL_SD_InitCard+0xf8>)
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3728      	adds	r7, #40	; 0x28
 8006436:	46bd      	mov	sp, r7
 8006438:	bdb0      	pop	{r4, r5, r7, pc}
 800643a:	bf00      	nop
 800643c:	422580a0 	.word	0x422580a0
 8006440:	004005ff 	.word	0x004005ff

08006444 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006452:	0f9b      	lsrs	r3, r3, #30
 8006454:	b2da      	uxtb	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645e:	0e9b      	lsrs	r3, r3, #26
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	b2da      	uxtb	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006470:	0e1b      	lsrs	r3, r3, #24
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	b2da      	uxtb	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	b2da      	uxtb	r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648e:	0a1b      	lsrs	r3, r3, #8
 8006490:	b2da      	uxtb	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800649a:	b2da      	uxtb	r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a4:	0d1b      	lsrs	r3, r3, #20
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c2:	0bdb      	lsrs	r3, r3, #15
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d4:	0b9b      	lsrs	r3, r3, #14
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e6:	0b5b      	lsrs	r3, r3, #13
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f8:	0b1b      	lsrs	r3, r3, #12
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	b2da      	uxtb	r2, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2200      	movs	r2, #0
 800650a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	2b00      	cmp	r3, #0
 8006512:	d163      	bne.n	80065dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006518:	009a      	lsls	r2, r3, #2
 800651a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800651e:	4013      	ands	r3, r2
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006524:	0f92      	lsrs	r2, r2, #30
 8006526:	431a      	orrs	r2, r3
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006530:	0edb      	lsrs	r3, r3, #27
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	b2da      	uxtb	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006542:	0e1b      	lsrs	r3, r3, #24
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	b2da      	uxtb	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006554:	0d5b      	lsrs	r3, r3, #21
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	b2da      	uxtb	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006566:	0c9b      	lsrs	r3, r3, #18
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	b2da      	uxtb	r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006578:	0bdb      	lsrs	r3, r3, #15
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	b2da      	uxtb	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	7e1b      	ldrb	r3, [r3, #24]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	3302      	adds	r3, #2
 800659c:	2201      	movs	r2, #1
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80065a6:	fb02 f203 	mul.w	r2, r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	7a1b      	ldrb	r3, [r3, #8]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	2201      	movs	r2, #1
 80065ba:	409a      	lsls	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80065c8:	0a52      	lsrs	r2, r2, #9
 80065ca:	fb02 f203 	mul.w	r2, r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d8:	661a      	str	r2, [r3, #96]	; 0x60
 80065da:	e031      	b.n	8006640 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d11d      	bne.n	8006620 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e8:	041b      	lsls	r3, r3, #16
 80065ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f2:	0c1b      	lsrs	r3, r3, #16
 80065f4:	431a      	orrs	r2, r3
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	3301      	adds	r3, #1
 8006600:	029a      	lsls	r2, r3, #10
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006614:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	661a      	str	r2, [r3, #96]	; 0x60
 800661e:	e00f      	b.n	8006640 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a58      	ldr	r2, [pc, #352]	; (8006788 <HAL_SD_GetCardCSD+0x344>)
 8006626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e09d      	b.n	800677c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006644:	0b9b      	lsrs	r3, r3, #14
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	b2da      	uxtb	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006656:	09db      	lsrs	r3, r3, #7
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800665e:	b2da      	uxtb	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006668:	b2db      	uxtb	r3, r3
 800666a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666e:	b2da      	uxtb	r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006678:	0fdb      	lsrs	r3, r3, #31
 800667a:	b2da      	uxtb	r2, r3
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	0f5b      	lsrs	r3, r3, #29
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	b2da      	uxtb	r2, r3
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	0e9b      	lsrs	r3, r3, #26
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a8:	0d9b      	lsrs	r3, r3, #22
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	0d5b      	lsrs	r3, r3, #21
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	0bdb      	lsrs	r3, r3, #15
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fe:	0b9b      	lsrs	r3, r3, #14
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	b2da      	uxtb	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	0b5b      	lsrs	r3, r3, #13
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	b2da      	uxtb	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	0b1b      	lsrs	r3, r3, #12
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	0a9b      	lsrs	r3, r3, #10
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	b2da      	uxtb	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	b2da      	uxtb	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800676a:	b2da      	uxtb	r2, r3
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	004005ff 	.word	0x004005ff

0800678c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800678c:	b5b0      	push	{r4, r5, r7, lr}
 800678e:	b08e      	sub	sp, #56	; 0x38
 8006790:	af04      	add	r7, sp, #16
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2203      	movs	r2, #3
 80067a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d02e      	beq.n	800680a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b2:	d106      	bne.n	80067c2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	; 0x38
 80067c0:	e029      	b.n	8006816 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c8:	d10a      	bne.n	80067e0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9d2 	bl	8006b74 <SD_WideBus_Enable>
 80067d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
 80067de:	e01a      	b.n	8006816 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fa0f 	bl	8006c0a <SD_WideBus_Disable>
 80067ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38
 80067fa:	e00c      	b.n	8006816 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	639a      	str	r2, [r3, #56]	; 0x38
 8006808:	e005      	b.n	8006816 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a26      	ldr	r2, [pc, #152]	; (80068bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8006824:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006834:	e01f      	b.n	8006876 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681d      	ldr	r5, [r3, #0]
 800685c:	466c      	mov	r4, sp
 800685e:	f107 0314 	add.w	r3, r7, #20
 8006862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006870:	4628      	mov	r0, r5
 8006872:	f001 f903 	bl	8007a7c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800687e:	4618      	mov	r0, r3
 8006880:	f001 f9c7 	bl	8007c12 <SDMMC_CmdBlockLength>
 8006884:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00c      	beq.n	80068a6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8006892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80068ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3728      	adds	r7, #40	; 0x28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bdb0      	pop	{r4, r5, r7, pc}
 80068ba:	bf00      	nop
 80068bc:	004005ff 	.word	0x004005ff

080068c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068c0:	b5b0      	push	{r4, r5, r7, lr}
 80068c2:	b094      	sub	sp, #80	; 0x50
 80068c4:	af04      	add	r7, sp, #16
 80068c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068c8:	2301      	movs	r3, #1
 80068ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 f91a 	bl	8007b0a <SDIO_GetPowerState>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068e0:	e0b6      	b.n	8006a50 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d02f      	beq.n	800694a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 fa99 	bl	8007e26 <SDMMC_CmdSendCID>
 80068f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <SD_InitCard+0x40>
    {
      return errorstate;
 80068fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fe:	e0a7      	b.n	8006a50 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2100      	movs	r1, #0
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f944 	bl	8007b94 <SDIO_GetResponse>
 800690c:	4602      	mov	r2, r0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2104      	movs	r1, #4
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f93b 	bl	8007b94 <SDIO_GetResponse>
 800691e:	4602      	mov	r2, r0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2108      	movs	r1, #8
 800692a:	4618      	mov	r0, r3
 800692c:	f001 f932 	bl	8007b94 <SDIO_GetResponse>
 8006930:	4602      	mov	r2, r0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	210c      	movs	r1, #12
 800693c:	4618      	mov	r0, r3
 800693e:	f001 f929 	bl	8007b94 <SDIO_GetResponse>
 8006942:	4602      	mov	r2, r0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	2b03      	cmp	r3, #3
 8006950:	d00d      	beq.n	800696e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f107 020e 	add.w	r2, r7, #14
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f001 fa9f 	bl	8007ea0 <SDMMC_CmdSetRelAdd>
 8006962:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <SD_InitCard+0xae>
    {
      return errorstate;
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	e070      	b.n	8006a50 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	2b03      	cmp	r3, #3
 8006974:	d036      	beq.n	80069e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006976:	89fb      	ldrh	r3, [r7, #14]
 8006978:	461a      	mov	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f001 fa69 	bl	8007e62 <SDMMC_CmdSendCSD>
 8006990:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	e059      	b.n	8006a50 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 f8f6 	bl	8007b94 <SDIO_GetResponse>
 80069a8:	4602      	mov	r2, r0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2104      	movs	r1, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 f8ed 	bl	8007b94 <SDIO_GetResponse>
 80069ba:	4602      	mov	r2, r0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2108      	movs	r1, #8
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 f8e4 	bl	8007b94 <SDIO_GetResponse>
 80069cc:	4602      	mov	r2, r0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	210c      	movs	r1, #12
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 f8db 	bl	8007b94 <SDIO_GetResponse>
 80069de:	4602      	mov	r2, r0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2104      	movs	r1, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 f8d2 	bl	8007b94 <SDIO_GetResponse>
 80069f0:	4603      	mov	r3, r0
 80069f2:	0d1a      	lsrs	r2, r3, #20
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80069f8:	f107 0310 	add.w	r3, r7, #16
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fd20 	bl	8006444 <HAL_SD_GetCardCSD>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a0e:	e01f      	b.n	8006a50 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a18:	041b      	lsls	r3, r3, #16
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	4608      	mov	r0, r1
 8006a22:	f001 f918 	bl	8007c56 <SDMMC_CmdSelDesel>
 8006a26:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <SD_InitCard+0x172>
  {
    return errorstate;
 8006a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a30:	e00e      	b.n	8006a50 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681d      	ldr	r5, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	466c      	mov	r4, sp
 8006a3a:	f103 0210 	add.w	r2, r3, #16
 8006a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a44:	3304      	adds	r3, #4
 8006a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f001 f817 	bl	8007a7c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3740      	adds	r7, #64	; 0x40
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bdb0      	pop	{r4, r5, r7, pc}

08006a58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f913 	bl	8007c9c <SDMMC_CmdGoIdleState>
 8006a76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	e072      	b.n	8006b68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f926 	bl	8007cd8 <SDMMC_CmdOperCond>
 8006a8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00d      	beq.n	8006ab0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 f8fc 	bl	8007c9c <SDMMC_CmdGoIdleState>
 8006aa4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d004      	beq.n	8006ab6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	e05b      	b.n	8006b68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d137      	bne.n	8006b2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 f926 	bl	8007d16 <SDMMC_CmdAppCommand>
 8006aca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d02d      	beq.n	8006b2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ad2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ad6:	e047      	b.n	8006b68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f919 	bl	8007d16 <SDMMC_CmdAppCommand>
 8006ae4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <SD_PowerON+0x98>
    {
      return errorstate;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	e03b      	b.n	8006b68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	491e      	ldr	r1, [pc, #120]	; (8006b70 <SD_PowerON+0x118>)
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 f92f 	bl	8007d5a <SDMMC_CmdAppOperCommand>
 8006afc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b08:	e02e      	b.n	8006b68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 f83f 	bl	8007b94 <SDIO_GetResponse>
 8006b16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	0fdb      	lsrs	r3, r3, #31
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <SD_PowerON+0xcc>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <SD_PowerON+0xce>
 8006b24:	2300      	movs	r3, #0
 8006b26:	613b      	str	r3, [r7, #16]

    count++;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d802      	bhi.n	8006b3e <SD_PowerON+0xe6>
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0cc      	beq.n	8006ad8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d902      	bls.n	8006b4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b4c:	e00c      	b.n	8006b68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44
 8006b5e:	e002      	b.n	8006b66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	c1100000 	.word	0xc1100000

08006b74 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	2300      	movs	r3, #0
 8006b82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 f802 	bl	8007b94 <SDIO_GetResponse>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b9a:	d102      	bne.n	8006ba2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ba0:	e02f      	b.n	8006c02 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ba2:	f107 030c 	add.w	r3, r7, #12
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f879 	bl	8006ca0 <SD_FindSCR>
 8006bae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	e023      	b.n	8006c02 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01c      	beq.n	8006bfe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bcc:	041b      	lsls	r3, r3, #16
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	f001 f8a0 	bl	8007d16 <SDMMC_CmdAppCommand>
 8006bd6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	e00f      	b.n	8006c02 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2102      	movs	r1, #2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 f8d9 	bl	8007da0 <SDMMC_CmdBusWidth>
 8006bee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	e003      	b.n	8006c02 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e001      	b.n	8006c02 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006bfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 ffb7 	bl	8007b94 <SDIO_GetResponse>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c30:	d102      	bne.n	8006c38 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c36:	e02f      	b.n	8006c98 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f82e 	bl	8006ca0 <SD_FindSCR>
 8006c44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	e023      	b.n	8006c98 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01c      	beq.n	8006c94 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f001 f855 	bl	8007d16 <SDMMC_CmdAppCommand>
 8006c6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	e00f      	b.n	8006c98 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f001 f88e 	bl	8007da0 <SDMMC_CmdBusWidth>
 8006c84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	e003      	b.n	8006c98 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e001      	b.n	8006c98 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006ca0:	b590      	push	{r4, r7, lr}
 8006ca2:	b08f      	sub	sp, #60	; 0x3c
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006caa:	f7fb f83b 	bl	8001d24 <HAL_GetTick>
 8006cae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2108      	movs	r1, #8
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 ffa3 	bl	8007c12 <SDMMC_CmdBlockLength>
 8006ccc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	e0b2      	b.n	8006e3e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	041b      	lsls	r3, r3, #16
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f001 f816 	bl	8007d16 <SDMMC_CmdAppCommand>
 8006cea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	e0a3      	b.n	8006e3e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006d00:	2330      	movs	r3, #48	; 0x30
 8006d02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006d04:	2302      	movs	r3, #2
 8006d06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f107 0210 	add.w	r2, r7, #16
 8006d18:	4611      	mov	r1, r2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 ff4d 	bl	8007bba <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 f85d 	bl	8007de4 <SDMMC_CmdSendSCR>
 8006d2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d02a      	beq.n	8006d88 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	e083      	b.n	8006e3e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00f      	beq.n	8006d64 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6819      	ldr	r1, [r3, #0]
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	f107 0208 	add.w	r2, r7, #8
 8006d50:	18d4      	adds	r4, r2, r3
 8006d52:	4608      	mov	r0, r1
 8006d54:	f000 febd 	bl	8007ad2 <SDIO_ReadFIFO>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	6023      	str	r3, [r4, #0]
      index++;
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5e:	3301      	adds	r3, #1
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
 8006d62:	e006      	b.n	8006d72 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d012      	beq.n	8006d98 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d72:	f7fa ffd7 	bl	8001d24 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d80:	d102      	bne.n	8006d88 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d86:	e05a      	b.n	8006e3e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0cf      	beq.n	8006d36 <SD_FindSCR+0x96>
 8006d96:	e000      	b.n	8006d9a <SD_FindSCR+0xfa>
      break;
 8006d98:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2208      	movs	r2, #8
 8006dae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006db0:	2308      	movs	r3, #8
 8006db2:	e044      	b.n	8006e3e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e037      	b.n	8006e3e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2220      	movs	r2, #32
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006de4:	2320      	movs	r3, #32
 8006de6:	e02a      	b.n	8006e3e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f240 523a 	movw	r2, #1338	; 0x53a
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	061a      	lsls	r2, r3, #24
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dfe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e08:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	0e1b      	lsrs	r3, r3, #24
 8006e0e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	601a      	str	r2, [r3, #0]
    scr++;
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	3304      	adds	r3, #4
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	061a      	lsls	r2, r3, #24
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e26:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	0a1b      	lsrs	r3, r3, #8
 8006e2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e30:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	0e1b      	lsrs	r3, r3, #24
 8006e36:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	373c      	adds	r7, #60	; 0x3c
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd90      	pop	{r4, r7, pc}

08006e46 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e034      	b.n	8006ec6 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f7fa fdef 	bl	8001a54 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f000 fcf7 	bl	8007874 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	f000 fd5f 	bl	8007954 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6858      	ldr	r0, [r3, #4]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	f000 fdaa 	bl	80079fc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	6892      	ldr	r2, [r2, #8]
 8006eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	6892      	ldr	r2, [r2, #8]
 8006ebc:	f041 0101 	orr.w	r1, r1, #1
 8006ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e041      	b.n	8006f64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f839 	bl	8006f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2202      	movs	r2, #2
 8006efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f000 f9d7 	bl	80072c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d001      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e04e      	b.n	8007036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a23      	ldr	r2, [pc, #140]	; (8007044 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d022      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc2:	d01d      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1f      	ldr	r2, [pc, #124]	; (8007048 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1e      	ldr	r2, [pc, #120]	; (800704c <HAL_TIM_Base_Start_IT+0xcc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1c      	ldr	r2, [pc, #112]	; (8007050 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a19      	ldr	r2, [pc, #100]	; (8007058 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x80>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d111      	bne.n	8007024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b06      	cmp	r3, #6
 8007010:	d010      	beq.n	8007034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0201 	orr.w	r2, r2, #1
 8007020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007022:	e007      	b.n	8007034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40001800 	.word	0x40001800

08007060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d122      	bne.n	80070bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b02      	cmp	r3, #2
 8007082:	d11b      	bne.n	80070bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0202 	mvn.w	r2, #2
 800708c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f8ee 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 80070a8:	e005      	b.n	80070b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f8e0 	bl	8007270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f8f1 	bl	8007298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d122      	bne.n	8007110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d11b      	bne.n	8007110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f06f 0204 	mvn.w	r2, #4
 80070e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2202      	movs	r2, #2
 80070e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f8c4 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 80070fc:	e005      	b.n	800710a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f8b6 	bl	8007270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f8c7 	bl	8007298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b08      	cmp	r3, #8
 800711c:	d122      	bne.n	8007164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b08      	cmp	r3, #8
 800712a:	d11b      	bne.n	8007164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0208 	mvn.w	r2, #8
 8007134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2204      	movs	r2, #4
 800713a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f89a 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8007150:	e005      	b.n	800715e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f88c 	bl	8007270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f89d 	bl	8007298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b10      	cmp	r3, #16
 8007170:	d122      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b10      	cmp	r3, #16
 800717e:	d11b      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0210 	mvn.w	r2, #16
 8007188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2208      	movs	r2, #8
 800718e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f870 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 80071a4:	e005      	b.n	80071b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f862 	bl	8007270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f873 	bl	8007298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d10e      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d107      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0201 	mvn.w	r2, #1
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7f9 ff44 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d10e      	bne.n	8007210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fc:	2b80      	cmp	r3, #128	; 0x80
 80071fe:	d107      	bne.n	8007210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f902 	bl	8007414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d10e      	bne.n	800723c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d107      	bne.n	800723c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f838 	bl	80072ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b20      	cmp	r3, #32
 8007248:	d10e      	bne.n	8007268 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b20      	cmp	r3, #32
 8007256:	d107      	bne.n	8007268 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0220 	mvn.w	r2, #32
 8007260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f8cc 	bl	8007400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a40      	ldr	r2, [pc, #256]	; (80073d4 <TIM_Base_SetConfig+0x114>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072de:	d00f      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a3d      	ldr	r2, [pc, #244]	; (80073d8 <TIM_Base_SetConfig+0x118>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00b      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a3c      	ldr	r2, [pc, #240]	; (80073dc <TIM_Base_SetConfig+0x11c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d007      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a3b      	ldr	r2, [pc, #236]	; (80073e0 <TIM_Base_SetConfig+0x120>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d003      	beq.n	8007300 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a3a      	ldr	r2, [pc, #232]	; (80073e4 <TIM_Base_SetConfig+0x124>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d108      	bne.n	8007312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a2f      	ldr	r2, [pc, #188]	; (80073d4 <TIM_Base_SetConfig+0x114>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d02b      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007320:	d027      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a2c      	ldr	r2, [pc, #176]	; (80073d8 <TIM_Base_SetConfig+0x118>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d023      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a2b      	ldr	r2, [pc, #172]	; (80073dc <TIM_Base_SetConfig+0x11c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d01f      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a2a      	ldr	r2, [pc, #168]	; (80073e0 <TIM_Base_SetConfig+0x120>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01b      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a29      	ldr	r2, [pc, #164]	; (80073e4 <TIM_Base_SetConfig+0x124>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d017      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a28      	ldr	r2, [pc, #160]	; (80073e8 <TIM_Base_SetConfig+0x128>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a27      	ldr	r2, [pc, #156]	; (80073ec <TIM_Base_SetConfig+0x12c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00f      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <TIM_Base_SetConfig+0x130>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00b      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a25      	ldr	r2, [pc, #148]	; (80073f4 <TIM_Base_SetConfig+0x134>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d007      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a24      	ldr	r2, [pc, #144]	; (80073f8 <TIM_Base_SetConfig+0x138>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d003      	beq.n	8007372 <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a23      	ldr	r2, [pc, #140]	; (80073fc <TIM_Base_SetConfig+0x13c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d108      	bne.n	8007384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a0a      	ldr	r2, [pc, #40]	; (80073d4 <TIM_Base_SetConfig+0x114>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_Base_SetConfig+0xf8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a0c      	ldr	r2, [pc, #48]	; (80073e4 <TIM_Base_SetConfig+0x124>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d103      	bne.n	80073c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	615a      	str	r2, [r3, #20]
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40000400 	.word	0x40000400
 80073dc:	40000800 	.word	0x40000800
 80073e0:	40000c00 	.word	0x40000c00
 80073e4:	40010400 	.word	0x40010400
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40014400 	.word	0x40014400
 80073f0:	40014800 	.word	0x40014800
 80073f4:	40001800 	.word	0x40001800
 80073f8:	40001c00 	.word	0x40001c00
 80073fc:	40002000 	.word	0x40002000

08007400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e03f      	b.n	80074ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fa fa12 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2224      	movs	r2, #36	; 0x24
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800746a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f829 	bl	80074c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c8:	b09f      	sub	sp, #124	; 0x7c
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074da:	68d9      	ldr	r1, [r3, #12]
 80074dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	ea40 0301 	orr.w	r3, r0, r1
 80074e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	431a      	orrs	r2, r3
 80074f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80074fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007508:	f021 010c 	bic.w	r1, r1, #12
 800750c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007512:	430b      	orrs	r3, r1
 8007514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007522:	6999      	ldr	r1, [r3, #24]
 8007524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	ea40 0301 	orr.w	r3, r0, r1
 800752c:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800752e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4b6a      	ldr	r3, [pc, #424]	; (80076dc <UART_SetConfig+0x218>)
 8007534:	429a      	cmp	r2, r3
 8007536:	d00e      	beq.n	8007556 <UART_SetConfig+0x92>
 8007538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4b68      	ldr	r3, [pc, #416]	; (80076e0 <UART_SetConfig+0x21c>)
 800753e:	429a      	cmp	r2, r3
 8007540:	d009      	beq.n	8007556 <UART_SetConfig+0x92>
 8007542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4b67      	ldr	r3, [pc, #412]	; (80076e4 <UART_SetConfig+0x220>)
 8007548:	429a      	cmp	r2, r3
 800754a:	d004      	beq.n	8007556 <UART_SetConfig+0x92>
 800754c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	4b65      	ldr	r3, [pc, #404]	; (80076e8 <UART_SetConfig+0x224>)
 8007552:	429a      	cmp	r2, r3
 8007554:	d103      	bne.n	800755e <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007556:	f7fe f80d 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 800755a:	6778      	str	r0, [r7, #116]	; 0x74
 800755c:	e002      	b.n	8007564 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800755e:	f7fd fff5 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 8007562:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756c:	f040 80c0 	bne.w	80076f0 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007572:	461c      	mov	r4, r3
 8007574:	f04f 0500 	mov.w	r5, #0
 8007578:	4622      	mov	r2, r4
 800757a:	462b      	mov	r3, r5
 800757c:	1891      	adds	r1, r2, r2
 800757e:	6439      	str	r1, [r7, #64]	; 0x40
 8007580:	415b      	adcs	r3, r3
 8007582:	647b      	str	r3, [r7, #68]	; 0x44
 8007584:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007588:	1912      	adds	r2, r2, r4
 800758a:	eb45 0303 	adc.w	r3, r5, r3
 800758e:	f04f 0000 	mov.w	r0, #0
 8007592:	f04f 0100 	mov.w	r1, #0
 8007596:	00d9      	lsls	r1, r3, #3
 8007598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800759c:	00d0      	lsls	r0, r2, #3
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	1911      	adds	r1, r2, r4
 80075a4:	6639      	str	r1, [r7, #96]	; 0x60
 80075a6:	416b      	adcs	r3, r5
 80075a8:	667b      	str	r3, [r7, #100]	; 0x64
 80075aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	1891      	adds	r1, r2, r2
 80075b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80075b8:	415b      	adcs	r3, r3
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80075c4:	f7f8 fe2c 	bl	8000220 <__aeabi_uldivmod>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4b47      	ldr	r3, [pc, #284]	; (80076ec <UART_SetConfig+0x228>)
 80075ce:	fba3 2302 	umull	r2, r3, r3, r2
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	011e      	lsls	r6, r3, #4
 80075d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d8:	461c      	mov	r4, r3
 80075da:	f04f 0500 	mov.w	r5, #0
 80075de:	4622      	mov	r2, r4
 80075e0:	462b      	mov	r3, r5
 80075e2:	1891      	adds	r1, r2, r2
 80075e4:	6339      	str	r1, [r7, #48]	; 0x30
 80075e6:	415b      	adcs	r3, r3
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075ee:	1912      	adds	r2, r2, r4
 80075f0:	eb45 0303 	adc.w	r3, r5, r3
 80075f4:	f04f 0000 	mov.w	r0, #0
 80075f8:	f04f 0100 	mov.w	r1, #0
 80075fc:	00d9      	lsls	r1, r3, #3
 80075fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007602:	00d0      	lsls	r0, r2, #3
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	1911      	adds	r1, r2, r4
 800760a:	65b9      	str	r1, [r7, #88]	; 0x58
 800760c:	416b      	adcs	r3, r5
 800760e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	461a      	mov	r2, r3
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	1891      	adds	r1, r2, r2
 800761c:	62b9      	str	r1, [r7, #40]	; 0x28
 800761e:	415b      	adcs	r3, r3
 8007620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007626:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800762a:	f7f8 fdf9 	bl	8000220 <__aeabi_uldivmod>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4b2e      	ldr	r3, [pc, #184]	; (80076ec <UART_SetConfig+0x228>)
 8007634:	fba3 1302 	umull	r1, r3, r3, r2
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	2164      	movs	r1, #100	; 0x64
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	3332      	adds	r3, #50	; 0x32
 8007646:	4a29      	ldr	r2, [pc, #164]	; (80076ec <UART_SetConfig+0x228>)
 8007648:	fba2 2303 	umull	r2, r3, r2, r3
 800764c:	095b      	lsrs	r3, r3, #5
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007654:	441e      	add	r6, r3
 8007656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007658:	4618      	mov	r0, r3
 800765a:	f04f 0100 	mov.w	r1, #0
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	1894      	adds	r4, r2, r2
 8007664:	623c      	str	r4, [r7, #32]
 8007666:	415b      	adcs	r3, r3
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
 800766a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800766e:	1812      	adds	r2, r2, r0
 8007670:	eb41 0303 	adc.w	r3, r1, r3
 8007674:	f04f 0400 	mov.w	r4, #0
 8007678:	f04f 0500 	mov.w	r5, #0
 800767c:	00dd      	lsls	r5, r3, #3
 800767e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007682:	00d4      	lsls	r4, r2, #3
 8007684:	4622      	mov	r2, r4
 8007686:	462b      	mov	r3, r5
 8007688:	1814      	adds	r4, r2, r0
 800768a:	653c      	str	r4, [r7, #80]	; 0x50
 800768c:	414b      	adcs	r3, r1
 800768e:	657b      	str	r3, [r7, #84]	; 0x54
 8007690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	461a      	mov	r2, r3
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	1891      	adds	r1, r2, r2
 800769c:	61b9      	str	r1, [r7, #24]
 800769e:	415b      	adcs	r3, r3
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80076aa:	f7f8 fdb9 	bl	8000220 <__aeabi_uldivmod>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <UART_SetConfig+0x228>)
 80076b4:	fba3 1302 	umull	r1, r3, r3, r2
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	2164      	movs	r1, #100	; 0x64
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	3332      	adds	r3, #50	; 0x32
 80076c6:	4a09      	ldr	r2, [pc, #36]	; (80076ec <UART_SetConfig+0x228>)
 80076c8:	fba2 2303 	umull	r2, r3, r2, r3
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	f003 0207 	and.w	r2, r3, #7
 80076d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4432      	add	r2, r6
 80076d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076da:	e0c3      	b.n	8007864 <UART_SetConfig+0x3a0>
 80076dc:	40011000 	.word	0x40011000
 80076e0:	40011400 	.word	0x40011400
 80076e4:	40011800 	.word	0x40011800
 80076e8:	40011c00 	.word	0x40011c00
 80076ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f2:	461c      	mov	r4, r3
 80076f4:	f04f 0500 	mov.w	r5, #0
 80076f8:	4622      	mov	r2, r4
 80076fa:	462b      	mov	r3, r5
 80076fc:	1891      	adds	r1, r2, r2
 80076fe:	6139      	str	r1, [r7, #16]
 8007700:	415b      	adcs	r3, r3
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007708:	1912      	adds	r2, r2, r4
 800770a:	eb45 0303 	adc.w	r3, r5, r3
 800770e:	f04f 0000 	mov.w	r0, #0
 8007712:	f04f 0100 	mov.w	r1, #0
 8007716:	00d9      	lsls	r1, r3, #3
 8007718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800771c:	00d0      	lsls	r0, r2, #3
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	eb12 0804 	adds.w	r8, r2, r4
 8007726:	eb43 0905 	adc.w	r9, r3, r5
 800772a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	4618      	mov	r0, r3
 8007730:	f04f 0100 	mov.w	r1, #0
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	008b      	lsls	r3, r1, #2
 800773e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007742:	0082      	lsls	r2, r0, #2
 8007744:	4640      	mov	r0, r8
 8007746:	4649      	mov	r1, r9
 8007748:	f7f8 fd6a 	bl	8000220 <__aeabi_uldivmod>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4b47      	ldr	r3, [pc, #284]	; (8007870 <UART_SetConfig+0x3ac>)
 8007752:	fba3 2302 	umull	r2, r3, r3, r2
 8007756:	095b      	lsrs	r3, r3, #5
 8007758:	011e      	lsls	r6, r3, #4
 800775a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800775c:	4618      	mov	r0, r3
 800775e:	f04f 0100 	mov.w	r1, #0
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	1894      	adds	r4, r2, r2
 8007768:	60bc      	str	r4, [r7, #8]
 800776a:	415b      	adcs	r3, r3
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007772:	1812      	adds	r2, r2, r0
 8007774:	eb41 0303 	adc.w	r3, r1, r3
 8007778:	f04f 0400 	mov.w	r4, #0
 800777c:	f04f 0500 	mov.w	r5, #0
 8007780:	00dd      	lsls	r5, r3, #3
 8007782:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007786:	00d4      	lsls	r4, r2, #3
 8007788:	4622      	mov	r2, r4
 800778a:	462b      	mov	r3, r5
 800778c:	1814      	adds	r4, r2, r0
 800778e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007790:	414b      	adcs	r3, r1
 8007792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4618      	mov	r0, r3
 800779a:	f04f 0100 	mov.w	r1, #0
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	008b      	lsls	r3, r1, #2
 80077a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077ac:	0082      	lsls	r2, r0, #2
 80077ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80077b2:	f7f8 fd35 	bl	8000220 <__aeabi_uldivmod>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4b2d      	ldr	r3, [pc, #180]	; (8007870 <UART_SetConfig+0x3ac>)
 80077bc:	fba3 1302 	umull	r1, r3, r3, r2
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	2164      	movs	r1, #100	; 0x64
 80077c4:	fb01 f303 	mul.w	r3, r1, r3
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	3332      	adds	r3, #50	; 0x32
 80077ce:	4a28      	ldr	r2, [pc, #160]	; (8007870 <UART_SetConfig+0x3ac>)
 80077d0:	fba2 2303 	umull	r2, r3, r2, r3
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077da:	441e      	add	r6, r3
 80077dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077de:	4618      	mov	r0, r3
 80077e0:	f04f 0100 	mov.w	r1, #0
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	1894      	adds	r4, r2, r2
 80077ea:	603c      	str	r4, [r7, #0]
 80077ec:	415b      	adcs	r3, r3
 80077ee:	607b      	str	r3, [r7, #4]
 80077f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f4:	1812      	adds	r2, r2, r0
 80077f6:	eb41 0303 	adc.w	r3, r1, r3
 80077fa:	f04f 0400 	mov.w	r4, #0
 80077fe:	f04f 0500 	mov.w	r5, #0
 8007802:	00dd      	lsls	r5, r3, #3
 8007804:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007808:	00d4      	lsls	r4, r2, #3
 800780a:	4622      	mov	r2, r4
 800780c:	462b      	mov	r3, r5
 800780e:	eb12 0a00 	adds.w	sl, r2, r0
 8007812:	eb43 0b01 	adc.w	fp, r3, r1
 8007816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	4618      	mov	r0, r3
 800781c:	f04f 0100 	mov.w	r1, #0
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	008b      	lsls	r3, r1, #2
 800782a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800782e:	0082      	lsls	r2, r0, #2
 8007830:	4650      	mov	r0, sl
 8007832:	4659      	mov	r1, fp
 8007834:	f7f8 fcf4 	bl	8000220 <__aeabi_uldivmod>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <UART_SetConfig+0x3ac>)
 800783e:	fba3 1302 	umull	r1, r3, r3, r2
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	2164      	movs	r1, #100	; 0x64
 8007846:	fb01 f303 	mul.w	r3, r1, r3
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	3332      	adds	r3, #50	; 0x32
 8007850:	4a07      	ldr	r2, [pc, #28]	; (8007870 <UART_SetConfig+0x3ac>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	f003 020f 	and.w	r2, r3, #15
 800785c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4432      	add	r2, r6
 8007862:	609a      	str	r2, [r3, #8]
}
 8007864:	bf00      	nop
 8007866:	377c      	adds	r7, #124	; 0x7c
 8007868:	46bd      	mov	sp, r7
 800786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786e:	bf00      	nop
 8007870:	51eb851f 	.word	0x51eb851f

08007874 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4b2f      	ldr	r3, [pc, #188]	; (8007950 <FSMC_NORSRAM_Init+0xdc>)
 8007892:	4013      	ands	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800789e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80078a4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80078aa:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80078b0:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80078b6:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80078bc:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80078c2:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80078c8:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80078ce:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80078d4:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80078da:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80078e0:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80078e6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d103      	bne.n	80078fe <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fc:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68f9      	ldr	r1, [r7, #12]
 8007906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007912:	d10a      	bne.n	800792a <FSMC_NORSRAM_Init+0xb6>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d006      	beq.n	800792a <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d006      	beq.n	8007940 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	ffc00480 	.word	0xffc00480

08007954 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007976:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007982:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800798a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007992:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	3b01      	subs	r3, #1
 800799a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800799c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	3b02      	subs	r3, #2
 80079a4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079a6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079ac:	4313      	orrs	r3, r2
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6979      	ldr	r1, [r7, #20]
 80079bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079cc:	d10e      	bne.n	80079ec <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079d6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	3b01      	subs	r3, #1
 80079de:	051b      	lsls	r3, r3, #20
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a14:	d122      	bne.n	8007a5c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a32:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a3a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a42:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a48:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6979      	ldr	r1, [r7, #20]
 8007a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a5a:	e005      	b.n	8007a68 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	cff00000 	.word	0xcff00000

08007a7c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	f107 001c 	add.w	r0, r7, #28
 8007a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007a92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007a94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007a96:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007a9a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007a9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007aa2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007aa6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007ab6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	b004      	add	sp, #16
 8007ad0:	4770      	bx	lr

08007ad2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2203      	movs	r2, #3
 8007af8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007afa:	2002      	movs	r0, #2
 8007afc:	f7fa f91e 	bl	8001d3c <HAL_Delay>
  
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0303 	and.w	r3, r3, #3
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b085      	sub	sp, #20
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007b44:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007b4a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007b50:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007b60:	f023 030f 	bic.w	r3, r3, #15
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	b2db      	uxtb	r3, r3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
}  
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b085      	sub	sp, #20
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007be0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007be6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007bec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0

}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b088      	sub	sp, #32
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007c20:	2310      	movs	r3, #16
 8007c22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff ff74 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c42:	2110      	movs	r1, #16
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f979 	bl	8007f3c <SDMMC_GetCmdResp1>
 8007c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b08a      	sub	sp, #40	; 0x28
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007c66:	2307      	movs	r3, #7
 8007c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c6a:	2340      	movs	r3, #64	; 0x40
 8007c6c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c76:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c78:	f107 0310 	add.w	r3, r7, #16
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff ff51 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c88:	2107      	movs	r1, #7
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 f956 	bl	8007f3c <SDMMC_GetCmdResp1>
 8007c90:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3728      	adds	r7, #40	; 0x28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff ff30 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f90c 	bl	8007ee4 <SDMMC_GetCmdError>
 8007ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cce:	69fb      	ldr	r3, [r7, #28]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007ce0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cea:	2340      	movs	r3, #64	; 0x40
 8007cec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cf8:	f107 0308 	add.w	r3, r7, #8
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff ff11 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fb03 	bl	8008310 <SDMMC_GetCmdResp7>
 8007d0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3720      	adds	r7, #32
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b088      	sub	sp, #32
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007d24:	2337      	movs	r3, #55	; 0x37
 8007d26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d28:	2340      	movs	r3, #64	; 0x40
 8007d2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fef2 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d46:	2137      	movs	r1, #55	; 0x37
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f8f7 	bl	8007f3c <SDMMC_GetCmdResp1>
 8007d4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d50:	69fb      	ldr	r3, [r7, #28]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3720      	adds	r7, #32
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b088      	sub	sp, #32
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007d70:	2329      	movs	r3, #41	; 0x29
 8007d72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d74:	2340      	movs	r3, #64	; 0x40
 8007d76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d82:	f107 0308 	add.w	r3, r7, #8
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fecc 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa0a 	bl	80081a8 <SDMMC_GetCmdResp3>
 8007d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d96:	69fb      	ldr	r3, [r7, #28]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007dae:	2306      	movs	r3, #6
 8007db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007db2:	2340      	movs	r3, #64	; 0x40
 8007db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dc0:	f107 0308 	add.w	r3, r7, #8
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff fead 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd0:	2106      	movs	r1, #6
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f8b2 	bl	8007f3c <SDMMC_GetCmdResp1>
 8007dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dda:	69fb      	ldr	r3, [r7, #28]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3720      	adds	r7, #32
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007df0:	2333      	movs	r3, #51	; 0x33
 8007df2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007df4:	2340      	movs	r3, #64	; 0x40
 8007df6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fe8c 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e12:	2133      	movs	r1, #51	; 0x33
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f891 	bl	8007f3c <SDMMC_GetCmdResp1>
 8007e1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b088      	sub	sp, #32
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007e32:	2302      	movs	r3, #2
 8007e34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007e36:	23c0      	movs	r3, #192	; 0xc0
 8007e38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e44:	f107 0308 	add.w	r3, r7, #8
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff fe6b 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f961 	bl	8008118 <SDMMC_GetCmdResp2>
 8007e56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e58:	69fb      	ldr	r3, [r7, #28]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3720      	adds	r7, #32
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b088      	sub	sp, #32
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007e70:	2309      	movs	r3, #9
 8007e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007e74:	23c0      	movs	r3, #192	; 0xc0
 8007e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e82:	f107 0308 	add.w	r3, r7, #8
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff fe4c 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f942 	bl	8008118 <SDMMC_GetCmdResp2>
 8007e94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e96:	69fb      	ldr	r3, [r7, #28]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3720      	adds	r7, #32
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eb2:	2340      	movs	r3, #64	; 0x40
 8007eb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ebe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ec0:	f107 0308 	add.w	r3, r7, #8
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff fe2d 	bl	8007b26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	2103      	movs	r1, #3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f9a7 	bl	8008224 <SDMMC_GetCmdResp6>
 8007ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3720      	adds	r7, #32
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007eec:	4b11      	ldr	r3, [pc, #68]	; (8007f34 <SDMMC_GetCmdError+0x50>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a11      	ldr	r2, [pc, #68]	; (8007f38 <SDMMC_GetCmdError+0x54>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	0a5b      	lsrs	r3, r3, #9
 8007ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efc:	fb02 f303 	mul.w	r3, r2, r3
 8007f00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	1e5a      	subs	r2, r3, #1
 8007f06:	60fa      	str	r2, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f10:	e009      	b.n	8007f26 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f1      	beq.n	8007f02 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	22c5      	movs	r2, #197	; 0xc5
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20000000 	.word	0x20000000
 8007f38:	10624dd3 	.word	0x10624dd3

08007f3c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	460b      	mov	r3, r1
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f4a:	4b70      	ldr	r3, [pc, #448]	; (800810c <SDMMC_GetCmdResp1+0x1d0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a70      	ldr	r2, [pc, #448]	; (8008110 <SDMMC_GetCmdResp1+0x1d4>)
 8007f50:	fba2 2303 	umull	r2, r3, r2, r3
 8007f54:	0a5a      	lsrs	r2, r3, #9
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	fb02 f303 	mul.w	r3, r2, r3
 8007f5c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	1e5a      	subs	r2, r3, #1
 8007f62:	61fa      	str	r2, [r7, #28]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d102      	bne.n	8007f6e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f6c:	e0c9      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0ef      	beq.n	8007f5e <SDMMC_GetCmdResp1+0x22>
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1ea      	bne.n	8007f5e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2204      	movs	r2, #4
 8007f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f9a:	2304      	movs	r3, #4
 8007f9c:	e0b1      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e0a6      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	22c5      	movs	r2, #197	; 0xc5
 8007fb8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7ff fddd 	bl	8007b7a <SDIO_GetCommandResponse>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	7afb      	ldrb	r3, [r7, #11]
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d001      	beq.n	8007fce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e099      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007fce:	2100      	movs	r1, #0
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fddf 	bl	8007b94 <SDIO_GetResponse>
 8007fd6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4b4e      	ldr	r3, [pc, #312]	; (8008114 <SDMMC_GetCmdResp1+0x1d8>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e08d      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	da02      	bge.n	8007ff2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ff0:	e087      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007ffc:	2340      	movs	r3, #64	; 0x40
 8007ffe:	e080      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800800a:	2380      	movs	r3, #128	; 0x80
 800800c:	e079      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800801c:	e071      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800802c:	e069      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803c:	e061      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800804c:	e059      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800805c:	e051      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800806c:	e049      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800807c:	e041      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800808c:	e039      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800809c:	e031      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80080a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80080ac:	e029      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80080b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80080bc:	e021      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80080c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80080cc:	e019      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80080d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80080dc:	e011      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80080e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80080ec:	e009      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80080f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80080fc:	e001      	b.n	8008102 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80080fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000000 	.word	0x20000000
 8008110:	10624dd3 	.word	0x10624dd3
 8008114:	fdffe008 	.word	0xfdffe008

08008118 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008120:	4b1f      	ldr	r3, [pc, #124]	; (80081a0 <SDMMC_GetCmdResp2+0x88>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <SDMMC_GetCmdResp2+0x8c>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	0a5b      	lsrs	r3, r3, #9
 800812c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008130:	fb02 f303 	mul.w	r3, r2, r3
 8008134:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	1e5a      	subs	r2, r3, #1
 800813a:	60fa      	str	r2, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d102      	bne.n	8008146 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008140:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008144:	e026      	b.n	8008194 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0ef      	beq.n	8008136 <SDMMC_GetCmdResp2+0x1e>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1ea      	bne.n	8008136 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2204      	movs	r2, #4
 8008170:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008172:	2304      	movs	r3, #4
 8008174:	e00e      	b.n	8008194 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008188:	2301      	movs	r3, #1
 800818a:	e003      	b.n	8008194 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	22c5      	movs	r2, #197	; 0xc5
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	20000000 	.word	0x20000000
 80081a4:	10624dd3 	.word	0x10624dd3

080081a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081b0:	4b1a      	ldr	r3, [pc, #104]	; (800821c <SDMMC_GetCmdResp3+0x74>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a1a      	ldr	r2, [pc, #104]	; (8008220 <SDMMC_GetCmdResp3+0x78>)
 80081b6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ba:	0a5b      	lsrs	r3, r3, #9
 80081bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c0:	fb02 f303 	mul.w	r3, r2, r3
 80081c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	1e5a      	subs	r2, r3, #1
 80081ca:	60fa      	str	r2, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d102      	bne.n	80081d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081d4:	e01b      	b.n	800820e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0ef      	beq.n	80081c6 <SDMMC_GetCmdResp3+0x1e>
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ea      	bne.n	80081c6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2204      	movs	r2, #4
 8008200:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008202:	2304      	movs	r3, #4
 8008204:	e003      	b.n	800820e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	22c5      	movs	r2, #197	; 0xc5
 800820a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	20000000 	.word	0x20000000
 8008220:	10624dd3 	.word	0x10624dd3

08008224 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	460b      	mov	r3, r1
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008232:	4b35      	ldr	r3, [pc, #212]	; (8008308 <SDMMC_GetCmdResp6+0xe4>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a35      	ldr	r2, [pc, #212]	; (800830c <SDMMC_GetCmdResp6+0xe8>)
 8008238:	fba2 2303 	umull	r2, r3, r2, r3
 800823c:	0a5b      	lsrs	r3, r3, #9
 800823e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	1e5a      	subs	r2, r3, #1
 800824c:	61fa      	str	r2, [r7, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008252:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008256:	e052      	b.n	80082fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0ef      	beq.n	8008248 <SDMMC_GetCmdResp6+0x24>
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1ea      	bne.n	8008248 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	2b00      	cmp	r3, #0
 800827c:	d004      	beq.n	8008288 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2204      	movs	r2, #4
 8008282:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008284:	2304      	movs	r3, #4
 8008286:	e03a      	b.n	80082fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800829a:	2301      	movs	r3, #1
 800829c:	e02f      	b.n	80082fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff fc6b 	bl	8007b7a <SDIO_GetCommandResponse>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d001      	beq.n	80082b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e025      	b.n	80082fe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	22c5      	movs	r2, #197	; 0xc5
 80082b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80082b8:	2100      	movs	r1, #0
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff fc6a 	bl	8007b94 <SDIO_GetResponse>
 80082c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d106      	bne.n	80082da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	0c1b      	lsrs	r3, r3, #16
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	e011      	b.n	80082fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80082e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082e8:	e009      	b.n	80082fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80082f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082f8:	e001      	b.n	80082fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80082fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000000 	.word	0x20000000
 800830c:	10624dd3 	.word	0x10624dd3

08008310 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008318:	4b22      	ldr	r3, [pc, #136]	; (80083a4 <SDMMC_GetCmdResp7+0x94>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a22      	ldr	r2, [pc, #136]	; (80083a8 <SDMMC_GetCmdResp7+0x98>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	0a5b      	lsrs	r3, r3, #9
 8008324:	f241 3288 	movw	r2, #5000	; 0x1388
 8008328:	fb02 f303 	mul.w	r3, r2, r3
 800832c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1e5a      	subs	r2, r3, #1
 8008332:	60fa      	str	r2, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800833c:	e02c      	b.n	8008398 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008342:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0ef      	beq.n	800832e <SDMMC_GetCmdResp7+0x1e>
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1ea      	bne.n	800832e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	d004      	beq.n	800836e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2204      	movs	r2, #4
 8008368:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800836a:	2304      	movs	r3, #4
 800836c:	e014      	b.n	8008398 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008380:	2301      	movs	r3, #1
 8008382:	e009      	b.n	8008398 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2240      	movs	r2, #64	; 0x40
 8008394:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008396:	2300      	movs	r3, #0
  
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	20000000 	.word	0x20000000
 80083a8:	10624dd3 	.word	0x10624dd3

080083ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083ac:	b084      	sub	sp, #16
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	f107 001c 	add.w	r0, r7, #28
 80083ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d122      	bne.n	800840a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80083d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d105      	bne.n	80083fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f94a 	bl	8008698 <USB_CoreReset>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]
 8008408:	e01a      	b.n	8008440 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f93e 	bl	8008698 <USB_CoreReset>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
 8008432:	e005      	b.n	8008440 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	2b01      	cmp	r3, #1
 8008444:	d10b      	bne.n	800845e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f043 0206 	orr.w	r2, r3, #6
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f043 0220 	orr.w	r2, r3, #32
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800846a:	b004      	add	sp, #16
 800846c:	4770      	bx	lr

0800846e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f043 0201 	orr.w	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f023 0201 	bic.w	r2, r3, #1
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d106      	bne.n	80084de <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60da      	str	r2, [r3, #12]
 80084dc:	e00b      	b.n	80084f6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d106      	bne.n	80084f2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	60da      	str	r2, [r3, #12]
 80084f0:	e001      	b.n	80084f6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e003      	b.n	80084fe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80084f6:	2032      	movs	r0, #50	; 0x32
 80084f8:	f7f9 fc20 	bl	8001d3c <HAL_Delay>

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	019b      	lsls	r3, r3, #6
 800851a:	f043 0220 	orr.w	r2, r3, #32
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4a09      	ldr	r2, [pc, #36]	; (8008550 <USB_FlushTxFifo+0x48>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d901      	bls.n	8008534 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e006      	b.n	8008542 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f003 0320 	and.w	r3, r3, #32
 800853c:	2b20      	cmp	r3, #32
 800853e:	d0f0      	beq.n	8008522 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	00030d40 	.word	0x00030d40

08008554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2210      	movs	r2, #16
 8008564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4a09      	ldr	r2, [pc, #36]	; (8008594 <USB_FlushRxFifo+0x40>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d901      	bls.n	8008578 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e006      	b.n	8008586 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b10      	cmp	r3, #16
 8008582:	d0f0      	beq.n	8008566 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	00030d40 	.word	0x00030d40

08008598 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008598:	b480      	push	{r7}
 800859a:	b089      	sub	sp, #36	; 0x24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	4611      	mov	r1, r2
 80085a4:	461a      	mov	r2, r3
 80085a6:	460b      	mov	r3, r1
 80085a8:	71fb      	strb	r3, [r7, #7]
 80085aa:	4613      	mov	r3, r2
 80085ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80085b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d11a      	bne.n	80085f4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085be:	88bb      	ldrh	r3, [r7, #4]
 80085c0:	3303      	adds	r3, #3
 80085c2:	089b      	lsrs	r3, r3, #2
 80085c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085c6:	2300      	movs	r3, #0
 80085c8:	61bb      	str	r3, [r7, #24]
 80085ca:	e00f      	b.n	80085ec <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	031a      	lsls	r2, r3, #12
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d8:	461a      	mov	r2, r3
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	3304      	adds	r3, #4
 80085e4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	3301      	adds	r3, #1
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d3eb      	bcc.n	80085cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3724      	adds	r7, #36	; 0x24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008602:	b480      	push	{r7}
 8008604:	b089      	sub	sp, #36	; 0x24
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	4613      	mov	r3, r2
 800860e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	3303      	adds	r3, #3
 800861c:	089b      	lsrs	r3, r3, #2
 800861e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008620:	2300      	movs	r3, #0
 8008622:	61bb      	str	r3, [r7, #24]
 8008624:	e00b      	b.n	800863e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	601a      	str	r2, [r3, #0]
    pDest++;
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	3304      	adds	r3, #4
 8008636:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	3301      	adds	r3, #1
 800863c:	61bb      	str	r3, [r7, #24]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	429a      	cmp	r2, r3
 8008644:	d3ef      	bcc.n	8008626 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008646:	69fb      	ldr	r3, [r7, #28]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3724      	adds	r7, #36	; 0x24
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4013      	ands	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800866c:	68fb      	ldr	r3, [r7, #12]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	f003 0301 	and.w	r3, r3, #1
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
	...

08008698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4a13      	ldr	r2, [pc, #76]	; (80086fc <USB_CoreReset+0x64>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d901      	bls.n	80086b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e01b      	b.n	80086ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	daf2      	bge.n	80086a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f043 0201 	orr.w	r2, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <USB_CoreReset+0x64>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d901      	bls.n	80086e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e006      	b.n	80086ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d0f0      	beq.n	80086ce <USB_CoreReset+0x36>

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	00030d40 	.word	0x00030d40

08008700 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008700:	b084      	sub	sp, #16
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	f107 001c 	add.w	r0, r7, #28
 800870e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800871c:	461a      	mov	r2, r3
 800871e:	2300      	movs	r3, #0
 8008720:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008742:	2b00      	cmp	r3, #0
 8008744:	d018      	beq.n	8008778 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10a      	bne.n	8008762 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800875a:	f043 0304 	orr.w	r3, r3, #4
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	e014      	b.n	800878c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008770:	f023 0304 	bic.w	r3, r3, #4
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	e009      	b.n	800878c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008786:	f023 0304 	bic.w	r3, r3, #4
 800878a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800878c:	2110      	movs	r1, #16
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff feba 	bl	8008508 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff fedd 	bl	8008554 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	e015      	b.n	80087cc <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ac:	461a      	mov	r2, r3
 80087ae:	f04f 33ff 	mov.w	r3, #4294967295
 80087b2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c0:	461a      	mov	r2, r3
 80087c2:	2300      	movs	r3, #0
 80087c4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3301      	adds	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d3e5      	bcc.n	80087a0 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80087d4:	2101      	movs	r1, #1
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f8ac 	bl	8008934 <USB_DriveVbus>

  HAL_Delay(200U);
 80087dc:	20c8      	movs	r0, #200	; 0xc8
 80087de:	f7f9 faad 	bl	8001d3c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008802:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a14      	ldr	r2, [pc, #80]	; (8008858 <USB_HostInit+0x158>)
 8008808:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a13      	ldr	r2, [pc, #76]	; (800885c <USB_HostInit+0x15c>)
 800880e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008812:	e009      	b.n	8008828 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2280      	movs	r2, #128	; 0x80
 8008818:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a10      	ldr	r2, [pc, #64]	; (8008860 <USB_HostInit+0x160>)
 800881e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a10      	ldr	r2, [pc, #64]	; (8008864 <USB_HostInit+0x164>)
 8008824:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	2b00      	cmp	r3, #0
 800882c:	d105      	bne.n	800883a <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	f043 0210 	orr.w	r2, r3, #16
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699a      	ldr	r2, [r3, #24]
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <USB_HostInit+0x168>)
 8008840:	4313      	orrs	r3, r2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008852:	b004      	add	sp, #16
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	01000200 	.word	0x01000200
 800885c:	00e00300 	.word	0x00e00300
 8008860:	00600080 	.word	0x00600080
 8008864:	004000e0 	.word	0x004000e0
 8008868:	a3200008 	.word	0xa3200008

0800886c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800888a:	f023 0303 	bic.w	r3, r3, #3
 800888e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088a4:	4313      	orrs	r3, r2
 80088a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d107      	bne.n	80088be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088b4:	461a      	mov	r2, r3
 80088b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80088ba:	6053      	str	r3, [r2, #4]
 80088bc:	e009      	b.n	80088d2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d106      	bne.n	80088d2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ca:	461a      	mov	r2, r3
 80088cc:	f241 7370 	movw	r3, #6000	; 0x1770
 80088d0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008900:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800890a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800890e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008910:	2064      	movs	r0, #100	; 0x64
 8008912:	f7f9 fa13 	bl	8001d3c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800891e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008922:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008924:	200a      	movs	r0, #10
 8008926:	f7f9 fa09 	bl	8001d3c <HAL_Delay>

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008958:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d109      	bne.n	8008978 <USB_DriveVbus+0x44>
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d106      	bne.n	8008978 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008972:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008976:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800897e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008982:	d109      	bne.n	8008998 <USB_DriveVbus+0x64>
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008996:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	0c5b      	lsrs	r3, r3, #17
 80089c4:	f003 0303 	and.w	r3, r3, #3
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	b29b      	uxth	r3, r3
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
	...

080089f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	461a      	mov	r2, r3
 8008a06:	4603      	mov	r3, r0
 8008a08:	70fb      	strb	r3, [r7, #3]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70bb      	strb	r3, [r7, #2]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a26:	461a      	mov	r2, r3
 8008a28:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d87e      	bhi.n	8008b34 <USB_HC_Init+0x13c>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <USB_HC_Init+0x44>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a4d 	.word	0x08008a4d
 8008a40:	08008af7 	.word	0x08008af7
 8008a44:	08008a4d 	.word	0x08008a4d
 8008a48:	08008ab9 	.word	0x08008ab9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f240 439d 	movw	r3, #1181	; 0x49d
 8008a5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008a60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da10      	bge.n	8008a8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	0151      	lsls	r1, r2, #5
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	440a      	add	r2, r1
 8008a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a86:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008a88:	e057      	b.n	8008b3a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d051      	beq.n	8008b3a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	0151      	lsls	r1, r2, #5
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	440a      	add	r2, r1
 8008aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ab0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ab4:	60d3      	str	r3, [r2, #12]
      break;
 8008ab6:	e040      	b.n	8008b3a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f240 639d 	movw	r3, #1693	; 0x69d
 8008aca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008acc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	da34      	bge.n	8008b3e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008af4:	e023      	b.n	8008b3e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008af6:	78fb      	ldrb	r3, [r7, #3]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b02:	461a      	mov	r2, r3
 8008b04:	f240 2325 	movw	r3, #549	; 0x225
 8008b08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da17      	bge.n	8008b42 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b2c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008b30:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008b32:	e006      	b.n	8008b42 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	77fb      	strb	r3, [r7, #31]
      break;
 8008b38:	e004      	b.n	8008b44 <USB_HC_Init+0x14c>
      break;
 8008b3a:	bf00      	nop
 8008b3c:	e002      	b.n	8008b44 <USB_HC_Init+0x14c>
      break;
 8008b3e:	bf00      	nop
 8008b40:	e000      	b.n	8008b44 <USB_HC_Init+0x14c>
      break;
 8008b42:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b4a:	699a      	ldr	r2, [r3, #24]
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	2101      	movs	r1, #1
 8008b54:	fa01 f303 	lsl.w	r3, r1, r3
 8008b58:	6939      	ldr	r1, [r7, #16]
 8008b5a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008b6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	da03      	bge.n	8008b7e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	e001      	b.n	8008b82 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff ff0f 	bl	80089a6 <USB_GetHostSpeed>
 8008b88:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008b8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d106      	bne.n	8008ba0 <USB_HC_Init+0x1a8>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d003      	beq.n	8008ba0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	e001      	b.n	8008ba4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ba4:	787b      	ldrb	r3, [r7, #1]
 8008ba6:	059b      	lsls	r3, r3, #22
 8008ba8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008bac:	78bb      	ldrb	r3, [r7, #2]
 8008bae:	02db      	lsls	r3, r3, #11
 8008bb0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bb4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bba:	049b      	lsls	r3, r3, #18
 8008bbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008bc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bc2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008bc8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008bce:	78fb      	ldrb	r3, [r7, #3]
 8008bd0:	0159      	lsls	r1, r3, #5
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	440b      	add	r3, r1
 8008bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bda:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008be0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008be2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d10f      	bne.n	8008c0a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08c      	sub	sp, #48	; 0x30
 8008c18:	af02      	add	r7, sp, #8
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d02d      	beq.n	8008c9a <USB_HC_StartXfer+0x86>
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	791b      	ldrb	r3, [r3, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d129      	bne.n	8008c9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d117      	bne.n	8008c7c <USB_HC_StartXfer+0x68>
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	79db      	ldrb	r3, [r3, #7]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <USB_HC_StartXfer+0x48>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	79db      	ldrb	r3, [r3, #7]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d10f      	bne.n	8008c7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	0151      	lsls	r1, r2, #5
 8008c6e:	6a3a      	ldr	r2, [r7, #32]
 8008c70:	440a      	add	r2, r1
 8008c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10b      	bne.n	8008c9a <USB_HC_StartXfer+0x86>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	795b      	ldrb	r3, [r3, #5]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d107      	bne.n	8008c9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fa2f 	bl	80090f4 <USB_DoPing>
      return HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e0f8      	b.n	8008e8c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d018      	beq.n	8008cd4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	8912      	ldrh	r2, [r2, #8]
 8008caa:	4413      	add	r3, r2
 8008cac:	3b01      	subs	r3, #1
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	8912      	ldrh	r2, [r2, #8]
 8008cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008cb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008cba:	8b7b      	ldrh	r3, [r7, #26]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d90b      	bls.n	8008cd8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008cc0:	8b7b      	ldrh	r3, [r7, #26]
 8008cc2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	8912      	ldrh	r2, [r2, #8]
 8008cca:	fb02 f203 	mul.w	r2, r2, r3
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	611a      	str	r2, [r3, #16]
 8008cd2:	e001      	b.n	8008cd8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	78db      	ldrb	r3, [r3, #3]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d007      	beq.n	8008cf0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	8912      	ldrh	r2, [r2, #8]
 8008ce6:	fb02 f203 	mul.w	r2, r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	611a      	str	r2, [r3, #16]
 8008cee:	e003      	b.n	8008cf8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	695a      	ldr	r2, [r3, #20]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d02:	04d9      	lsls	r1, r3, #19
 8008d04:	4b63      	ldr	r3, [pc, #396]	; (8008e94 <USB_HC_StartXfer+0x280>)
 8008d06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	7a9b      	ldrb	r3, [r3, #10]
 8008d0e:	075b      	lsls	r3, r3, #29
 8008d10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d14:	69f9      	ldr	r1, [r7, #28]
 8008d16:	0148      	lsls	r0, r1, #5
 8008d18:	6a39      	ldr	r1, [r7, #32]
 8008d1a:	4401      	add	r1, r0
 8008d1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	68d9      	ldr	r1, [r3, #12]
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3a:	460a      	mov	r2, r1
 8008d3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bf0c      	ite	eq
 8008d4e:	2301      	moveq	r3, #1
 8008d50:	2300      	movne	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	0151      	lsls	r1, r2, #5
 8008d68:	6a3a      	ldr	r2, [r7, #32]
 8008d6a:	440a      	add	r2, r1
 8008d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	7e7b      	ldrb	r3, [r7, #25]
 8008d86:	075b      	lsls	r3, r3, #29
 8008d88:	69f9      	ldr	r1, [r7, #28]
 8008d8a:	0148      	lsls	r0, r1, #5
 8008d8c:	6a39      	ldr	r1, [r7, #32]
 8008d8e:	4401      	add	r1, r0
 8008d90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008d94:	4313      	orrs	r3, r2
 8008d96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	78db      	ldrb	r3, [r3, #3]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	e003      	b.n	8008dca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dc8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dd0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dde:	461a      	mov	r2, r3
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e04e      	b.n	8008e8c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	78db      	ldrb	r3, [r3, #3]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d149      	bne.n	8008e8a <USB_HC_StartXfer+0x276>
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d045      	beq.n	8008e8a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	79db      	ldrb	r3, [r3, #7]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d830      	bhi.n	8008e68 <USB_HC_StartXfer+0x254>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <USB_HC_StartXfer+0x1f8>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e1d 	.word	0x08008e1d
 8008e10:	08008e41 	.word	0x08008e41
 8008e14:	08008e1d 	.word	0x08008e1d
 8008e18:	08008e41 	.word	0x08008e41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	3303      	adds	r3, #3
 8008e22:	089b      	lsrs	r3, r3, #2
 8008e24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008e26:	8afa      	ldrh	r2, [r7, #22]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d91c      	bls.n	8008e6c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f043 0220 	orr.w	r2, r3, #32
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e3e:	e015      	b.n	8008e6c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	3303      	adds	r3, #3
 8008e46:	089b      	lsrs	r3, r3, #2
 8008e48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008e4a:	8afa      	ldrh	r2, [r7, #22]
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d90a      	bls.n	8008e70 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	619a      	str	r2, [r3, #24]
        }
        break;
 8008e66:	e003      	b.n	8008e70 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008e68:	bf00      	nop
 8008e6a:	e002      	b.n	8008e72 <USB_HC_StartXfer+0x25e>
        break;
 8008e6c:	bf00      	nop
 8008e6e:	e000      	b.n	8008e72 <USB_HC_StartXfer+0x25e>
        break;
 8008e70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	68d9      	ldr	r1, [r3, #12]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	785a      	ldrb	r2, [r3, #1]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2000      	movs	r0, #0
 8008e82:	9000      	str	r0, [sp, #0]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff fb87 	bl	8008598 <USB_WritePacket>
  }

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3728      	adds	r7, #40	; 0x28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	1ff80000 	.word	0x1ff80000

08008e98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	b29b      	uxth	r3, r3
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b089      	sub	sp, #36	; 0x24
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008eca:	78fb      	ldrb	r3, [r7, #3]
 8008ecc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	0c9b      	lsrs	r3, r3, #18
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	0fdb      	lsrs	r3, r3, #31
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d104      	bne.n	8008f14 <USB_HC_Halt+0x5a>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	e0e8      	b.n	80090e6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <USB_HC_Halt+0x66>
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d173      	bne.n	8009008 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f3e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f040 80cb 	bne.w	80090e4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d143      	bne.n	8008fe2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f78:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f98:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fb8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	61fb      	str	r3, [r7, #28]
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fc6:	d81d      	bhi.n	8009004 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fde:	d0ec      	beq.n	8008fba <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fe0:	e080      	b.n	80090e4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009000:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009002:	e06f      	b.n	80090e4 <USB_HC_Halt+0x22a>
            break;
 8009004:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009006:	e06d      	b.n	80090e4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	4413      	add	r3, r2
 8009010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	440a      	add	r2, r1
 800901e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009026:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d143      	bne.n	80090c0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	440a      	add	r2, r1
 800904e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009052:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009056:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	4413      	add	r3, r2
 8009060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	0151      	lsls	r1, r2, #5
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	440a      	add	r2, r1
 800906e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009076:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	4413      	add	r3, r2
 8009080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	0151      	lsls	r1, r2, #5
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	440a      	add	r2, r1
 800908e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009096:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	3301      	adds	r3, #1
 800909c:	61fb      	str	r3, [r7, #28]
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090a4:	d81d      	bhi.n	80090e2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090bc:	d0ec      	beq.n	8009098 <USB_HC_Halt+0x1de>
 80090be:	e011      	b.n	80090e4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	0151      	lsls	r1, r2, #5
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	440a      	add	r2, r1
 80090d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	e000      	b.n	80090e4 <USB_HC_Halt+0x22a>
          break;
 80090e2:	bf00      	nop
    }
  }

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3724      	adds	r7, #36	; 0x24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009108:	2301      	movs	r3, #1
 800910a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	04da      	lsls	r2, r3, #19
 8009110:	4b15      	ldr	r3, [pc, #84]	; (8009168 <USB_DoPing+0x74>)
 8009112:	4013      	ands	r3, r2
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	0151      	lsls	r1, r2, #5
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	440a      	add	r2, r1
 800911c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009124:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	4413      	add	r3, r2
 800912e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800913c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009144:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	4413      	add	r3, r2
 800914e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009152:	461a      	mov	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	1ff80000 	.word	0x1ff80000

0800916c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff f987 	bl	8008490 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009182:	2110      	movs	r1, #16
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7ff f9bf 	bl	8008508 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff f9e2 	bl	8008554 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009190:	2300      	movs	r3, #0
 8009192:	613b      	str	r3, [r7, #16]
 8009194:	e01f      	b.n	80091d6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4413      	add	r3, r2
 800919e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ca:	461a      	mov	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	3301      	adds	r3, #1
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b0f      	cmp	r3, #15
 80091da:	d9dc      	bls.n	8009196 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80091dc:	2300      	movs	r3, #0
 80091de:	613b      	str	r3, [r7, #16]
 80091e0:	e034      	b.n	800924c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009200:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009208:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009216:	461a      	mov	r2, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	3301      	adds	r3, #1
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009228:	d80c      	bhi.n	8009244 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4413      	add	r3, r2
 8009232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800923c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009240:	d0ec      	beq.n	800921c <USB_StopHost+0xb0>
 8009242:	e000      	b.n	8009246 <USB_StopHost+0xda>
        break;
 8009244:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	3301      	adds	r3, #1
 800924a:	613b      	str	r3, [r7, #16]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b0f      	cmp	r3, #15
 8009250:	d9c7      	bls.n	80091e2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009258:	461a      	mov	r2, r3
 800925a:	f04f 33ff 	mov.w	r3, #4294967295
 800925e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff f900 	bl	800846e <USB_EnableGlobalInt>

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009278:	b590      	push	{r4, r7, lr}
 800927a:	b089      	sub	sp, #36	; 0x24
 800927c:	af04      	add	r7, sp, #16
 800927e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009280:	2301      	movs	r3, #1
 8009282:	2202      	movs	r2, #2
 8009284:	2102      	movs	r1, #2
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fcb2 	bl	8009bf0 <USBH_FindInterface>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	2bff      	cmp	r3, #255	; 0xff
 8009294:	d002      	beq.n	800929c <USBH_CDC_InterfaceInit+0x24>
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d901      	bls.n	80092a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800929c:	2302      	movs	r3, #2
 800929e:	e13d      	b.n	800951c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fc87 	bl	8009bb8 <USBH_SelectInterface>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80092b4:	2302      	movs	r3, #2
 80092b6:	e131      	b.n	800951c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80092be:	2050      	movs	r0, #80	; 0x50
 80092c0:	f005 fdb0 	bl	800ee24 <malloc>
 80092c4:	4603      	mov	r3, r0
 80092c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80092d8:	2302      	movs	r3, #2
 80092da:	e11f      	b.n	800951c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80092dc:	2250      	movs	r2, #80	; 0x50
 80092de:	2100      	movs	r1, #0
 80092e0:	68b8      	ldr	r0, [r7, #8]
 80092e2:	f005 fdbd 	bl	800ee60 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	211a      	movs	r1, #26
 80092ec:	fb01 f303 	mul.w	r3, r1, r3
 80092f0:	4413      	add	r3, r2
 80092f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	b25b      	sxtb	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	da15      	bge.n	800932a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	211a      	movs	r1, #26
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	4413      	add	r3, r2
 800930a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	211a      	movs	r1, #26
 800931a:	fb01 f303 	mul.w	r3, r1, r3
 800931e:	4413      	add	r3, r2
 8009320:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009324:	881a      	ldrh	r2, [r3, #0]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f002 f88c 	bl	800b44e <USBH_AllocPipe>
 8009336:	4603      	mov	r3, r0
 8009338:	461a      	mov	r2, r3
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	7819      	ldrb	r1, [r3, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	7858      	ldrb	r0, [r3, #1]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	8952      	ldrh	r2, [r2, #10]
 8009356:	9202      	str	r2, [sp, #8]
 8009358:	2203      	movs	r2, #3
 800935a:	9201      	str	r2, [sp, #4]
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	4623      	mov	r3, r4
 8009360:	4602      	mov	r2, r0
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f002 f844 	bl	800b3f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2200      	movs	r2, #0
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f005 fca9 	bl	800ecc8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009376:	2300      	movs	r3, #0
 8009378:	2200      	movs	r2, #0
 800937a:	210a      	movs	r1, #10
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fc37 	bl	8009bf0 <USBH_FindInterface>
 8009382:	4603      	mov	r3, r0
 8009384:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	2bff      	cmp	r3, #255	; 0xff
 800938a:	d002      	beq.n	8009392 <USBH_CDC_InterfaceInit+0x11a>
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d901      	bls.n	8009396 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009392:	2302      	movs	r3, #2
 8009394:	e0c2      	b.n	800951c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	211a      	movs	r1, #26
 800939c:	fb01 f303 	mul.w	r3, r1, r3
 80093a0:	4413      	add	r3, r2
 80093a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	b25b      	sxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	da16      	bge.n	80093dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	211a      	movs	r1, #26
 80093b4:	fb01 f303 	mul.w	r3, r1, r3
 80093b8:	4413      	add	r3, r2
 80093ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	211a      	movs	r1, #26
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80093d4:	881a      	ldrh	r2, [r3, #0]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	835a      	strh	r2, [r3, #26]
 80093da:	e015      	b.n	8009408 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	211a      	movs	r1, #26
 80093e2:	fb01 f303 	mul.w	r3, r1, r3
 80093e6:	4413      	add	r3, r2
 80093e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80093ec:	781a      	ldrb	r2, [r3, #0]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	211a      	movs	r1, #26
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009402:	881a      	ldrh	r2, [r3, #0]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	211a      	movs	r1, #26
 800940e:	fb01 f303 	mul.w	r3, r1, r3
 8009412:	4413      	add	r3, r2
 8009414:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	b25b      	sxtb	r3, r3
 800941c:	2b00      	cmp	r3, #0
 800941e:	da16      	bge.n	800944e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	211a      	movs	r1, #26
 8009426:	fb01 f303 	mul.w	r3, r1, r3
 800942a:	4413      	add	r3, r2
 800942c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009430:	781a      	ldrb	r2, [r3, #0]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	211a      	movs	r1, #26
 800943c:	fb01 f303 	mul.w	r3, r1, r3
 8009440:	4413      	add	r3, r2
 8009442:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009446:	881a      	ldrh	r2, [r3, #0]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	835a      	strh	r2, [r3, #26]
 800944c:	e015      	b.n	800947a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	211a      	movs	r1, #26
 8009454:	fb01 f303 	mul.w	r3, r1, r3
 8009458:	4413      	add	r3, r2
 800945a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800945e:	781a      	ldrb	r2, [r3, #0]
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	211a      	movs	r1, #26
 800946a:	fb01 f303 	mul.w	r3, r1, r3
 800946e:	4413      	add	r3, r2
 8009470:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009474:	881a      	ldrh	r2, [r3, #0]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	7b9b      	ldrb	r3, [r3, #14]
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 ffe4 	bl	800b44e <USBH_AllocPipe>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	7bdb      	ldrb	r3, [r3, #15]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 ffda 	bl	800b44e <USBH_AllocPipe>
 800949a:	4603      	mov	r3, r0
 800949c:	461a      	mov	r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	7b59      	ldrb	r1, [r3, #13]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	7b98      	ldrb	r0, [r3, #14]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	8b12      	ldrh	r2, [r2, #24]
 80094ba:	9202      	str	r2, [sp, #8]
 80094bc:	2202      	movs	r2, #2
 80094be:	9201      	str	r2, [sp, #4]
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	4623      	mov	r3, r4
 80094c4:	4602      	mov	r2, r0
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 ff92 	bl	800b3f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	7b19      	ldrb	r1, [r3, #12]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	7bd8      	ldrb	r0, [r3, #15]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	8b52      	ldrh	r2, [r2, #26]
 80094e4:	9202      	str	r2, [sp, #8]
 80094e6:	2202      	movs	r2, #2
 80094e8:	9201      	str	r2, [sp, #4]
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	4623      	mov	r3, r4
 80094ee:	4602      	mov	r2, r0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 ff7d 	bl	800b3f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	7b5b      	ldrb	r3, [r3, #13]
 8009502:	2200      	movs	r2, #0
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f005 fbde 	bl	800ecc8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	7b1b      	ldrb	r3, [r3, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f005 fbd7 	bl	800ecc8 <USBH_LL_SetToggle>

  return USBH_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	bd90      	pop	{r4, r7, pc}

08009524 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00e      	beq.n	800955c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 ff72 	bl	800b42e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 ff9d 	bl	800b490 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	7b1b      	ldrb	r3, [r3, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00e      	beq.n	8009582 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	7b1b      	ldrb	r3, [r3, #12]
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 ff5f 	bl	800b42e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	7b1b      	ldrb	r3, [r3, #12]
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 ff8a 	bl	800b490 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	7b5b      	ldrb	r3, [r3, #13]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00e      	beq.n	80095a8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	7b5b      	ldrb	r3, [r3, #13]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 ff4c 	bl	800b42e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	7b5b      	ldrb	r3, [r3, #13]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 ff77 	bl	800b490 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	4618      	mov	r0, r3
 80095be:	f005 fc39 	bl	800ee34 <free>
    phost->pActiveClass->pData = 0U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c8:	2200      	movs	r2, #0
 80095ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3340      	adds	r3, #64	; 0x40
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f8b1 	bl	8009756 <GetLineCoding>
 80095f4:	4603      	mov	r3, r0
 80095f6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d105      	bne.n	800960a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009604:	2102      	movs	r1, #2
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800960a:	7afb      	ldrb	r3, [r7, #11]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009634:	2b04      	cmp	r3, #4
 8009636:	d877      	bhi.n	8009728 <USBH_CDC_Process+0x114>
 8009638:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <USBH_CDC_Process+0x2c>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009655 	.word	0x08009655
 8009644:	0800965b 	.word	0x0800965b
 8009648:	0800968b 	.word	0x0800968b
 800964c:	080096ff 	.word	0x080096ff
 8009650:	0800970d 	.word	0x0800970d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73fb      	strb	r3, [r7, #15]
      break;
 8009658:	e06d      	b.n	8009736 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f897 	bl	8009794 <SetLineCoding>
 8009666:	4603      	mov	r3, r0
 8009668:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d104      	bne.n	800967a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009678:	e058      	b.n	800972c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d055      	beq.n	800972c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2204      	movs	r2, #4
 8009684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009688:	e050      	b.n	800972c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	3340      	adds	r3, #64	; 0x40
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f860 	bl	8009756 <GetLineCoding>
 8009696:	4603      	mov	r3, r0
 8009698:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800969a:	7bbb      	ldrb	r3, [r7, #14]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d126      	bne.n	80096ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096b2:	791b      	ldrb	r3, [r3, #4]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d13b      	bne.n	8009730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d133      	bne.n	8009730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d12b      	bne.n	8009730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d124      	bne.n	8009730 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f982 	bl	80099f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80096ec:	e020      	b.n	8009730 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d01d      	beq.n	8009730 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2204      	movs	r2, #4
 80096f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80096fc:	e018      	b.n	8009730 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f867 	bl	80097d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f8f6 	bl	80098f6 <CDC_ProcessReception>
      break;
 800970a:	e014      	b.n	8009736 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800970c:	2100      	movs	r1, #0
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 f94d 	bl	800a9ae <USBH_ClrFeature>
 8009714:	4603      	mov	r3, r0
 8009716:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10a      	bne.n	8009734 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009726:	e005      	b.n	8009734 <USBH_CDC_Process+0x120>

    default:
      break;
 8009728:	bf00      	nop
 800972a:	e004      	b.n	8009736 <USBH_CDC_Process+0x122>
      break;
 800972c:	bf00      	nop
 800972e:	e002      	b.n	8009736 <USBH_CDC_Process+0x122>
      break;
 8009730:	bf00      	nop
 8009732:	e000      	b.n	8009736 <USBH_CDC_Process+0x122>
      break;
 8009734:	bf00      	nop

  }

  return status;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	22a1      	movs	r2, #161	; 0xa1
 8009764:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2221      	movs	r2, #33	; 0x21
 800976a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2207      	movs	r2, #7
 800977c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2207      	movs	r2, #7
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 faf2 	bl	800ad6e <USBH_CtlReq>
 800978a:	4603      	mov	r3, r0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2221      	movs	r2, #33	; 0x21
 80097a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2220      	movs	r2, #32
 80097a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2207      	movs	r2, #7
 80097ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2207      	movs	r2, #7
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 fad3 	bl	800ad6e <USBH_CtlReq>
 80097c8:	4603      	mov	r3, r0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b086      	sub	sp, #24
 80097d6:	af02      	add	r7, sp, #8
 80097d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097e4:	2300      	movs	r3, #0
 80097e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d002      	beq.n	80097f8 <CDC_ProcessTransmission+0x26>
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d023      	beq.n	800983e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80097f6:	e07a      	b.n	80098ee <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	8b12      	ldrh	r2, [r2, #24]
 8009800:	4293      	cmp	r3, r2
 8009802:	d90b      	bls.n	800981c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	69d9      	ldr	r1, [r3, #28]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8b1a      	ldrh	r2, [r3, #24]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	7b5b      	ldrb	r3, [r3, #13]
 8009810:	2001      	movs	r0, #1
 8009812:	9000      	str	r0, [sp, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 fda8 	bl	800b36a <USBH_BulkSendData>
 800981a:	e00b      	b.n	8009834 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	7b5b      	ldrb	r3, [r3, #13]
 800982a:	2001      	movs	r0, #1
 800982c:	9000      	str	r0, [sp, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 fd9b 	bl	800b36a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800983c:	e057      	b.n	80098ee <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	7b5b      	ldrb	r3, [r3, #13]
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f005 fa15 	bl	800ec74 <USBH_LL_GetURBState>
 800984a:	4603      	mov	r3, r0
 800984c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d136      	bne.n	80098c2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	8b12      	ldrh	r2, [r2, #24]
 800985c:	4293      	cmp	r3, r2
 800985e:	d90e      	bls.n	800987e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	8b12      	ldrh	r2, [r2, #24]
 8009868:	1a9a      	subs	r2, r3, r2
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	8b12      	ldrh	r2, [r2, #24]
 8009876:	441a      	add	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	61da      	str	r2, [r3, #28]
 800987c:	e002      	b.n	8009884 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	d004      	beq.n	8009896 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009894:	e006      	b.n	80098a4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f892 	bl	80099c8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2204      	movs	r2, #4
 80098a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80098b8:	2300      	movs	r3, #0
 80098ba:	2200      	movs	r2, #0
 80098bc:	f002 f8a8 	bl	800ba10 <osMessageQueuePut>
      break;
 80098c0:	e014      	b.n	80098ec <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80098c2:	7afb      	ldrb	r3, [r7, #11]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d111      	bne.n	80098ec <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2204      	movs	r2, #4
 80098d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80098e4:	2300      	movs	r3, #0
 80098e6:	2200      	movs	r2, #0
 80098e8:	f002 f892 	bl	800ba10 <osMessageQueuePut>
      break;
 80098ec:	bf00      	nop
  }
}
 80098ee:	bf00      	nop
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b086      	sub	sp, #24
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009908:	2300      	movs	r3, #0
 800990a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009912:	2b03      	cmp	r3, #3
 8009914:	d002      	beq.n	800991c <CDC_ProcessReception+0x26>
 8009916:	2b04      	cmp	r3, #4
 8009918:	d00e      	beq.n	8009938 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800991a:	e051      	b.n	80099c0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	6a19      	ldr	r1, [r3, #32]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	8b5a      	ldrh	r2, [r3, #26]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	7b1b      	ldrb	r3, [r3, #12]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f001 fd43 	bl	800b3b4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2204      	movs	r2, #4
 8009932:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009936:	e043      	b.n	80099c0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	7b1b      	ldrb	r3, [r3, #12]
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f005 f998 	bl	800ec74 <USBH_LL_GetURBState>
 8009944:	4603      	mov	r3, r0
 8009946:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009948:	7cfb      	ldrb	r3, [r7, #19]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d137      	bne.n	80099be <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	7b1b      	ldrb	r3, [r3, #12]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f005 f8fb 	bl	800eb50 <USBH_LL_GetLastXferSize>
 800995a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	429a      	cmp	r2, r3
 8009964:	d016      	beq.n	8009994 <CDC_ProcessReception+0x9e>
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	8b5b      	ldrh	r3, [r3, #26]
 800996a:	461a      	mov	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4293      	cmp	r3, r2
 8009970:	d910      	bls.n	8009994 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	1ad2      	subs	r2, r2, r3
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	6a1a      	ldr	r2, [r3, #32]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	441a      	add	r2, r3
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2203      	movs	r2, #3
 800998e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009992:	e006      	b.n	80099a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f81d 	bl	80099dc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2204      	movs	r2, #4
 80099a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80099b6:	2300      	movs	r3, #0
 80099b8:	2200      	movs	r2, #0
 80099ba:	f002 f829 	bl	800ba10 <osMessageQueuePut>
      break;
 80099be:	bf00      	nop
  }
}
 80099c0:	bf00      	nop
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009a18:	2302      	movs	r3, #2
 8009a1a:	e044      	b.n	8009aa6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	79fa      	ldrb	r2, [r7, #7]
 8009a20:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 f841 	bl	8009abc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2104      	movs	r1, #4
 8009a6c:	2010      	movs	r0, #16
 8009a6e:	f001 ff5c 	bl	800b92a <osMessageQueueNew>
 8009a72:	4602      	mov	r2, r0
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <USBH_Init+0xac>)
 8009a7c:	4a0d      	ldr	r2, [pc, #52]	; (8009ab4 <USBH_Init+0xb0>)
 8009a7e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <USBH_Init+0xac>)
 8009a82:	2280      	movs	r2, #128	; 0x80
 8009a84:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009a86:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <USBH_Init+0xac>)
 8009a88:	2218      	movs	r2, #24
 8009a8a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009a8c:	4a08      	ldr	r2, [pc, #32]	; (8009ab0 <USBH_Init+0xac>)
 8009a8e:	68f9      	ldr	r1, [r7, #12]
 8009a90:	4809      	ldr	r0, [pc, #36]	; (8009ab8 <USBH_Init+0xb4>)
 8009a92:	f001 fdcd 	bl	800b630 <osThreadNew>
 8009a96:	4602      	mov	r2, r0
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f004 ffa2 	bl	800e9e8 <USBH_LL_Init>

  return USBH_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20004e00 	.word	0x20004e00
 8009ab4:	0800f098 	.word	0x0800f098
 8009ab8:	0800a725 	.word	0x0800a725

08009abc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e009      	b.n	8009ae2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	33e0      	adds	r3, #224	; 0xe0
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	2200      	movs	r2, #0
 8009ada:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b0e      	cmp	r3, #14
 8009ae6:	d9f2      	bls.n	8009ace <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e009      	b.n	8009b02 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3301      	adds	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b08:	d3f1      	bcc.n	8009aee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2240      	movs	r2, #64	; 0x40
 8009b2e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d016      	beq.n	8009ba6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10e      	bne.n	8009ba0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b88:	1c59      	adds	r1, r3, #1
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	33de      	adds	r3, #222	; 0xde
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]
 8009b9e:	e004      	b.n	8009baa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	73fb      	strb	r3, [r7, #15]
 8009ba4:	e001      	b.n	8009baa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009bce:	78fa      	ldrb	r2, [r7, #3]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d204      	bcs.n	8009bde <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	78fa      	ldrb	r2, [r7, #3]
 8009bd8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009bdc:	e001      	b.n	8009be2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009bde:	2302      	movs	r3, #2
 8009be0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	4603      	mov	r3, r0
 8009c00:	70fb      	strb	r3, [r7, #3]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70bb      	strb	r3, [r7, #2]
 8009c06:	4613      	mov	r3, r2
 8009c08:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009c18:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009c1a:	e025      	b.n	8009c68 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	221a      	movs	r2, #26
 8009c20:	fb02 f303 	mul.w	r3, r2, r3
 8009c24:	3308      	adds	r3, #8
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	3302      	adds	r3, #2
 8009c2c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	795b      	ldrb	r3, [r3, #5]
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d002      	beq.n	8009c3e <USBH_FindInterface+0x4e>
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	2bff      	cmp	r3, #255	; 0xff
 8009c3c:	d111      	bne.n	8009c62 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009c42:	78ba      	ldrb	r2, [r7, #2]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d002      	beq.n	8009c4e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c48:	78bb      	ldrb	r3, [r7, #2]
 8009c4a:	2bff      	cmp	r3, #255	; 0xff
 8009c4c:	d109      	bne.n	8009c62 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c52:	787a      	ldrb	r2, [r7, #1]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d002      	beq.n	8009c5e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009c58:	787b      	ldrb	r3, [r7, #1]
 8009c5a:	2bff      	cmp	r3, #255	; 0xff
 8009c5c:	d101      	bne.n	8009c62 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	e006      	b.n	8009c70 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
 8009c64:	3301      	adds	r3, #1
 8009c66:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d9d6      	bls.n	8009c1c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009c6e:	23ff      	movs	r3, #255	; 0xff
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	371c      	adds	r7, #28
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f004 feeb 	bl	800ea60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f005 f804 	bl	800ec9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af04      	add	r7, sp, #16
 8009ca2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d102      	bne.n	8009cbe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2203      	movs	r2, #3
 8009cbc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b0b      	cmp	r3, #11
 8009cc6:	f200 823c 	bhi.w	800a142 <USBH_Process+0x4a6>
 8009cca:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <USBH_Process+0x34>)
 8009ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd0:	08009d01 	.word	0x08009d01
 8009cd4:	08009d4f 	.word	0x08009d4f
 8009cd8:	08009dd3 	.word	0x08009dd3
 8009cdc:	0800a0c1 	.word	0x0800a0c1
 8009ce0:	0800a143 	.word	0x0800a143
 8009ce4:	08009e93 	.word	0x08009e93
 8009ce8:	0800a04b 	.word	0x0800a04b
 8009cec:	08009ee5 	.word	0x08009ee5
 8009cf0:	08009f21 	.word	0x08009f21
 8009cf4:	08009f5b 	.word	0x08009f5b
 8009cf8:	08009fa3 	.word	0x08009fa3
 8009cfc:	0800a0a9 	.word	0x0800a0a9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 821c 	beq.w	800a146 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009d14:	20c8      	movs	r0, #200	; 0xc8
 8009d16:	f005 f807 	bl	800ed28 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f004 fefd 	bl	800eb1a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009d44:	2300      	movs	r3, #0
 8009d46:	2200      	movs	r2, #0
 8009d48:	f001 fe62 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009d4c:	e1fb      	b.n	800a146 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d107      	bne.n	8009d68 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2202      	movs	r2, #2
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e025      	b.n	8009db4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d72:	d914      	bls.n	8009d9e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d903      	bls.n	8009d96 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	220d      	movs	r2, #13
 8009d92:	701a      	strb	r2, [r3, #0]
 8009d94:	e00e      	b.n	8009db4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	e00a      	b.n	8009db4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009da4:	f103 020a 	add.w	r2, r3, #10
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009dae:	200a      	movs	r0, #10
 8009db0:	f004 ffba 	bl	800ed28 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009dc8:	2300      	movs	r3, #0
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f001 fe20 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      break;
 8009dd0:	e1c0      	b.n	800a154 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d005      	beq.n	8009de8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009de2:	2104      	movs	r1, #4
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009de8:	2064      	movs	r0, #100	; 0x64
 8009dea:	f004 ff9d 	bl	800ed28 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f004 fe6c 	bl	800eacc <USBH_LL_GetSpeed>
 8009df4:	4603      	mov	r3, r0
 8009df6:	461a      	mov	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2205      	movs	r2, #5
 8009e02:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009e04:	2100      	movs	r1, #0
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f001 fb21 	bl	800b44e <USBH_AllocPipe>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009e14:	2180      	movs	r1, #128	; 0x80
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 fb19 	bl	800b44e <USBH_AllocPipe>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	461a      	mov	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7919      	ldrb	r1, [r3, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009e38:	b292      	uxth	r2, r2
 8009e3a:	9202      	str	r2, [sp, #8]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	9201      	str	r2, [sp, #4]
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	4603      	mov	r3, r0
 8009e44:	2280      	movs	r2, #128	; 0x80
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fad2 	bl	800b3f0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7959      	ldrb	r1, [r3, #5]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009e60:	b292      	uxth	r2, r2
 8009e62:	9202      	str	r2, [sp, #8]
 8009e64:	2200      	movs	r2, #0
 8009e66:	9201      	str	r2, [sp, #4]
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 fabe 	bl	800b3f0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f001 fdc0 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      break;
 8009e90:	e160      	b.n	800a154 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f964 	bl	800a160 <USBH_HandleEnum>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 8152 	bne.w	800a14a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d103      	bne.n	8009ec0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2208      	movs	r2, #8
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	e002      	b.n	8009ec6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2207      	movs	r2, #7
 8009ec4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2205      	movs	r2, #5
 8009eca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009eda:	2300      	movs	r3, #0
 8009edc:	2200      	movs	r2, #0
 8009ede:	f001 fd97 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009ee2:	e132      	b.n	800a14a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 812f 	beq.w	800a14e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2208      	movs	r2, #8
 8009f00:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2205      	movs	r2, #5
 8009f06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f16:	2300      	movs	r3, #0
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f001 fd79 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8009f1e:	e116      	b.n	800a14e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fcf8 	bl	800a920 <USBH_SetCfg>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2209      	movs	r2, #9
 8009f3a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f50:	2300      	movs	r3, #0
 8009f52:	2200      	movs	r2, #0
 8009f54:	f001 fd5c 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      break;
 8009f58:	e0fc      	b.n	800a154 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009f60:	f003 0320 	and.w	r3, r3, #32
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009f68:	2101      	movs	r1, #1
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fcfb 	bl	800a966 <USBH_SetFeature>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	220a      	movs	r2, #10
 8009f7a:	701a      	strb	r2, [r3, #0]
 8009f7c:	e002      	b.n	8009f84 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	220a      	movs	r2, #10
 8009f82:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f001 fd38 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      break;
 8009fa0:	e0d8      	b.n	800a154 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d03f      	beq.n	800a02c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]
 8009fb8:	e016      	b.n	8009fe8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009fba:	7bfa      	ldrb	r2, [r7, #15]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	32de      	adds	r2, #222	; 0xde
 8009fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc4:	791a      	ldrb	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d108      	bne.n	8009fe2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009fd0:	7bfa      	ldrb	r2, [r7, #15]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	32de      	adds	r2, #222	; 0xde
 8009fd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009fe0:	e005      	b.n	8009fee <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	73fb      	strb	r3, [r7, #15]
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0e5      	beq.n	8009fba <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d016      	beq.n	800a026 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d109      	bne.n	800a01e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2206      	movs	r2, #6
 800a00e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a016:	2103      	movs	r1, #3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	4798      	blx	r3
 800a01c:	e006      	b.n	800a02c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	220d      	movs	r2, #13
 800a022:	701a      	strb	r2, [r3, #0]
 800a024:	e002      	b.n	800a02c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	220d      	movs	r2, #13
 800a02a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2205      	movs	r2, #5
 800a030:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a040:	2300      	movs	r3, #0
 800a042:	2200      	movs	r2, #0
 800a044:	f001 fce4 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      break;
 800a048:	e084      	b.n	800a154 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d017      	beq.n	800a084 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	4798      	blx	r3
 800a060:	4603      	mov	r3, r0
 800a062:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d103      	bne.n	800a074 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	220b      	movs	r2, #11
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	e00a      	b.n	800a08a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d106      	bne.n	800a08a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	220d      	movs	r2, #13
 800a080:	701a      	strb	r2, [r3, #0]
 800a082:	e002      	b.n	800a08a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	220d      	movs	r2, #13
 800a088:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2205      	movs	r2, #5
 800a08e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a09e:	2300      	movs	r3, #0
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f001 fcb5 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      break;
 800a0a6:	e055      	b.n	800a154 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d04f      	beq.n	800a152 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	4798      	blx	r3
      }
      break;
 800a0be:	e048      	b.n	800a152 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff fcf7 	bl	8009abc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d009      	beq.n	800a0ec <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0fc:	2105      	movs	r1, #5
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d107      	bne.n	800a11e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff fdb0 	bl	8009c7c <USBH_Start>
 800a11c:	e002      	b.n	800a124 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f004 fc9e 	bl	800ea60 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	f001 fc68 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      break;
 800a140:	e008      	b.n	800a154 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a142:	bf00      	nop
 800a144:	e006      	b.n	800a154 <USBH_Process+0x4b8>
      break;
 800a146:	bf00      	nop
 800a148:	e004      	b.n	800a154 <USBH_Process+0x4b8>
      break;
 800a14a:	bf00      	nop
 800a14c:	e002      	b.n	800a154 <USBH_Process+0x4b8>
    break;
 800a14e:	bf00      	nop
 800a150:	e000      	b.n	800a154 <USBH_Process+0x4b8>
      break;
 800a152:	bf00      	nop
  }
  return USBH_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop

0800a160 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af04      	add	r7, sp, #16
 800a166:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a168:	2301      	movs	r3, #1
 800a16a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a16c:	2301      	movs	r3, #1
 800a16e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b07      	cmp	r3, #7
 800a176:	f200 8208 	bhi.w	800a58a <USBH_HandleEnum+0x42a>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <USBH_HandleEnum+0x20>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a1a1 	.word	0x0800a1a1
 800a184:	0800a25f 	.word	0x0800a25f
 800a188:	0800a2c9 	.word	0x0800a2c9
 800a18c:	0800a357 	.word	0x0800a357
 800a190:	0800a3c1 	.word	0x0800a3c1
 800a194:	0800a431 	.word	0x0800a431
 800a198:	0800a4cd 	.word	0x0800a4cd
 800a19c:	0800a54b 	.word	0x0800a54b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a1a0:	2108      	movs	r1, #8
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 faec 	bl	800a780 <USBH_Get_DevDesc>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d130      	bne.n	800a214 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7919      	ldrb	r1, [r3, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	9202      	str	r2, [sp, #8]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	9201      	str	r2, [sp, #4]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2280      	movs	r2, #128	; 0x80
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 f903 	bl	800b3f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	7959      	ldrb	r1, [r3, #5]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1fe:	b292      	uxth	r2, r2
 800a200:	9202      	str	r2, [sp, #8]
 800a202:	2200      	movs	r2, #0
 800a204:	9201      	str	r2, [sp, #4]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	4603      	mov	r3, r0
 800a20a:	2200      	movs	r2, #0
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f001 f8ef 	bl	800b3f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a212:	e1bc      	b.n	800a58e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a214:	7bbb      	ldrb	r3, [r7, #14]
 800a216:	2b03      	cmp	r3, #3
 800a218:	f040 81b9 	bne.w	800a58e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a222:	3301      	adds	r3, #1
 800a224:	b2da      	uxtb	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a232:	2b03      	cmp	r3, #3
 800a234:	d903      	bls.n	800a23e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	220d      	movs	r2, #13
 800a23a:	701a      	strb	r2, [r3, #0]
      break;
 800a23c:	e1a7      	b.n	800a58e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	795b      	ldrb	r3, [r3, #5]
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f001 f923 	bl	800b490 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	791b      	ldrb	r3, [r3, #4]
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f001 f91d 	bl	800b490 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	701a      	strb	r2, [r3, #0]
      break;
 800a25c:	e197      	b.n	800a58e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a25e:	2112      	movs	r1, #18
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa8d 	bl	800a780 <USBH_Get_DevDesc>
 800a266:	4603      	mov	r3, r0
 800a268:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d103      	bne.n	800a278 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a276:	e18c      	b.n	800a592 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a278:	7bbb      	ldrb	r3, [r7, #14]
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	f040 8189 	bne.w	800a592 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a286:	3301      	adds	r3, #1
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a296:	2b03      	cmp	r3, #3
 800a298:	d903      	bls.n	800a2a2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	220d      	movs	r2, #13
 800a29e:	701a      	strb	r2, [r3, #0]
      break;
 800a2a0:	e177      	b.n	800a592 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	795b      	ldrb	r3, [r3, #5]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f8f1 	bl	800b490 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	791b      	ldrb	r3, [r3, #4]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 f8eb 	bl	800b490 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]
      break;
 800a2c6:	e164      	b.n	800a592 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fb04 	bl	800a8d8 <USBH_SetAddress>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d132      	bne.n	800a340 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a2da:	2002      	movs	r0, #2
 800a2dc:	f004 fd24 	bl	800ed28 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2203      	movs	r2, #3
 800a2ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	7919      	ldrb	r1, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a302:	b292      	uxth	r2, r2
 800a304:	9202      	str	r2, [sp, #8]
 800a306:	2200      	movs	r2, #0
 800a308:	9201      	str	r2, [sp, #4]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	4603      	mov	r3, r0
 800a30e:	2280      	movs	r2, #128	; 0x80
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 f86d 	bl	800b3f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	7959      	ldrb	r1, [r3, #5]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a32a:	b292      	uxth	r2, r2
 800a32c:	9202      	str	r2, [sp, #8]
 800a32e:	2200      	movs	r2, #0
 800a330:	9201      	str	r2, [sp, #4]
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4603      	mov	r3, r0
 800a336:	2200      	movs	r2, #0
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 f859 	bl	800b3f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a33e:	e12a      	b.n	800a596 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	2b03      	cmp	r3, #3
 800a344:	f040 8127 	bne.w	800a596 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	220d      	movs	r2, #13
 800a34c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	705a      	strb	r2, [r3, #1]
      break;
 800a354:	e11f      	b.n	800a596 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a356:	2109      	movs	r1, #9
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fa39 	bl	800a7d0 <USBH_Get_CfgDesc>
 800a35e:	4603      	mov	r3, r0
 800a360:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d103      	bne.n	800a370 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2204      	movs	r2, #4
 800a36c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a36e:	e114      	b.n	800a59a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	2b03      	cmp	r3, #3
 800a374:	f040 8111 	bne.w	800a59a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a37e:	3301      	adds	r3, #1
 800a380:	b2da      	uxtb	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d903      	bls.n	800a39a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	220d      	movs	r2, #13
 800a396:	701a      	strb	r2, [r3, #0]
      break;
 800a398:	e0ff      	b.n	800a59a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	795b      	ldrb	r3, [r3, #5]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f001 f875 	bl	800b490 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	791b      	ldrb	r3, [r3, #4]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f001 f86f 	bl	800b490 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
      break;
 800a3be:	e0ec      	b.n	800a59a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fa01 	bl	800a7d0 <USBH_Get_CfgDesc>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d103      	bne.n	800a3e0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2205      	movs	r2, #5
 800a3dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3de:	e0de      	b.n	800a59e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	f040 80db 	bne.w	800a59e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d903      	bls.n	800a40a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	220d      	movs	r2, #13
 800a406:	701a      	strb	r2, [r3, #0]
      break;
 800a408:	e0c9      	b.n	800a59e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	795b      	ldrb	r3, [r3, #5]
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 f83d 	bl	800b490 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	791b      	ldrb	r3, [r3, #4]
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 f837 	bl	800b490 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	701a      	strb	r2, [r3, #0]
      break;
 800a42e:	e0b6      	b.n	800a59e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a436:	2b00      	cmp	r3, #0
 800a438:	d036      	beq.n	800a4a8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a446:	23ff      	movs	r3, #255	; 0xff
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f9e5 	bl	800a818 <USBH_Get_StringDesc>
 800a44e:	4603      	mov	r3, r0
 800a450:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a452:	7bbb      	ldrb	r3, [r7, #14]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d111      	bne.n	800a47c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2206      	movs	r2, #6
 800a45c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2205      	movs	r2, #5
 800a462:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a472:	2300      	movs	r3, #0
 800a474:	2200      	movs	r2, #0
 800a476:	f001 facb 	bl	800ba10 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a47a:	e092      	b.n	800a5a2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	2b03      	cmp	r3, #3
 800a480:	f040 808f 	bne.w	800a5a2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2206      	movs	r2, #6
 800a488:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2205      	movs	r2, #5
 800a48e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a49e:	2300      	movs	r3, #0
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f001 fab5 	bl	800ba10 <osMessageQueuePut>
      break;
 800a4a6:	e07c      	b.n	800a5a2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2206      	movs	r2, #6
 800a4ac:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2205      	movs	r2, #5
 800a4b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f001 faa3 	bl	800ba10 <osMessageQueuePut>
      break;
 800a4ca:	e06a      	b.n	800a5a2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d027      	beq.n	800a526 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a4e2:	23ff      	movs	r3, #255	; 0xff
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f997 	bl	800a818 <USBH_Get_StringDesc>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4ee:	7bbb      	ldrb	r3, [r7, #14]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d103      	bne.n	800a4fc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2207      	movs	r2, #7
 800a4f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a4fa:	e054      	b.n	800a5a6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4fc:	7bbb      	ldrb	r3, [r7, #14]
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d151      	bne.n	800a5a6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2207      	movs	r2, #7
 800a506:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2205      	movs	r2, #5
 800a50c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a51c:	2300      	movs	r3, #0
 800a51e:	2200      	movs	r2, #0
 800a520:	f001 fa76 	bl	800ba10 <osMessageQueuePut>
      break;
 800a524:	e03f      	b.n	800a5a6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2207      	movs	r2, #7
 800a52a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2205      	movs	r2, #5
 800a530:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	f001 fa64 	bl	800ba10 <osMessageQueuePut>
      break;
 800a548:	e02d      	b.n	800a5a6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a550:	2b00      	cmp	r3, #0
 800a552:	d017      	beq.n	800a584 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a560:	23ff      	movs	r3, #255	; 0xff
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f958 	bl	800a818 <USBH_Get_StringDesc>
 800a568:	4603      	mov	r3, r0
 800a56a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d102      	bne.n	800a578 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a576:	e018      	b.n	800a5aa <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d115      	bne.n	800a5aa <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	73fb      	strb	r3, [r7, #15]
      break;
 800a582:	e012      	b.n	800a5aa <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]
      break;
 800a588:	e00f      	b.n	800a5aa <USBH_HandleEnum+0x44a>

    default:
      break;
 800a58a:	bf00      	nop
 800a58c:	e00e      	b.n	800a5ac <USBH_HandleEnum+0x44c>
      break;
 800a58e:	bf00      	nop
 800a590:	e00c      	b.n	800a5ac <USBH_HandleEnum+0x44c>
      break;
 800a592:	bf00      	nop
 800a594:	e00a      	b.n	800a5ac <USBH_HandleEnum+0x44c>
      break;
 800a596:	bf00      	nop
 800a598:	e008      	b.n	800a5ac <USBH_HandleEnum+0x44c>
      break;
 800a59a:	bf00      	nop
 800a59c:	e006      	b.n	800a5ac <USBH_HandleEnum+0x44c>
      break;
 800a59e:	bf00      	nop
 800a5a0:	e004      	b.n	800a5ac <USBH_HandleEnum+0x44c>
      break;
 800a5a2:	bf00      	nop
 800a5a4:	e002      	b.n	800a5ac <USBH_HandleEnum+0x44c>
      break;
 800a5a6:	bf00      	nop
 800a5a8:	e000      	b.n	800a5ac <USBH_HandleEnum+0x44c>
      break;
 800a5aa:	bf00      	nop
  }
  return Status;
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop

0800a5b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5e4:	1c5a      	adds	r2, r3, #1
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f804 	bl	800a5fa <USBH_HandleSof>
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b0b      	cmp	r3, #11
 800a60a:	d10a      	bne.n	800a622 <USBH_HandleSof+0x28>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a612:	2b00      	cmp	r3, #0
 800a614:	d005      	beq.n	800a622 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	4798      	blx	r3
  }
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a64e:	2300      	movs	r3, #0
 800a650:	2200      	movs	r2, #0
 800a652:	f001 f9dd 	bl	800ba10 <osMessageQueuePut>
#endif
#endif

  return;
 800a656:	bf00      	nop
}
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a66e:	bf00      	nop
}
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f001 f9ad 	bl	800ba10 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f004 f9d8 	bl	800ea96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	791b      	ldrb	r3, [r3, #4]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fecf 	bl	800b490 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	795b      	ldrb	r3, [r3, #5]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fec9 	bl	800b490 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a712:	2300      	movs	r3, #0
 800a714:	2200      	movs	r2, #0
 800a716:	f001 f97b 	bl	800ba10 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a738:	f04f 33ff 	mov.w	r3, #4294967295
 800a73c:	2200      	movs	r2, #0
 800a73e:	f001 f9c7 	bl	800bad0 <osMessageQueueGet>
 800a742:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1f0      	bne.n	800a72c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff faa6 	bl	8009c9c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a750:	e7ec      	b.n	800a72c <USBH_Process_OS+0x8>

0800a752 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a76e:	2300      	movs	r3, #0
 800a770:	2200      	movs	r2, #0
 800a772:	f001 f94d 	bl	800ba10 <osMessageQueuePut>
#endif

  return USBH_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af02      	add	r7, sp, #8
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a792:	78fb      	ldrb	r3, [r7, #3]
 800a794:	b29b      	uxth	r3, r3
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	4613      	mov	r3, r2
 800a79a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a79e:	2100      	movs	r1, #0
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 f864 	bl	800a86e <USBH_GetDescriptor>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	73fb      	strb	r3, [r7, #15]
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10a      	bne.n	800a7c6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	b292      	uxth	r2, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	f000 f918 	bl	800a9f6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af02      	add	r7, sp, #8
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	331c      	adds	r3, #28
 800a7e0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a7e2:	887b      	ldrh	r3, [r7, #2]
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f83d 	bl	800a86e <USBH_GetDescriptor>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	72fb      	strb	r3, [r7, #11]
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d107      	bne.n	800a80e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a804:	887a      	ldrh	r2, [r7, #2]
 800a806:	68f9      	ldr	r1, [r7, #12]
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 f964 	bl	800aad6 <USBH_ParseCfgDesc>
  }

  return status;
 800a80e:	7afb      	ldrb	r3, [r7, #11]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	607a      	str	r2, [r7, #4]
 800a822:	461a      	mov	r2, r3
 800a824:	460b      	mov	r3, r1
 800a826:	72fb      	strb	r3, [r7, #11]
 800a828:	4613      	mov	r3, r2
 800a82a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a82c:	7afb      	ldrb	r3, [r7, #11]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a834:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a83c:	893b      	ldrh	r3, [r7, #8]
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	460b      	mov	r3, r1
 800a842:	2100      	movs	r1, #0
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 f812 	bl	800a86e <USBH_GetDescriptor>
 800a84a:	4603      	mov	r3, r0
 800a84c:	75fb      	strb	r3, [r7, #23]
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d107      	bne.n	800a864 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a85a:	893a      	ldrh	r2, [r7, #8]
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 fa37 	bl	800acd2 <USBH_ParseStringDesc>
  }

  return status;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	607b      	str	r3, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	72fb      	strb	r3, [r7, #11]
 800a87c:	4613      	mov	r3, r2
 800a87e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	789b      	ldrb	r3, [r3, #2]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d11c      	bne.n	800a8c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a888:	7afb      	ldrb	r3, [r7, #11]
 800a88a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2206      	movs	r2, #6
 800a898:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	893a      	ldrh	r2, [r7, #8]
 800a89e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a8a0:	893b      	ldrh	r3, [r7, #8]
 800a8a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a8a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8aa:	d104      	bne.n	800a8b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f240 4209 	movw	r2, #1033	; 0x409
 800a8b2:	829a      	strh	r2, [r3, #20]
 800a8b4:	e002      	b.n	800a8bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8b3a      	ldrh	r2, [r7, #24]
 800a8c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a8c2:	8b3b      	ldrh	r3, [r7, #24]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 fa50 	bl	800ad6e <USBH_CtlReq>
 800a8ce:	4603      	mov	r3, r0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	789b      	ldrb	r3, [r3, #2]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d10f      	bne.n	800a90c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2205      	movs	r2, #5
 800a8f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a90c:	2200      	movs	r2, #0
 800a90e:	2100      	movs	r1, #0
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fa2c 	bl	800ad6e <USBH_CtlReq>
 800a916:	4603      	mov	r3, r0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	789b      	ldrb	r3, [r3, #2]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d10e      	bne.n	800a952 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2209      	movs	r2, #9
 800a93e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	887a      	ldrh	r2, [r7, #2]
 800a944:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a952:	2200      	movs	r2, #0
 800a954:	2100      	movs	r1, #0
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fa09 	bl	800ad6e <USBH_CtlReq>
 800a95c:	4603      	mov	r3, r0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	789b      	ldrb	r3, [r3, #2]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d10f      	bne.n	800a99a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2203      	movs	r2, #3
 800a984:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a986:	78fb      	ldrb	r3, [r7, #3]
 800a988:	b29a      	uxth	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f9e5 	bl	800ad6e <USBH_CtlReq>
 800a9a4:	4603      	mov	r3, r0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	789b      	ldrb	r3, [r3, #2]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d10f      	bne.n	800a9e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f9c1 	bl	800ad6e <USBH_CtlReq>
 800a9ec:	4603      	mov	r3, r0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b085      	sub	sp, #20
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	60f8      	str	r0, [r7, #12]
 800a9fe:	60b9      	str	r1, [r7, #8]
 800aa00:	4613      	mov	r3, r2
 800aa02:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	781a      	ldrb	r2, [r3, #0]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	785a      	ldrb	r2, [r3, #1]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	3302      	adds	r3, #2
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	3303      	adds	r3, #3
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	021b      	lsls	r3, r3, #8
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	791a      	ldrb	r2, [r3, #4]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	795a      	ldrb	r2, [r3, #5]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	799a      	ldrb	r2, [r3, #6]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	79da      	ldrb	r2, [r3, #7]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800aa50:	88fb      	ldrh	r3, [r7, #6]
 800aa52:	2b08      	cmp	r3, #8
 800aa54:	d939      	bls.n	800aaca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	3308      	adds	r3, #8
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	3309      	adds	r3, #9
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	021b      	lsls	r3, r3, #8
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	330a      	adds	r3, #10
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	330b      	adds	r3, #11
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	4313      	orrs	r3, r2
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	330c      	adds	r3, #12
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	330d      	adds	r3, #13
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	7b9a      	ldrb	r2, [r3, #14]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	7bda      	ldrb	r2, [r3, #15]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	7c1a      	ldrb	r2, [r3, #16]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	7c5a      	ldrb	r2, [r3, #17]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	745a      	strb	r2, [r3, #17]
  }
}
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b08a      	sub	sp, #40	; 0x28
 800aada:	af00      	add	r7, sp, #0
 800aadc:	60f8      	str	r0, [r7, #12]
 800aade:	60b9      	str	r1, [r7, #8]
 800aae0:	4613      	mov	r3, r2
 800aae2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aae8:	2300      	movs	r3, #0
 800aaea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	781a      	ldrb	r2, [r3, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	785a      	ldrb	r2, [r3, #1]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	3302      	adds	r3, #2
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	3303      	adds	r3, #3
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	021b      	lsls	r3, r3, #8
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	791a      	ldrb	r2, [r3, #4]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	795a      	ldrb	r2, [r3, #5]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	799a      	ldrb	r2, [r3, #6]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	79da      	ldrb	r2, [r3, #7]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	7a1a      	ldrb	r2, [r3, #8]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ab4c:	88fb      	ldrh	r3, [r7, #6]
 800ab4e:	2b09      	cmp	r3, #9
 800ab50:	d95f      	bls.n	800ac12 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ab52:	2309      	movs	r3, #9
 800ab54:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab5a:	e051      	b.n	800ac00 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab5c:	f107 0316 	add.w	r3, r7, #22
 800ab60:	4619      	mov	r1, r3
 800ab62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab64:	f000 f8e8 	bl	800ad38 <USBH_GetNextDesc>
 800ab68:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d146      	bne.n	800ac00 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ab72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab76:	221a      	movs	r2, #26
 800ab78:	fb02 f303 	mul.w	r3, r2, r3
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4413      	add	r3, r2
 800ab82:	3302      	adds	r3, #2
 800ab84:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ab86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab88:	69f8      	ldr	r0, [r7, #28]
 800ab8a:	f000 f846 	bl	800ac1a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab98:	e022      	b.n	800abe0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab9a:	f107 0316 	add.w	r3, r7, #22
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aba2:	f000 f8c9 	bl	800ad38 <USBH_GetNextDesc>
 800aba6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	785b      	ldrb	r3, [r3, #1]
 800abac:	2b05      	cmp	r3, #5
 800abae:	d117      	bne.n	800abe0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800abb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abb4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800abb8:	3201      	adds	r2, #1
 800abba:	00d2      	lsls	r2, r2, #3
 800abbc:	211a      	movs	r1, #26
 800abbe:	fb01 f303 	mul.w	r3, r1, r3
 800abc2:	4413      	add	r3, r2
 800abc4:	3308      	adds	r3, #8
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	4413      	add	r3, r2
 800abca:	3304      	adds	r3, #4
 800abcc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800abce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abd0:	69b8      	ldr	r0, [r7, #24]
 800abd2:	f000 f851 	bl	800ac78 <USBH_ParseEPDesc>
            ep_ix++;
 800abd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800abda:	3301      	adds	r3, #1
 800abdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	791b      	ldrb	r3, [r3, #4]
 800abe4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800abe8:	429a      	cmp	r2, r3
 800abea:	d204      	bcs.n	800abf6 <USBH_ParseCfgDesc+0x120>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	885a      	ldrh	r2, [r3, #2]
 800abf0:	8afb      	ldrh	r3, [r7, #22]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d8d1      	bhi.n	800ab9a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800abf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abfa:	3301      	adds	r3, #1
 800abfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ac00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d804      	bhi.n	800ac12 <USBH_ParseCfgDesc+0x13c>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	885a      	ldrh	r2, [r3, #2]
 800ac0c:	8afb      	ldrh	r3, [r7, #22]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d8a4      	bhi.n	800ab5c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ac12:	bf00      	nop
 800ac14:	3728      	adds	r7, #40	; 0x28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781a      	ldrb	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	785a      	ldrb	r2, [r3, #1]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	789a      	ldrb	r2, [r3, #2]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	78da      	ldrb	r2, [r3, #3]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	791a      	ldrb	r2, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	795a      	ldrb	r2, [r3, #5]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	799a      	ldrb	r2, [r3, #6]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	79da      	ldrb	r2, [r3, #7]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	7a1a      	ldrb	r2, [r3, #8]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	721a      	strb	r2, [r3, #8]
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781a      	ldrb	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	785a      	ldrb	r2, [r3, #1]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	789a      	ldrb	r2, [r3, #2]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	78da      	ldrb	r2, [r3, #3]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	3304      	adds	r3, #4
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	3305      	adds	r3, #5
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	021b      	lsls	r3, r3, #8
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	4313      	orrs	r3, r2
 800acb8:	b29a      	uxth	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	799a      	ldrb	r2, [r3, #6]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	719a      	strb	r2, [r3, #6]
}
 800acc6:	bf00      	nop
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b087      	sub	sp, #28
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	4613      	mov	r3, r2
 800acde:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3301      	adds	r3, #1
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d120      	bne.n	800ad2c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	1e9a      	subs	r2, r3, #2
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	4293      	cmp	r3, r2
 800acf4:	bf28      	it	cs
 800acf6:	4613      	movcs	r3, r2
 800acf8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3302      	adds	r3, #2
 800acfe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ad00:	2300      	movs	r3, #0
 800ad02:	82fb      	strh	r3, [r7, #22]
 800ad04:	e00b      	b.n	800ad1e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ad06:	8afb      	ldrh	r3, [r7, #22]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	781a      	ldrb	r2, [r3, #0]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	3301      	adds	r3, #1
 800ad16:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ad18:	8afb      	ldrh	r3, [r7, #22]
 800ad1a:	3302      	adds	r3, #2
 800ad1c:	82fb      	strh	r3, [r7, #22]
 800ad1e:	8afa      	ldrh	r2, [r7, #22]
 800ad20:	8abb      	ldrh	r3, [r7, #20]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d3ef      	bcc.n	800ad06 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	701a      	strb	r2, [r3, #0]
  }
}
 800ad2c:	bf00      	nop
 800ad2e:	371c      	adds	r7, #28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	881a      	ldrh	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad60:	68fb      	ldr	r3, [r7, #12]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b086      	sub	sp, #24
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	789b      	ldrb	r3, [r3, #2]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d002      	beq.n	800ad8e <USBH_CtlReq+0x20>
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d01d      	beq.n	800adc8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800ad8c:	e043      	b.n	800ae16 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	88fa      	ldrh	r2, [r7, #6]
 800ad98:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2202      	movs	r2, #2
 800ada4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ada6:	2301      	movs	r3, #1
 800ada8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2203      	movs	r2, #3
 800adae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800adbe:	2300      	movs	r3, #0
 800adc0:	2200      	movs	r2, #0
 800adc2:	f000 fe25 	bl	800ba10 <osMessageQueuePut>
      break;
 800adc6:	e026      	b.n	800ae16 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f829 	bl	800ae20 <USBH_HandleControl>
 800adce:	4603      	mov	r3, r0
 800add0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <USBH_CtlReq+0x70>
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	2b03      	cmp	r3, #3
 800addc:	d106      	bne.n	800adec <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2201      	movs	r2, #1
 800ade2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	761a      	strb	r2, [r3, #24]
 800adea:	e005      	b.n	800adf8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d102      	bne.n	800adf8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2203      	movs	r2, #3
 800adfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f000 fdfe 	bl	800ba10 <osMessageQueuePut>
      break;
 800ae14:	bf00      	nop
  }
  return status;
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	7e1b      	ldrb	r3, [r3, #24]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	2b0a      	cmp	r3, #10
 800ae38:	f200 8229 	bhi.w	800b28e <USBH_HandleControl+0x46e>
 800ae3c:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <USBH_HandleControl+0x24>)
 800ae3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae42:	bf00      	nop
 800ae44:	0800ae71 	.word	0x0800ae71
 800ae48:	0800ae8b 	.word	0x0800ae8b
 800ae4c:	0800af2d 	.word	0x0800af2d
 800ae50:	0800af53 	.word	0x0800af53
 800ae54:	0800afdf 	.word	0x0800afdf
 800ae58:	0800b009 	.word	0x0800b009
 800ae5c:	0800b0cb 	.word	0x0800b0cb
 800ae60:	0800b0ed 	.word	0x0800b0ed
 800ae64:	0800b17f 	.word	0x0800b17f
 800ae68:	0800b1a5 	.word	0x0800b1a5
 800ae6c:	0800b237 	.word	0x0800b237
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f103 0110 	add.w	r1, r3, #16
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	795b      	ldrb	r3, [r3, #5]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fa17 	bl	800b2b0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2202      	movs	r2, #2
 800ae86:	761a      	strb	r2, [r3, #24]
      break;
 800ae88:	e20c      	b.n	800b2a4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	795b      	ldrb	r3, [r3, #5]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f003 feef 	bl	800ec74 <USBH_LL_GetURBState>
 800ae96:	4603      	mov	r3, r0
 800ae98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d12c      	bne.n	800aefa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	7c1b      	ldrb	r3, [r3, #16]
 800aea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aea8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	8adb      	ldrh	r3, [r3, #22]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00a      	beq.n	800aec8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aeb2:	7b7b      	ldrb	r3, [r7, #13]
 800aeb4:	2b80      	cmp	r3, #128	; 0x80
 800aeb6:	d103      	bne.n	800aec0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2203      	movs	r2, #3
 800aebc:	761a      	strb	r2, [r3, #24]
 800aebe:	e00d      	b.n	800aedc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2205      	movs	r2, #5
 800aec4:	761a      	strb	r2, [r3, #24]
 800aec6:	e009      	b.n	800aedc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800aec8:	7b7b      	ldrb	r3, [r7, #13]
 800aeca:	2b80      	cmp	r3, #128	; 0x80
 800aecc:	d103      	bne.n	800aed6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2209      	movs	r2, #9
 800aed2:	761a      	strb	r2, [r3, #24]
 800aed4:	e002      	b.n	800aedc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2207      	movs	r2, #7
 800aeda:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2203      	movs	r2, #3
 800aee0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aef0:	2300      	movs	r3, #0
 800aef2:	2200      	movs	r2, #0
 800aef4:	f000 fd8c 	bl	800ba10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aef8:	e1cb      	b.n	800b292 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
 800aefc:	2b04      	cmp	r3, #4
 800aefe:	d003      	beq.n	800af08 <USBH_HandleControl+0xe8>
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	2b02      	cmp	r3, #2
 800af04:	f040 81c5 	bne.w	800b292 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	220b      	movs	r2, #11
 800af0c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2203      	movs	r2, #3
 800af12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af22:	2300      	movs	r3, #0
 800af24:	2200      	movs	r2, #0
 800af26:	f000 fd73 	bl	800ba10 <osMessageQueuePut>
      break;
 800af2a:	e1b2      	b.n	800b292 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af32:	b29a      	uxth	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6899      	ldr	r1, [r3, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	899a      	ldrh	r2, [r3, #12]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	791b      	ldrb	r3, [r3, #4]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f9f2 	bl	800b32e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2204      	movs	r2, #4
 800af4e:	761a      	strb	r2, [r3, #24]
      break;
 800af50:	e1a8      	b.n	800b2a4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	791b      	ldrb	r3, [r3, #4]
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f003 fe8b 	bl	800ec74 <USBH_LL_GetURBState>
 800af5e:	4603      	mov	r3, r0
 800af60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d110      	bne.n	800af8a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2209      	movs	r2, #9
 800af6c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2203      	movs	r2, #3
 800af72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af82:	2300      	movs	r3, #0
 800af84:	2200      	movs	r2, #0
 800af86:	f000 fd43 	bl	800ba10 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	2b05      	cmp	r3, #5
 800af8e:	d110      	bne.n	800afb2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800af90:	2303      	movs	r3, #3
 800af92:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2203      	movs	r2, #3
 800af98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800afa8:	2300      	movs	r3, #0
 800afaa:	2200      	movs	r2, #0
 800afac:	f000 fd30 	bl	800ba10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800afb0:	e171      	b.n	800b296 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	f040 816e 	bne.w	800b296 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	220b      	movs	r2, #11
 800afbe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2203      	movs	r2, #3
 800afc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800afd4:	2300      	movs	r3, #0
 800afd6:	2200      	movs	r2, #0
 800afd8:	f000 fd1a 	bl	800ba10 <osMessageQueuePut>
      break;
 800afdc:	e15b      	b.n	800b296 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6899      	ldr	r1, [r3, #8]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	899a      	ldrh	r2, [r3, #12]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	795b      	ldrb	r3, [r3, #5]
 800afea:	2001      	movs	r0, #1
 800afec:	9000      	str	r0, [sp, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f978 	bl	800b2e4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800affa:	b29a      	uxth	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2206      	movs	r2, #6
 800b004:	761a      	strb	r2, [r3, #24]
      break;
 800b006:	e14d      	b.n	800b2a4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	795b      	ldrb	r3, [r3, #5]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f003 fe30 	bl	800ec74 <USBH_LL_GetURBState>
 800b014:	4603      	mov	r3, r0
 800b016:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d111      	bne.n	800b042 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2207      	movs	r2, #7
 800b022:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2203      	movs	r2, #3
 800b028:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b038:	2300      	movs	r3, #0
 800b03a:	2200      	movs	r2, #0
 800b03c:	f000 fce8 	bl	800ba10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b040:	e12b      	b.n	800b29a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b05      	cmp	r3, #5
 800b046:	d113      	bne.n	800b070 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	220c      	movs	r2, #12
 800b04c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b04e:	2303      	movs	r3, #3
 800b050:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2203      	movs	r2, #3
 800b056:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b066:	2300      	movs	r3, #0
 800b068:	2200      	movs	r2, #0
 800b06a:	f000 fcd1 	bl	800ba10 <osMessageQueuePut>
      break;
 800b06e:	e114      	b.n	800b29a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b02      	cmp	r3, #2
 800b074:	d111      	bne.n	800b09a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2205      	movs	r2, #5
 800b07a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2203      	movs	r2, #3
 800b080:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b090:	2300      	movs	r3, #0
 800b092:	2200      	movs	r2, #0
 800b094:	f000 fcbc 	bl	800ba10 <osMessageQueuePut>
      break;
 800b098:	e0ff      	b.n	800b29a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	f040 80fc 	bne.w	800b29a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	220b      	movs	r2, #11
 800b0a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2203      	movs	r2, #3
 800b0b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f000 fca4 	bl	800ba10 <osMessageQueuePut>
      break;
 800b0c8:	e0e7      	b.n	800b29a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f92b 	bl	800b32e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2208      	movs	r2, #8
 800b0e8:	761a      	strb	r2, [r3, #24]

      break;
 800b0ea:	e0db      	b.n	800b2a4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	791b      	ldrb	r3, [r3, #4]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f003 fdbe 	bl	800ec74 <USBH_LL_GetURBState>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d113      	bne.n	800b12a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	220d      	movs	r2, #13
 800b106:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2203      	movs	r2, #3
 800b110:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b120:	2300      	movs	r3, #0
 800b122:	2200      	movs	r2, #0
 800b124:	f000 fc74 	bl	800ba10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b128:	e0b9      	b.n	800b29e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b12a:	7bbb      	ldrb	r3, [r7, #14]
 800b12c:	2b04      	cmp	r3, #4
 800b12e:	d111      	bne.n	800b154 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	220b      	movs	r2, #11
 800b134:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2203      	movs	r2, #3
 800b13a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b14a:	2300      	movs	r3, #0
 800b14c:	2200      	movs	r2, #0
 800b14e:	f000 fc5f 	bl	800ba10 <osMessageQueuePut>
      break;
 800b152:	e0a4      	b.n	800b29e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	2b05      	cmp	r3, #5
 800b158:	f040 80a1 	bne.w	800b29e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b15c:	2303      	movs	r3, #3
 800b15e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2203      	movs	r2, #3
 800b164:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b174:	2300      	movs	r3, #0
 800b176:	2200      	movs	r2, #0
 800b178:	f000 fc4a 	bl	800ba10 <osMessageQueuePut>
      break;
 800b17c:	e08f      	b.n	800b29e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	795b      	ldrb	r3, [r3, #5]
 800b182:	2201      	movs	r2, #1
 800b184:	9200      	str	r2, [sp, #0]
 800b186:	2200      	movs	r2, #0
 800b188:	2100      	movs	r1, #0
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f8aa 	bl	800b2e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	220a      	movs	r2, #10
 800b1a0:	761a      	strb	r2, [r3, #24]
      break;
 800b1a2:	e07f      	b.n	800b2a4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	795b      	ldrb	r3, [r3, #5]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f003 fd62 	bl	800ec74 <USBH_LL_GetURBState>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d113      	bne.n	800b1e2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	220d      	movs	r2, #13
 800b1c2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2203      	movs	r2, #3
 800b1c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f000 fc18 	bl	800ba10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1e0:	e05f      	b.n	800b2a2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d111      	bne.n	800b20c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2209      	movs	r2, #9
 800b1ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2203      	movs	r2, #3
 800b1f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b202:	2300      	movs	r3, #0
 800b204:	2200      	movs	r2, #0
 800b206:	f000 fc03 	bl	800ba10 <osMessageQueuePut>
      break;
 800b20a:	e04a      	b.n	800b2a2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d147      	bne.n	800b2a2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	220b      	movs	r2, #11
 800b216:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2203      	movs	r2, #3
 800b21c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b22c:	2300      	movs	r3, #0
 800b22e:	2200      	movs	r2, #0
 800b230:	f000 fbee 	bl	800ba10 <osMessageQueuePut>
      break;
 800b234:	e035      	b.n	800b2a2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	7e5b      	ldrb	r3, [r3, #25]
 800b23a:	3301      	adds	r3, #1
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	765a      	strb	r2, [r3, #25]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	7e5b      	ldrb	r3, [r3, #25]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d806      	bhi.n	800b258 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b256:	e025      	b.n	800b2a4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b25e:	2106      	movs	r1, #6
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	795b      	ldrb	r3, [r3, #5]
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f90d 	bl	800b490 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	791b      	ldrb	r3, [r3, #4]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f907 	bl	800b490 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b288:	2302      	movs	r3, #2
 800b28a:	73fb      	strb	r3, [r7, #15]
      break;
 800b28c:	e00a      	b.n	800b2a4 <USBH_HandleControl+0x484>

    default:
      break;
 800b28e:	bf00      	nop
 800b290:	e008      	b.n	800b2a4 <USBH_HandleControl+0x484>
      break;
 800b292:	bf00      	nop
 800b294:	e006      	b.n	800b2a4 <USBH_HandleControl+0x484>
      break;
 800b296:	bf00      	nop
 800b298:	e004      	b.n	800b2a4 <USBH_HandleControl+0x484>
      break;
 800b29a:	bf00      	nop
 800b29c:	e002      	b.n	800b2a4 <USBH_HandleControl+0x484>
      break;
 800b29e:	bf00      	nop
 800b2a0:	e000      	b.n	800b2a4 <USBH_HandleControl+0x484>
      break;
 800b2a2:	bf00      	nop
  }

  return status;
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop

0800b2b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af04      	add	r7, sp, #16
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b2be:	79f9      	ldrb	r1, [r7, #7]
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	9303      	str	r3, [sp, #12]
 800b2c4:	2308      	movs	r3, #8
 800b2c6:	9302      	str	r3, [sp, #8]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f003 fc9c 	bl	800ec12 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af04      	add	r7, sp, #16
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	80fb      	strh	r3, [r7, #6]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b304:	2300      	movs	r3, #0
 800b306:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b308:	7979      	ldrb	r1, [r7, #5]
 800b30a:	7e3b      	ldrb	r3, [r7, #24]
 800b30c:	9303      	str	r3, [sp, #12]
 800b30e:	88fb      	ldrh	r3, [r7, #6]
 800b310:	9302      	str	r3, [sp, #8]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	2301      	movs	r3, #1
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	2300      	movs	r3, #0
 800b31c:	2200      	movs	r2, #0
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f003 fc77 	bl	800ec12 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b088      	sub	sp, #32
 800b332:	af04      	add	r7, sp, #16
 800b334:	60f8      	str	r0, [r7, #12]
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	4611      	mov	r1, r2
 800b33a:	461a      	mov	r2, r3
 800b33c:	460b      	mov	r3, r1
 800b33e:	80fb      	strh	r3, [r7, #6]
 800b340:	4613      	mov	r3, r2
 800b342:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b344:	7979      	ldrb	r1, [r7, #5]
 800b346:	2300      	movs	r3, #0
 800b348:	9303      	str	r3, [sp, #12]
 800b34a:	88fb      	ldrh	r3, [r7, #6]
 800b34c:	9302      	str	r3, [sp, #8]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	2301      	movs	r3, #1
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	2300      	movs	r3, #0
 800b358:	2201      	movs	r2, #1
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f003 fc59 	bl	800ec12 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b360:	2300      	movs	r3, #0

}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b088      	sub	sp, #32
 800b36e:	af04      	add	r7, sp, #16
 800b370:	60f8      	str	r0, [r7, #12]
 800b372:	60b9      	str	r1, [r7, #8]
 800b374:	4611      	mov	r1, r2
 800b376:	461a      	mov	r2, r3
 800b378:	460b      	mov	r3, r1
 800b37a:	80fb      	strh	r3, [r7, #6]
 800b37c:	4613      	mov	r3, r2
 800b37e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b38e:	7979      	ldrb	r1, [r7, #5]
 800b390:	7e3b      	ldrb	r3, [r7, #24]
 800b392:	9303      	str	r3, [sp, #12]
 800b394:	88fb      	ldrh	r3, [r7, #6]
 800b396:	9302      	str	r3, [sp, #8]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	2301      	movs	r3, #1
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f003 fc34 	bl	800ec12 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af04      	add	r7, sp, #16
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4611      	mov	r1, r2
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	80fb      	strh	r3, [r7, #6]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b3ca:	7979      	ldrb	r1, [r7, #5]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9303      	str	r3, [sp, #12]
 800b3d0:	88fb      	ldrh	r3, [r7, #6]
 800b3d2:	9302      	str	r3, [sp, #8]
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	2301      	movs	r3, #1
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	2302      	movs	r3, #2
 800b3de:	2201      	movs	r2, #1
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f003 fc16 	bl	800ec12 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af04      	add	r7, sp, #16
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4603      	mov	r3, r0
 800b400:	70fb      	strb	r3, [r7, #3]
 800b402:	460b      	mov	r3, r1
 800b404:	70bb      	strb	r3, [r7, #2]
 800b406:	4613      	mov	r3, r2
 800b408:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b40a:	7878      	ldrb	r0, [r7, #1]
 800b40c:	78ba      	ldrb	r2, [r7, #2]
 800b40e:	78f9      	ldrb	r1, [r7, #3]
 800b410:	8b3b      	ldrh	r3, [r7, #24]
 800b412:	9302      	str	r3, [sp, #8]
 800b414:	7d3b      	ldrb	r3, [r7, #20]
 800b416:	9301      	str	r3, [sp, #4]
 800b418:	7c3b      	ldrb	r3, [r7, #16]
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	4603      	mov	r3, r0
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f003 fba9 	bl	800eb76 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b082      	sub	sp, #8
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	460b      	mov	r3, r1
 800b438:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b43a:	78fb      	ldrb	r3, [r7, #3]
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f003 fbc8 	bl	800ebd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	460b      	mov	r3, r1
 800b458:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f836 	bl	800b4cc <USBH_GetFreePipe>
 800b460:	4603      	mov	r3, r0
 800b462:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b464:	89fb      	ldrh	r3, [r7, #14]
 800b466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d00a      	beq.n	800b484 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b46e:	78fa      	ldrb	r2, [r7, #3]
 800b470:	89fb      	ldrh	r3, [r7, #14]
 800b472:	f003 030f 	and.w	r3, r3, #15
 800b476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	33e0      	adds	r3, #224	; 0xe0
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	440b      	add	r3, r1
 800b482:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b484:	89fb      	ldrh	r3, [r7, #14]
 800b486:	b2db      	uxtb	r3, r3
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	2b0a      	cmp	r3, #10
 800b4a0:	d80d      	bhi.n	800b4be <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b4a2:	78fb      	ldrb	r3, [r7, #3]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	33e0      	adds	r3, #224	; 0xe0
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	78fb      	ldrb	r3, [r7, #3]
 800b4b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b4b4:	6879      	ldr	r1, [r7, #4]
 800b4b6:	33e0      	adds	r3, #224	; 0xe0
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	440b      	add	r3, r1
 800b4bc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
 800b4dc:	e00f      	b.n	800b4fe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	33e0      	adds	r3, #224	; 0xe0
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d102      	bne.n	800b4f8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	e007      	b.n	800b508 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	73fb      	strb	r3, [r7, #15]
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
 800b500:	2b0a      	cmp	r3, #10
 800b502:	d9ec      	bls.n	800b4de <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b504:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <__NVIC_SetPriority>:
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	6039      	str	r1, [r7, #0]
 800b51e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b524:	2b00      	cmp	r3, #0
 800b526:	db0a      	blt.n	800b53e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	490c      	ldr	r1, [pc, #48]	; (800b560 <__NVIC_SetPriority+0x4c>)
 800b52e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b532:	0112      	lsls	r2, r2, #4
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	440b      	add	r3, r1
 800b538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b53c:	e00a      	b.n	800b554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	b2da      	uxtb	r2, r3
 800b542:	4908      	ldr	r1, [pc, #32]	; (800b564 <__NVIC_SetPriority+0x50>)
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	f003 030f 	and.w	r3, r3, #15
 800b54a:	3b04      	subs	r3, #4
 800b54c:	0112      	lsls	r2, r2, #4
 800b54e:	b2d2      	uxtb	r2, r2
 800b550:	440b      	add	r3, r1
 800b552:	761a      	strb	r2, [r3, #24]
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	e000e100 	.word	0xe000e100
 800b564:	e000ed00 	.word	0xe000ed00

0800b568 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b568:	b580      	push	{r7, lr}
 800b56a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b56c:	4b05      	ldr	r3, [pc, #20]	; (800b584 <SysTick_Handler+0x1c>)
 800b56e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b570:	f002 f80a 	bl	800d588 <xTaskGetSchedulerState>
 800b574:	4603      	mov	r3, r0
 800b576:	2b01      	cmp	r3, #1
 800b578:	d001      	beq.n	800b57e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b57a:	f002 fead 	bl	800e2d8 <xPortSysTickHandler>
  }
}
 800b57e:	bf00      	nop
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	e000e010 	.word	0xe000e010

0800b588 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b58c:	2100      	movs	r1, #0
 800b58e:	f06f 0004 	mvn.w	r0, #4
 800b592:	f7ff ffbf 	bl	800b514 <__NVIC_SetPriority>
#endif
}
 800b596:	bf00      	nop
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5a2:	f3ef 8305 	mrs	r3, IPSR
 800b5a6:	603b      	str	r3, [r7, #0]
  return(result);
 800b5a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b5ae:	f06f 0305 	mvn.w	r3, #5
 800b5b2:	607b      	str	r3, [r7, #4]
 800b5b4:	e00c      	b.n	800b5d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b5b6:	4b0a      	ldr	r3, [pc, #40]	; (800b5e0 <osKernelInitialize+0x44>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d105      	bne.n	800b5ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b5be:	4b08      	ldr	r3, [pc, #32]	; (800b5e0 <osKernelInitialize+0x44>)
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	607b      	str	r3, [r7, #4]
 800b5c8:	e002      	b.n	800b5d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b5ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b5d0:	687b      	ldr	r3, [r7, #4]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	200000f8 	.word	0x200000f8

0800b5e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ea:	f3ef 8305 	mrs	r3, IPSR
 800b5ee:	603b      	str	r3, [r7, #0]
  return(result);
 800b5f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <osKernelStart+0x1a>
    stat = osErrorISR;
 800b5f6:	f06f 0305 	mvn.w	r3, #5
 800b5fa:	607b      	str	r3, [r7, #4]
 800b5fc:	e010      	b.n	800b620 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b5fe:	4b0b      	ldr	r3, [pc, #44]	; (800b62c <osKernelStart+0x48>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d109      	bne.n	800b61a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b606:	f7ff ffbf 	bl	800b588 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b60a:	4b08      	ldr	r3, [pc, #32]	; (800b62c <osKernelStart+0x48>)
 800b60c:	2202      	movs	r2, #2
 800b60e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b610:	f001 fb72 	bl	800ccf8 <vTaskStartScheduler>
      stat = osOK;
 800b614:	2300      	movs	r3, #0
 800b616:	607b      	str	r3, [r7, #4]
 800b618:	e002      	b.n	800b620 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b61a:	f04f 33ff 	mov.w	r3, #4294967295
 800b61e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b620:	687b      	ldr	r3, [r7, #4]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	200000f8 	.word	0x200000f8

0800b630 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b630:	b580      	push	{r7, lr}
 800b632:	b08e      	sub	sp, #56	; 0x38
 800b634:	af04      	add	r7, sp, #16
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b63c:	2300      	movs	r3, #0
 800b63e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b640:	f3ef 8305 	mrs	r3, IPSR
 800b644:	617b      	str	r3, [r7, #20]
  return(result);
 800b646:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d17e      	bne.n	800b74a <osThreadNew+0x11a>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d07b      	beq.n	800b74a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b652:	2380      	movs	r3, #128	; 0x80
 800b654:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b656:	2318      	movs	r3, #24
 800b658:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b65a:	2300      	movs	r3, #0
 800b65c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b65e:	f04f 33ff 	mov.w	r3, #4294967295
 800b662:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d045      	beq.n	800b6f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <osThreadNew+0x48>
        name = attr->name;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	699b      	ldr	r3, [r3, #24]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d008      	beq.n	800b69e <osThreadNew+0x6e>
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	2b38      	cmp	r3, #56	; 0x38
 800b690:	d805      	bhi.n	800b69e <osThreadNew+0x6e>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <osThreadNew+0x72>
        return (NULL);
 800b69e:	2300      	movs	r3, #0
 800b6a0:	e054      	b.n	800b74c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	695b      	ldr	r3, [r3, #20]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d003      	beq.n	800b6b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	089b      	lsrs	r3, r3, #2
 800b6b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00e      	beq.n	800b6d8 <osThreadNew+0xa8>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	2b5b      	cmp	r3, #91	; 0x5b
 800b6c0:	d90a      	bls.n	800b6d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d006      	beq.n	800b6d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d002      	beq.n	800b6d8 <osThreadNew+0xa8>
        mem = 1;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	61bb      	str	r3, [r7, #24]
 800b6d6:	e010      	b.n	800b6fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10c      	bne.n	800b6fa <osThreadNew+0xca>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d108      	bne.n	800b6fa <osThreadNew+0xca>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d104      	bne.n	800b6fa <osThreadNew+0xca>
          mem = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	61bb      	str	r3, [r7, #24]
 800b6f4:	e001      	b.n	800b6fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d110      	bne.n	800b722 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b708:	9202      	str	r2, [sp, #8]
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6a3a      	ldr	r2, [r7, #32]
 800b714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f001 f918 	bl	800c94c <xTaskCreateStatic>
 800b71c:	4603      	mov	r3, r0
 800b71e:	613b      	str	r3, [r7, #16]
 800b720:	e013      	b.n	800b74a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d110      	bne.n	800b74a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	f107 0310 	add.w	r3, r7, #16
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f001 f963 	bl	800ca06 <xTaskCreate>
 800b740:	4603      	mov	r3, r0
 800b742:	2b01      	cmp	r3, #1
 800b744:	d001      	beq.n	800b74a <osThreadNew+0x11a>
            hTask = NULL;
 800b746:	2300      	movs	r3, #0
 800b748:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b74a:	693b      	ldr	r3, [r7, #16]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3728      	adds	r7, #40	; 0x28
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b75c:	f3ef 8305 	mrs	r3, IPSR
 800b760:	60bb      	str	r3, [r7, #8]
  return(result);
 800b762:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <osDelay+0x1c>
    stat = osErrorISR;
 800b768:	f06f 0305 	mvn.w	r3, #5
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	e007      	b.n	800b780 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f001 fa88 	bl	800cc90 <vTaskDelay>
    }
  }

  return (stat);
 800b780:	68fb      	ldr	r3, [r7, #12]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b084      	sub	sp, #16
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f002 fbc0 	bl	800df18 <pvTimerGetTimerID>
 800b798:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d005      	beq.n	800b7ac <TimerCallback+0x22>
    callb->func (callb->arg);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	6852      	ldr	r2, [r2, #4]
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4798      	blx	r3
  }
}
 800b7ac:	bf00      	nop
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08c      	sub	sp, #48	; 0x30
 800b7b8:	af02      	add	r7, sp, #8
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	607a      	str	r2, [r7, #4]
 800b7be:	603b      	str	r3, [r7, #0]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7c8:	f3ef 8305 	mrs	r3, IPSR
 800b7cc:	613b      	str	r3, [r7, #16]
  return(result);
 800b7ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d163      	bne.n	800b89c <osTimerNew+0xe8>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d060      	beq.n	800b89c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b7da:	2008      	movs	r0, #8
 800b7dc:	f002 fe0c 	bl	800e3f8 <pvPortMalloc>
 800b7e0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d059      	beq.n	800b89c <osTimerNew+0xe8>
      callb->func = func;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b7f4:	7afb      	ldrb	r3, [r7, #11]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d102      	bne.n	800b800 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	61fb      	str	r3, [r7, #28]
 800b7fe:	e001      	b.n	800b804 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b800:	2301      	movs	r3, #1
 800b802:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b804:	f04f 33ff 	mov.w	r3, #4294967295
 800b808:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01c      	beq.n	800b84e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <osTimerNew+0x6e>
          name = attr->name;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d006      	beq.n	800b838 <osTimerNew+0x84>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	2b2b      	cmp	r3, #43	; 0x2b
 800b830:	d902      	bls.n	800b838 <osTimerNew+0x84>
          mem = 1;
 800b832:	2301      	movs	r3, #1
 800b834:	61bb      	str	r3, [r7, #24]
 800b836:	e00c      	b.n	800b852 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d108      	bne.n	800b852 <osTimerNew+0x9e>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d104      	bne.n	800b852 <osTimerNew+0x9e>
            mem = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	61bb      	str	r3, [r7, #24]
 800b84c:	e001      	b.n	800b852 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d10c      	bne.n	800b872 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <osTimerNew+0xf4>)
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	69fa      	ldr	r2, [r7, #28]
 800b866:	2101      	movs	r1, #1
 800b868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b86a:	f001 ffd6 	bl	800d81a <xTimerCreateStatic>
 800b86e:	6238      	str	r0, [r7, #32]
 800b870:	e00b      	b.n	800b88a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d108      	bne.n	800b88a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b878:	4b0b      	ldr	r3, [pc, #44]	; (800b8a8 <osTimerNew+0xf4>)
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	69fa      	ldr	r2, [r7, #28]
 800b880:	2101      	movs	r1, #1
 800b882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b884:	f001 ffa8 	bl	800d7d8 <xTimerCreate>
 800b888:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d105      	bne.n	800b89c <osTimerNew+0xe8>
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d002      	beq.n	800b89c <osTimerNew+0xe8>
        vPortFree (callb);
 800b896:	6978      	ldr	r0, [r7, #20]
 800b898:	f002 fe7a 	bl	800e590 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b89c:	6a3b      	ldr	r3, [r7, #32]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3728      	adds	r7, #40	; 0x28
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0800b78b 	.word	0x0800b78b

0800b8ac <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8b8:	f3ef 8305 	mrs	r3, IPSR
 800b8bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8be:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d12d      	bne.n	800b920 <osEventFlagsNew+0x74>
    mem = -1;
 800b8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d015      	beq.n	800b8fc <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d006      	beq.n	800b8e6 <osEventFlagsNew+0x3a>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	2b1f      	cmp	r3, #31
 800b8de:	d902      	bls.n	800b8e6 <osEventFlagsNew+0x3a>
        mem = 1;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	613b      	str	r3, [r7, #16]
 800b8e4:	e00c      	b.n	800b900 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d108      	bne.n	800b900 <osEventFlagsNew+0x54>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d104      	bne.n	800b900 <osEventFlagsNew+0x54>
          mem = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	613b      	str	r3, [r7, #16]
 800b8fa:	e001      	b.n	800b900 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d106      	bne.n	800b914 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 f972 	bl	800bbf4 <xEventGroupCreateStatic>
 800b910:	6178      	str	r0, [r7, #20]
 800b912:	e005      	b.n	800b920 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800b91a:	f000 f9a2 	bl	800bc62 <xEventGroupCreate>
 800b91e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800b920:	697b      	ldr	r3, [r7, #20]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b08a      	sub	sp, #40	; 0x28
 800b92e:	af02      	add	r7, sp, #8
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b936:	2300      	movs	r3, #0
 800b938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b93a:	f3ef 8305 	mrs	r3, IPSR
 800b93e:	613b      	str	r3, [r7, #16]
  return(result);
 800b940:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b942:	2b00      	cmp	r3, #0
 800b944:	d15f      	bne.n	800ba06 <osMessageQueueNew+0xdc>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d05c      	beq.n	800ba06 <osMessageQueueNew+0xdc>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d059      	beq.n	800ba06 <osMessageQueueNew+0xdc>
    mem = -1;
 800b952:	f04f 33ff 	mov.w	r3, #4294967295
 800b956:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d029      	beq.n	800b9b2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d012      	beq.n	800b98c <osMessageQueueNew+0x62>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	2b4f      	cmp	r3, #79	; 0x4f
 800b96c:	d90e      	bls.n	800b98c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695a      	ldr	r2, [r3, #20]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	fb01 f303 	mul.w	r3, r1, r3
 800b982:	429a      	cmp	r2, r3
 800b984:	d302      	bcc.n	800b98c <osMessageQueueNew+0x62>
        mem = 1;
 800b986:	2301      	movs	r3, #1
 800b988:	61bb      	str	r3, [r7, #24]
 800b98a:	e014      	b.n	800b9b6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d110      	bne.n	800b9b6 <osMessageQueueNew+0x8c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10c      	bne.n	800b9b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d108      	bne.n	800b9b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d104      	bne.n	800b9b6 <osMessageQueueNew+0x8c>
          mem = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	61bb      	str	r3, [r7, #24]
 800b9b0:	e001      	b.n	800b9b6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d10b      	bne.n	800b9d4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	691a      	ldr	r2, [r3, #16]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	9100      	str	r1, [sp, #0]
 800b9c8:	68b9      	ldr	r1, [r7, #8]
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 fa80 	bl	800bed0 <xQueueGenericCreateStatic>
 800b9d0:	61f8      	str	r0, [r7, #28]
 800b9d2:	e008      	b.n	800b9e6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d105      	bne.n	800b9e6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b9da:	2200      	movs	r2, #0
 800b9dc:	68b9      	ldr	r1, [r7, #8]
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 faee 	bl	800bfc0 <xQueueGenericCreate>
 800b9e4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00c      	beq.n	800ba06 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <osMessageQueueNew+0xd0>
        name = attr->name;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e001      	b.n	800b9fe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b9fe:	6979      	ldr	r1, [r7, #20]
 800ba00:	69f8      	ldr	r0, [r7, #28]
 800ba02:	f000 ff45 	bl	800c890 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ba06:	69fb      	ldr	r3, [r7, #28]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3720      	adds	r7, #32
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba28:	f3ef 8305 	mrs	r3, IPSR
 800ba2c:	617b      	str	r3, [r7, #20]
  return(result);
 800ba2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d028      	beq.n	800ba86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d005      	beq.n	800ba46 <osMessageQueuePut+0x36>
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <osMessageQueuePut+0x36>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ba46:	f06f 0303 	mvn.w	r3, #3
 800ba4a:	61fb      	str	r3, [r7, #28]
 800ba4c:	e038      	b.n	800bac0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ba52:	f107 0210 	add.w	r2, r7, #16
 800ba56:	2300      	movs	r3, #0
 800ba58:	68b9      	ldr	r1, [r7, #8]
 800ba5a:	69b8      	ldr	r0, [r7, #24]
 800ba5c:	f000 fc0c 	bl	800c278 <xQueueGenericSendFromISR>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d003      	beq.n	800ba6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ba66:	f06f 0302 	mvn.w	r3, #2
 800ba6a:	61fb      	str	r3, [r7, #28]
 800ba6c:	e028      	b.n	800bac0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d025      	beq.n	800bac0 <osMessageQueuePut+0xb0>
 800ba74:	4b15      	ldr	r3, [pc, #84]	; (800bacc <osMessageQueuePut+0xbc>)
 800ba76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba7a:	601a      	str	r2, [r3, #0]
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	e01c      	b.n	800bac0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <osMessageQueuePut+0x82>
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d103      	bne.n	800ba9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ba92:	f06f 0303 	mvn.w	r3, #3
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	e012      	b.n	800bac0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	69b8      	ldr	r0, [r7, #24]
 800baa2:	f000 faeb 	bl	800c07c <xQueueGenericSend>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d009      	beq.n	800bac0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bab2:	f06f 0301 	mvn.w	r3, #1
 800bab6:	61fb      	str	r3, [r7, #28]
 800bab8:	e002      	b.n	800bac0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800baba:	f06f 0302 	mvn.w	r3, #2
 800babe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bac0:	69fb      	ldr	r3, [r7, #28]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3720      	adds	r7, #32
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bae6:	f3ef 8305 	mrs	r3, IPSR
 800baea:	617b      	str	r3, [r7, #20]
  return(result);
 800baec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d028      	beq.n	800bb44 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <osMessageQueueGet+0x34>
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <osMessageQueueGet+0x34>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d003      	beq.n	800bb0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bb04:	f06f 0303 	mvn.w	r3, #3
 800bb08:	61fb      	str	r3, [r7, #28]
 800bb0a:	e037      	b.n	800bb7c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bb10:	f107 0310 	add.w	r3, r7, #16
 800bb14:	461a      	mov	r2, r3
 800bb16:	68b9      	ldr	r1, [r7, #8]
 800bb18:	69b8      	ldr	r0, [r7, #24]
 800bb1a:	f000 fd29 	bl	800c570 <xQueueReceiveFromISR>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d003      	beq.n	800bb2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bb24:	f06f 0302 	mvn.w	r3, #2
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	e027      	b.n	800bb7c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d024      	beq.n	800bb7c <osMessageQueueGet+0xac>
 800bb32:	4b15      	ldr	r3, [pc, #84]	; (800bb88 <osMessageQueueGet+0xb8>)
 800bb34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	e01b      	b.n	800bb7c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <osMessageQueueGet+0x80>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d103      	bne.n	800bb58 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bb50:	f06f 0303 	mvn.w	r3, #3
 800bb54:	61fb      	str	r3, [r7, #28]
 800bb56:	e011      	b.n	800bb7c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	68b9      	ldr	r1, [r7, #8]
 800bb5c:	69b8      	ldr	r0, [r7, #24]
 800bb5e:	f000 fc27 	bl	800c3b0 <xQueueReceive>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d009      	beq.n	800bb7c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d003      	beq.n	800bb76 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bb6e:	f06f 0301 	mvn.w	r3, #1
 800bb72:	61fb      	str	r3, [r7, #28]
 800bb74:	e002      	b.n	800bb7c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bb76:	f06f 0302 	mvn.w	r3, #2
 800bb7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bb7c:	69fb      	ldr	r3, [r7, #28]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3720      	adds	r7, #32
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	e000ed04 	.word	0xe000ed04

0800bb8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4a07      	ldr	r2, [pc, #28]	; (800bbb8 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	4a06      	ldr	r2, [pc, #24]	; (800bbbc <vApplicationGetIdleTaskMemory+0x30>)
 800bba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2280      	movs	r2, #128	; 0x80
 800bba8:	601a      	str	r2, [r3, #0]
}
 800bbaa:	bf00      	nop
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	200000fc 	.word	0x200000fc
 800bbbc:	20000158 	.word	0x20000158

0800bbc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4a07      	ldr	r2, [pc, #28]	; (800bbec <vApplicationGetTimerTaskMemory+0x2c>)
 800bbd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	4a06      	ldr	r2, [pc, #24]	; (800bbf0 <vApplicationGetTimerTaskMemory+0x30>)
 800bbd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbde:	601a      	str	r2, [r3, #0]
}
 800bbe0:	bf00      	nop
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	20000358 	.word	0x20000358
 800bbf0:	200003b4 	.word	0x200003b4

0800bbf4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10a      	bne.n	800bc18 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc14:	bf00      	nop
 800bc16:	e7fe      	b.n	800bc16 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800bc18:	2320      	movs	r3, #32
 800bc1a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2b20      	cmp	r3, #32
 800bc20:	d00a      	beq.n	800bc38 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	60fb      	str	r3, [r7, #12]
}
 800bc34:	bf00      	nop
 800bc36:	e7fe      	b.n	800bc36 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00a      	beq.n	800bc58 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2200      	movs	r2, #0
 800bc46:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 f822 	bl	800bc96 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	2201      	movs	r2, #1
 800bc56:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800bc58:	697b      	ldr	r3, [r7, #20]
	}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800bc68:	2020      	movs	r0, #32
 800bc6a:	f002 fbc5 	bl	800e3f8 <pvPortMalloc>
 800bc6e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00a      	beq.n	800bc8c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4618      	mov	r0, r3
 800bc82:	f000 f808 	bl	800bc96 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800bc8c:	687b      	ldr	r3, [r7, #4]
	}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f103 0208 	add.w	r2, r3, #8
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bcae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f103 0208 	add.w	r2, r3, #8
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f103 0208 	add.w	r2, r3, #8
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bcca:	bf00      	nop
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b083      	sub	sp, #12
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	689a      	ldr	r2, [r3, #8]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	1c5a      	adds	r2, r3, #1
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	601a      	str	r2, [r3, #0]
}
 800bd2c:	bf00      	nop
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4e:	d103      	bne.n	800bd58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	e00c      	b.n	800bd72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3308      	adds	r3, #8
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	e002      	b.n	800bd66 <vListInsert+0x2e>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d2f6      	bcs.n	800bd60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	1c5a      	adds	r2, r3, #1
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	601a      	str	r2, [r3, #0]
}
 800bd9e:	bf00      	nop
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b085      	sub	sp, #20
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	6892      	ldr	r2, [r2, #8]
 800bdc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	6852      	ldr	r2, [r2, #4]
 800bdca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d103      	bne.n	800bdde <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	1e5a      	subs	r2, r3, #1
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
	...

0800be00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10a      	bne.n	800be2a <xQueueGenericReset+0x2a>
	__asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	60bb      	str	r3, [r7, #8]
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be2a:	f002 f9c3 	bl	800e1b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be36:	68f9      	ldr	r1, [r7, #12]
 800be38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be3a:	fb01 f303 	mul.w	r3, r1, r3
 800be3e:	441a      	add	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be5a:	3b01      	subs	r3, #1
 800be5c:	68f9      	ldr	r1, [r7, #12]
 800be5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be60:	fb01 f303 	mul.w	r3, r1, r3
 800be64:	441a      	add	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	22ff      	movs	r2, #255	; 0xff
 800be6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	22ff      	movs	r2, #255	; 0xff
 800be76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d114      	bne.n	800beaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d01a      	beq.n	800bebe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	3310      	adds	r3, #16
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 f9bd 	bl	800d20c <xTaskRemoveFromEventList>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d012      	beq.n	800bebe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be98:	4b0c      	ldr	r3, [pc, #48]	; (800becc <xQueueGenericReset+0xcc>)
 800be9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	e009      	b.n	800bebe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3310      	adds	r3, #16
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fef1 	bl	800bc96 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	3324      	adds	r3, #36	; 0x24
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff feec 	bl	800bc96 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bebe:	f002 f9a9 	bl	800e214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bec2:	2301      	movs	r3, #1
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	e000ed04 	.word	0xe000ed04

0800bed0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b08e      	sub	sp, #56	; 0x38
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10a      	bne.n	800befa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bef6:	bf00      	nop
 800bef8:	e7fe      	b.n	800bef8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10a      	bne.n	800bf16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf12:	bf00      	nop
 800bf14:	e7fe      	b.n	800bf14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <xQueueGenericCreateStatic+0x52>
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <xQueueGenericCreateStatic+0x56>
 800bf22:	2301      	movs	r3, #1
 800bf24:	e000      	b.n	800bf28 <xQueueGenericCreateStatic+0x58>
 800bf26:	2300      	movs	r3, #0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10a      	bne.n	800bf42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	623b      	str	r3, [r7, #32]
}
 800bf3e:	bf00      	nop
 800bf40:	e7fe      	b.n	800bf40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d102      	bne.n	800bf4e <xQueueGenericCreateStatic+0x7e>
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <xQueueGenericCreateStatic+0x82>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e000      	b.n	800bf54 <xQueueGenericCreateStatic+0x84>
 800bf52:	2300      	movs	r3, #0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10a      	bne.n	800bf6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	61fb      	str	r3, [r7, #28]
}
 800bf6a:	bf00      	nop
 800bf6c:	e7fe      	b.n	800bf6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf6e:	2350      	movs	r3, #80	; 0x50
 800bf70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	2b50      	cmp	r3, #80	; 0x50
 800bf76:	d00a      	beq.n	800bf8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	61bb      	str	r3, [r7, #24]
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00d      	beq.n	800bfb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfa2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	68b9      	ldr	r1, [r7, #8]
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f000 f83f 	bl	800c034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3730      	adds	r7, #48	; 0x30
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08a      	sub	sp, #40	; 0x28
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <xQueueGenericCreate+0x2a>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	613b      	str	r3, [r7, #16]
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	fb02 f303 	mul.w	r3, r2, r3
 800bff2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	3350      	adds	r3, #80	; 0x50
 800bff8:	4618      	mov	r0, r3
 800bffa:	f002 f9fd 	bl	800e3f8 <pvPortMalloc>
 800bffe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d011      	beq.n	800c02a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	3350      	adds	r3, #80	; 0x50
 800c00e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c018:	79fa      	ldrb	r2, [r7, #7]
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	4613      	mov	r3, r2
 800c020:	697a      	ldr	r2, [r7, #20]
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 f805 	bl	800c034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c02a:	69bb      	ldr	r3, [r7, #24]
	}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3720      	adds	r7, #32
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
 800c040:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d103      	bne.n	800c050 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	e002      	b.n	800c056 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	68ba      	ldr	r2, [r7, #8]
 800c060:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c062:	2101      	movs	r1, #1
 800c064:	69b8      	ldr	r0, [r7, #24]
 800c066:	f7ff fecb 	bl	800be00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	78fa      	ldrb	r2, [r7, #3]
 800c06e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c072:	bf00      	nop
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b08e      	sub	sp, #56	; 0x38
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c08a:	2300      	movs	r3, #0
 800c08c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	2b00      	cmp	r3, #0
 800c096:	d10a      	bne.n	800c0ae <xQueueGenericSend+0x32>
	__asm volatile
 800c098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09c:	f383 8811 	msr	BASEPRI, r3
 800c0a0:	f3bf 8f6f 	isb	sy
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0aa:	bf00      	nop
 800c0ac:	e7fe      	b.n	800c0ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d103      	bne.n	800c0bc <xQueueGenericSend+0x40>
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <xQueueGenericSend+0x44>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e000      	b.n	800c0c2 <xQueueGenericSend+0x46>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10a      	bne.n	800c0dc <xQueueGenericSend+0x60>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d103      	bne.n	800c0ea <xQueueGenericSend+0x6e>
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d101      	bne.n	800c0ee <xQueueGenericSend+0x72>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e000      	b.n	800c0f0 <xQueueGenericSend+0x74>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <xQueueGenericSend+0x8e>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	623b      	str	r3, [r7, #32]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c10a:	f001 fa3d 	bl	800d588 <xTaskGetSchedulerState>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d102      	bne.n	800c11a <xQueueGenericSend+0x9e>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <xQueueGenericSend+0xa2>
 800c11a:	2301      	movs	r3, #1
 800c11c:	e000      	b.n	800c120 <xQueueGenericSend+0xa4>
 800c11e:	2300      	movs	r3, #0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10a      	bne.n	800c13a <xQueueGenericSend+0xbe>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	61fb      	str	r3, [r7, #28]
}
 800c136:	bf00      	nop
 800c138:	e7fe      	b.n	800c138 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c13a:	f002 f83b 	bl	800e1b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c146:	429a      	cmp	r2, r3
 800c148:	d302      	bcc.n	800c150 <xQueueGenericSend+0xd4>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d129      	bne.n	800c1a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	68b9      	ldr	r1, [r7, #8]
 800c154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c156:	f000 fa8b 	bl	800c670 <prvCopyDataToQueue>
 800c15a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	2b00      	cmp	r3, #0
 800c162:	d010      	beq.n	800c186 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	3324      	adds	r3, #36	; 0x24
 800c168:	4618      	mov	r0, r3
 800c16a:	f001 f84f 	bl	800d20c <xTaskRemoveFromEventList>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d013      	beq.n	800c19c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c174:	4b3f      	ldr	r3, [pc, #252]	; (800c274 <xQueueGenericSend+0x1f8>)
 800c176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c17a:	601a      	str	r2, [r3, #0]
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	e00a      	b.n	800c19c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d007      	beq.n	800c19c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c18c:	4b39      	ldr	r3, [pc, #228]	; (800c274 <xQueueGenericSend+0x1f8>)
 800c18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c19c:	f002 f83a 	bl	800e214 <vPortExitCritical>
				return pdPASS;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e063      	b.n	800c26c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d103      	bne.n	800c1b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1aa:	f002 f833 	bl	800e214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e05c      	b.n	800c26c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1b8:	f107 0314 	add.w	r3, r7, #20
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f001 f889 	bl	800d2d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1c6:	f002 f825 	bl	800e214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1ca:	f000 fdfb 	bl	800cdc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1ce:	f001 fff1 	bl	800e1b4 <vPortEnterCritical>
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1d8:	b25b      	sxtb	r3, r3
 800c1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1de:	d103      	bne.n	800c1e8 <xQueueGenericSend+0x16c>
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1ee:	b25b      	sxtb	r3, r3
 800c1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f4:	d103      	bne.n	800c1fe <xQueueGenericSend+0x182>
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1fe:	f002 f809 	bl	800e214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c202:	1d3a      	adds	r2, r7, #4
 800c204:	f107 0314 	add.w	r3, r7, #20
 800c208:	4611      	mov	r1, r2
 800c20a:	4618      	mov	r0, r3
 800c20c:	f001 f878 	bl	800d300 <xTaskCheckForTimeOut>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d124      	bne.n	800c260 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c218:	f000 fb22 	bl	800c860 <prvIsQueueFull>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d018      	beq.n	800c254 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	3310      	adds	r3, #16
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 ff9e 	bl	800d16c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c232:	f000 faad 	bl	800c790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c236:	f000 fdd3 	bl	800cde0 <xTaskResumeAll>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f47f af7c 	bne.w	800c13a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c242:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <xQueueGenericSend+0x1f8>)
 800c244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	e772      	b.n	800c13a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c256:	f000 fa9b 	bl	800c790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c25a:	f000 fdc1 	bl	800cde0 <xTaskResumeAll>
 800c25e:	e76c      	b.n	800c13a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c262:	f000 fa95 	bl	800c790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c266:	f000 fdbb 	bl	800cde0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c26a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3738      	adds	r7, #56	; 0x38
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	e000ed04 	.word	0xe000ed04

0800c278 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b090      	sub	sp, #64	; 0x40
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10a      	bne.n	800c2a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2a2:	bf00      	nop
 800c2a4:	e7fe      	b.n	800c2a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d103      	bne.n	800c2b4 <xQueueGenericSendFromISR+0x3c>
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <xQueueGenericSendFromISR+0x40>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e000      	b.n	800c2ba <xQueueGenericSendFromISR+0x42>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10a      	bne.n	800c2d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2d0:	bf00      	nop
 800c2d2:	e7fe      	b.n	800c2d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d103      	bne.n	800c2e2 <xQueueGenericSendFromISR+0x6a>
 800c2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d101      	bne.n	800c2e6 <xQueueGenericSendFromISR+0x6e>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e000      	b.n	800c2e8 <xQueueGenericSendFromISR+0x70>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10a      	bne.n	800c302 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	623b      	str	r3, [r7, #32]
}
 800c2fe:	bf00      	nop
 800c300:	e7fe      	b.n	800c300 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c302:	f002 f839 	bl	800e378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c306:	f3ef 8211 	mrs	r2, BASEPRI
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	61fa      	str	r2, [r7, #28]
 800c31c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c31e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c320:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d302      	bcc.n	800c334 <xQueueGenericSendFromISR+0xbc>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b02      	cmp	r3, #2
 800c332:	d12f      	bne.n	800c394 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c342:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	68b9      	ldr	r1, [r7, #8]
 800c348:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c34a:	f000 f991 	bl	800c670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c34e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c356:	d112      	bne.n	800c37e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d016      	beq.n	800c38e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	3324      	adds	r3, #36	; 0x24
 800c364:	4618      	mov	r0, r3
 800c366:	f000 ff51 	bl	800d20c <xTaskRemoveFromEventList>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00e      	beq.n	800c38e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00b      	beq.n	800c38e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	601a      	str	r2, [r3, #0]
 800c37c:	e007      	b.n	800c38e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c37e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c382:	3301      	adds	r3, #1
 800c384:	b2db      	uxtb	r3, r3
 800c386:	b25a      	sxtb	r2, r3
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c38e:	2301      	movs	r3, #1
 800c390:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c392:	e001      	b.n	800c398 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c394:	2300      	movs	r3, #0
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3740      	adds	r7, #64	; 0x40
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08c      	sub	sp, #48	; 0x30
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <xQueueReceive+0x30>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	623b      	str	r3, [r7, #32]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d103      	bne.n	800c3ee <xQueueReceive+0x3e>
 800c3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <xQueueReceive+0x42>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e000      	b.n	800c3f4 <xQueueReceive+0x44>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10a      	bne.n	800c40e <xQueueReceive+0x5e>
	__asm volatile
 800c3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fc:	f383 8811 	msr	BASEPRI, r3
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	61fb      	str	r3, [r7, #28]
}
 800c40a:	bf00      	nop
 800c40c:	e7fe      	b.n	800c40c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c40e:	f001 f8bb 	bl	800d588 <xTaskGetSchedulerState>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <xQueueReceive+0x6e>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <xQueueReceive+0x72>
 800c41e:	2301      	movs	r3, #1
 800c420:	e000      	b.n	800c424 <xQueueReceive+0x74>
 800c422:	2300      	movs	r3, #0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10a      	bne.n	800c43e <xQueueReceive+0x8e>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	61bb      	str	r3, [r7, #24]
}
 800c43a:	bf00      	nop
 800c43c:	e7fe      	b.n	800c43c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c43e:	f001 feb9 	bl	800e1b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c446:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d01f      	beq.n	800c48e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c44e:	68b9      	ldr	r1, [r7, #8]
 800c450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c452:	f000 f977 	bl	800c744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c458:	1e5a      	subs	r2, r3, #1
 800c45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00f      	beq.n	800c486 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	3310      	adds	r3, #16
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 fece 	bl	800d20c <xTaskRemoveFromEventList>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d007      	beq.n	800c486 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c476:	4b3d      	ldr	r3, [pc, #244]	; (800c56c <xQueueReceive+0x1bc>)
 800c478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c47c:	601a      	str	r2, [r3, #0]
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c486:	f001 fec5 	bl	800e214 <vPortExitCritical>
				return pdPASS;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e069      	b.n	800c562 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d103      	bne.n	800c49c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c494:	f001 febe 	bl	800e214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c498:	2300      	movs	r3, #0
 800c49a:	e062      	b.n	800c562 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d106      	bne.n	800c4b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4a2:	f107 0310 	add.w	r3, r7, #16
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 ff14 	bl	800d2d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4b0:	f001 feb0 	bl	800e214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4b4:	f000 fc86 	bl	800cdc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4b8:	f001 fe7c 	bl	800e1b4 <vPortEnterCritical>
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4c2:	b25b      	sxtb	r3, r3
 800c4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c8:	d103      	bne.n	800c4d2 <xQueueReceive+0x122>
 800c4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4d8:	b25b      	sxtb	r3, r3
 800c4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4de:	d103      	bne.n	800c4e8 <xQueueReceive+0x138>
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4e8:	f001 fe94 	bl	800e214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4ec:	1d3a      	adds	r2, r7, #4
 800c4ee:	f107 0310 	add.w	r3, r7, #16
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 ff03 	bl	800d300 <xTaskCheckForTimeOut>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d123      	bne.n	800c548 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c502:	f000 f997 	bl	800c834 <prvIsQueueEmpty>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d017      	beq.n	800c53c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	3324      	adds	r3, #36	; 0x24
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f000 fe29 	bl	800d16c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c51a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c51c:	f000 f938 	bl	800c790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c520:	f000 fc5e 	bl	800cde0 <xTaskResumeAll>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d189      	bne.n	800c43e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c52a:	4b10      	ldr	r3, [pc, #64]	; (800c56c <xQueueReceive+0x1bc>)
 800c52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	e780      	b.n	800c43e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c53e:	f000 f927 	bl	800c790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c542:	f000 fc4d 	bl	800cde0 <xTaskResumeAll>
 800c546:	e77a      	b.n	800c43e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c54a:	f000 f921 	bl	800c790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c54e:	f000 fc47 	bl	800cde0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c554:	f000 f96e 	bl	800c834 <prvIsQueueEmpty>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f43f af6f 	beq.w	800c43e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c560:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c562:	4618      	mov	r0, r3
 800c564:	3730      	adds	r7, #48	; 0x30
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	e000ed04 	.word	0xe000ed04

0800c570 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b08e      	sub	sp, #56	; 0x38
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10a      	bne.n	800c59c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58a:	f383 8811 	msr	BASEPRI, r3
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	623b      	str	r3, [r7, #32]
}
 800c598:	bf00      	nop
 800c59a:	e7fe      	b.n	800c59a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d103      	bne.n	800c5aa <xQueueReceiveFromISR+0x3a>
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <xQueueReceiveFromISR+0x3e>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e000      	b.n	800c5b0 <xQueueReceiveFromISR+0x40>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10a      	bne.n	800c5ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	61fb      	str	r3, [r7, #28]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5ca:	f001 fed5 	bl	800e378 <vPortValidateInterruptPriority>
	__asm volatile
 800c5ce:	f3ef 8211 	mrs	r2, BASEPRI
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	61ba      	str	r2, [r7, #24]
 800c5e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d02f      	beq.n	800c656 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c604:	f000 f89e 	bl	800c744 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	1e5a      	subs	r2, r3, #1
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c618:	d112      	bne.n	800c640 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d016      	beq.n	800c650 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	3310      	adds	r3, #16
 800c626:	4618      	mov	r0, r3
 800c628:	f000 fdf0 	bl	800d20c <xTaskRemoveFromEventList>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00e      	beq.n	800c650 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00b      	beq.n	800c650 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	e007      	b.n	800c650 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c644:	3301      	adds	r3, #1
 800c646:	b2db      	uxtb	r3, r3
 800c648:	b25a      	sxtb	r2, r3
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c650:	2301      	movs	r3, #1
 800c652:	637b      	str	r3, [r7, #52]	; 0x34
 800c654:	e001      	b.n	800c65a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c656:	2300      	movs	r3, #0
 800c658:	637b      	str	r3, [r7, #52]	; 0x34
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f383 8811 	msr	BASEPRI, r3
}
 800c664:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3738      	adds	r7, #56	; 0x38
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c67c:	2300      	movs	r3, #0
 800c67e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10d      	bne.n	800c6aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d14d      	bne.n	800c732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 ff92 	bl	800d5c4 <xTaskPriorityDisinherit>
 800c6a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	609a      	str	r2, [r3, #8]
 800c6a8:	e043      	b.n	800c732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d119      	bne.n	800c6e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6858      	ldr	r0, [r3, #4]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	68b9      	ldr	r1, [r7, #8]
 800c6bc:	f002 fbc2 	bl	800ee44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c8:	441a      	add	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d32b      	bcc.n	800c732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	605a      	str	r2, [r3, #4]
 800c6e2:	e026      	b.n	800c732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	68d8      	ldr	r0, [r3, #12]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	68b9      	ldr	r1, [r7, #8]
 800c6f0:	f002 fba8 	bl	800ee44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	68da      	ldr	r2, [r3, #12]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fc:	425b      	negs	r3, r3
 800c6fe:	441a      	add	r2, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	68da      	ldr	r2, [r3, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d207      	bcs.n	800c720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	689a      	ldr	r2, [r3, #8]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c718:	425b      	negs	r3, r3
 800c71a:	441a      	add	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b02      	cmp	r3, #2
 800c724:	d105      	bne.n	800c732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d002      	beq.n	800c732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	3b01      	subs	r3, #1
 800c730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	1c5a      	adds	r2, r3, #1
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c73a:	697b      	ldr	r3, [r7, #20]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c752:	2b00      	cmp	r3, #0
 800c754:	d018      	beq.n	800c788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68da      	ldr	r2, [r3, #12]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75e:	441a      	add	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	68da      	ldr	r2, [r3, #12]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d303      	bcc.n	800c778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68d9      	ldr	r1, [r3, #12]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c780:	461a      	mov	r2, r3
 800c782:	6838      	ldr	r0, [r7, #0]
 800c784:	f002 fb5e 	bl	800ee44 <memcpy>
	}
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c798:	f001 fd0c 	bl	800e1b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7a4:	e011      	b.n	800c7ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d012      	beq.n	800c7d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3324      	adds	r3, #36	; 0x24
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 fd2a 	bl	800d20c <xTaskRemoveFromEventList>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c7be:	f000 fe01 	bl	800d3c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	dce9      	bgt.n	800c7a6 <prvUnlockQueue+0x16>
 800c7d2:	e000      	b.n	800c7d6 <prvUnlockQueue+0x46>
					break;
 800c7d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	22ff      	movs	r2, #255	; 0xff
 800c7da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c7de:	f001 fd19 	bl	800e214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7e2:	f001 fce7 	bl	800e1b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7ee:	e011      	b.n	800c814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d012      	beq.n	800c81e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3310      	adds	r3, #16
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fd05 	bl	800d20c <xTaskRemoveFromEventList>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c808:	f000 fddc 	bl	800d3c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c80c:	7bbb      	ldrb	r3, [r7, #14]
 800c80e:	3b01      	subs	r3, #1
 800c810:	b2db      	uxtb	r3, r3
 800c812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	dce9      	bgt.n	800c7f0 <prvUnlockQueue+0x60>
 800c81c:	e000      	b.n	800c820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c81e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	22ff      	movs	r2, #255	; 0xff
 800c824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c828:	f001 fcf4 	bl	800e214 <vPortExitCritical>
}
 800c82c:	bf00      	nop
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c83c:	f001 fcba 	bl	800e1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c844:	2b00      	cmp	r3, #0
 800c846:	d102      	bne.n	800c84e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c848:	2301      	movs	r3, #1
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	e001      	b.n	800c852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c84e:	2300      	movs	r3, #0
 800c850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c852:	f001 fcdf 	bl	800e214 <vPortExitCritical>

	return xReturn;
 800c856:	68fb      	ldr	r3, [r7, #12]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c868:	f001 fca4 	bl	800e1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c874:	429a      	cmp	r2, r3
 800c876:	d102      	bne.n	800c87e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c878:	2301      	movs	r3, #1
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	e001      	b.n	800c882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c87e:	2300      	movs	r3, #0
 800c880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c882:	f001 fcc7 	bl	800e214 <vPortExitCritical>

	return xReturn;
 800c886:	68fb      	ldr	r3, [r7, #12]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c89a:	2300      	movs	r3, #0
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	e014      	b.n	800c8ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8a0:	4a0f      	ldr	r2, [pc, #60]	; (800c8e0 <vQueueAddToRegistry+0x50>)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10b      	bne.n	800c8c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8ac:	490c      	ldr	r1, [pc, #48]	; (800c8e0 <vQueueAddToRegistry+0x50>)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8b6:	4a0a      	ldr	r2, [pc, #40]	; (800c8e0 <vQueueAddToRegistry+0x50>)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	4413      	add	r3, r2
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8c2:	e006      	b.n	800c8d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2b07      	cmp	r3, #7
 800c8ce:	d9e7      	bls.n	800c8a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	20004e24 	.word	0x20004e24

0800c8e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c8f4:	f001 fc5e 	bl	800e1b4 <vPortEnterCritical>
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8fe:	b25b      	sxtb	r3, r3
 800c900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c904:	d103      	bne.n	800c90e <vQueueWaitForMessageRestricted+0x2a>
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c914:	b25b      	sxtb	r3, r3
 800c916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91a:	d103      	bne.n	800c924 <vQueueWaitForMessageRestricted+0x40>
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c924:	f001 fc76 	bl	800e214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d106      	bne.n	800c93e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	3324      	adds	r3, #36	; 0x24
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	68b9      	ldr	r1, [r7, #8]
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 fc3b 	bl	800d1b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c93e:	6978      	ldr	r0, [r7, #20]
 800c940:	f7ff ff26 	bl	800c790 <prvUnlockQueue>
	}
 800c944:	bf00      	nop
 800c946:	3718      	adds	r7, #24
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b08e      	sub	sp, #56	; 0x38
 800c950:	af04      	add	r7, sp, #16
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
 800c958:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	623b      	str	r3, [r7, #32]
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <xTaskCreateStatic+0x46>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	61fb      	str	r3, [r7, #28]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c992:	235c      	movs	r3, #92	; 0x5c
 800c994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2b5c      	cmp	r3, #92	; 0x5c
 800c99a:	d00a      	beq.n	800c9b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	61bb      	str	r3, [r7, #24]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d01e      	beq.n	800c9f8 <xTaskCreateStatic+0xac>
 800c9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01b      	beq.n	800c9f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	2202      	movs	r2, #2
 800c9ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	9303      	str	r3, [sp, #12]
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	9302      	str	r3, [sp, #8]
 800c9da:	f107 0314 	add.w	r3, r7, #20
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	68b9      	ldr	r1, [r7, #8]
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f000 f850 	bl	800ca90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f2:	f000 f8dd 	bl	800cbb0 <prvAddNewTaskToReadyList>
 800c9f6:	e001      	b.n	800c9fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c9fc:	697b      	ldr	r3, [r7, #20]
	}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3728      	adds	r7, #40	; 0x28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b08c      	sub	sp, #48	; 0x30
 800ca0a:	af04      	add	r7, sp, #16
 800ca0c:	60f8      	str	r0, [r7, #12]
 800ca0e:	60b9      	str	r1, [r7, #8]
 800ca10:	603b      	str	r3, [r7, #0]
 800ca12:	4613      	mov	r3, r2
 800ca14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca16:	88fb      	ldrh	r3, [r7, #6]
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f001 fcec 	bl	800e3f8 <pvPortMalloc>
 800ca20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00e      	beq.n	800ca46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca28:	205c      	movs	r0, #92	; 0x5c
 800ca2a:	f001 fce5 	bl	800e3f8 <pvPortMalloc>
 800ca2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d003      	beq.n	800ca3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	697a      	ldr	r2, [r7, #20]
 800ca3a:	631a      	str	r2, [r3, #48]	; 0x30
 800ca3c:	e005      	b.n	800ca4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca3e:	6978      	ldr	r0, [r7, #20]
 800ca40:	f001 fda6 	bl	800e590 <vPortFree>
 800ca44:	e001      	b.n	800ca4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d017      	beq.n	800ca80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca58:	88fa      	ldrh	r2, [r7, #6]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9303      	str	r3, [sp, #12]
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	9302      	str	r3, [sp, #8]
 800ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f000 f80e 	bl	800ca90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca74:	69f8      	ldr	r0, [r7, #28]
 800ca76:	f000 f89b 	bl	800cbb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	61bb      	str	r3, [r7, #24]
 800ca7e:	e002      	b.n	800ca86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca80:	f04f 33ff 	mov.w	r3, #4294967295
 800ca84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca86:	69bb      	ldr	r3, [r7, #24]
	}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3720      	adds	r7, #32
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b088      	sub	sp, #32
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	461a      	mov	r2, r3
 800caa8:	21a5      	movs	r1, #165	; 0xa5
 800caaa:	f002 f9d9 	bl	800ee60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cab8:	3b01      	subs	r3, #1
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	f023 0307 	bic.w	r3, r3, #7
 800cac6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	f003 0307 	and.w	r3, r3, #7
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00a      	beq.n	800cae8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	617b      	str	r3, [r7, #20]
}
 800cae4:	bf00      	nop
 800cae6:	e7fe      	b.n	800cae6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d01f      	beq.n	800cb2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
 800caf2:	e012      	b.n	800cb1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	4413      	add	r3, r2
 800cafa:	7819      	ldrb	r1, [r3, #0]
 800cafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	4413      	add	r3, r2
 800cb02:	3334      	adds	r3, #52	; 0x34
 800cb04:	460a      	mov	r2, r1
 800cb06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d006      	beq.n	800cb22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	3301      	adds	r3, #1
 800cb18:	61fb      	str	r3, [r7, #28]
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	2b0f      	cmp	r3, #15
 800cb1e:	d9e9      	bls.n	800caf4 <prvInitialiseNewTask+0x64>
 800cb20:	e000      	b.n	800cb24 <prvInitialiseNewTask+0x94>
			{
				break;
 800cb22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb2c:	e003      	b.n	800cb36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb38:	2b37      	cmp	r3, #55	; 0x37
 800cb3a:	d901      	bls.n	800cb40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb3c:	2337      	movs	r3, #55	; 0x37
 800cb3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4e:	2200      	movs	r2, #0
 800cb50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	3304      	adds	r3, #4
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff f8bd 	bl	800bcd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	3318      	adds	r3, #24
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff f8b8 	bl	800bcd6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7e:	2200      	movs	r2, #0
 800cb80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	68f9      	ldr	r1, [r7, #12]
 800cb8e:	69b8      	ldr	r0, [r7, #24]
 800cb90:	f001 f9e2 	bl	800df58 <pxPortInitialiseStack>
 800cb94:	4602      	mov	r2, r0
 800cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cba6:	bf00      	nop
 800cba8:	3720      	adds	r7, #32
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbb8:	f001 fafc 	bl	800e1b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cbbc:	4b2d      	ldr	r3, [pc, #180]	; (800cc74 <prvAddNewTaskToReadyList+0xc4>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	4a2c      	ldr	r2, [pc, #176]	; (800cc74 <prvAddNewTaskToReadyList+0xc4>)
 800cbc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cbc6:	4b2c      	ldr	r3, [pc, #176]	; (800cc78 <prvAddNewTaskToReadyList+0xc8>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d109      	bne.n	800cbe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cbce:	4a2a      	ldr	r2, [pc, #168]	; (800cc78 <prvAddNewTaskToReadyList+0xc8>)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cbd4:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <prvAddNewTaskToReadyList+0xc4>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d110      	bne.n	800cbfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cbdc:	f000 fc16 	bl	800d40c <prvInitialiseTaskLists>
 800cbe0:	e00d      	b.n	800cbfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cbe2:	4b26      	ldr	r3, [pc, #152]	; (800cc7c <prvAddNewTaskToReadyList+0xcc>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d109      	bne.n	800cbfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cbea:	4b23      	ldr	r3, [pc, #140]	; (800cc78 <prvAddNewTaskToReadyList+0xc8>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d802      	bhi.n	800cbfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cbf8:	4a1f      	ldr	r2, [pc, #124]	; (800cc78 <prvAddNewTaskToReadyList+0xc8>)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cbfe:	4b20      	ldr	r3, [pc, #128]	; (800cc80 <prvAddNewTaskToReadyList+0xd0>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a1e      	ldr	r2, [pc, #120]	; (800cc80 <prvAddNewTaskToReadyList+0xd0>)
 800cc06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc08:	4b1d      	ldr	r3, [pc, #116]	; (800cc80 <prvAddNewTaskToReadyList+0xd0>)
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc14:	4b1b      	ldr	r3, [pc, #108]	; (800cc84 <prvAddNewTaskToReadyList+0xd4>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d903      	bls.n	800cc24 <prvAddNewTaskToReadyList+0x74>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	4a18      	ldr	r2, [pc, #96]	; (800cc84 <prvAddNewTaskToReadyList+0xd4>)
 800cc22:	6013      	str	r3, [r2, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc28:	4613      	mov	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4413      	add	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4a15      	ldr	r2, [pc, #84]	; (800cc88 <prvAddNewTaskToReadyList+0xd8>)
 800cc32:	441a      	add	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3304      	adds	r3, #4
 800cc38:	4619      	mov	r1, r3
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	f7ff f858 	bl	800bcf0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc40:	f001 fae8 	bl	800e214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc44:	4b0d      	ldr	r3, [pc, #52]	; (800cc7c <prvAddNewTaskToReadyList+0xcc>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00e      	beq.n	800cc6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <prvAddNewTaskToReadyList+0xc8>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d207      	bcs.n	800cc6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc5a:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <prvAddNewTaskToReadyList+0xdc>)
 800cc5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc60:	601a      	str	r2, [r3, #0]
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc6a:	bf00      	nop
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20000c88 	.word	0x20000c88
 800cc78:	200007b4 	.word	0x200007b4
 800cc7c:	20000c94 	.word	0x20000c94
 800cc80:	20000ca4 	.word	0x20000ca4
 800cc84:	20000c90 	.word	0x20000c90
 800cc88:	200007b8 	.word	0x200007b8
 800cc8c:	e000ed04 	.word	0xe000ed04

0800cc90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d017      	beq.n	800ccd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cca2:	4b13      	ldr	r3, [pc, #76]	; (800ccf0 <vTaskDelay+0x60>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00a      	beq.n	800ccc0 <vTaskDelay+0x30>
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	60bb      	str	r3, [r7, #8]
}
 800ccbc:	bf00      	nop
 800ccbe:	e7fe      	b.n	800ccbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ccc0:	f000 f880 	bl	800cdc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 fcea 	bl	800d6a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cccc:	f000 f888 	bl	800cde0 <xTaskResumeAll>
 800ccd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d107      	bne.n	800cce8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ccd8:	4b06      	ldr	r3, [pc, #24]	; (800ccf4 <vTaskDelay+0x64>)
 800ccda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccde:	601a      	str	r2, [r3, #0]
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cce8:	bf00      	nop
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	20000cb0 	.word	0x20000cb0
 800ccf4:	e000ed04 	.word	0xe000ed04

0800ccf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08a      	sub	sp, #40	; 0x28
 800ccfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd02:	2300      	movs	r3, #0
 800cd04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd06:	463a      	mov	r2, r7
 800cd08:	1d39      	adds	r1, r7, #4
 800cd0a:	f107 0308 	add.w	r3, r7, #8
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fe ff3c 	bl	800bb8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd14:	6839      	ldr	r1, [r7, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	9202      	str	r2, [sp, #8]
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	2300      	movs	r3, #0
 800cd24:	460a      	mov	r2, r1
 800cd26:	4921      	ldr	r1, [pc, #132]	; (800cdac <vTaskStartScheduler+0xb4>)
 800cd28:	4821      	ldr	r0, [pc, #132]	; (800cdb0 <vTaskStartScheduler+0xb8>)
 800cd2a:	f7ff fe0f 	bl	800c94c <xTaskCreateStatic>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	4a20      	ldr	r2, [pc, #128]	; (800cdb4 <vTaskStartScheduler+0xbc>)
 800cd32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd34:	4b1f      	ldr	r3, [pc, #124]	; (800cdb4 <vTaskStartScheduler+0xbc>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	617b      	str	r3, [r7, #20]
 800cd40:	e001      	b.n	800cd46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d102      	bne.n	800cd52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd4c:	f000 fcfc 	bl	800d748 <xTimerCreateTimerTask>
 800cd50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d116      	bne.n	800cd86 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5c:	f383 8811 	msr	BASEPRI, r3
 800cd60:	f3bf 8f6f 	isb	sy
 800cd64:	f3bf 8f4f 	dsb	sy
 800cd68:	613b      	str	r3, [r7, #16]
}
 800cd6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd6c:	4b12      	ldr	r3, [pc, #72]	; (800cdb8 <vTaskStartScheduler+0xc0>)
 800cd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd74:	4b11      	ldr	r3, [pc, #68]	; (800cdbc <vTaskStartScheduler+0xc4>)
 800cd76:	2201      	movs	r2, #1
 800cd78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd7a:	4b11      	ldr	r3, [pc, #68]	; (800cdc0 <vTaskStartScheduler+0xc8>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd80:	f001 f976 	bl	800e070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd84:	e00e      	b.n	800cda4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8c:	d10a      	bne.n	800cda4 <vTaskStartScheduler+0xac>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	60fb      	str	r3, [r7, #12]
}
 800cda0:	bf00      	nop
 800cda2:	e7fe      	b.n	800cda2 <vTaskStartScheduler+0xaa>
}
 800cda4:	bf00      	nop
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	0800f0a4 	.word	0x0800f0a4
 800cdb0:	0800d3dd 	.word	0x0800d3dd
 800cdb4:	20000cac 	.word	0x20000cac
 800cdb8:	20000ca8 	.word	0x20000ca8
 800cdbc:	20000c94 	.word	0x20000c94
 800cdc0:	20000c8c 	.word	0x20000c8c

0800cdc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cdc8:	4b04      	ldr	r3, [pc, #16]	; (800cddc <vTaskSuspendAll+0x18>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	4a03      	ldr	r2, [pc, #12]	; (800cddc <vTaskSuspendAll+0x18>)
 800cdd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cdd2:	bf00      	nop
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	20000cb0 	.word	0x20000cb0

0800cde0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cdee:	4b42      	ldr	r3, [pc, #264]	; (800cef8 <xTaskResumeAll+0x118>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d10a      	bne.n	800ce0c <xTaskResumeAll+0x2c>
	__asm volatile
 800cdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	603b      	str	r3, [r7, #0]
}
 800ce08:	bf00      	nop
 800ce0a:	e7fe      	b.n	800ce0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce0c:	f001 f9d2 	bl	800e1b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce10:	4b39      	ldr	r3, [pc, #228]	; (800cef8 <xTaskResumeAll+0x118>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	4a38      	ldr	r2, [pc, #224]	; (800cef8 <xTaskResumeAll+0x118>)
 800ce18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce1a:	4b37      	ldr	r3, [pc, #220]	; (800cef8 <xTaskResumeAll+0x118>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d162      	bne.n	800cee8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce22:	4b36      	ldr	r3, [pc, #216]	; (800cefc <xTaskResumeAll+0x11c>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d05e      	beq.n	800cee8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce2a:	e02f      	b.n	800ce8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce2c:	4b34      	ldr	r3, [pc, #208]	; (800cf00 <xTaskResumeAll+0x120>)
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	3318      	adds	r3, #24
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fe ffb6 	bl	800bdaa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3304      	adds	r3, #4
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe ffb1 	bl	800bdaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4c:	4b2d      	ldr	r3, [pc, #180]	; (800cf04 <xTaskResumeAll+0x124>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d903      	bls.n	800ce5c <xTaskResumeAll+0x7c>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce58:	4a2a      	ldr	r2, [pc, #168]	; (800cf04 <xTaskResumeAll+0x124>)
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce60:	4613      	mov	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4413      	add	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4a27      	ldr	r2, [pc, #156]	; (800cf08 <xTaskResumeAll+0x128>)
 800ce6a:	441a      	add	r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	3304      	adds	r3, #4
 800ce70:	4619      	mov	r1, r3
 800ce72:	4610      	mov	r0, r2
 800ce74:	f7fe ff3c 	bl	800bcf0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7c:	4b23      	ldr	r3, [pc, #140]	; (800cf0c <xTaskResumeAll+0x12c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d302      	bcc.n	800ce8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce86:	4b22      	ldr	r3, [pc, #136]	; (800cf10 <xTaskResumeAll+0x130>)
 800ce88:	2201      	movs	r2, #1
 800ce8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce8c:	4b1c      	ldr	r3, [pc, #112]	; (800cf00 <xTaskResumeAll+0x120>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1cb      	bne.n	800ce2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce9a:	f000 fb55 	bl	800d548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce9e:	4b1d      	ldr	r3, [pc, #116]	; (800cf14 <xTaskResumeAll+0x134>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d010      	beq.n	800cecc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ceaa:	f000 f847 	bl	800cf3c <xTaskIncrementTick>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ceb4:	4b16      	ldr	r3, [pc, #88]	; (800cf10 <xTaskResumeAll+0x130>)
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1f1      	bne.n	800ceaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cec6:	4b13      	ldr	r3, [pc, #76]	; (800cf14 <xTaskResumeAll+0x134>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cecc:	4b10      	ldr	r3, [pc, #64]	; (800cf10 <xTaskResumeAll+0x130>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d009      	beq.n	800cee8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ced4:	2301      	movs	r3, #1
 800ced6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ced8:	4b0f      	ldr	r3, [pc, #60]	; (800cf18 <xTaskResumeAll+0x138>)
 800ceda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cee8:	f001 f994 	bl	800e214 <vPortExitCritical>

	return xAlreadyYielded;
 800ceec:	68bb      	ldr	r3, [r7, #8]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000cb0 	.word	0x20000cb0
 800cefc:	20000c88 	.word	0x20000c88
 800cf00:	20000c48 	.word	0x20000c48
 800cf04:	20000c90 	.word	0x20000c90
 800cf08:	200007b8 	.word	0x200007b8
 800cf0c:	200007b4 	.word	0x200007b4
 800cf10:	20000c9c 	.word	0x20000c9c
 800cf14:	20000c98 	.word	0x20000c98
 800cf18:	e000ed04 	.word	0xe000ed04

0800cf1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf22:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <xTaskGetTickCount+0x1c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf28:	687b      	ldr	r3, [r7, #4]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	20000c8c 	.word	0x20000c8c

0800cf3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf42:	2300      	movs	r3, #0
 800cf44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf46:	4b4f      	ldr	r3, [pc, #316]	; (800d084 <xTaskIncrementTick+0x148>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f040 808f 	bne.w	800d06e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf50:	4b4d      	ldr	r3, [pc, #308]	; (800d088 <xTaskIncrementTick+0x14c>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	3301      	adds	r3, #1
 800cf56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf58:	4a4b      	ldr	r2, [pc, #300]	; (800d088 <xTaskIncrementTick+0x14c>)
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d120      	bne.n	800cfa6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cf64:	4b49      	ldr	r3, [pc, #292]	; (800d08c <xTaskIncrementTick+0x150>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00a      	beq.n	800cf84 <xTaskIncrementTick+0x48>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	603b      	str	r3, [r7, #0]
}
 800cf80:	bf00      	nop
 800cf82:	e7fe      	b.n	800cf82 <xTaskIncrementTick+0x46>
 800cf84:	4b41      	ldr	r3, [pc, #260]	; (800d08c <xTaskIncrementTick+0x150>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	60fb      	str	r3, [r7, #12]
 800cf8a:	4b41      	ldr	r3, [pc, #260]	; (800d090 <xTaskIncrementTick+0x154>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a3f      	ldr	r2, [pc, #252]	; (800d08c <xTaskIncrementTick+0x150>)
 800cf90:	6013      	str	r3, [r2, #0]
 800cf92:	4a3f      	ldr	r2, [pc, #252]	; (800d090 <xTaskIncrementTick+0x154>)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	4b3e      	ldr	r3, [pc, #248]	; (800d094 <xTaskIncrementTick+0x158>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	4a3d      	ldr	r2, [pc, #244]	; (800d094 <xTaskIncrementTick+0x158>)
 800cfa0:	6013      	str	r3, [r2, #0]
 800cfa2:	f000 fad1 	bl	800d548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cfa6:	4b3c      	ldr	r3, [pc, #240]	; (800d098 <xTaskIncrementTick+0x15c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d349      	bcc.n	800d044 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfb0:	4b36      	ldr	r3, [pc, #216]	; (800d08c <xTaskIncrementTick+0x150>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d104      	bne.n	800cfc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfba:	4b37      	ldr	r3, [pc, #220]	; (800d098 <xTaskIncrementTick+0x15c>)
 800cfbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc0:	601a      	str	r2, [r3, #0]
					break;
 800cfc2:	e03f      	b.n	800d044 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfc4:	4b31      	ldr	r3, [pc, #196]	; (800d08c <xTaskIncrementTick+0x150>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cfd4:	693a      	ldr	r2, [r7, #16]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d203      	bcs.n	800cfe4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cfdc:	4a2e      	ldr	r2, [pc, #184]	; (800d098 <xTaskIncrementTick+0x15c>)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cfe2:	e02f      	b.n	800d044 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fe fede 	bl	800bdaa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d004      	beq.n	800d000 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	3318      	adds	r3, #24
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fed5 	bl	800bdaa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d004:	4b25      	ldr	r3, [pc, #148]	; (800d09c <xTaskIncrementTick+0x160>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d903      	bls.n	800d014 <xTaskIncrementTick+0xd8>
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	4a22      	ldr	r2, [pc, #136]	; (800d09c <xTaskIncrementTick+0x160>)
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d018:	4613      	mov	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4413      	add	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4a1f      	ldr	r2, [pc, #124]	; (800d0a0 <xTaskIncrementTick+0x164>)
 800d022:	441a      	add	r2, r3
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	3304      	adds	r3, #4
 800d028:	4619      	mov	r1, r3
 800d02a:	4610      	mov	r0, r2
 800d02c:	f7fe fe60 	bl	800bcf0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d034:	4b1b      	ldr	r3, [pc, #108]	; (800d0a4 <xTaskIncrementTick+0x168>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d3b8      	bcc.n	800cfb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d03e:	2301      	movs	r3, #1
 800d040:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d042:	e7b5      	b.n	800cfb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d044:	4b17      	ldr	r3, [pc, #92]	; (800d0a4 <xTaskIncrementTick+0x168>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04a:	4915      	ldr	r1, [pc, #84]	; (800d0a0 <xTaskIncrementTick+0x164>)
 800d04c:	4613      	mov	r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	4413      	add	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	440b      	add	r3, r1
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d901      	bls.n	800d060 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d05c:	2301      	movs	r3, #1
 800d05e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d060:	4b11      	ldr	r3, [pc, #68]	; (800d0a8 <xTaskIncrementTick+0x16c>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d007      	beq.n	800d078 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d068:	2301      	movs	r3, #1
 800d06a:	617b      	str	r3, [r7, #20]
 800d06c:	e004      	b.n	800d078 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d06e:	4b0f      	ldr	r3, [pc, #60]	; (800d0ac <xTaskIncrementTick+0x170>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	4a0d      	ldr	r2, [pc, #52]	; (800d0ac <xTaskIncrementTick+0x170>)
 800d076:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d078:	697b      	ldr	r3, [r7, #20]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20000cb0 	.word	0x20000cb0
 800d088:	20000c8c 	.word	0x20000c8c
 800d08c:	20000c40 	.word	0x20000c40
 800d090:	20000c44 	.word	0x20000c44
 800d094:	20000ca0 	.word	0x20000ca0
 800d098:	20000ca8 	.word	0x20000ca8
 800d09c:	20000c90 	.word	0x20000c90
 800d0a0:	200007b8 	.word	0x200007b8
 800d0a4:	200007b4 	.word	0x200007b4
 800d0a8:	20000c9c 	.word	0x20000c9c
 800d0ac:	20000c98 	.word	0x20000c98

0800d0b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0b6:	4b28      	ldr	r3, [pc, #160]	; (800d158 <vTaskSwitchContext+0xa8>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d003      	beq.n	800d0c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d0be:	4b27      	ldr	r3, [pc, #156]	; (800d15c <vTaskSwitchContext+0xac>)
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d0c4:	e041      	b.n	800d14a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d0c6:	4b25      	ldr	r3, [pc, #148]	; (800d15c <vTaskSwitchContext+0xac>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0cc:	4b24      	ldr	r3, [pc, #144]	; (800d160 <vTaskSwitchContext+0xb0>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	60fb      	str	r3, [r7, #12]
 800d0d2:	e010      	b.n	800d0f6 <vTaskSwitchContext+0x46>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10a      	bne.n	800d0f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	607b      	str	r3, [r7, #4]
}
 800d0ec:	bf00      	nop
 800d0ee:	e7fe      	b.n	800d0ee <vTaskSwitchContext+0x3e>
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	60fb      	str	r3, [r7, #12]
 800d0f6:	491b      	ldr	r1, [pc, #108]	; (800d164 <vTaskSwitchContext+0xb4>)
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4413      	add	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	440b      	add	r3, r1
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0e4      	beq.n	800d0d4 <vTaskSwitchContext+0x24>
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	4613      	mov	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4413      	add	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4a13      	ldr	r2, [pc, #76]	; (800d164 <vTaskSwitchContext+0xb4>)
 800d116:	4413      	add	r3, r2
 800d118:	60bb      	str	r3, [r7, #8]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	685a      	ldr	r2, [r3, #4]
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	605a      	str	r2, [r3, #4]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	685a      	ldr	r2, [r3, #4]
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	3308      	adds	r3, #8
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d104      	bne.n	800d13a <vTaskSwitchContext+0x8a>
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	605a      	str	r2, [r3, #4]
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	4a09      	ldr	r2, [pc, #36]	; (800d168 <vTaskSwitchContext+0xb8>)
 800d142:	6013      	str	r3, [r2, #0]
 800d144:	4a06      	ldr	r2, [pc, #24]	; (800d160 <vTaskSwitchContext+0xb0>)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6013      	str	r3, [r2, #0]
}
 800d14a:	bf00      	nop
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	20000cb0 	.word	0x20000cb0
 800d15c:	20000c9c 	.word	0x20000c9c
 800d160:	20000c90 	.word	0x20000c90
 800d164:	200007b8 	.word	0x200007b8
 800d168:	200007b4 	.word	0x200007b4

0800d16c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10a      	bne.n	800d192 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	60fb      	str	r3, [r7, #12]
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d192:	4b07      	ldr	r3, [pc, #28]	; (800d1b0 <vTaskPlaceOnEventList+0x44>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	3318      	adds	r3, #24
 800d198:	4619      	mov	r1, r3
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f7fe fdcc 	bl	800bd38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	6838      	ldr	r0, [r7, #0]
 800d1a4:	f000 fa7c 	bl	800d6a0 <prvAddCurrentTaskToDelayedList>
}
 800d1a8:	bf00      	nop
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	200007b4 	.word	0x200007b4

0800d1b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10a      	bne.n	800d1dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	617b      	str	r3, [r7, #20]
}
 800d1d8:	bf00      	nop
 800d1da:	e7fe      	b.n	800d1da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1dc:	4b0a      	ldr	r3, [pc, #40]	; (800d208 <vTaskPlaceOnEventListRestricted+0x54>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3318      	adds	r3, #24
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f7fe fd83 	bl	800bcf0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d002      	beq.n	800d1f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1f6:	6879      	ldr	r1, [r7, #4]
 800d1f8:	68b8      	ldr	r0, [r7, #8]
 800d1fa:	f000 fa51 	bl	800d6a0 <prvAddCurrentTaskToDelayedList>
	}
 800d1fe:	bf00      	nop
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	200007b4 	.word	0x200007b4

0800d20c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10a      	bne.n	800d238 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	60fb      	str	r3, [r7, #12]
}
 800d234:	bf00      	nop
 800d236:	e7fe      	b.n	800d236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	3318      	adds	r3, #24
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fe fdb4 	bl	800bdaa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d242:	4b1e      	ldr	r3, [pc, #120]	; (800d2bc <xTaskRemoveFromEventList+0xb0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d11d      	bne.n	800d286 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	3304      	adds	r3, #4
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fdab 	bl	800bdaa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d258:	4b19      	ldr	r3, [pc, #100]	; (800d2c0 <xTaskRemoveFromEventList+0xb4>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d903      	bls.n	800d268 <xTaskRemoveFromEventList+0x5c>
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d264:	4a16      	ldr	r2, [pc, #88]	; (800d2c0 <xTaskRemoveFromEventList+0xb4>)
 800d266:	6013      	str	r3, [r2, #0]
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	4a13      	ldr	r2, [pc, #76]	; (800d2c4 <xTaskRemoveFromEventList+0xb8>)
 800d276:	441a      	add	r2, r3
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	3304      	adds	r3, #4
 800d27c:	4619      	mov	r1, r3
 800d27e:	4610      	mov	r0, r2
 800d280:	f7fe fd36 	bl	800bcf0 <vListInsertEnd>
 800d284:	e005      	b.n	800d292 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	3318      	adds	r3, #24
 800d28a:	4619      	mov	r1, r3
 800d28c:	480e      	ldr	r0, [pc, #56]	; (800d2c8 <xTaskRemoveFromEventList+0xbc>)
 800d28e:	f7fe fd2f 	bl	800bcf0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d296:	4b0d      	ldr	r3, [pc, #52]	; (800d2cc <xTaskRemoveFromEventList+0xc0>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d905      	bls.n	800d2ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2a4:	4b0a      	ldr	r3, [pc, #40]	; (800d2d0 <xTaskRemoveFromEventList+0xc4>)
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	e001      	b.n	800d2b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d2b0:	697b      	ldr	r3, [r7, #20]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3718      	adds	r7, #24
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	20000cb0 	.word	0x20000cb0
 800d2c0:	20000c90 	.word	0x20000c90
 800d2c4:	200007b8 	.word	0x200007b8
 800d2c8:	20000c48 	.word	0x20000c48
 800d2cc:	200007b4 	.word	0x200007b4
 800d2d0:	20000c9c 	.word	0x20000c9c

0800d2d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2dc:	4b06      	ldr	r3, [pc, #24]	; (800d2f8 <vTaskInternalSetTimeOutState+0x24>)
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2e4:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <vTaskInternalSetTimeOutState+0x28>)
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	605a      	str	r2, [r3, #4]
}
 800d2ec:	bf00      	nop
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr
 800d2f8:	20000ca0 	.word	0x20000ca0
 800d2fc:	20000c8c 	.word	0x20000c8c

0800d300 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b088      	sub	sp, #32
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10a      	bne.n	800d326 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	613b      	str	r3, [r7, #16]
}
 800d322:	bf00      	nop
 800d324:	e7fe      	b.n	800d324 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	60fb      	str	r3, [r7, #12]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d342:	f000 ff37 	bl	800e1b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d346:	4b1d      	ldr	r3, [pc, #116]	; (800d3bc <xTaskCheckForTimeOut+0xbc>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	69ba      	ldr	r2, [r7, #24]
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35e:	d102      	bne.n	800d366 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d360:	2300      	movs	r3, #0
 800d362:	61fb      	str	r3, [r7, #28]
 800d364:	e023      	b.n	800d3ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <xTaskCheckForTimeOut+0xc0>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d007      	beq.n	800d382 <xTaskCheckForTimeOut+0x82>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	69ba      	ldr	r2, [r7, #24]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d302      	bcc.n	800d382 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d37c:	2301      	movs	r3, #1
 800d37e:	61fb      	str	r3, [r7, #28]
 800d380:	e015      	b.n	800d3ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d20b      	bcs.n	800d3a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	1ad2      	subs	r2, r2, r3
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7ff ff9b 	bl	800d2d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	61fb      	str	r3, [r7, #28]
 800d3a2:	e004      	b.n	800d3ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3ae:	f000 ff31 	bl	800e214 <vPortExitCritical>

	return xReturn;
 800d3b2:	69fb      	ldr	r3, [r7, #28]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3720      	adds	r7, #32
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	20000c8c 	.word	0x20000c8c
 800d3c0:	20000ca0 	.word	0x20000ca0

0800d3c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3c8:	4b03      	ldr	r3, [pc, #12]	; (800d3d8 <vTaskMissedYield+0x14>)
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	601a      	str	r2, [r3, #0]
}
 800d3ce:	bf00      	nop
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	20000c9c 	.word	0x20000c9c

0800d3dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3e4:	f000 f852 	bl	800d48c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3e8:	4b06      	ldr	r3, [pc, #24]	; (800d404 <prvIdleTask+0x28>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d9f9      	bls.n	800d3e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3f0:	4b05      	ldr	r3, [pc, #20]	; (800d408 <prvIdleTask+0x2c>)
 800d3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d400:	e7f0      	b.n	800d3e4 <prvIdleTask+0x8>
 800d402:	bf00      	nop
 800d404:	200007b8 	.word	0x200007b8
 800d408:	e000ed04 	.word	0xe000ed04

0800d40c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d412:	2300      	movs	r3, #0
 800d414:	607b      	str	r3, [r7, #4]
 800d416:	e00c      	b.n	800d432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	4613      	mov	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4a12      	ldr	r2, [pc, #72]	; (800d46c <prvInitialiseTaskLists+0x60>)
 800d424:	4413      	add	r3, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fc35 	bl	800bc96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	3301      	adds	r3, #1
 800d430:	607b      	str	r3, [r7, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b37      	cmp	r3, #55	; 0x37
 800d436:	d9ef      	bls.n	800d418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d438:	480d      	ldr	r0, [pc, #52]	; (800d470 <prvInitialiseTaskLists+0x64>)
 800d43a:	f7fe fc2c 	bl	800bc96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d43e:	480d      	ldr	r0, [pc, #52]	; (800d474 <prvInitialiseTaskLists+0x68>)
 800d440:	f7fe fc29 	bl	800bc96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d444:	480c      	ldr	r0, [pc, #48]	; (800d478 <prvInitialiseTaskLists+0x6c>)
 800d446:	f7fe fc26 	bl	800bc96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d44a:	480c      	ldr	r0, [pc, #48]	; (800d47c <prvInitialiseTaskLists+0x70>)
 800d44c:	f7fe fc23 	bl	800bc96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d450:	480b      	ldr	r0, [pc, #44]	; (800d480 <prvInitialiseTaskLists+0x74>)
 800d452:	f7fe fc20 	bl	800bc96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d456:	4b0b      	ldr	r3, [pc, #44]	; (800d484 <prvInitialiseTaskLists+0x78>)
 800d458:	4a05      	ldr	r2, [pc, #20]	; (800d470 <prvInitialiseTaskLists+0x64>)
 800d45a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d45c:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <prvInitialiseTaskLists+0x7c>)
 800d45e:	4a05      	ldr	r2, [pc, #20]	; (800d474 <prvInitialiseTaskLists+0x68>)
 800d460:	601a      	str	r2, [r3, #0]
}
 800d462:	bf00      	nop
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	200007b8 	.word	0x200007b8
 800d470:	20000c18 	.word	0x20000c18
 800d474:	20000c2c 	.word	0x20000c2c
 800d478:	20000c48 	.word	0x20000c48
 800d47c:	20000c5c 	.word	0x20000c5c
 800d480:	20000c74 	.word	0x20000c74
 800d484:	20000c40 	.word	0x20000c40
 800d488:	20000c44 	.word	0x20000c44

0800d48c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d492:	e019      	b.n	800d4c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d494:	f000 fe8e 	bl	800e1b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d498:	4b10      	ldr	r3, [pc, #64]	; (800d4dc <prvCheckTasksWaitingTermination+0x50>)
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fe fc80 	bl	800bdaa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <prvCheckTasksWaitingTermination+0x54>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	4a0b      	ldr	r2, [pc, #44]	; (800d4e0 <prvCheckTasksWaitingTermination+0x54>)
 800d4b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4b4:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <prvCheckTasksWaitingTermination+0x58>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	4a0a      	ldr	r2, [pc, #40]	; (800d4e4 <prvCheckTasksWaitingTermination+0x58>)
 800d4bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4be:	f000 fea9 	bl	800e214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f810 	bl	800d4e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4c8:	4b06      	ldr	r3, [pc, #24]	; (800d4e4 <prvCheckTasksWaitingTermination+0x58>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1e1      	bne.n	800d494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	20000c5c 	.word	0x20000c5c
 800d4e0:	20000c88 	.word	0x20000c88
 800d4e4:	20000c70 	.word	0x20000c70

0800d4e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d108      	bne.n	800d50c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fe:	4618      	mov	r0, r3
 800d500:	f001 f846 	bl	800e590 <vPortFree>
				vPortFree( pxTCB );
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f001 f843 	bl	800e590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d50a:	e018      	b.n	800d53e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d512:	2b01      	cmp	r3, #1
 800d514:	d103      	bne.n	800d51e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f001 f83a 	bl	800e590 <vPortFree>
	}
 800d51c:	e00f      	b.n	800d53e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d524:	2b02      	cmp	r3, #2
 800d526:	d00a      	beq.n	800d53e <prvDeleteTCB+0x56>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	60fb      	str	r3, [r7, #12]
}
 800d53a:	bf00      	nop
 800d53c:	e7fe      	b.n	800d53c <prvDeleteTCB+0x54>
	}
 800d53e:	bf00      	nop
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
	...

0800d548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d54e:	4b0c      	ldr	r3, [pc, #48]	; (800d580 <prvResetNextTaskUnblockTime+0x38>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d104      	bne.n	800d562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d558:	4b0a      	ldr	r3, [pc, #40]	; (800d584 <prvResetNextTaskUnblockTime+0x3c>)
 800d55a:	f04f 32ff 	mov.w	r2, #4294967295
 800d55e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d560:	e008      	b.n	800d574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d562:	4b07      	ldr	r3, [pc, #28]	; (800d580 <prvResetNextTaskUnblockTime+0x38>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	4a04      	ldr	r2, [pc, #16]	; (800d584 <prvResetNextTaskUnblockTime+0x3c>)
 800d572:	6013      	str	r3, [r2, #0]
}
 800d574:	bf00      	nop
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr
 800d580:	20000c40 	.word	0x20000c40
 800d584:	20000ca8 	.word	0x20000ca8

0800d588 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d58e:	4b0b      	ldr	r3, [pc, #44]	; (800d5bc <xTaskGetSchedulerState+0x34>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d102      	bne.n	800d59c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d596:	2301      	movs	r3, #1
 800d598:	607b      	str	r3, [r7, #4]
 800d59a:	e008      	b.n	800d5ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d59c:	4b08      	ldr	r3, [pc, #32]	; (800d5c0 <xTaskGetSchedulerState+0x38>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5a4:	2302      	movs	r3, #2
 800d5a6:	607b      	str	r3, [r7, #4]
 800d5a8:	e001      	b.n	800d5ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5ae:	687b      	ldr	r3, [r7, #4]
	}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	20000c94 	.word	0x20000c94
 800d5c0:	20000cb0 	.word	0x20000cb0

0800d5c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d056      	beq.n	800d688 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d5da:	4b2e      	ldr	r3, [pc, #184]	; (800d694 <xTaskPriorityDisinherit+0xd0>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d00a      	beq.n	800d5fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e8:	f383 8811 	msr	BASEPRI, r3
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	60fb      	str	r3, [r7, #12]
}
 800d5f6:	bf00      	nop
 800d5f8:	e7fe      	b.n	800d5f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10a      	bne.n	800d618 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	60bb      	str	r3, [r7, #8]
}
 800d614:	bf00      	nop
 800d616:	e7fe      	b.n	800d616 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d61c:	1e5a      	subs	r2, r3, #1
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d02c      	beq.n	800d688 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d632:	2b00      	cmp	r3, #0
 800d634:	d128      	bne.n	800d688 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	3304      	adds	r3, #4
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fbb5 	bl	800bdaa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d658:	4b0f      	ldr	r3, [pc, #60]	; (800d698 <xTaskPriorityDisinherit+0xd4>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d903      	bls.n	800d668 <xTaskPriorityDisinherit+0xa4>
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	4a0c      	ldr	r2, [pc, #48]	; (800d698 <xTaskPriorityDisinherit+0xd4>)
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66c:	4613      	mov	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4413      	add	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4a09      	ldr	r2, [pc, #36]	; (800d69c <xTaskPriorityDisinherit+0xd8>)
 800d676:	441a      	add	r2, r3
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	3304      	adds	r3, #4
 800d67c:	4619      	mov	r1, r3
 800d67e:	4610      	mov	r0, r2
 800d680:	f7fe fb36 	bl	800bcf0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d684:	2301      	movs	r3, #1
 800d686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d688:	697b      	ldr	r3, [r7, #20]
	}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3718      	adds	r7, #24
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	200007b4 	.word	0x200007b4
 800d698:	20000c90 	.word	0x20000c90
 800d69c:	200007b8 	.word	0x200007b8

0800d6a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d6aa:	4b21      	ldr	r3, [pc, #132]	; (800d730 <prvAddCurrentTaskToDelayedList+0x90>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6b0:	4b20      	ldr	r3, [pc, #128]	; (800d734 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fe fb77 	bl	800bdaa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c2:	d10a      	bne.n	800d6da <prvAddCurrentTaskToDelayedList+0x3a>
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d007      	beq.n	800d6da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6ca:	4b1a      	ldr	r3, [pc, #104]	; (800d734 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	3304      	adds	r3, #4
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	4819      	ldr	r0, [pc, #100]	; (800d738 <prvAddCurrentTaskToDelayedList+0x98>)
 800d6d4:	f7fe fb0c 	bl	800bcf0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d6d8:	e026      	b.n	800d728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4413      	add	r3, r2
 800d6e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6e2:	4b14      	ldr	r3, [pc, #80]	; (800d734 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d209      	bcs.n	800d706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6f2:	4b12      	ldr	r3, [pc, #72]	; (800d73c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	4b0f      	ldr	r3, [pc, #60]	; (800d734 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	3304      	adds	r3, #4
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	4610      	mov	r0, r2
 800d700:	f7fe fb1a 	bl	800bd38 <vListInsert>
}
 800d704:	e010      	b.n	800d728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d706:	4b0e      	ldr	r3, [pc, #56]	; (800d740 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	4b0a      	ldr	r3, [pc, #40]	; (800d734 <prvAddCurrentTaskToDelayedList+0x94>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	3304      	adds	r3, #4
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	f7fe fb10 	bl	800bd38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d718:	4b0a      	ldr	r3, [pc, #40]	; (800d744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d202      	bcs.n	800d728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d722:	4a08      	ldr	r2, [pc, #32]	; (800d744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	6013      	str	r3, [r2, #0]
}
 800d728:	bf00      	nop
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	20000c8c 	.word	0x20000c8c
 800d734:	200007b4 	.word	0x200007b4
 800d738:	20000c74 	.word	0x20000c74
 800d73c:	20000c44 	.word	0x20000c44
 800d740:	20000c40 	.word	0x20000c40
 800d744:	20000ca8 	.word	0x20000ca8

0800d748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b08a      	sub	sp, #40	; 0x28
 800d74c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d74e:	2300      	movs	r3, #0
 800d750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d752:	f000 fba1 	bl	800de98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d756:	4b1c      	ldr	r3, [pc, #112]	; (800d7c8 <xTimerCreateTimerTask+0x80>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d021      	beq.n	800d7a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d762:	2300      	movs	r3, #0
 800d764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d766:	1d3a      	adds	r2, r7, #4
 800d768:	f107 0108 	add.w	r1, r7, #8
 800d76c:	f107 030c 	add.w	r3, r7, #12
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe fa25 	bl	800bbc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d776:	6879      	ldr	r1, [r7, #4]
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	9202      	str	r2, [sp, #8]
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	2302      	movs	r3, #2
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	2300      	movs	r3, #0
 800d786:	460a      	mov	r2, r1
 800d788:	4910      	ldr	r1, [pc, #64]	; (800d7cc <xTimerCreateTimerTask+0x84>)
 800d78a:	4811      	ldr	r0, [pc, #68]	; (800d7d0 <xTimerCreateTimerTask+0x88>)
 800d78c:	f7ff f8de 	bl	800c94c <xTaskCreateStatic>
 800d790:	4603      	mov	r3, r0
 800d792:	4a10      	ldr	r2, [pc, #64]	; (800d7d4 <xTimerCreateTimerTask+0x8c>)
 800d794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d796:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <xTimerCreateTimerTask+0x8c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d10a      	bne.n	800d7be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	613b      	str	r3, [r7, #16]
}
 800d7ba:	bf00      	nop
 800d7bc:	e7fe      	b.n	800d7bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d7be:	697b      	ldr	r3, [r7, #20]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3718      	adds	r7, #24
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	20000ce4 	.word	0x20000ce4
 800d7cc:	0800f0ac 	.word	0x0800f0ac
 800d7d0:	0800da41 	.word	0x0800da41
 800d7d4:	20000ce8 	.word	0x20000ce8

0800d7d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af02      	add	r7, sp, #8
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
 800d7e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d7e6:	202c      	movs	r0, #44	; 0x2c
 800d7e8:	f000 fe06 	bl	800e3f8 <pvPortMalloc>
 800d7ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00d      	beq.n	800d810 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f000 f843 	bl	800d896 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d810:	697b      	ldr	r3, [r7, #20]
	}
 800d812:	4618      	mov	r0, r3
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b08a      	sub	sp, #40	; 0x28
 800d81e:	af02      	add	r7, sp, #8
 800d820:	60f8      	str	r0, [r7, #12]
 800d822:	60b9      	str	r1, [r7, #8]
 800d824:	607a      	str	r2, [r7, #4]
 800d826:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d828:	232c      	movs	r3, #44	; 0x2c
 800d82a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	2b2c      	cmp	r3, #44	; 0x2c
 800d830:	d00a      	beq.n	800d848 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d836:	f383 8811 	msr	BASEPRI, r3
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	61bb      	str	r3, [r7, #24]
}
 800d844:	bf00      	nop
 800d846:	e7fe      	b.n	800d846 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d848:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10a      	bne.n	800d866 <xTimerCreateStatic+0x4c>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	617b      	str	r3, [r7, #20]
}
 800d862:	bf00      	nop
 800d864:	e7fe      	b.n	800d864 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d868:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00d      	beq.n	800d88c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	2202      	movs	r2, #2
 800d874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	9301      	str	r3, [sp, #4]
 800d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	68b9      	ldr	r1, [r7, #8]
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f000 f805 	bl	800d896 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d88c:	69fb      	ldr	r3, [r7, #28]
	}
 800d88e:	4618      	mov	r0, r3
 800d890:	3720      	adds	r7, #32
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b086      	sub	sp, #24
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	607a      	str	r2, [r7, #4]
 800d8a2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d10a      	bne.n	800d8c0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ae:	f383 8811 	msr	BASEPRI, r3
 800d8b2:	f3bf 8f6f 	isb	sy
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	617b      	str	r3, [r7, #20]
}
 800d8bc:	bf00      	nop
 800d8be:	e7fe      	b.n	800d8be <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d01e      	beq.n	800d904 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d8c6:	f000 fae7 	bl	800de98 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	68fa      	ldr	r2, [r7, #12]
 800d8ce:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	6a3a      	ldr	r2, [r7, #32]
 800d8e0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fe f9f5 	bl	800bcd6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d008      	beq.n	800d904 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8f8:	f043 0304 	orr.w	r3, r3, #4
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d904:	bf00      	nop
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08a      	sub	sp, #40	; 0x28
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d91a:	2300      	movs	r3, #0
 800d91c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10a      	bne.n	800d93a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	623b      	str	r3, [r7, #32]
}
 800d936:	bf00      	nop
 800d938:	e7fe      	b.n	800d938 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d93a:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <xTimerGenericCommand+0x98>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d02a      	beq.n	800d998 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b05      	cmp	r3, #5
 800d952:	dc18      	bgt.n	800d986 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d954:	f7ff fe18 	bl	800d588 <xTaskGetSchedulerState>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d109      	bne.n	800d972 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d95e:	4b11      	ldr	r3, [pc, #68]	; (800d9a4 <xTimerGenericCommand+0x98>)
 800d960:	6818      	ldr	r0, [r3, #0]
 800d962:	f107 0110 	add.w	r1, r7, #16
 800d966:	2300      	movs	r3, #0
 800d968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d96a:	f7fe fb87 	bl	800c07c <xQueueGenericSend>
 800d96e:	6278      	str	r0, [r7, #36]	; 0x24
 800d970:	e012      	b.n	800d998 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d972:	4b0c      	ldr	r3, [pc, #48]	; (800d9a4 <xTimerGenericCommand+0x98>)
 800d974:	6818      	ldr	r0, [r3, #0]
 800d976:	f107 0110 	add.w	r1, r7, #16
 800d97a:	2300      	movs	r3, #0
 800d97c:	2200      	movs	r2, #0
 800d97e:	f7fe fb7d 	bl	800c07c <xQueueGenericSend>
 800d982:	6278      	str	r0, [r7, #36]	; 0x24
 800d984:	e008      	b.n	800d998 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d986:	4b07      	ldr	r3, [pc, #28]	; (800d9a4 <xTimerGenericCommand+0x98>)
 800d988:	6818      	ldr	r0, [r3, #0]
 800d98a:	f107 0110 	add.w	r1, r7, #16
 800d98e:	2300      	movs	r3, #0
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	f7fe fc71 	bl	800c278 <xQueueGenericSendFromISR>
 800d996:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3728      	adds	r7, #40	; 0x28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	20000ce4 	.word	0x20000ce4

0800d9a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b088      	sub	sp, #32
 800d9ac:	af02      	add	r7, sp, #8
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9b2:	4b22      	ldr	r3, [pc, #136]	; (800da3c <prvProcessExpiredTimer+0x94>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	3304      	adds	r3, #4
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7fe f9f2 	bl	800bdaa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9cc:	f003 0304 	and.w	r3, r3, #4
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d022      	beq.n	800da1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	699a      	ldr	r2, [r3, #24]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	18d1      	adds	r1, r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	6978      	ldr	r0, [r7, #20]
 800d9e2:	f000 f8d1 	bl	800db88 <prvInsertTimerInActiveList>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d01f      	beq.n	800da2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	6978      	ldr	r0, [r7, #20]
 800d9f8:	f7ff ff88 	bl	800d90c <xTimerGenericCommand>
 800d9fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d113      	bne.n	800da2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	60fb      	str	r3, [r7, #12]
}
 800da16:	bf00      	nop
 800da18:	e7fe      	b.n	800da18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da20:	f023 0301 	bic.w	r3, r3, #1
 800da24:	b2da      	uxtb	r2, r3
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	6a1b      	ldr	r3, [r3, #32]
 800da30:	6978      	ldr	r0, [r7, #20]
 800da32:	4798      	blx	r3
}
 800da34:	bf00      	nop
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	20000cdc 	.word	0x20000cdc

0800da40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da48:	f107 0308 	add.w	r3, r7, #8
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 f857 	bl	800db00 <prvGetNextExpireTime>
 800da52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	4619      	mov	r1, r3
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f000 f803 	bl	800da64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da5e:	f000 f8d5 	bl	800dc0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da62:	e7f1      	b.n	800da48 <prvTimerTask+0x8>

0800da64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da6e:	f7ff f9a9 	bl	800cdc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da72:	f107 0308 	add.w	r3, r7, #8
 800da76:	4618      	mov	r0, r3
 800da78:	f000 f866 	bl	800db48 <prvSampleTimeNow>
 800da7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d130      	bne.n	800dae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10a      	bne.n	800daa0 <prvProcessTimerOrBlockTask+0x3c>
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d806      	bhi.n	800daa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da92:	f7ff f9a5 	bl	800cde0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da96:	68f9      	ldr	r1, [r7, #12]
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7ff ff85 	bl	800d9a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da9e:	e024      	b.n	800daea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d008      	beq.n	800dab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800daa6:	4b13      	ldr	r3, [pc, #76]	; (800daf4 <prvProcessTimerOrBlockTask+0x90>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d101      	bne.n	800dab4 <prvProcessTimerOrBlockTask+0x50>
 800dab0:	2301      	movs	r3, #1
 800dab2:	e000      	b.n	800dab6 <prvProcessTimerOrBlockTask+0x52>
 800dab4:	2300      	movs	r3, #0
 800dab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dab8:	4b0f      	ldr	r3, [pc, #60]	; (800daf8 <prvProcessTimerOrBlockTask+0x94>)
 800daba:	6818      	ldr	r0, [r3, #0]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	4619      	mov	r1, r3
 800dac6:	f7fe ff0d 	bl	800c8e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800daca:	f7ff f989 	bl	800cde0 <xTaskResumeAll>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10a      	bne.n	800daea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dad4:	4b09      	ldr	r3, [pc, #36]	; (800dafc <prvProcessTimerOrBlockTask+0x98>)
 800dad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	f3bf 8f6f 	isb	sy
}
 800dae4:	e001      	b.n	800daea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dae6:	f7ff f97b 	bl	800cde0 <xTaskResumeAll>
}
 800daea:	bf00      	nop
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	20000ce0 	.word	0x20000ce0
 800daf8:	20000ce4 	.word	0x20000ce4
 800dafc:	e000ed04 	.word	0xe000ed04

0800db00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db00:	b480      	push	{r7}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db08:	4b0e      	ldr	r3, [pc, #56]	; (800db44 <prvGetNextExpireTime+0x44>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <prvGetNextExpireTime+0x16>
 800db12:	2201      	movs	r2, #1
 800db14:	e000      	b.n	800db18 <prvGetNextExpireTime+0x18>
 800db16:	2200      	movs	r2, #0
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d105      	bne.n	800db30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db24:	4b07      	ldr	r3, [pc, #28]	; (800db44 <prvGetNextExpireTime+0x44>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	e001      	b.n	800db34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db30:	2300      	movs	r3, #0
 800db32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db34:	68fb      	ldr	r3, [r7, #12]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3714      	adds	r7, #20
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	20000cdc 	.word	0x20000cdc

0800db48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db50:	f7ff f9e4 	bl	800cf1c <xTaskGetTickCount>
 800db54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db56:	4b0b      	ldr	r3, [pc, #44]	; (800db84 <prvSampleTimeNow+0x3c>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d205      	bcs.n	800db6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db60:	f000 f936 	bl	800ddd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	e002      	b.n	800db72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db72:	4a04      	ldr	r2, [pc, #16]	; (800db84 <prvSampleTimeNow+0x3c>)
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db78:	68fb      	ldr	r3, [r7, #12]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	20000cec 	.word	0x20000cec

0800db88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db96:	2300      	movs	r3, #0
 800db98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d812      	bhi.n	800dbd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	1ad2      	subs	r2, r2, r3
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d302      	bcc.n	800dbc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	617b      	str	r3, [r7, #20]
 800dbc0:	e01b      	b.n	800dbfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbc2:	4b10      	ldr	r3, [pc, #64]	; (800dc04 <prvInsertTimerInActiveList+0x7c>)
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3304      	adds	r3, #4
 800dbca:	4619      	mov	r1, r3
 800dbcc:	4610      	mov	r0, r2
 800dbce:	f7fe f8b3 	bl	800bd38 <vListInsert>
 800dbd2:	e012      	b.n	800dbfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d206      	bcs.n	800dbea <prvInsertTimerInActiveList+0x62>
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d302      	bcc.n	800dbea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	e007      	b.n	800dbfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbea:	4b07      	ldr	r3, [pc, #28]	; (800dc08 <prvInsertTimerInActiveList+0x80>)
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	f7fe f89f 	bl	800bd38 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dbfa:	697b      	ldr	r3, [r7, #20]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	20000ce0 	.word	0x20000ce0
 800dc08:	20000cdc 	.word	0x20000cdc

0800dc0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08e      	sub	sp, #56	; 0x38
 800dc10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc12:	e0ca      	b.n	800ddaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	da18      	bge.n	800dc4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc1a:	1d3b      	adds	r3, r7, #4
 800dc1c:	3304      	adds	r3, #4
 800dc1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10a      	bne.n	800dc3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	61fb      	str	r3, [r7, #28]
}
 800dc38:	bf00      	nop
 800dc3a:	e7fe      	b.n	800dc3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc42:	6850      	ldr	r0, [r2, #4]
 800dc44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc46:	6892      	ldr	r2, [r2, #8]
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f2c0 80aa 	blt.w	800dda8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	695b      	ldr	r3, [r3, #20]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d004      	beq.n	800dc6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc62:	3304      	adds	r3, #4
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7fe f8a0 	bl	800bdaa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc6a:	463b      	mov	r3, r7
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7ff ff6b 	bl	800db48 <prvSampleTimeNow>
 800dc72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b09      	cmp	r3, #9
 800dc78:	f200 8097 	bhi.w	800ddaa <prvProcessReceivedCommands+0x19e>
 800dc7c:	a201      	add	r2, pc, #4	; (adr r2, 800dc84 <prvProcessReceivedCommands+0x78>)
 800dc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc82:	bf00      	nop
 800dc84:	0800dcad 	.word	0x0800dcad
 800dc88:	0800dcad 	.word	0x0800dcad
 800dc8c:	0800dcad 	.word	0x0800dcad
 800dc90:	0800dd21 	.word	0x0800dd21
 800dc94:	0800dd35 	.word	0x0800dd35
 800dc98:	0800dd7f 	.word	0x0800dd7f
 800dc9c:	0800dcad 	.word	0x0800dcad
 800dca0:	0800dcad 	.word	0x0800dcad
 800dca4:	0800dd21 	.word	0x0800dd21
 800dca8:	0800dd35 	.word	0x0800dd35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcb2:	f043 0301 	orr.w	r3, r3, #1
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	699b      	ldr	r3, [r3, #24]
 800dcc4:	18d1      	adds	r1, r2, r3
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dccc:	f7ff ff5c 	bl	800db88 <prvInsertTimerInActiveList>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d069      	beq.n	800ddaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	6a1b      	ldr	r3, [r3, #32]
 800dcda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dce4:	f003 0304 	and.w	r3, r3, #4
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d05e      	beq.n	800ddaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	699b      	ldr	r3, [r3, #24]
 800dcf2:	441a      	add	r2, r3
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcfe:	f7ff fe05 	bl	800d90c <xTimerGenericCommand>
 800dd02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd04:	6a3b      	ldr	r3, [r7, #32]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d14f      	bne.n	800ddaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	61bb      	str	r3, [r7, #24]
}
 800dd1c:	bf00      	nop
 800dd1e:	e7fe      	b.n	800dd1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd26:	f023 0301 	bic.w	r3, r3, #1
 800dd2a:	b2da      	uxtb	r2, r3
 800dd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd32:	e03a      	b.n	800ddaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd3a:	f043 0301 	orr.w	r3, r3, #1
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10a      	bne.n	800dd6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd58:	f383 8811 	msr	BASEPRI, r3
 800dd5c:	f3bf 8f6f 	isb	sy
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	617b      	str	r3, [r7, #20]
}
 800dd66:	bf00      	nop
 800dd68:	e7fe      	b.n	800dd68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	699a      	ldr	r2, [r3, #24]
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	18d1      	adds	r1, r2, r3
 800dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd78:	f7ff ff06 	bl	800db88 <prvInsertTimerInActiveList>
					break;
 800dd7c:	e015      	b.n	800ddaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd84:	f003 0302 	and.w	r3, r3, #2
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d103      	bne.n	800dd94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dd8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd8e:	f000 fbff 	bl	800e590 <vPortFree>
 800dd92:	e00a      	b.n	800ddaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd9a:	f023 0301 	bic.w	r3, r3, #1
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dda6:	e000      	b.n	800ddaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dda8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddaa:	4b08      	ldr	r3, [pc, #32]	; (800ddcc <prvProcessReceivedCommands+0x1c0>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	1d39      	adds	r1, r7, #4
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe fafc 	bl	800c3b0 <xQueueReceive>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f47f af2a 	bne.w	800dc14 <prvProcessReceivedCommands+0x8>
	}
}
 800ddc0:	bf00      	nop
 800ddc2:	bf00      	nop
 800ddc4:	3730      	adds	r7, #48	; 0x30
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20000ce4 	.word	0x20000ce4

0800ddd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b088      	sub	sp, #32
 800ddd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddd6:	e048      	b.n	800de6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddd8:	4b2d      	ldr	r3, [pc, #180]	; (800de90 <prvSwitchTimerLists+0xc0>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dde2:	4b2b      	ldr	r3, [pc, #172]	; (800de90 <prvSwitchTimerLists+0xc0>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	3304      	adds	r3, #4
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fd ffda 	bl	800bdaa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6a1b      	ldr	r3, [r3, #32]
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de04:	f003 0304 	and.w	r3, r3, #4
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d02e      	beq.n	800de6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	4413      	add	r3, r2
 800de14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de16:	68ba      	ldr	r2, [r7, #8]
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d90e      	bls.n	800de3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de2a:	4b19      	ldr	r3, [pc, #100]	; (800de90 <prvSwitchTimerLists+0xc0>)
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	3304      	adds	r3, #4
 800de32:	4619      	mov	r1, r3
 800de34:	4610      	mov	r0, r2
 800de36:	f7fd ff7f 	bl	800bd38 <vListInsert>
 800de3a:	e016      	b.n	800de6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de3c:	2300      	movs	r3, #0
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	2300      	movs	r3, #0
 800de42:	693a      	ldr	r2, [r7, #16]
 800de44:	2100      	movs	r1, #0
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f7ff fd60 	bl	800d90c <xTimerGenericCommand>
 800de4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d10a      	bne.n	800de6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800de54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de58:	f383 8811 	msr	BASEPRI, r3
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	f3bf 8f4f 	dsb	sy
 800de64:	603b      	str	r3, [r7, #0]
}
 800de66:	bf00      	nop
 800de68:	e7fe      	b.n	800de68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de6a:	4b09      	ldr	r3, [pc, #36]	; (800de90 <prvSwitchTimerLists+0xc0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1b1      	bne.n	800ddd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de74:	4b06      	ldr	r3, [pc, #24]	; (800de90 <prvSwitchTimerLists+0xc0>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de7a:	4b06      	ldr	r3, [pc, #24]	; (800de94 <prvSwitchTimerLists+0xc4>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a04      	ldr	r2, [pc, #16]	; (800de90 <prvSwitchTimerLists+0xc0>)
 800de80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de82:	4a04      	ldr	r2, [pc, #16]	; (800de94 <prvSwitchTimerLists+0xc4>)
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	6013      	str	r3, [r2, #0]
}
 800de88:	bf00      	nop
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	20000cdc 	.word	0x20000cdc
 800de94:	20000ce0 	.word	0x20000ce0

0800de98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de9e:	f000 f989 	bl	800e1b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dea2:	4b15      	ldr	r3, [pc, #84]	; (800def8 <prvCheckForValidListAndQueue+0x60>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d120      	bne.n	800deec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800deaa:	4814      	ldr	r0, [pc, #80]	; (800defc <prvCheckForValidListAndQueue+0x64>)
 800deac:	f7fd fef3 	bl	800bc96 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800deb0:	4813      	ldr	r0, [pc, #76]	; (800df00 <prvCheckForValidListAndQueue+0x68>)
 800deb2:	f7fd fef0 	bl	800bc96 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800deb6:	4b13      	ldr	r3, [pc, #76]	; (800df04 <prvCheckForValidListAndQueue+0x6c>)
 800deb8:	4a10      	ldr	r2, [pc, #64]	; (800defc <prvCheckForValidListAndQueue+0x64>)
 800deba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800debc:	4b12      	ldr	r3, [pc, #72]	; (800df08 <prvCheckForValidListAndQueue+0x70>)
 800debe:	4a10      	ldr	r2, [pc, #64]	; (800df00 <prvCheckForValidListAndQueue+0x68>)
 800dec0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dec2:	2300      	movs	r3, #0
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	4b11      	ldr	r3, [pc, #68]	; (800df0c <prvCheckForValidListAndQueue+0x74>)
 800dec8:	4a11      	ldr	r2, [pc, #68]	; (800df10 <prvCheckForValidListAndQueue+0x78>)
 800deca:	2110      	movs	r1, #16
 800decc:	200a      	movs	r0, #10
 800dece:	f7fd ffff 	bl	800bed0 <xQueueGenericCreateStatic>
 800ded2:	4603      	mov	r3, r0
 800ded4:	4a08      	ldr	r2, [pc, #32]	; (800def8 <prvCheckForValidListAndQueue+0x60>)
 800ded6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ded8:	4b07      	ldr	r3, [pc, #28]	; (800def8 <prvCheckForValidListAndQueue+0x60>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d005      	beq.n	800deec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dee0:	4b05      	ldr	r3, [pc, #20]	; (800def8 <prvCheckForValidListAndQueue+0x60>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	490b      	ldr	r1, [pc, #44]	; (800df14 <prvCheckForValidListAndQueue+0x7c>)
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe fcd2 	bl	800c890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800deec:	f000 f992 	bl	800e214 <vPortExitCritical>
}
 800def0:	bf00      	nop
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	20000ce4 	.word	0x20000ce4
 800defc:	20000cb4 	.word	0x20000cb4
 800df00:	20000cc8 	.word	0x20000cc8
 800df04:	20000cdc 	.word	0x20000cdc
 800df08:	20000ce0 	.word	0x20000ce0
 800df0c:	20000d90 	.word	0x20000d90
 800df10:	20000cf0 	.word	0x20000cf0
 800df14:	0800f0b4 	.word	0x0800f0b4

0800df18 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10a      	bne.n	800df40 <pvTimerGetTimerID+0x28>
	__asm volatile
 800df2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2e:	f383 8811 	msr	BASEPRI, r3
 800df32:	f3bf 8f6f 	isb	sy
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	60fb      	str	r3, [r7, #12]
}
 800df3c:	bf00      	nop
 800df3e:	e7fe      	b.n	800df3e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800df40:	f000 f938 	bl	800e1b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	69db      	ldr	r3, [r3, #28]
 800df48:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800df4a:	f000 f963 	bl	800e214 <vPortExitCritical>

	return pvReturn;
 800df4e:	693b      	ldr	r3, [r7, #16]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3718      	adds	r7, #24
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	3b04      	subs	r3, #4
 800df68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3b04      	subs	r3, #4
 800df76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	f023 0201 	bic.w	r2, r3, #1
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	3b04      	subs	r3, #4
 800df86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df88:	4a0c      	ldr	r2, [pc, #48]	; (800dfbc <pxPortInitialiseStack+0x64>)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3b14      	subs	r3, #20
 800df92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3b04      	subs	r3, #4
 800df9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f06f 0202 	mvn.w	r2, #2
 800dfa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	3b20      	subs	r3, #32
 800dfac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfae:	68fb      	ldr	r3, [r7, #12]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	0800dfc1 	.word	0x0800dfc1

0800dfc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfca:	4b12      	ldr	r3, [pc, #72]	; (800e014 <prvTaskExitError+0x54>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd2:	d00a      	beq.n	800dfea <prvTaskExitError+0x2a>
	__asm volatile
 800dfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	60fb      	str	r3, [r7, #12]
}
 800dfe6:	bf00      	nop
 800dfe8:	e7fe      	b.n	800dfe8 <prvTaskExitError+0x28>
	__asm volatile
 800dfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	60bb      	str	r3, [r7, #8]
}
 800dffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dffe:	bf00      	nop
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d0fc      	beq.n	800e000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e006:	bf00      	nop
 800e008:	bf00      	nop
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	2000002c 	.word	0x2000002c
	...

0800e020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e020:	4b07      	ldr	r3, [pc, #28]	; (800e040 <pxCurrentTCBConst2>)
 800e022:	6819      	ldr	r1, [r3, #0]
 800e024:	6808      	ldr	r0, [r1, #0]
 800e026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02a:	f380 8809 	msr	PSP, r0
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f04f 0000 	mov.w	r0, #0
 800e036:	f380 8811 	msr	BASEPRI, r0
 800e03a:	4770      	bx	lr
 800e03c:	f3af 8000 	nop.w

0800e040 <pxCurrentTCBConst2>:
 800e040:	200007b4 	.word	0x200007b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e044:	bf00      	nop
 800e046:	bf00      	nop

0800e048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e048:	4808      	ldr	r0, [pc, #32]	; (800e06c <prvPortStartFirstTask+0x24>)
 800e04a:	6800      	ldr	r0, [r0, #0]
 800e04c:	6800      	ldr	r0, [r0, #0]
 800e04e:	f380 8808 	msr	MSP, r0
 800e052:	f04f 0000 	mov.w	r0, #0
 800e056:	f380 8814 	msr	CONTROL, r0
 800e05a:	b662      	cpsie	i
 800e05c:	b661      	cpsie	f
 800e05e:	f3bf 8f4f 	dsb	sy
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	df00      	svc	0
 800e068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e06a:	bf00      	nop
 800e06c:	e000ed08 	.word	0xe000ed08

0800e070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e076:	4b46      	ldr	r3, [pc, #280]	; (800e190 <xPortStartScheduler+0x120>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a46      	ldr	r2, [pc, #280]	; (800e194 <xPortStartScheduler+0x124>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d10a      	bne.n	800e096 <xPortStartScheduler+0x26>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	613b      	str	r3, [r7, #16]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e096:	4b3e      	ldr	r3, [pc, #248]	; (800e190 <xPortStartScheduler+0x120>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a3f      	ldr	r2, [pc, #252]	; (800e198 <xPortStartScheduler+0x128>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d10a      	bne.n	800e0b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	60fb      	str	r3, [r7, #12]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0b6:	4b39      	ldr	r3, [pc, #228]	; (800e19c <xPortStartScheduler+0x12c>)
 800e0b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	22ff      	movs	r2, #255	; 0xff
 800e0c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0d0:	78fb      	ldrb	r3, [r7, #3]
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	4b31      	ldr	r3, [pc, #196]	; (800e1a0 <xPortStartScheduler+0x130>)
 800e0dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0de:	4b31      	ldr	r3, [pc, #196]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e0e0:	2207      	movs	r2, #7
 800e0e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0e4:	e009      	b.n	800e0fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0e6:	4b2f      	ldr	r3, [pc, #188]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	4a2d      	ldr	r2, [pc, #180]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e0ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e0f0:	78fb      	ldrb	r3, [r7, #3]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0fa:	78fb      	ldrb	r3, [r7, #3]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e102:	2b80      	cmp	r3, #128	; 0x80
 800e104:	d0ef      	beq.n	800e0e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e106:	4b27      	ldr	r3, [pc, #156]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f1c3 0307 	rsb	r3, r3, #7
 800e10e:	2b04      	cmp	r3, #4
 800e110:	d00a      	beq.n	800e128 <xPortStartScheduler+0xb8>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	60bb      	str	r3, [r7, #8]
}
 800e124:	bf00      	nop
 800e126:	e7fe      	b.n	800e126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e128:	4b1e      	ldr	r3, [pc, #120]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	021b      	lsls	r3, r3, #8
 800e12e:	4a1d      	ldr	r2, [pc, #116]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e132:	4b1c      	ldr	r3, [pc, #112]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e13a:	4a1a      	ldr	r2, [pc, #104]	; (800e1a4 <xPortStartScheduler+0x134>)
 800e13c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	b2da      	uxtb	r2, r3
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e146:	4b18      	ldr	r3, [pc, #96]	; (800e1a8 <xPortStartScheduler+0x138>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a17      	ldr	r2, [pc, #92]	; (800e1a8 <xPortStartScheduler+0x138>)
 800e14c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e152:	4b15      	ldr	r3, [pc, #84]	; (800e1a8 <xPortStartScheduler+0x138>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a14      	ldr	r2, [pc, #80]	; (800e1a8 <xPortStartScheduler+0x138>)
 800e158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e15c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e15e:	f000 f8dd 	bl	800e31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e162:	4b12      	ldr	r3, [pc, #72]	; (800e1ac <xPortStartScheduler+0x13c>)
 800e164:	2200      	movs	r2, #0
 800e166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e168:	f000 f8fc 	bl	800e364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e16c:	4b10      	ldr	r3, [pc, #64]	; (800e1b0 <xPortStartScheduler+0x140>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a0f      	ldr	r2, [pc, #60]	; (800e1b0 <xPortStartScheduler+0x140>)
 800e172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e178:	f7ff ff66 	bl	800e048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e17c:	f7fe ff98 	bl	800d0b0 <vTaskSwitchContext>
	prvTaskExitError();
 800e180:	f7ff ff1e 	bl	800dfc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3718      	adds	r7, #24
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	e000ed00 	.word	0xe000ed00
 800e194:	410fc271 	.word	0x410fc271
 800e198:	410fc270 	.word	0x410fc270
 800e19c:	e000e400 	.word	0xe000e400
 800e1a0:	20000de0 	.word	0x20000de0
 800e1a4:	20000de4 	.word	0x20000de4
 800e1a8:	e000ed20 	.word	0xe000ed20
 800e1ac:	2000002c 	.word	0x2000002c
 800e1b0:	e000ef34 	.word	0xe000ef34

0800e1b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	607b      	str	r3, [r7, #4]
}
 800e1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1ce:	4b0f      	ldr	r3, [pc, #60]	; (800e20c <vPortEnterCritical+0x58>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	4a0d      	ldr	r2, [pc, #52]	; (800e20c <vPortEnterCritical+0x58>)
 800e1d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1d8:	4b0c      	ldr	r3, [pc, #48]	; (800e20c <vPortEnterCritical+0x58>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d10f      	bne.n	800e200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1e0:	4b0b      	ldr	r3, [pc, #44]	; (800e210 <vPortEnterCritical+0x5c>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00a      	beq.n	800e200 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	603b      	str	r3, [r7, #0]
}
 800e1fc:	bf00      	nop
 800e1fe:	e7fe      	b.n	800e1fe <vPortEnterCritical+0x4a>
	}
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr
 800e20c:	2000002c 	.word	0x2000002c
 800e210:	e000ed04 	.word	0xe000ed04

0800e214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e21a:	4b12      	ldr	r3, [pc, #72]	; (800e264 <vPortExitCritical+0x50>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10a      	bne.n	800e238 <vPortExitCritical+0x24>
	__asm volatile
 800e222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	607b      	str	r3, [r7, #4]
}
 800e234:	bf00      	nop
 800e236:	e7fe      	b.n	800e236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e238:	4b0a      	ldr	r3, [pc, #40]	; (800e264 <vPortExitCritical+0x50>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3b01      	subs	r3, #1
 800e23e:	4a09      	ldr	r2, [pc, #36]	; (800e264 <vPortExitCritical+0x50>)
 800e240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e242:	4b08      	ldr	r3, [pc, #32]	; (800e264 <vPortExitCritical+0x50>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d105      	bne.n	800e256 <vPortExitCritical+0x42>
 800e24a:	2300      	movs	r3, #0
 800e24c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	f383 8811 	msr	BASEPRI, r3
}
 800e254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e256:	bf00      	nop
 800e258:	370c      	adds	r7, #12
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	2000002c 	.word	0x2000002c
	...

0800e270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e270:	f3ef 8009 	mrs	r0, PSP
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	4b15      	ldr	r3, [pc, #84]	; (800e2d0 <pxCurrentTCBConst>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	f01e 0f10 	tst.w	lr, #16
 800e280:	bf08      	it	eq
 800e282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28a:	6010      	str	r0, [r2, #0]
 800e28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e294:	f380 8811 	msr	BASEPRI, r0
 800e298:	f3bf 8f4f 	dsb	sy
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f7fe ff06 	bl	800d0b0 <vTaskSwitchContext>
 800e2a4:	f04f 0000 	mov.w	r0, #0
 800e2a8:	f380 8811 	msr	BASEPRI, r0
 800e2ac:	bc09      	pop	{r0, r3}
 800e2ae:	6819      	ldr	r1, [r3, #0]
 800e2b0:	6808      	ldr	r0, [r1, #0]
 800e2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b6:	f01e 0f10 	tst.w	lr, #16
 800e2ba:	bf08      	it	eq
 800e2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2c0:	f380 8809 	msr	PSP, r0
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	f3af 8000 	nop.w

0800e2d0 <pxCurrentTCBConst>:
 800e2d0:	200007b4 	.word	0x200007b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2d4:	bf00      	nop
 800e2d6:	bf00      	nop

0800e2d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	607b      	str	r3, [r7, #4]
}
 800e2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e2f2:	f7fe fe23 	bl	800cf3c <xTaskIncrementTick>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d003      	beq.n	800e304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e2fc:	4b06      	ldr	r3, [pc, #24]	; (800e318 <xPortSysTickHandler+0x40>)
 800e2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	2300      	movs	r3, #0
 800e306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	f383 8811 	msr	BASEPRI, r3
}
 800e30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	e000ed04 	.word	0xe000ed04

0800e31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e31c:	b480      	push	{r7}
 800e31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e320:	4b0b      	ldr	r3, [pc, #44]	; (800e350 <vPortSetupTimerInterrupt+0x34>)
 800e322:	2200      	movs	r2, #0
 800e324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e326:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <vPortSetupTimerInterrupt+0x38>)
 800e328:	2200      	movs	r2, #0
 800e32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e32c:	4b0a      	ldr	r3, [pc, #40]	; (800e358 <vPortSetupTimerInterrupt+0x3c>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a0a      	ldr	r2, [pc, #40]	; (800e35c <vPortSetupTimerInterrupt+0x40>)
 800e332:	fba2 2303 	umull	r2, r3, r2, r3
 800e336:	099b      	lsrs	r3, r3, #6
 800e338:	4a09      	ldr	r2, [pc, #36]	; (800e360 <vPortSetupTimerInterrupt+0x44>)
 800e33a:	3b01      	subs	r3, #1
 800e33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e33e:	4b04      	ldr	r3, [pc, #16]	; (800e350 <vPortSetupTimerInterrupt+0x34>)
 800e340:	2207      	movs	r2, #7
 800e342:	601a      	str	r2, [r3, #0]
}
 800e344:	bf00      	nop
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	e000e010 	.word	0xe000e010
 800e354:	e000e018 	.word	0xe000e018
 800e358:	20000000 	.word	0x20000000
 800e35c:	10624dd3 	.word	0x10624dd3
 800e360:	e000e014 	.word	0xe000e014

0800e364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e374 <vPortEnableVFP+0x10>
 800e368:	6801      	ldr	r1, [r0, #0]
 800e36a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e36e:	6001      	str	r1, [r0, #0]
 800e370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e372:	bf00      	nop
 800e374:	e000ed88 	.word	0xe000ed88

0800e378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e37e:	f3ef 8305 	mrs	r3, IPSR
 800e382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2b0f      	cmp	r3, #15
 800e388:	d914      	bls.n	800e3b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e38a:	4a17      	ldr	r2, [pc, #92]	; (800e3e8 <vPortValidateInterruptPriority+0x70>)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	4413      	add	r3, r2
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e394:	4b15      	ldr	r3, [pc, #84]	; (800e3ec <vPortValidateInterruptPriority+0x74>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	7afa      	ldrb	r2, [r7, #11]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d20a      	bcs.n	800e3b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	607b      	str	r3, [r7, #4]
}
 800e3b0:	bf00      	nop
 800e3b2:	e7fe      	b.n	800e3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3b4:	4b0e      	ldr	r3, [pc, #56]	; (800e3f0 <vPortValidateInterruptPriority+0x78>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3bc:	4b0d      	ldr	r3, [pc, #52]	; (800e3f4 <vPortValidateInterruptPriority+0x7c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d90a      	bls.n	800e3da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c8:	f383 8811 	msr	BASEPRI, r3
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	603b      	str	r3, [r7, #0]
}
 800e3d6:	bf00      	nop
 800e3d8:	e7fe      	b.n	800e3d8 <vPortValidateInterruptPriority+0x60>
	}
 800e3da:	bf00      	nop
 800e3dc:	3714      	adds	r7, #20
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr
 800e3e6:	bf00      	nop
 800e3e8:	e000e3f0 	.word	0xe000e3f0
 800e3ec:	20000de0 	.word	0x20000de0
 800e3f0:	e000ed0c 	.word	0xe000ed0c
 800e3f4:	20000de4 	.word	0x20000de4

0800e3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08a      	sub	sp, #40	; 0x28
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e400:	2300      	movs	r3, #0
 800e402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e404:	f7fe fcde 	bl	800cdc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e408:	4b5b      	ldr	r3, [pc, #364]	; (800e578 <pvPortMalloc+0x180>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d101      	bne.n	800e414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e410:	f000 f920 	bl	800e654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e414:	4b59      	ldr	r3, [pc, #356]	; (800e57c <pvPortMalloc+0x184>)
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4013      	ands	r3, r2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f040 8093 	bne.w	800e548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d01d      	beq.n	800e464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e428:	2208      	movs	r2, #8
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4413      	add	r3, r2
 800e42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f003 0307 	and.w	r3, r3, #7
 800e436:	2b00      	cmp	r3, #0
 800e438:	d014      	beq.n	800e464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f023 0307 	bic.w	r3, r3, #7
 800e440:	3308      	adds	r3, #8
 800e442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f003 0307 	and.w	r3, r3, #7
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00a      	beq.n	800e464 <pvPortMalloc+0x6c>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	617b      	str	r3, [r7, #20]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d06e      	beq.n	800e548 <pvPortMalloc+0x150>
 800e46a:	4b45      	ldr	r3, [pc, #276]	; (800e580 <pvPortMalloc+0x188>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	429a      	cmp	r2, r3
 800e472:	d869      	bhi.n	800e548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e474:	4b43      	ldr	r3, [pc, #268]	; (800e584 <pvPortMalloc+0x18c>)
 800e476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e478:	4b42      	ldr	r3, [pc, #264]	; (800e584 <pvPortMalloc+0x18c>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e47e:	e004      	b.n	800e48a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	429a      	cmp	r2, r3
 800e492:	d903      	bls.n	800e49c <pvPortMalloc+0xa4>
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1f1      	bne.n	800e480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e49c:	4b36      	ldr	r3, [pc, #216]	; (800e578 <pvPortMalloc+0x180>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d050      	beq.n	800e548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2208      	movs	r2, #8
 800e4ac:	4413      	add	r3, r2
 800e4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	1ad2      	subs	r2, r2, r3
 800e4c0:	2308      	movs	r3, #8
 800e4c2:	005b      	lsls	r3, r3, #1
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d91f      	bls.n	800e508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	f003 0307 	and.w	r3, r3, #7
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00a      	beq.n	800e4f0 <pvPortMalloc+0xf8>
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	613b      	str	r3, [r7, #16]
}
 800e4ec:	bf00      	nop
 800e4ee:	e7fe      	b.n	800e4ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	685a      	ldr	r2, [r3, #4]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	1ad2      	subs	r2, r2, r3
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e502:	69b8      	ldr	r0, [r7, #24]
 800e504:	f000 f908 	bl	800e718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e508:	4b1d      	ldr	r3, [pc, #116]	; (800e580 <pvPortMalloc+0x188>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	1ad3      	subs	r3, r2, r3
 800e512:	4a1b      	ldr	r2, [pc, #108]	; (800e580 <pvPortMalloc+0x188>)
 800e514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e516:	4b1a      	ldr	r3, [pc, #104]	; (800e580 <pvPortMalloc+0x188>)
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	4b1b      	ldr	r3, [pc, #108]	; (800e588 <pvPortMalloc+0x190>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d203      	bcs.n	800e52a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e522:	4b17      	ldr	r3, [pc, #92]	; (800e580 <pvPortMalloc+0x188>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a18      	ldr	r2, [pc, #96]	; (800e588 <pvPortMalloc+0x190>)
 800e528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	685a      	ldr	r2, [r3, #4]
 800e52e:	4b13      	ldr	r3, [pc, #76]	; (800e57c <pvPortMalloc+0x184>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	431a      	orrs	r2, r3
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	2200      	movs	r2, #0
 800e53c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e53e:	4b13      	ldr	r3, [pc, #76]	; (800e58c <pvPortMalloc+0x194>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3301      	adds	r3, #1
 800e544:	4a11      	ldr	r2, [pc, #68]	; (800e58c <pvPortMalloc+0x194>)
 800e546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e548:	f7fe fc4a 	bl	800cde0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	f003 0307 	and.w	r3, r3, #7
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00a      	beq.n	800e56c <pvPortMalloc+0x174>
	__asm volatile
 800e556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	60fb      	str	r3, [r7, #12]
}
 800e568:	bf00      	nop
 800e56a:	e7fe      	b.n	800e56a <pvPortMalloc+0x172>
	return pvReturn;
 800e56c:	69fb      	ldr	r3, [r7, #28]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3728      	adds	r7, #40	; 0x28
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	200049f0 	.word	0x200049f0
 800e57c:	20004a04 	.word	0x20004a04
 800e580:	200049f4 	.word	0x200049f4
 800e584:	200049e8 	.word	0x200049e8
 800e588:	200049f8 	.word	0x200049f8
 800e58c:	200049fc 	.word	0x200049fc

0800e590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d04d      	beq.n	800e63e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5a2:	2308      	movs	r3, #8
 800e5a4:	425b      	negs	r3, r3
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	685a      	ldr	r2, [r3, #4]
 800e5b4:	4b24      	ldr	r3, [pc, #144]	; (800e648 <vPortFree+0xb8>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d10a      	bne.n	800e5d4 <vPortFree+0x44>
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	60fb      	str	r3, [r7, #12]
}
 800e5d0:	bf00      	nop
 800e5d2:	e7fe      	b.n	800e5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00a      	beq.n	800e5f2 <vPortFree+0x62>
	__asm volatile
 800e5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e0:	f383 8811 	msr	BASEPRI, r3
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	f3bf 8f4f 	dsb	sy
 800e5ec:	60bb      	str	r3, [r7, #8]
}
 800e5ee:	bf00      	nop
 800e5f0:	e7fe      	b.n	800e5f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	685a      	ldr	r2, [r3, #4]
 800e5f6:	4b14      	ldr	r3, [pc, #80]	; (800e648 <vPortFree+0xb8>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d01e      	beq.n	800e63e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d11a      	bne.n	800e63e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	4b0e      	ldr	r3, [pc, #56]	; (800e648 <vPortFree+0xb8>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	43db      	mvns	r3, r3
 800e612:	401a      	ands	r2, r3
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e618:	f7fe fbd4 	bl	800cdc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	4b0a      	ldr	r3, [pc, #40]	; (800e64c <vPortFree+0xbc>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4413      	add	r3, r2
 800e626:	4a09      	ldr	r2, [pc, #36]	; (800e64c <vPortFree+0xbc>)
 800e628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e62a:	6938      	ldr	r0, [r7, #16]
 800e62c:	f000 f874 	bl	800e718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e630:	4b07      	ldr	r3, [pc, #28]	; (800e650 <vPortFree+0xc0>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3301      	adds	r3, #1
 800e636:	4a06      	ldr	r2, [pc, #24]	; (800e650 <vPortFree+0xc0>)
 800e638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e63a:	f7fe fbd1 	bl	800cde0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e63e:	bf00      	nop
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	20004a04 	.word	0x20004a04
 800e64c:	200049f4 	.word	0x200049f4
 800e650:	20004a00 	.word	0x20004a00

0800e654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e65a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e660:	4b27      	ldr	r3, [pc, #156]	; (800e700 <prvHeapInit+0xac>)
 800e662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f003 0307 	and.w	r3, r3, #7
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00c      	beq.n	800e688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3307      	adds	r3, #7
 800e672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f023 0307 	bic.w	r3, r3, #7
 800e67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	4a1f      	ldr	r2, [pc, #124]	; (800e700 <prvHeapInit+0xac>)
 800e684:	4413      	add	r3, r2
 800e686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e68c:	4a1d      	ldr	r2, [pc, #116]	; (800e704 <prvHeapInit+0xb0>)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e692:	4b1c      	ldr	r3, [pc, #112]	; (800e704 <prvHeapInit+0xb0>)
 800e694:	2200      	movs	r2, #0
 800e696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	4413      	add	r3, r2
 800e69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6a0:	2208      	movs	r2, #8
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	1a9b      	subs	r3, r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f023 0307 	bic.w	r3, r3, #7
 800e6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	4a15      	ldr	r2, [pc, #84]	; (800e708 <prvHeapInit+0xb4>)
 800e6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6b6:	4b14      	ldr	r3, [pc, #80]	; (800e708 <prvHeapInit+0xb4>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6be:	4b12      	ldr	r3, [pc, #72]	; (800e708 <prvHeapInit+0xb4>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	1ad2      	subs	r2, r2, r3
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6d4:	4b0c      	ldr	r3, [pc, #48]	; (800e708 <prvHeapInit+0xb4>)
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	4a0a      	ldr	r2, [pc, #40]	; (800e70c <prvHeapInit+0xb8>)
 800e6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	4a09      	ldr	r2, [pc, #36]	; (800e710 <prvHeapInit+0xbc>)
 800e6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6ec:	4b09      	ldr	r3, [pc, #36]	; (800e714 <prvHeapInit+0xc0>)
 800e6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e6f2:	601a      	str	r2, [r3, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	3714      	adds	r7, #20
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	20000de8 	.word	0x20000de8
 800e704:	200049e8 	.word	0x200049e8
 800e708:	200049f0 	.word	0x200049f0
 800e70c:	200049f8 	.word	0x200049f8
 800e710:	200049f4 	.word	0x200049f4
 800e714:	20004a04 	.word	0x20004a04

0800e718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e720:	4b28      	ldr	r3, [pc, #160]	; (800e7c4 <prvInsertBlockIntoFreeList+0xac>)
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	e002      	b.n	800e72c <prvInsertBlockIntoFreeList+0x14>
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	429a      	cmp	r2, r3
 800e734:	d8f7      	bhi.n	800e726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	4413      	add	r3, r2
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	429a      	cmp	r2, r3
 800e746:	d108      	bne.n	800e75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	685a      	ldr	r2, [r3, #4]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	441a      	add	r2, r3
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	441a      	add	r2, r3
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d118      	bne.n	800e7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	4b15      	ldr	r3, [pc, #84]	; (800e7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	429a      	cmp	r2, r3
 800e778:	d00d      	beq.n	800e796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	685a      	ldr	r2, [r3, #4]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	441a      	add	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	e008      	b.n	800e7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e796:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	e003      	b.n	800e7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d002      	beq.n	800e7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7b6:	bf00      	nop
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	200049e8 	.word	0x200049e8
 800e7c8:	200049f0 	.word	0x200049f0

0800e7cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	490e      	ldr	r1, [pc, #56]	; (800e80c <MX_USB_HOST_Init+0x40>)
 800e7d4:	480e      	ldr	r0, [pc, #56]	; (800e810 <MX_USB_HOST_Init+0x44>)
 800e7d6:	f7fb f915 	bl	8009a04 <USBH_Init>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e7e0:	f7f2 fc56 	bl	8001090 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e7e4:	490b      	ldr	r1, [pc, #44]	; (800e814 <MX_USB_HOST_Init+0x48>)
 800e7e6:	480a      	ldr	r0, [pc, #40]	; (800e810 <MX_USB_HOST_Init+0x44>)
 800e7e8:	f7fb f9bc 	bl	8009b64 <USBH_RegisterClass>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d001      	beq.n	800e7f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e7f2:	f7f2 fc4d 	bl	8001090 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e7f6:	4806      	ldr	r0, [pc, #24]	; (800e810 <MX_USB_HOST_Init+0x44>)
 800e7f8:	f7fb fa40 	bl	8009c7c <USBH_Start>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e802:	f7f2 fc45 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e806:	bf00      	nop
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	0800e819 	.word	0x0800e819
 800e810:	20004e64 	.word	0x20004e64
 800e814:	2000000c 	.word	0x2000000c

0800e818 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	3b01      	subs	r3, #1
 800e828:	2b04      	cmp	r3, #4
 800e82a:	d819      	bhi.n	800e860 <USBH_UserProcess+0x48>
 800e82c:	a201      	add	r2, pc, #4	; (adr r2, 800e834 <USBH_UserProcess+0x1c>)
 800e82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e832:	bf00      	nop
 800e834:	0800e861 	.word	0x0800e861
 800e838:	0800e851 	.word	0x0800e851
 800e83c:	0800e861 	.word	0x0800e861
 800e840:	0800e859 	.word	0x0800e859
 800e844:	0800e849 	.word	0x0800e849
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e848:	4b09      	ldr	r3, [pc, #36]	; (800e870 <USBH_UserProcess+0x58>)
 800e84a:	2203      	movs	r2, #3
 800e84c:	701a      	strb	r2, [r3, #0]
  break;
 800e84e:	e008      	b.n	800e862 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e850:	4b07      	ldr	r3, [pc, #28]	; (800e870 <USBH_UserProcess+0x58>)
 800e852:	2202      	movs	r2, #2
 800e854:	701a      	strb	r2, [r3, #0]
  break;
 800e856:	e004      	b.n	800e862 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e858:	4b05      	ldr	r3, [pc, #20]	; (800e870 <USBH_UserProcess+0x58>)
 800e85a:	2201      	movs	r2, #1
 800e85c:	701a      	strb	r2, [r3, #0]
  break;
 800e85e:	e000      	b.n	800e862 <USBH_UserProcess+0x4a>

  default:
  break;
 800e860:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e862:	bf00      	nop
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20004a08 	.word	0x20004a08

0800e874 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b08a      	sub	sp, #40	; 0x28
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e87c:	f107 0314 	add.w	r3, r7, #20
 800e880:	2200      	movs	r2, #0
 800e882:	601a      	str	r2, [r3, #0]
 800e884:	605a      	str	r2, [r3, #4]
 800e886:	609a      	str	r2, [r3, #8]
 800e888:	60da      	str	r2, [r3, #12]
 800e88a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e894:	d147      	bne.n	800e926 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e896:	2300      	movs	r3, #0
 800e898:	613b      	str	r3, [r7, #16]
 800e89a:	4b25      	ldr	r3, [pc, #148]	; (800e930 <HAL_HCD_MspInit+0xbc>)
 800e89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89e:	4a24      	ldr	r2, [pc, #144]	; (800e930 <HAL_HCD_MspInit+0xbc>)
 800e8a0:	f043 0301 	orr.w	r3, r3, #1
 800e8a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8a6:	4b22      	ldr	r3, [pc, #136]	; (800e930 <HAL_HCD_MspInit+0xbc>)
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8aa:	f003 0301 	and.w	r3, r3, #1
 800e8ae:	613b      	str	r3, [r7, #16]
 800e8b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800e8b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e8c0:	f107 0314 	add.w	r3, r7, #20
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	481b      	ldr	r0, [pc, #108]	; (800e934 <HAL_HCD_MspInit+0xc0>)
 800e8c8:	f7f3 ffde 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800e8cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e8d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8d2:	2302      	movs	r3, #2
 800e8d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8da:	2303      	movs	r3, #3
 800e8dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e8de:	230a      	movs	r3, #10
 800e8e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8e2:	f107 0314 	add.w	r3, r7, #20
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4812      	ldr	r0, [pc, #72]	; (800e934 <HAL_HCD_MspInit+0xc0>)
 800e8ea:	f7f3 ffcd 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e8ee:	4b10      	ldr	r3, [pc, #64]	; (800e930 <HAL_HCD_MspInit+0xbc>)
 800e8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f2:	4a0f      	ldr	r2, [pc, #60]	; (800e930 <HAL_HCD_MspInit+0xbc>)
 800e8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8f8:	6353      	str	r3, [r2, #52]	; 0x34
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
 800e8fe:	4b0c      	ldr	r3, [pc, #48]	; (800e930 <HAL_HCD_MspInit+0xbc>)
 800e900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e902:	4a0b      	ldr	r2, [pc, #44]	; (800e930 <HAL_HCD_MspInit+0xbc>)
 800e904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e908:	6453      	str	r3, [r2, #68]	; 0x44
 800e90a:	4b09      	ldr	r3, [pc, #36]	; (800e930 <HAL_HCD_MspInit+0xbc>)
 800e90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e90e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e912:	60fb      	str	r3, [r7, #12]
 800e914:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e916:	2200      	movs	r2, #0
 800e918:	2105      	movs	r1, #5
 800e91a:	2043      	movs	r0, #67	; 0x43
 800e91c:	f7f3 fd5c 	bl	80023d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e920:	2043      	movs	r0, #67	; 0x43
 800e922:	f7f3 fd75 	bl	8002410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e926:	bf00      	nop
 800e928:	3728      	adds	r7, #40	; 0x28
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	40023800 	.word	0x40023800
 800e934:	40020000 	.word	0x40020000

0800e938 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e946:	4618      	mov	r0, r3
 800e948:	f7fb fe45 	bl	800a5d6 <USBH_LL_IncTimer>
}
 800e94c:	bf00      	nop
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e962:	4618      	mov	r0, r3
 800e964:	f7fb fe89 	bl	800a67a <USBH_LL_Connect>
}
 800e968:	bf00      	nop
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fb fe9e 	bl	800a6c0 <USBH_LL_Disconnect>
}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	70fb      	strb	r3, [r7, #3]
 800e998:	4613      	mov	r3, r2
 800e99a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fb fed5 	bl	800a752 <USBH_LL_NotifyURBChange>
#endif
}
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fb fe33 	bl	800a62a <USBH_LL_PortEnabled>
}
 800e9c4:	bf00      	nop
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fb fe3f 	bl	800a65e <USBH_LL_PortDisabled>
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d12a      	bne.n	800ea50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e9fa:	4a18      	ldr	r2, [pc, #96]	; (800ea5c <USBH_LL_Init+0x74>)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4a15      	ldr	r2, [pc, #84]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea06:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea0a:	4b14      	ldr	r3, [pc, #80]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ea10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800ea12:	4b12      	ldr	r3, [pc, #72]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea14:	220c      	movs	r2, #12
 800ea16:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ea18:	4b10      	ldr	r3, [pc, #64]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea1e:	4b0f      	ldr	r3, [pc, #60]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ea24:	4b0d      	ldr	r3, [pc, #52]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea26:	2202      	movs	r2, #2
 800ea28:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea2a:	4b0c      	ldr	r3, [pc, #48]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ea30:	480a      	ldr	r0, [pc, #40]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea32:	f7f4 f8fa 	bl	8002c2a <HAL_HCD_Init>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d001      	beq.n	800ea40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ea3c:	f7f2 fb28 	bl	8001090 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ea40:	4806      	ldr	r0, [pc, #24]	; (800ea5c <USBH_LL_Init+0x74>)
 800ea42:	f7f4 fcd7 	bl	80033f4 <HAL_HCD_GetCurrentFrame>
 800ea46:	4603      	mov	r3, r0
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7fb fdb4 	bl	800a5b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20005248 	.word	0x20005248

0800ea60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f4 fc46 	bl	8003308 <HAL_HCD_Start>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea80:	7bfb      	ldrb	r3, [r7, #15]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f000 f95c 	bl	800ed40 <USBH_Get_USB_Status>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b084      	sub	sp, #16
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7f4 fc4e 	bl	800334e <HAL_HCD_Stop>
 800eab2:	4603      	mov	r3, r0
 800eab4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eab6:	7bfb      	ldrb	r3, [r7, #15]
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 f941 	bl	800ed40 <USBH_Get_USB_Status>
 800eabe:	4603      	mov	r3, r0
 800eac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ead4:	2301      	movs	r3, #1
 800ead6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eade:	4618      	mov	r0, r3
 800eae0:	f7f4 fc96 	bl	8003410 <HAL_HCD_GetCurrentSpeed>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	d00c      	beq.n	800eb04 <USBH_LL_GetSpeed+0x38>
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	d80d      	bhi.n	800eb0a <USBH_LL_GetSpeed+0x3e>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d002      	beq.n	800eaf8 <USBH_LL_GetSpeed+0x2c>
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d003      	beq.n	800eafe <USBH_LL_GetSpeed+0x32>
 800eaf6:	e008      	b.n	800eb0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73fb      	strb	r3, [r7, #15]
    break;
 800eafc:	e008      	b.n	800eb10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800eafe:	2301      	movs	r3, #1
 800eb00:	73fb      	strb	r3, [r7, #15]
    break;
 800eb02:	e005      	b.n	800eb10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800eb04:	2302      	movs	r3, #2
 800eb06:	73fb      	strb	r3, [r7, #15]
    break;
 800eb08:	e002      	b.n	800eb10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb0e:	bf00      	nop
  }
  return  speed;
 800eb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b084      	sub	sp, #16
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7f4 fc29 	bl	8003388 <HAL_HCD_ResetPort>
 800eb36:	4603      	mov	r3, r0
 800eb38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f000 f8ff 	bl	800ed40 <USBH_Get_USB_Status>
 800eb42:	4603      	mov	r3, r0
 800eb44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb62:	78fa      	ldrb	r2, [r7, #3]
 800eb64:	4611      	mov	r1, r2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7f4 fc30 	bl	80033cc <HAL_HCD_HC_GetXferCount>
 800eb6c:	4603      	mov	r3, r0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eb76:	b590      	push	{r4, r7, lr}
 800eb78:	b089      	sub	sp, #36	; 0x24
 800eb7a:	af04      	add	r7, sp, #16
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	4608      	mov	r0, r1
 800eb80:	4611      	mov	r1, r2
 800eb82:	461a      	mov	r2, r3
 800eb84:	4603      	mov	r3, r0
 800eb86:	70fb      	strb	r3, [r7, #3]
 800eb88:	460b      	mov	r3, r1
 800eb8a:	70bb      	strb	r3, [r7, #2]
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800eb9e:	787c      	ldrb	r4, [r7, #1]
 800eba0:	78ba      	ldrb	r2, [r7, #2]
 800eba2:	78f9      	ldrb	r1, [r7, #3]
 800eba4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eba6:	9302      	str	r3, [sp, #8]
 800eba8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ebac:	9301      	str	r3, [sp, #4]
 800ebae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	4623      	mov	r3, r4
 800ebb6:	f7f4 f89a 	bl	8002cee <HAL_HCD_HC_Init>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebbe:	7bfb      	ldrb	r3, [r7, #15]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f000 f8bd 	bl	800ed40 <USBH_Get_USB_Status>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebca:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3714      	adds	r7, #20
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd90      	pop	{r4, r7, pc}

0800ebd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebee:	78fa      	ldrb	r2, [r7, #3]
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f4 f90a 	bl	8002e0c <HAL_HCD_HC_Halt>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebfc:	7bfb      	ldrb	r3, [r7, #15]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f000 f89e 	bl	800ed40 <USBH_Get_USB_Status>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ec12:	b590      	push	{r4, r7, lr}
 800ec14:	b089      	sub	sp, #36	; 0x24
 800ec16:	af04      	add	r7, sp, #16
 800ec18:	6078      	str	r0, [r7, #4]
 800ec1a:	4608      	mov	r0, r1
 800ec1c:	4611      	mov	r1, r2
 800ec1e:	461a      	mov	r2, r3
 800ec20:	4603      	mov	r3, r0
 800ec22:	70fb      	strb	r3, [r7, #3]
 800ec24:	460b      	mov	r3, r1
 800ec26:	70bb      	strb	r3, [r7, #2]
 800ec28:	4613      	mov	r3, r2
 800ec2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec30:	2300      	movs	r3, #0
 800ec32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ec3a:	787c      	ldrb	r4, [r7, #1]
 800ec3c:	78ba      	ldrb	r2, [r7, #2]
 800ec3e:	78f9      	ldrb	r1, [r7, #3]
 800ec40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ec44:	9303      	str	r3, [sp, #12]
 800ec46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec48:	9302      	str	r3, [sp, #8]
 800ec4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	4623      	mov	r3, r4
 800ec56:	f7f4 f8fd 	bl	8002e54 <HAL_HCD_HC_SubmitRequest>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ec5e:	7bfb      	ldrb	r3, [r7, #15]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f000 f86d 	bl	800ed40 <USBH_Get_USB_Status>
 800ec66:	4603      	mov	r3, r0
 800ec68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3714      	adds	r7, #20
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd90      	pop	{r4, r7, pc}

0800ec74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec86:	78fa      	ldrb	r2, [r7, #3]
 800ec88:	4611      	mov	r1, r2
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7f4 fb8a 	bl	80033a4 <HAL_HCD_HC_GetURBState>
 800ec90:	4603      	mov	r3, r0
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b082      	sub	sp, #8
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
 800eca2:	460b      	mov	r3, r1
 800eca4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d103      	bne.n	800ecb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ecb0:	78fb      	ldrb	r3, [r7, #3]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f000 f870 	bl	800ed98 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ecb8:	20c8      	movs	r0, #200	; 0xc8
 800ecba:	f7f3 f83f 	bl	8001d3c <HAL_Delay>
  return USBH_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	70fb      	strb	r3, [r7, #3]
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ecde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ece0:	78fb      	ldrb	r3, [r7, #3]
 800ece2:	68fa      	ldr	r2, [r7, #12]
 800ece4:	212c      	movs	r1, #44	; 0x2c
 800ece6:	fb01 f303 	mul.w	r3, r1, r3
 800ecea:	4413      	add	r3, r2
 800ecec:	333b      	adds	r3, #59	; 0x3b
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d009      	beq.n	800ed08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ecf4:	78fb      	ldrb	r3, [r7, #3]
 800ecf6:	68fa      	ldr	r2, [r7, #12]
 800ecf8:	212c      	movs	r1, #44	; 0x2c
 800ecfa:	fb01 f303 	mul.w	r3, r1, r3
 800ecfe:	4413      	add	r3, r2
 800ed00:	3354      	adds	r3, #84	; 0x54
 800ed02:	78ba      	ldrb	r2, [r7, #2]
 800ed04:	701a      	strb	r2, [r3, #0]
 800ed06:	e008      	b.n	800ed1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ed08:	78fb      	ldrb	r3, [r7, #3]
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	212c      	movs	r1, #44	; 0x2c
 800ed0e:	fb01 f303 	mul.w	r3, r1, r3
 800ed12:	4413      	add	r3, r2
 800ed14:	3355      	adds	r3, #85	; 0x55
 800ed16:	78ba      	ldrb	r2, [r7, #2]
 800ed18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ed1a:	2300      	movs	r3, #0
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3714      	adds	r7, #20
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7f3 f803 	bl	8001d3c <HAL_Delay>
}
 800ed36:	bf00      	nop
 800ed38:	3708      	adds	r7, #8
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
	...

0800ed40 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	4603      	mov	r3, r0
 800ed48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed4e:	79fb      	ldrb	r3, [r7, #7]
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d817      	bhi.n	800ed84 <USBH_Get_USB_Status+0x44>
 800ed54:	a201      	add	r2, pc, #4	; (adr r2, 800ed5c <USBH_Get_USB_Status+0x1c>)
 800ed56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5a:	bf00      	nop
 800ed5c:	0800ed6d 	.word	0x0800ed6d
 800ed60:	0800ed73 	.word	0x0800ed73
 800ed64:	0800ed79 	.word	0x0800ed79
 800ed68:	0800ed7f 	.word	0x0800ed7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed70:	e00b      	b.n	800ed8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ed72:	2302      	movs	r3, #2
 800ed74:	73fb      	strb	r3, [r7, #15]
    break;
 800ed76:	e008      	b.n	800ed8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed7c:	e005      	b.n	800ed8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ed7e:	2302      	movs	r3, #2
 800ed80:	73fb      	strb	r3, [r7, #15]
    break;
 800ed82:	e002      	b.n	800ed8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ed84:	2302      	movs	r3, #2
 800ed86:	73fb      	strb	r3, [r7, #15]
    break;
 800ed88:	bf00      	nop
  }
  return usb_status;
 800ed8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3714      	adds	r7, #20
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr

0800ed98 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	4603      	mov	r3, r0
 800eda0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800eda2:	79fb      	ldrb	r3, [r7, #7]
 800eda4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800eda6:	79fb      	ldrb	r3, [r7, #7]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d102      	bne.n	800edb2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800edac:	2301      	movs	r3, #1
 800edae:	73fb      	strb	r3, [r7, #15]
 800edb0:	e001      	b.n	800edb6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800edb2:	2300      	movs	r3, #0
 800edb4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	461a      	mov	r2, r3
 800edba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800edbe:	4803      	ldr	r0, [pc, #12]	; (800edcc <MX_DriverVbusFS+0x34>)
 800edc0:	f7f3 fef6 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 800edc4:	bf00      	nop
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	40021800 	.word	0x40021800

0800edd0 <__errno>:
 800edd0:	4b01      	ldr	r3, [pc, #4]	; (800edd8 <__errno+0x8>)
 800edd2:	6818      	ldr	r0, [r3, #0]
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	20000030 	.word	0x20000030

0800eddc <__libc_init_array>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	4d0d      	ldr	r5, [pc, #52]	; (800ee14 <__libc_init_array+0x38>)
 800ede0:	4c0d      	ldr	r4, [pc, #52]	; (800ee18 <__libc_init_array+0x3c>)
 800ede2:	1b64      	subs	r4, r4, r5
 800ede4:	10a4      	asrs	r4, r4, #2
 800ede6:	2600      	movs	r6, #0
 800ede8:	42a6      	cmp	r6, r4
 800edea:	d109      	bne.n	800ee00 <__libc_init_array+0x24>
 800edec:	4d0b      	ldr	r5, [pc, #44]	; (800ee1c <__libc_init_array+0x40>)
 800edee:	4c0c      	ldr	r4, [pc, #48]	; (800ee20 <__libc_init_array+0x44>)
 800edf0:	f000 f906 	bl	800f000 <_init>
 800edf4:	1b64      	subs	r4, r4, r5
 800edf6:	10a4      	asrs	r4, r4, #2
 800edf8:	2600      	movs	r6, #0
 800edfa:	42a6      	cmp	r6, r4
 800edfc:	d105      	bne.n	800ee0a <__libc_init_array+0x2e>
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee04:	4798      	blx	r3
 800ee06:	3601      	adds	r6, #1
 800ee08:	e7ee      	b.n	800ede8 <__libc_init_array+0xc>
 800ee0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee0e:	4798      	blx	r3
 800ee10:	3601      	adds	r6, #1
 800ee12:	e7f2      	b.n	800edfa <__libc_init_array+0x1e>
 800ee14:	0800f1bc 	.word	0x0800f1bc
 800ee18:	0800f1bc 	.word	0x0800f1bc
 800ee1c:	0800f1bc 	.word	0x0800f1bc
 800ee20:	0800f1c0 	.word	0x0800f1c0

0800ee24 <malloc>:
 800ee24:	4b02      	ldr	r3, [pc, #8]	; (800ee30 <malloc+0xc>)
 800ee26:	4601      	mov	r1, r0
 800ee28:	6818      	ldr	r0, [r3, #0]
 800ee2a:	f000 b871 	b.w	800ef10 <_malloc_r>
 800ee2e:	bf00      	nop
 800ee30:	20000030 	.word	0x20000030

0800ee34 <free>:
 800ee34:	4b02      	ldr	r3, [pc, #8]	; (800ee40 <free+0xc>)
 800ee36:	4601      	mov	r1, r0
 800ee38:	6818      	ldr	r0, [r3, #0]
 800ee3a:	f000 b819 	b.w	800ee70 <_free_r>
 800ee3e:	bf00      	nop
 800ee40:	20000030 	.word	0x20000030

0800ee44 <memcpy>:
 800ee44:	440a      	add	r2, r1
 800ee46:	4291      	cmp	r1, r2
 800ee48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee4c:	d100      	bne.n	800ee50 <memcpy+0xc>
 800ee4e:	4770      	bx	lr
 800ee50:	b510      	push	{r4, lr}
 800ee52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee5a:	4291      	cmp	r1, r2
 800ee5c:	d1f9      	bne.n	800ee52 <memcpy+0xe>
 800ee5e:	bd10      	pop	{r4, pc}

0800ee60 <memset>:
 800ee60:	4402      	add	r2, r0
 800ee62:	4603      	mov	r3, r0
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d100      	bne.n	800ee6a <memset+0xa>
 800ee68:	4770      	bx	lr
 800ee6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee6e:	e7f9      	b.n	800ee64 <memset+0x4>

0800ee70 <_free_r>:
 800ee70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee72:	2900      	cmp	r1, #0
 800ee74:	d048      	beq.n	800ef08 <_free_r+0x98>
 800ee76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee7a:	9001      	str	r0, [sp, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ee82:	bfb8      	it	lt
 800ee84:	18e4      	addlt	r4, r4, r3
 800ee86:	f000 f8ad 	bl	800efe4 <__malloc_lock>
 800ee8a:	4a20      	ldr	r2, [pc, #128]	; (800ef0c <_free_r+0x9c>)
 800ee8c:	9801      	ldr	r0, [sp, #4]
 800ee8e:	6813      	ldr	r3, [r2, #0]
 800ee90:	4615      	mov	r5, r2
 800ee92:	b933      	cbnz	r3, 800eea2 <_free_r+0x32>
 800ee94:	6063      	str	r3, [r4, #4]
 800ee96:	6014      	str	r4, [r2, #0]
 800ee98:	b003      	add	sp, #12
 800ee9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee9e:	f000 b8a7 	b.w	800eff0 <__malloc_unlock>
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	d90b      	bls.n	800eebe <_free_r+0x4e>
 800eea6:	6821      	ldr	r1, [r4, #0]
 800eea8:	1862      	adds	r2, r4, r1
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	bf04      	itt	eq
 800eeae:	681a      	ldreq	r2, [r3, #0]
 800eeb0:	685b      	ldreq	r3, [r3, #4]
 800eeb2:	6063      	str	r3, [r4, #4]
 800eeb4:	bf04      	itt	eq
 800eeb6:	1852      	addeq	r2, r2, r1
 800eeb8:	6022      	streq	r2, [r4, #0]
 800eeba:	602c      	str	r4, [r5, #0]
 800eebc:	e7ec      	b.n	800ee98 <_free_r+0x28>
 800eebe:	461a      	mov	r2, r3
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	b10b      	cbz	r3, 800eec8 <_free_r+0x58>
 800eec4:	42a3      	cmp	r3, r4
 800eec6:	d9fa      	bls.n	800eebe <_free_r+0x4e>
 800eec8:	6811      	ldr	r1, [r2, #0]
 800eeca:	1855      	adds	r5, r2, r1
 800eecc:	42a5      	cmp	r5, r4
 800eece:	d10b      	bne.n	800eee8 <_free_r+0x78>
 800eed0:	6824      	ldr	r4, [r4, #0]
 800eed2:	4421      	add	r1, r4
 800eed4:	1854      	adds	r4, r2, r1
 800eed6:	42a3      	cmp	r3, r4
 800eed8:	6011      	str	r1, [r2, #0]
 800eeda:	d1dd      	bne.n	800ee98 <_free_r+0x28>
 800eedc:	681c      	ldr	r4, [r3, #0]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	6053      	str	r3, [r2, #4]
 800eee2:	4421      	add	r1, r4
 800eee4:	6011      	str	r1, [r2, #0]
 800eee6:	e7d7      	b.n	800ee98 <_free_r+0x28>
 800eee8:	d902      	bls.n	800eef0 <_free_r+0x80>
 800eeea:	230c      	movs	r3, #12
 800eeec:	6003      	str	r3, [r0, #0]
 800eeee:	e7d3      	b.n	800ee98 <_free_r+0x28>
 800eef0:	6825      	ldr	r5, [r4, #0]
 800eef2:	1961      	adds	r1, r4, r5
 800eef4:	428b      	cmp	r3, r1
 800eef6:	bf04      	itt	eq
 800eef8:	6819      	ldreq	r1, [r3, #0]
 800eefa:	685b      	ldreq	r3, [r3, #4]
 800eefc:	6063      	str	r3, [r4, #4]
 800eefe:	bf04      	itt	eq
 800ef00:	1949      	addeq	r1, r1, r5
 800ef02:	6021      	streq	r1, [r4, #0]
 800ef04:	6054      	str	r4, [r2, #4]
 800ef06:	e7c7      	b.n	800ee98 <_free_r+0x28>
 800ef08:	b003      	add	sp, #12
 800ef0a:	bd30      	pop	{r4, r5, pc}
 800ef0c:	20004a0c 	.word	0x20004a0c

0800ef10 <_malloc_r>:
 800ef10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef12:	1ccd      	adds	r5, r1, #3
 800ef14:	f025 0503 	bic.w	r5, r5, #3
 800ef18:	3508      	adds	r5, #8
 800ef1a:	2d0c      	cmp	r5, #12
 800ef1c:	bf38      	it	cc
 800ef1e:	250c      	movcc	r5, #12
 800ef20:	2d00      	cmp	r5, #0
 800ef22:	4606      	mov	r6, r0
 800ef24:	db01      	blt.n	800ef2a <_malloc_r+0x1a>
 800ef26:	42a9      	cmp	r1, r5
 800ef28:	d903      	bls.n	800ef32 <_malloc_r+0x22>
 800ef2a:	230c      	movs	r3, #12
 800ef2c:	6033      	str	r3, [r6, #0]
 800ef2e:	2000      	movs	r0, #0
 800ef30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef32:	f000 f857 	bl	800efe4 <__malloc_lock>
 800ef36:	4921      	ldr	r1, [pc, #132]	; (800efbc <_malloc_r+0xac>)
 800ef38:	680a      	ldr	r2, [r1, #0]
 800ef3a:	4614      	mov	r4, r2
 800ef3c:	b99c      	cbnz	r4, 800ef66 <_malloc_r+0x56>
 800ef3e:	4f20      	ldr	r7, [pc, #128]	; (800efc0 <_malloc_r+0xb0>)
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	b923      	cbnz	r3, 800ef4e <_malloc_r+0x3e>
 800ef44:	4621      	mov	r1, r4
 800ef46:	4630      	mov	r0, r6
 800ef48:	f000 f83c 	bl	800efc4 <_sbrk_r>
 800ef4c:	6038      	str	r0, [r7, #0]
 800ef4e:	4629      	mov	r1, r5
 800ef50:	4630      	mov	r0, r6
 800ef52:	f000 f837 	bl	800efc4 <_sbrk_r>
 800ef56:	1c43      	adds	r3, r0, #1
 800ef58:	d123      	bne.n	800efa2 <_malloc_r+0x92>
 800ef5a:	230c      	movs	r3, #12
 800ef5c:	6033      	str	r3, [r6, #0]
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f000 f846 	bl	800eff0 <__malloc_unlock>
 800ef64:	e7e3      	b.n	800ef2e <_malloc_r+0x1e>
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	1b5b      	subs	r3, r3, r5
 800ef6a:	d417      	bmi.n	800ef9c <_malloc_r+0x8c>
 800ef6c:	2b0b      	cmp	r3, #11
 800ef6e:	d903      	bls.n	800ef78 <_malloc_r+0x68>
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	441c      	add	r4, r3
 800ef74:	6025      	str	r5, [r4, #0]
 800ef76:	e004      	b.n	800ef82 <_malloc_r+0x72>
 800ef78:	6863      	ldr	r3, [r4, #4]
 800ef7a:	42a2      	cmp	r2, r4
 800ef7c:	bf0c      	ite	eq
 800ef7e:	600b      	streq	r3, [r1, #0]
 800ef80:	6053      	strne	r3, [r2, #4]
 800ef82:	4630      	mov	r0, r6
 800ef84:	f000 f834 	bl	800eff0 <__malloc_unlock>
 800ef88:	f104 000b 	add.w	r0, r4, #11
 800ef8c:	1d23      	adds	r3, r4, #4
 800ef8e:	f020 0007 	bic.w	r0, r0, #7
 800ef92:	1ac2      	subs	r2, r0, r3
 800ef94:	d0cc      	beq.n	800ef30 <_malloc_r+0x20>
 800ef96:	1a1b      	subs	r3, r3, r0
 800ef98:	50a3      	str	r3, [r4, r2]
 800ef9a:	e7c9      	b.n	800ef30 <_malloc_r+0x20>
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	6864      	ldr	r4, [r4, #4]
 800efa0:	e7cc      	b.n	800ef3c <_malloc_r+0x2c>
 800efa2:	1cc4      	adds	r4, r0, #3
 800efa4:	f024 0403 	bic.w	r4, r4, #3
 800efa8:	42a0      	cmp	r0, r4
 800efaa:	d0e3      	beq.n	800ef74 <_malloc_r+0x64>
 800efac:	1a21      	subs	r1, r4, r0
 800efae:	4630      	mov	r0, r6
 800efb0:	f000 f808 	bl	800efc4 <_sbrk_r>
 800efb4:	3001      	adds	r0, #1
 800efb6:	d1dd      	bne.n	800ef74 <_malloc_r+0x64>
 800efb8:	e7cf      	b.n	800ef5a <_malloc_r+0x4a>
 800efba:	bf00      	nop
 800efbc:	20004a0c 	.word	0x20004a0c
 800efc0:	20004a10 	.word	0x20004a10

0800efc4 <_sbrk_r>:
 800efc4:	b538      	push	{r3, r4, r5, lr}
 800efc6:	4d06      	ldr	r5, [pc, #24]	; (800efe0 <_sbrk_r+0x1c>)
 800efc8:	2300      	movs	r3, #0
 800efca:	4604      	mov	r4, r0
 800efcc:	4608      	mov	r0, r1
 800efce:	602b      	str	r3, [r5, #0]
 800efd0:	f7f2 fe00 	bl	8001bd4 <_sbrk>
 800efd4:	1c43      	adds	r3, r0, #1
 800efd6:	d102      	bne.n	800efde <_sbrk_r+0x1a>
 800efd8:	682b      	ldr	r3, [r5, #0]
 800efda:	b103      	cbz	r3, 800efde <_sbrk_r+0x1a>
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	bd38      	pop	{r3, r4, r5, pc}
 800efe0:	2000554c 	.word	0x2000554c

0800efe4 <__malloc_lock>:
 800efe4:	4801      	ldr	r0, [pc, #4]	; (800efec <__malloc_lock+0x8>)
 800efe6:	f000 b809 	b.w	800effc <__retarget_lock_acquire_recursive>
 800efea:	bf00      	nop
 800efec:	20005554 	.word	0x20005554

0800eff0 <__malloc_unlock>:
 800eff0:	4801      	ldr	r0, [pc, #4]	; (800eff8 <__malloc_unlock+0x8>)
 800eff2:	f000 b804 	b.w	800effe <__retarget_lock_release_recursive>
 800eff6:	bf00      	nop
 800eff8:	20005554 	.word	0x20005554

0800effc <__retarget_lock_acquire_recursive>:
 800effc:	4770      	bx	lr

0800effe <__retarget_lock_release_recursive>:
 800effe:	4770      	bx	lr

0800f000 <_init>:
 800f000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f002:	bf00      	nop
 800f004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f006:	bc08      	pop	{r3}
 800f008:	469e      	mov	lr, r3
 800f00a:	4770      	bx	lr

0800f00c <_fini>:
 800f00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00e:	bf00      	nop
 800f010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f012:	bc08      	pop	{r3}
 800f014:	469e      	mov	lr, r3
 800f016:	4770      	bx	lr
