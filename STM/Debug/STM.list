
STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbe4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800ddc4  0800ddc4  0001ddc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de64  0800de64  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800de64  0800de64  0001de64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de6c  0800de6c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800de6c  0800de6c  0001de6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de74  0800de74  0001de74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800de78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005448  20000094  0800df0c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054dc  0800df0c  000254dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038449  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f63  00000000  00000000  0005850d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002818  00000000  00000000  0005f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002570  00000000  00000000  00061c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b4c8  00000000  00000000  000641f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000324a4  00000000  00000000  0006f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffae0  00000000  00000000  000a1b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a1644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae28  00000000  00000000  001a1698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ddac 	.word	0x0800ddac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000098 	.word	0x20000098
 800021c:	0800ddac 	.word	0x0800ddac

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN17DCMotorControllerC1EP12GPIO_TypeDeftS1_tS1_t>:
#include "DCMotorController.h"
#include  "main.h"

DCMotorController::DCMotorController(GPIO_TypeDef* port, uint16_t pin, GPIO_TypeDef* dir1Port, uint16_t dir1Pin, GPIO_TypeDef* dir2Port, uint16_t dir2Pin){
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	4613      	mov	r3, r2
 8000526:	80fb      	strh	r3, [r7, #6]
  this->pwmPort = port;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	601a      	str	r2, [r3, #0]
  this->pwmPin = pin;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	88fa      	ldrh	r2, [r7, #6]
 8000532:	809a      	strh	r2, [r3, #4]
  this->dir1Port = dir1Port;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	683a      	ldr	r2, [r7, #0]
 8000538:	609a      	str	r2, [r3, #8]
  this->dir1Pin = dir1Pin;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	8b3a      	ldrh	r2, [r7, #24]
 800053e:	80da      	strh	r2, [r3, #6]
  this->dir2Port = dir2Port;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	611a      	str	r2, [r3, #16]
  this->dir2Pin = dir2Pin;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	8c3a      	ldrh	r2, [r7, #32]
 800054a:	819a      	strh	r2, [r3, #12]

  this->frequency = 20;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2214      	movs	r2, #20
 8000550:	615a      	str	r2, [r3, #20]
  this->power = 0;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	f04f 0200 	mov.w	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  this->direction = DCMotorController::Clockwise;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	2200      	movs	r2, #0
 800055e:	771a      	strb	r2, [r3, #28]
} 
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	4618      	mov	r0, r3
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <_ZN17DCMotorController8setPowerEf>:

void DCMotorController::setPower(float power){
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	ed87 0a00 	vstr	s0, [r7]
  if (power > 1){
 800057a:	edd7 7a00 	vldr	s15, [r7]
 800057e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	dd04      	ble.n	8000596 <_ZN17DCMotorController8setPowerEf+0x28>
    this->power = 1;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000592:	619a      	str	r2, [r3, #24]
  }
  else{
    this->power = power;
  }
  
}
 8000594:	e00e      	b.n	80005b4 <_ZN17DCMotorController8setPowerEf+0x46>
  else if (power < 0){
 8000596:	edd7 7a00 	vldr	s15, [r7]
 800059a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800059e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a2:	d504      	bpl.n	80005ae <_ZN17DCMotorController8setPowerEf+0x40>
    this->power = 0;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f04f 0200 	mov.w	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
}
 80005ac:	e002      	b.n	80005b4 <_ZN17DCMotorController8setPowerEf+0x46>
    this->power = power;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	619a      	str	r2, [r3, #24]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <_ZN17DCMotorController8pwmPulseEv>:

void DCMotorController::pwmPulse(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  float power = this->power;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(this->pwmPort, this->pwmPin, GPIO_PIN_SET) ;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	889b      	ldrh	r3, [r3, #4]
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	f002 fd7b 	bl	80030d4 <HAL_GPIO_WritePin>
  osDelay(this->frequency * power);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	ee07 3a90 	vmov	s15, r3
 80005e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005f6:	ee17 0a90 	vmov	r0, s15
 80005fa:	f00a f8f7 	bl	800a7ec <osDelay>
  
  HAL_GPIO_WritePin(this->pwmPort, this->pwmPin, GPIO_PIN_RESET) ;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	889b      	ldrh	r3, [r3, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	f002 fd63 	bl	80030d4 <HAL_GPIO_WritePin>
  osDelay(this->frequency * (1 - power));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	ee07 3a90 	vmov	s15, r3
 8000616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800061a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800061e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000622:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800062a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800062e:	ee17 0a90 	vmov	r0, s15
 8000632:	f00a f8db 	bl	800a7ec <osDelay>
  }
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE>:

void DCMotorController::setDirection(MotorDirection direction){
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
  if (direction == DCMotorController::Clockwise){
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d110      	bne.n	8000672 <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE+0x34>
      HAL_GPIO_WritePin(this->dir1Port, this->dir1Pin, GPIO_PIN_SET) ;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6898      	ldr	r0, [r3, #8]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	88db      	ldrh	r3, [r3, #6]
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	f002 fd3a 	bl	80030d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(this->dir2Port, this->dir2Pin, GPIO_PIN_RESET) ;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6918      	ldr	r0, [r3, #16]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	899b      	ldrh	r3, [r3, #12]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f002 fd32 	bl	80030d4 <HAL_GPIO_WritePin>
  }else if (direction == DCMotorController::CounterClockwise){

      HAL_GPIO_WritePin(this->dir1Port, this->dir1Pin,GPIO_PIN_RESET ) ;
      HAL_GPIO_WritePin(this->dir2Port, this->dir2Pin, GPIO_PIN_SET) ;
  }
}
 8000670:	e012      	b.n	8000698 <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE+0x5a>
  }else if (direction == DCMotorController::CounterClockwise){
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d10f      	bne.n	8000698 <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE+0x5a>
      HAL_GPIO_WritePin(this->dir1Port, this->dir1Pin,GPIO_PIN_RESET ) ;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6898      	ldr	r0, [r3, #8]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	88db      	ldrh	r3, [r3, #6]
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	f002 fd26 	bl	80030d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(this->dir2Port, this->dir2Pin, GPIO_PIN_SET) ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6918      	ldr	r0, [r3, #16]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	899b      	ldrh	r3, [r3, #12]
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	f002 fd1e 	bl	80030d4 <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_ZN20RoteryEncoderMonitorC1EP12GPIO_TypeDeftS1_t>:
#include"RoteryEncoderMonitor.h"
#include"main.h"
RoteryEncoderMonitor::RoteryEncoderMonitor(GPIO_TypeDef* portA, uint16_t pinA, GPIO_TypeDef* portB, uint16_t pinB ){
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4613      	mov	r3, r2
 80006ae:	80fb      	strh	r3, [r7, #6]
    this->signalAPort = portA;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	601a      	str	r2, [r3, #0]
    this->signalAPin = pinA;
 80006b6:	88fa      	ldrh	r2, [r7, #6]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	605a      	str	r2, [r3, #4]
    this->signalBPort = portB;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	609a      	str	r2, [r3, #8]
    this->signalBPin = pinB;
 80006c2:	8b3a      	ldrh	r2, [r7, #24]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	60da      	str	r2, [r3, #12]

    this->tickCount = 0;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
}
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <_ZN20RoteryEncoderMonitor12handleChangeEv>:

void RoteryEncoderMonitor::handleChange(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    int newReadingA = HAL_GPIO_ReadPin(this->signalAPort, this->signalAPin);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	4610      	mov	r0, r2
 80006f2:	f002 fcd7 	bl	80030a4 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	60fb      	str	r3, [r7, #12]
    int newReadingB = HAL_GPIO_ReadPin(this->signalBPort, this->signalBPin);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	b29b      	uxth	r3, r3
 8000704:	4619      	mov	r1, r3
 8000706:	4610      	mov	r0, r2
 8000708:	f002 fccc 	bl	80030a4 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	60bb      	str	r3, [r7, #8]

    if (newReadingA != this->lastReadingA  && this->lastReadingA == 1){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	429a      	cmp	r2, r3
 8000718:	d019      	beq.n	800074e <_ZN20RoteryEncoderMonitor12handleChangeEv+0x72>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d115      	bne.n	800074e <_ZN20RoteryEncoderMonitor12handleChangeEv+0x72>

    		// If the DT state is different than the CLK state then
    		// the encoder is rotating CCW so decrement
    		if (newReadingB != this->lastReadingB) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	429a      	cmp	r2, r3
 800072a:	d008      	beq.n	800073e <_ZN20RoteryEncoderMonitor12handleChangeEv+0x62>
    			this->tickCount --;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	611a      	str	r2, [r3, #16]
    			this->direction = RoteryEncoderMonitor::CounterClockwise;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	771a      	strb	r2, [r3, #28]
 800073c:	e007      	b.n	800074e <_ZN20RoteryEncoderMonitor12handleChangeEv+0x72>
    		} else {
    			// Encoder is rotating CW so increment
    			this->tickCount ++;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	691b      	ldr	r3, [r3, #16]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	611a      	str	r2, [r3, #16]
    			this->direction = RoteryEncoderMonitor::Clockwise;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	771a      	strb	r2, [r3, #28]
    		}

    	}

    this->lastReadingA = newReadingA;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	615a      	str	r2, [r3, #20]
    this->lastReadingB = newReadingB;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	619a      	str	r2, [r3, #24]


}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <_ZN20RoteryEncoderMonitor8getCountEv>:

int RoteryEncoderMonitor::getCount(){
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
    return this->tickCount;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	691b      	ldr	r3, [r3, #16]
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f001 fc34 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f838 	bl	80007f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 fb26 	bl	8000dd8 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800078c:	f000 f8e2 	bl	8000954 <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 8000790:	f000 f93c 	bl	8000a0c <_ZL11MX_DAC_Initv>
  MX_DFSDM1_Init();
 8000794:	f000 f96e 	bl	8000a74 <_ZL14MX_DFSDM1_Initv>
  MX_DFSDM2_Init();
 8000798:	f000 f9a8 	bl	8000aec <_ZL14MX_DFSDM2_Initv>
  MX_FMPI2C1_Init();
 800079c:	f000 fa1a 	bl	8000bd4 <_ZL15MX_FMPI2C1_Initv>
  MX_FSMC_Init();
 80007a0:	f000 fcb4 	bl	800110c <_ZL12MX_FSMC_Initv>
  MX_I2S2_Init();
 80007a4:	f000 fa56 	bl	8000c54 <_ZL12MX_I2S2_Initv>
  MX_QUADSPI_Init();
 80007a8:	f000 fa88 	bl	8000cbc <_ZL15MX_QUADSPI_Initv>
  //MX_SDIO_SD_Init();
  MX_UART10_Init();
 80007ac:	f000 fab8 	bl	8000d20 <_ZL14MX_UART10_Initv>
  MX_USART6_UART_Init();
 80007b0:	f000 fae4 	bl	8000d7c <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007b4:	f009 ff3e 	bl	800a634 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007b8:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <main+0x64>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0x68>)
 80007be:	f009 ff83 	bl	800a6c8 <osThreadNew>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <main+0x6c>)
 80007c6:	6013      	str	r3, [r2, #0]

  /* creation of Motor1PWM */
  Motor1PWMHandle = osThreadNew(StartMotor1PWM, NULL, &Motor1PWM_attributes);
 80007c8:	4a08      	ldr	r2, [pc, #32]	; (80007ec <main+0x70>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <main+0x74>)
 80007ce:	f009 ff7b 	bl	800a6c8 <osThreadNew>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <main+0x78>)
 80007d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007d8:	f009 ff50 	bl	800a67c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <main+0x60>
 80007de:	bf00      	nop
 80007e0:	0800de04 	.word	0x0800de04
 80007e4:	08001285 	.word	0x08001285
 80007e8:	200003bc 	.word	0x200003bc
 80007ec:	0800de28 	.word	0x0800de28
 80007f0:	080012a1 	.word	0x080012a1
 80007f4:	200003c0 	.word	0x200003c0

080007f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0aa      	sub	sp, #168	; 0xa8
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000802:	2234      	movs	r2, #52	; 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00d f9bc 	bl	800db84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2258      	movs	r2, #88	; 0x58
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f00d f9ad 	bl	800db84 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b47      	ldr	r3, [pc, #284]	; (800094c <_Z18SystemClock_Configv+0x154>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a46      	ldr	r2, [pc, #280]	; (800094c <_Z18SystemClock_Configv+0x154>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b44      	ldr	r3, [pc, #272]	; (800094c <_Z18SystemClock_Configv+0x154>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <_Z18SystemClock_Configv+0x158>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a40      	ldr	r2, [pc, #256]	; (8000950 <_Z18SystemClock_Configv+0x158>)
 8000850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <_Z18SystemClock_Configv+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000862:	2303      	movs	r3, #3
 8000864:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000866:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800086a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000872:	2310      	movs	r3, #16
 8000874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000886:	230f      	movs	r3, #15
 8000888:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 800088c:	2390      	movs	r3, #144	; 0x90
 800088e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000898:	2305      	movs	r3, #5
 800089a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008a8:	4618      	mov	r0, r3
 80008aa:	f005 fd2b 	bl	8006304 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80008be:	f000 fd3f 	bl	8001340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c6:	2300      	movs	r3, #0
 80008c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f004 ff1f 	bl	8005720 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bf14      	ite	ne
 80008e8:	2301      	movne	r3, #1
 80008ea:	2300      	moveq	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 80008f2:	f000 fd25 	bl	8001340 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80008f6:	f240 1371 	movw	r3, #369	; 0x171
 80008fa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80008fc:	2332      	movs	r3, #50	; 0x32
 80008fe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000900:	230c      	movs	r3, #12
 8000902:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800091a:	2300      	movs	r3, #0
 800091c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4618      	mov	r0, r3
 800092c:	f005 f8fa 	bl	8005b24 <HAL_RCCEx_PeriphCLKConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <_Z18SystemClock_Configv+0x14c>
  {
    Error_Handler();
 8000940:	f000 fcfe 	bl	8001340 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	37a8      	adds	r7, #168	; 0xa8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 8000968:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <_ZL12MX_ADC1_Initv+0xb0>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800096c:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 8000980:	2200      	movs	r2, #0
 8000982:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 8000994:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <_ZL12MX_ADC1_Initv+0xb4>)
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 80009b4:	f001 fb80 	bl	80020b8 <HAL_ADC_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf14      	ite	ne
 80009be:	2301      	movne	r3, #1
 80009c0:	2300      	moveq	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80009c8:	f000 fcba 	bl	8001340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009cc:	230a      	movs	r3, #10
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <_ZL12MX_ADC1_Initv+0xac>)
 80009de:	f001 fbaf 	bl	8002140 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80009f2:	f000 fca5 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000b0 	.word	0x200000b0
 8000a04:	40012000 	.word	0x40012000
 8000a08:	0f000001 	.word	0x0f000001

08000a0c <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <_ZL11MX_DAC_Initv+0x60>)
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <_ZL11MX_DAC_Initv+0x64>)
 8000a1e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <_ZL11MX_DAC_Initv+0x60>)
 8000a22:	f001 fe9d 	bl	8002760 <HAL_DAC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8000a36:	f000 fc83 	bl	8001340 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <_ZL11MX_DAC_Initv+0x60>)
 8000a4a:	f001 ff0f 	bl	800286c <HAL_DAC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 8000a5e:	f000 fc6f 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000f8 	.word	0x200000f8
 8000a70:	40007400 	.word	0x40007400

08000a74 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <_ZL14MX_DFSDM1_Initv+0x74>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000ac8:	f001 ff2a 	bl	8002920 <HAL_DFSDM_ChannelInit>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <_ZL14MX_DFSDM1_Initv+0x6c>
  {
    Error_Handler();
 8000adc:	f000 fc30 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000010c 	.word	0x2000010c
 8000ae8:	40016020 	.word	0x40016020

08000aec <_ZL14MX_DFSDM2_Initv>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000af2:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <_ZL14MX_DFSDM2_Initv+0xdc>)
 8000af4:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000af6:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000b02:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b08:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b14:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000b3e:	4821      	ldr	r0, [pc, #132]	; (8000bc4 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000b40:	f001 feee 	bl	8002920 <HAL_DFSDM_ChannelInit>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf14      	ite	ne
 8000b4a:	2301      	movne	r3, #1
 8000b4c:	2300      	moveq	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <_ZL14MX_DFSDM2_Initv+0x6c>
  {
    Error_Handler();
 8000b54:	f000 fbf4 	bl	8001340 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b5a:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <_ZL14MX_DFSDM2_Initv+0xe4>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000ba8:	f001 feba 	bl	8002920 <HAL_DFSDM_ChannelInit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <_ZL14MX_DFSDM2_Initv+0xd4>
  {
    Error_Handler();
 8000bbc:	f000 fbc0 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000144 	.word	0x20000144
 8000bc8:	40016420 	.word	0x40016420
 8000bcc:	2000017c 	.word	0x2000017c
 8000bd0:	400164e0 	.word	0x400164e0

08000bd4 <_ZL15MX_FMPI2C1_Initv>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <_ZL15MX_FMPI2C1_Initv+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <_ZL15MX_FMPI2C1_Initv+0x7c>)
 8000be2:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000c10:	f001 ffda 	bl	8002bc8 <HAL_FMPI2C_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf14      	ite	ne
 8000c1a:	2301      	movne	r3, #1
 8000c1c:	2300      	moveq	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <_ZL15MX_FMPI2C1_Initv+0x54>
  {
    Error_Handler();
 8000c24:	f000 fb8c 	bl	8001340 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000c2c:	f002 f85b 	bl	8002ce6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2301      	movne	r3, #1
 8000c38:	2300      	moveq	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <_ZL15MX_FMPI2C1_Initv+0x70>
  {
    Error_Handler();
 8000c40:	f000 fb7e 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001b4 	.word	0x200001b4
 8000c4c:	40006000 	.word	0x40006000
 8000c50:	00303d5b 	.word	0x00303d5b

08000c54 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <_ZL12MX_I2S2_Initv+0x64>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c64:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c7c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c80:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <_ZL12MX_I2S2_Initv+0x60>)
 8000c96:	f003 ffbf 	bl	8004c18 <HAL_I2S_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf14      	ite	ne
 8000ca0:	2301      	movne	r3, #1
 8000ca2:	2300      	moveq	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <_ZL12MX_I2S2_Initv+0x5a>
  {
    Error_Handler();
 8000caa:	f000 fb49 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000200 	.word	0x20000200
 8000cb8:	40003800 	.word	0x40003800

08000cbc <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <_ZL15MX_QUADSPI_Initv+0x60>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cda:	2218      	movs	r2, #24
 8000cdc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cfa:	f004 fc4f 	bl	800559c <HAL_QSPI_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf14      	ite	ne
 8000d04:	2301      	movne	r3, #1
 8000d06:	2300      	moveq	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <_ZL15MX_QUADSPI_Initv+0x56>
  {
    Error_Handler();
 8000d0e:	f000 fb17 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000248 	.word	0x20000248
 8000d1c:	a0001000 	.word	0xa0001000

08000d20 <_ZL14MX_UART10_Initv>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_ZL14MX_UART10_Initv+0x58>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <_ZL14MX_UART10_Initv+0x54>)
 8000d58:	f006 f84a 	bl	8006df0 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf14      	ite	ne
 8000d62:	2301      	movne	r3, #1
 8000d64:	2300      	moveq	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <_ZL14MX_UART10_Initv+0x50>
  {
    Error_Handler();
 8000d6c:	f000 fae8 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000294 	.word	0x20000294
 8000d78:	40011c00 	.word	0x40011c00

08000d7c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_ZL19MX_USART6_UART_Initv+0x58>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000db4:	f006 f81c 	bl	8006df0 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	bf14      	ite	ne
 8000dbe:	2301      	movne	r3, #1
 8000dc0:	2300      	moveq	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8000dc8:	f000 faba 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200002d8 	.word	0x200002d8
 8000dd4:	40011400 	.word	0x40011400

08000dd8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	4bb1      	ldr	r3, [pc, #708]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4ab0      	ldr	r2, [pc, #704]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4bae      	ldr	r3, [pc, #696]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	623b      	str	r3, [r7, #32]
 8000e08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	4baa      	ldr	r3, [pc, #680]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4aa9      	ldr	r2, [pc, #676]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4ba7      	ldr	r3, [pc, #668]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	4ba3      	ldr	r3, [pc, #652]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4aa2      	ldr	r2, [pc, #648]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4ba0      	ldr	r3, [pc, #640]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	4b9c      	ldr	r3, [pc, #624]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a9b      	ldr	r2, [pc, #620]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b99      	ldr	r3, [pc, #612]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b95      	ldr	r3, [pc, #596]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a94      	ldr	r2, [pc, #592]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b92      	ldr	r3, [pc, #584]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b8e      	ldr	r3, [pc, #568]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a8d      	ldr	r2, [pc, #564]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b8b      	ldr	r3, [pc, #556]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b87      	ldr	r3, [pc, #540]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a86      	ldr	r2, [pc, #536]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b84      	ldr	r3, [pc, #528]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b80      	ldr	r3, [pc, #512]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a7f      	ldr	r2, [pc, #508]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b7d      	ldr	r3, [pc, #500]	; (80010b8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2138      	movs	r1, #56	; 0x38
 8000ed2:	487a      	ldr	r0, [pc, #488]	; (80010bc <_ZL12MX_GPIO_Initv+0x2e4>)
 8000ed4:	f002 f8fe 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Motor1PWM_Pin|Motor1Dir2_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000ede:	4878      	ldr	r0, [pc, #480]	; (80010c0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8000ee0:	f002 f8f8 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4876      	ldr	r0, [pc, #472]	; (80010c4 <_ZL12MX_GPIO_Initv+0x2ec>)
 8000eea:	f002 f8f3 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000ef4:	4874      	ldr	r0, [pc, #464]	; (80010c8 <_ZL12MX_GPIO_Initv+0x2f0>)
 8000ef6:	f002 f8ed 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|Motor1Dir1_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000f00:	4872      	ldr	r0, [pc, #456]	; (80010cc <_ZL12MX_GPIO_Initv+0x2f4>)
 8000f02:	f002 f8e7 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000f06:	2338      	movs	r3, #56	; 0x38
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4867      	ldr	r0, [pc, #412]	; (80010bc <_ZL12MX_GPIO_Initv+0x2e4>)
 8000f1e:	f001 ff2d 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000f22:	2340      	movs	r3, #64	; 0x40
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000f32:	2303      	movs	r3, #3
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	485f      	ldr	r0, [pc, #380]	; (80010bc <_ZL12MX_GPIO_Initv+0x2e4>)
 8000f3e:	f001 ff1d 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1PWM_Pin Motor1Dir2_Pin */
  GPIO_InitStruct.Pin = Motor1PWM_Pin|Motor1Dir2_Pin;
 8000f42:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4859      	ldr	r0, [pc, #356]	; (80010c0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8000f5c:	f001 ff0e 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000f60:	2302      	movs	r3, #2
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f64:	4b5a      	ldr	r3, [pc, #360]	; (80010d0 <_ZL12MX_GPIO_Initv+0x2f8>)
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4854      	ldr	r0, [pc, #336]	; (80010c4 <_ZL12MX_GPIO_Initv+0x2ec>)
 8000f74:	f001 ff02 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B_USER_Pin Motor1Enc2_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin|Motor1Enc2_Pin;
 8000f78:	f248 0301 	movw	r3, #32769	; 0x8001
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7e:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <_ZL12MX_GPIO_Initv+0x2f8>)
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4851      	ldr	r0, [pc, #324]	; (80010d4 <_ZL12MX_GPIO_Initv+0x2fc>)
 8000f8e:	f001 fef5 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000f92:	2320      	movs	r3, #32
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4846      	ldr	r0, [pc, #280]	; (80010c4 <_ZL12MX_GPIO_Initv+0x2ec>)
 8000faa:	f001 fee7 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	483f      	ldr	r0, [pc, #252]	; (80010c8 <_ZL12MX_GPIO_Initv+0x2f0>)
 8000fca:	f001 fed7 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	4b3e      	ldr	r3, [pc, #248]	; (80010d0 <_ZL12MX_GPIO_Initv+0x2f8>)
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4837      	ldr	r0, [pc, #220]	; (80010c0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8000fe4:	f001 feca 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000fe8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fee:	2312      	movs	r3, #18
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	4830      	ldr	r0, [pc, #192]	; (80010c8 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001006:	f001 feb9 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800101c:	2307      	movs	r3, #7
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	4828      	ldr	r0, [pc, #160]	; (80010c8 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001028:	f001 fea8 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 800102c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4820      	ldr	r0, [pc, #128]	; (80010c8 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001046:	f001 fe99 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVRCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin;
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <_ZL12MX_GPIO_Initv+0x2f8>)
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVRCR_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	481b      	ldr	r0, [pc, #108]	; (80010cc <_ZL12MX_GPIO_Initv+0x2f4>)
 800105e:	f001 fe8d 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin Motor1Dir1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|Motor1Dir1_Pin;
 8001062:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	4814      	ldr	r0, [pc, #80]	; (80010cc <_ZL12MX_GPIO_Initv+0x2f4>)
 800107c:	f001 fe7e 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001080:	2330      	movs	r3, #48	; 0x30
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001090:	2306      	movs	r3, #6
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <_ZL12MX_GPIO_Initv+0x2f0>)
 800109c:	f001 fe6e 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D4_Pin Motor1Enc1_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin|Motor1Enc1_Pin;
 80010a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <_ZL12MX_GPIO_Initv+0x2f8>)
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	e010      	b.n	80010d8 <_ZL12MX_GPIO_Initv+0x300>
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40021400 	.word	0x40021400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	10110000 	.word	0x10110000
 80010d4:	40020000 	.word	0x40020000
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <_ZL12MX_GPIO_Initv+0x330>)
 80010da:	f001 fe4f 	bl	8002d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	2017      	movs	r0, #23
 80010e4:	f001 fb12 	bl	800270c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010e8:	2017      	movs	r0, #23
 80010ea:	f001 fb2b 	bl	8002744 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2105      	movs	r1, #5
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f001 fb0a 	bl	800270c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f8:	2028      	movs	r0, #40	; 0x28
 80010fa:	f001 fb23 	bl	8002744 <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3738      	adds	r7, #56	; 0x38
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40020400 	.word	0x40020400

0800110c <_ZL12MX_FSMC_Initv>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001124:	4b54      	ldr	r3, [pc, #336]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001126:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800112a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 800112e:	4a53      	ldr	r2, [pc, #332]	; (800127c <_ZL12MX_FSMC_Initv+0x170>)
 8001130:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001132:	4b51      	ldr	r3, [pc, #324]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001138:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001144:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001146:	2210      	movs	r2, #16
 8001148:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800114a:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001150:	4b49      	ldr	r3, [pc, #292]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800115c:	4b46      	ldr	r3, [pc, #280]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001162:	4b45      	ldr	r3, [pc, #276]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 800116a:	2200      	movs	r2, #0
 800116c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001170:	2200      	movs	r2, #0
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001176:	2200      	movs	r2, #0
 8001178:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 800117c:	2200      	movs	r2, #0
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001180:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001182:	2200      	movs	r2, #0
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001186:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 8001188:	2200      	movs	r2, #0
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800118c:	230f      	movs	r3, #15
 800118e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001190:	230f      	movs	r3, #15
 8001192:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001194:	23ff      	movs	r3, #255	; 0xff
 8001196:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001198:	230f      	movs	r3, #15
 800119a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800119c:	2310      	movs	r3, #16
 800119e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011a0:	2311      	movs	r3, #17
 80011a2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4832      	ldr	r0, [pc, #200]	; (8001278 <_ZL12MX_FSMC_Initv+0x16c>)
 80011b0:	f005 fb2c 	bl	800680c <HAL_SRAM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <_ZL12MX_FSMC_Initv+0xbc>
  {
    Error_Handler( );
 80011c4:	f000 f8bc 	bl	8001340 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011ca:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011ce:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011d2:	4a2a      	ldr	r2, [pc, #168]	; (800127c <_ZL12MX_FSMC_Initv+0x170>)
 80011d4:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011d8:	2204      	movs	r2, #4
 80011da:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011ea:	2210      	movs	r2, #16
 80011ec:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 8001202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 800121c:	2200      	movs	r2, #0
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 8001222:	2200      	movs	r2, #0
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 8001228:	2200      	movs	r2, #0
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 800122e:	2200      	movs	r2, #0
 8001230:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001232:	230f      	movs	r3, #15
 8001234:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001236:	230f      	movs	r3, #15
 8001238:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800123a:	23ff      	movs	r3, #255	; 0xff
 800123c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800123e:	230f      	movs	r3, #15
 8001240:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001242:	2310      	movs	r3, #16
 8001244:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001246:	2311      	movs	r3, #17
 8001248:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	480a      	ldr	r0, [pc, #40]	; (8001280 <_ZL12MX_FSMC_Initv+0x174>)
 8001256:	f005 fad9 	bl	800680c <HAL_SRAM_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf14      	ite	ne
 8001260:	2301      	movne	r3, #1
 8001262:	2300      	moveq	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <_ZL12MX_FSMC_Initv+0x162>
  {
    Error_Handler( );
 800126a:	f000 f869 	bl	8001340 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000031c 	.word	0x2000031c
 800127c:	a0000104 	.word	0xa0000104
 8001280:	2000036c 	.word	0x2000036c

08001284 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800128c:	f00c f90e 	bl	800d4ac <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  rm->handleChange();
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <_Z16StartDefaultTaskPv+0x18>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa21 	bl	80006dc <_ZN20RoteryEncoderMonitor12handleChangeEv>
 800129a:	e7f9      	b.n	8001290 <_Z16StartDefaultTaskPv+0xc>
 800129c:	200003c8 	.word	0x200003c8

080012a0 <_Z14StartMotor1PWMPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor1PWM */
void StartMotor1PWM(void *argument)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor1PWM */
  /* Infinite loop */
	m1->setDirection(DCMotorController::Clockwise);
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <_Z14StartMotor1PWMPv+0x6c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f9c5 	bl	800063e <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE>
	m1->setPower(.3);
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <_Z14StartMotor1PWMPv+0x6c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001310 <_Z14StartMotor1PWMPv+0x70>
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f956 	bl	800056e <_ZN17DCMotorController8setPowerEf>
  for(;;)
  {
	  if (rm->getCount() > 4000 || rm->getCount() < -4000){
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <_Z14StartMotor1PWMPv+0x74>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fa4b 	bl	8000762 <_ZN20RoteryEncoderMonitor8getCountEv>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012d2:	dc08      	bgt.n	80012e6 <_Z14StartMotor1PWMPv+0x46>
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <_Z14StartMotor1PWMPv+0x74>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fa42 	bl	8000762 <_ZN20RoteryEncoderMonitor8getCountEv>
 80012de:	4603      	mov	r3, r0
 80012e0:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 80012e4:	da01      	bge.n	80012ea <_Z14StartMotor1PWMPv+0x4a>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <_Z14StartMotor1PWMPv+0x4c>
 80012ea:	2300      	movs	r3, #0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <_Z14StartMotor1PWMPv+0x5e>
		  m1->setPower(0);
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <_Z14StartMotor1PWMPv+0x6c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001318 <_Z14StartMotor1PWMPv+0x78>
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f938 	bl	800056e <_ZN17DCMotorController8setPowerEf>
	  }
	  m1->pwmPulse();
 80012fe:	4b03      	ldr	r3, [pc, #12]	; (800130c <_Z14StartMotor1PWMPv+0x6c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f95c 	bl	80005c0 <_ZN17DCMotorController8pwmPulseEv>
	  if (rm->getCount() > 4000 || rm->getCount() < -4000){
 8001308:	e7db      	b.n	80012c2 <_Z14StartMotor1PWMPv+0x22>
 800130a:	bf00      	nop
 800130c:	200003c4 	.word	0x200003c4
 8001310:	3e99999a 	.word	0x3e99999a
 8001314:	200003c8 	.word	0x200003c8
 8001318:	00000000 	.word	0x00000000

0800131c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800132e:	f000 fe7f 	bl	8002030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40001000 	.word	0x40001000

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b087      	sub	sp, #28
 8001350:	af04      	add	r7, sp, #16
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d12a      	bne.n	80013b2 <_Z41__static_initialization_and_destruction_0ii+0x66>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001362:	4293      	cmp	r3, r2
 8001364:	d125      	bne.n	80013b2 <_Z41__static_initialization_and_destruction_0ii+0x66>
DCMotorController *m1 = new DCMotorController(Motor1PWM_GPIO_Port, Motor1PWM_Pin, Motor1Dir1_GPIO_Port, Motor1Dir1_Pin,Motor1Dir2_GPIO_Port, Motor1Dir2_Pin);
 8001366:	2020      	movs	r0, #32
 8001368:	f00c fba2 	bl	800dab0 <_Znwj>
 800136c:	4603      	mov	r3, r0
 800136e:	461c      	mov	r4, r3
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	490d      	ldr	r1, [pc, #52]	; (80013bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff f8c6 	bl	8000518 <_ZN17DCMotorControllerC1EP12GPIO_TypeDeftS1_tS1_t>
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800138e:	601c      	str	r4, [r3, #0]
RoteryEncoderMonitor *rm = new RoteryEncoderMonitor(Motor1Enc1_GPIO_Port,Motor1Enc1_Pin,Motor1Enc2_GPIO_Port,Motor1Enc2_Pin);
 8001390:	2020      	movs	r0, #32
 8001392:	f00c fb8d 	bl	800dab0 <_Znwj>
 8001396:	4603      	mov	r3, r0
 8001398:	461c      	mov	r4, r3
 800139a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80013a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a6:	4909      	ldr	r1, [pc, #36]	; (80013cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80013a8:	4620      	mov	r0, r4
 80013aa:	f7ff f979 	bl	80006a0 <_ZN20RoteryEncoderMonitorC1EP12GPIO_TypeDeftS1_t>
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80013b0:	601c      	str	r4, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	200003c4 	.word	0x200003c4
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	200003c8 	.word	0x200003c8

080013d4 <_GLOBAL__sub_I_hadc1>:
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff ffb5 	bl	800134c <_Z41__static_initialization_and_destruction_0ii>
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_MspInit+0x54>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_MspInit+0x54>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_MspInit+0x54>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_MspInit+0x54>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_MspInit+0x54>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_MspInit+0x54>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	210f      	movs	r1, #15
 8001426:	f06f 0001 	mvn.w	r0, #1
 800142a:	f001 f96f 	bl	800270c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a31      	ldr	r2, [pc, #196]	; (8001520 <HAL_ADC_MspInit+0xe4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d15b      	bne.n	8001516 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a21      	ldr	r2, [pc, #132]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_ADC_MspInit+0xe8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80014ce:	2311      	movs	r3, #17
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <HAL_ADC_MspInit+0xec>)
 80014e2:	f001 fc4b 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80014e6:	2326      	movs	r3, #38	; 0x26
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <HAL_ADC_MspInit+0xf0>)
 80014fa:	f001 fc3f 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80014fe:	2302      	movs	r3, #2
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	4807      	ldr	r0, [pc, #28]	; (8001530 <HAL_ADC_MspInit+0xf4>)
 8001512:	f001 fc33 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	; 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40012000 	.word	0x40012000
 8001524:	40023800 	.word	0x40023800
 8001528:	40020800 	.word	0x40020800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_DAC_MspInit+0x8c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d12f      	bne.n	80015b6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_DAC_MspInit+0x90>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_DAC_MspInit+0x90>)
 8001560:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_DAC_MspInit+0x90>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_DAC_MspInit+0x90>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_DAC_MspInit+0x90>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_DAC_MspInit+0x90>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800158e:	2310      	movs	r3, #16
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001592:	2303      	movs	r3, #3
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_DAC_MspInit+0x94>)
 80015a2:	f001 fbeb 	bl	8002d7c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2036      	movs	r0, #54	; 0x36
 80015ac:	f001 f8ae 	bl	800270c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015b0:	2036      	movs	r0, #54	; 0x36
 80015b2:	f001 f8c7 	bl	8002744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40007400 	.word	0x40007400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00e      	beq.n	800160c <HAL_DFSDM_ChannelMspInit+0x40>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a76      	ldr	r2, [pc, #472]	; (80017cc <HAL_DFSDM_ChannelMspInit+0x200>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d009      	beq.n	800160c <HAL_DFSDM_ChannelMspInit+0x40>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <HAL_DFSDM_ChannelMspInit+0x204>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d004      	beq.n	800160c <HAL_DFSDM_ChannelMspInit+0x40>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a73      	ldr	r2, [pc, #460]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d154      	bne.n	80016b6 <HAL_DFSDM_ChannelMspInit+0xea>
 800160c:	4b72      	ldr	r3, [pc, #456]	; (80017d8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d150      	bne.n	80016b6 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
 8001618:	4b70      	ldr	r3, [pc, #448]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	4a6f      	ldr	r2, [pc, #444]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800161e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001622:	6453      	str	r3, [r2, #68]	; 0x44
 8001624:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	4b69      	ldr	r3, [pc, #420]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a68      	ldr	r2, [pc, #416]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	4b66      	ldr	r3, [pc, #408]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	4b62      	ldr	r3, [pc, #392]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a61      	ldr	r2, [pc, #388]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800167a:	2306      	movs	r3, #6
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	4856      	ldr	r0, [pc, #344]	; (80017e0 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001686:	f001 fb79 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800168a:	2340      	movs	r3, #64	; 0x40
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800169a:	2306      	movs	r3, #6
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	4619      	mov	r1, r3
 80016a4:	484f      	ldr	r0, [pc, #316]	; (80017e4 <HAL_DFSDM_ChannelMspInit+0x218>)
 80016a6:	f001 fb69 	bl	8002d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016aa:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a49      	ldr	r2, [pc, #292]	; (80017d8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80016b2:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80016b4:	e084      	b.n	80017c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a43      	ldr	r2, [pc, #268]	; (80017c8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d07f      	beq.n	80017c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a41      	ldr	r2, [pc, #260]	; (80017cc <HAL_DFSDM_ChannelMspInit+0x200>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d07a      	beq.n	80017c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HAL_DFSDM_ChannelMspInit+0x204>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d075      	beq.n	80017c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a3e      	ldr	r2, [pc, #248]	; (80017d4 <HAL_DFSDM_ChannelMspInit+0x208>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d070      	beq.n	80017c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d16c      	bne.n	80017c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a3b      	ldr	r2, [pc, #236]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 80016f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a34      	ldr	r2, [pc, #208]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001766:	2307      	movs	r3, #7
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	481b      	ldr	r0, [pc, #108]	; (80017e0 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001772:	f001 fb03 	bl	8002d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001776:	2304      	movs	r3, #4
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001786:	2303      	movs	r3, #3
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4814      	ldr	r0, [pc, #80]	; (80017e4 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001792:	f001 faf3 	bl	8002d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80017a6:	2306      	movs	r3, #6
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <HAL_DFSDM_ChannelMspInit+0x220>)
 80017b2:	f001 fae3 	bl	8002d7c <HAL_GPIO_Init>
  DFSDM2_Init++;
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	3738      	adds	r7, #56	; 0x38
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40016000 	.word	0x40016000
 80017cc:	40016020 	.word	0x40016020
 80017d0:	40016040 	.word	0x40016040
 80017d4:	40016060 	.word	0x40016060
 80017d8:	200003cc 	.word	0x200003cc
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	200003d0 	.word	0x200003d0
 80017ec:	40020400 	.word	0x40020400

080017f0 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_FMPI2C_MspInit+0x84>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d12b      	bne.n	800186a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_FMPI2C_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_FMPI2C_MspInit+0x88>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_FMPI2C_MspInit+0x88>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800182e:	23c0      	movs	r3, #192	; 0xc0
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001832:	2312      	movs	r3, #18
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001836:	2301      	movs	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800183e:	2304      	movs	r3, #4
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <HAL_FMPI2C_MspInit+0x8c>)
 800184a:	f001 fa97 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_FMPI2C_MspInit+0x88>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_FMPI2C_MspInit+0x88>)
 8001858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_FMPI2C_MspInit+0x88>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40006000 	.word	0x40006000
 8001878:	40023800 	.word	0x40023800
 800187c:	40020800 	.word	0x40020800

08001880 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4f      	ldr	r2, [pc, #316]	; (80019dc <HAL_I2S_MspInit+0x15c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	f040 8097 	bne.w	80019d2 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	4b4d      	ldr	r3, [pc, #308]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a45      	ldr	r2, [pc, #276]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a3e      	ldr	r2, [pc, #248]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6313      	str	r3, [r2, #48]	; 0x30
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_I2S_MspInit+0x160>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001930:	2304      	movs	r3, #4
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001940:	2306      	movs	r3, #6
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4826      	ldr	r0, [pc, #152]	; (80019e4 <HAL_I2S_MspInit+0x164>)
 800194c:	f001 fa16 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001950:	2308      	movs	r3, #8
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001960:	2305      	movs	r3, #5
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	481e      	ldr	r0, [pc, #120]	; (80019e4 <HAL_I2S_MspInit+0x164>)
 800196c:	f001 fa06 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001970:	2308      	movs	r3, #8
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001980:	2305      	movs	r3, #5
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4817      	ldr	r0, [pc, #92]	; (80019e8 <HAL_I2S_MspInit+0x168>)
 800198c:	f001 f9f6 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001990:	2308      	movs	r3, #8
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a0:	2305      	movs	r3, #5
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4810      	ldr	r0, [pc, #64]	; (80019ec <HAL_I2S_MspInit+0x16c>)
 80019ac:	f001 f9e6 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80019b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c2:	2305      	movs	r3, #5
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <HAL_I2S_MspInit+0x170>)
 80019ce:	f001 f9d5 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3730      	adds	r7, #48	; 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40003800 	.word	0x40003800
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	40020400 	.word	0x40020400

080019f4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08e      	sub	sp, #56	; 0x38
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_QSPI_MspInit+0x178>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	f040 80a6 	bne.w	8001b64 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
 8001a1c:	4b54      	ldr	r3, [pc, #336]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	4a53      	ldr	r2, [pc, #332]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	6393      	str	r3, [r2, #56]	; 0x38
 8001a28:	4b51      	ldr	r3, [pc, #324]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
 8001a32:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a3e:	f043 0310 	orr.w	r3, r3, #16
 8001a42:	6313      	str	r3, [r2, #48]	; 0x30
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a45      	ldr	r2, [pc, #276]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a5a:	f043 0320 	orr.w	r3, r3, #32
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a3e      	ldr	r2, [pc, #248]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a37      	ldr	r2, [pc, #220]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_QSPI_MspInit+0x17c>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ad0:	2309      	movs	r3, #9
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4826      	ldr	r0, [pc, #152]	; (8001b74 <HAL_QSPI_MspInit+0x180>)
 8001adc:	f001 f94e 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001ae0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001af2:	230a      	movs	r3, #10
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afa:	4619      	mov	r1, r3
 8001afc:	481e      	ldr	r0, [pc, #120]	; (8001b78 <HAL_QSPI_MspInit+0x184>)
 8001afe:	f001 f93d 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001b02:	2304      	movs	r3, #4
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b12:	2309      	movs	r3, #9
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4817      	ldr	r0, [pc, #92]	; (8001b7c <HAL_QSPI_MspInit+0x188>)
 8001b1e:	f001 f92d 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b34:	2309      	movs	r3, #9
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4810      	ldr	r0, [pc, #64]	; (8001b80 <HAL_QSPI_MspInit+0x18c>)
 8001b40:	f001 f91c 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001b44:	2340      	movs	r3, #64	; 0x40
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b54:	230a      	movs	r3, #10
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <HAL_QSPI_MspInit+0x190>)
 8001b60:	f001 f90c 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b64:	bf00      	nop
 8001b66:	3738      	adds	r7, #56	; 0x38
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	a0001000 	.word	0xa0001000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40021400 	.word	0x40021400
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021800 	.word	0x40021800

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <HAL_UART_MspInit+0xec>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12d      	bne.n	8001c06 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a31      	ldr	r2, [pc, #196]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001be2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001bf4:	230b      	movs	r3, #11
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481f      	ldr	r0, [pc, #124]	; (8001c7c <HAL_UART_MspInit+0xf4>)
 8001c00:	f001 f8bc 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c04:	e031      	b.n	8001c6a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <HAL_UART_MspInit+0xf8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d12c      	bne.n	8001c6a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001c1a:	f043 0320 	orr.w	r3, r3, #32
 8001c1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_UART_MspInit+0xf0>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001c48:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_UART_MspInit+0xf4>)
 8001c66:	f001 f889 	bl	8002d7c <HAL_GPIO_Init>
}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40011c00 	.word	0x40011c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40021800 	.word	0x40021800
 8001c80:	40011400 	.word	0x40011400

08001c84 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <HAL_FSMC_MspInit+0xc8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d151      	bne.n	8001d44 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_FSMC_MspInit+0xc8>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_FSMC_MspInit+0xcc>)
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <HAL_FSMC_MspInit+0xcc>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6393      	str	r3, [r2, #56]	; 0x38
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_FSMC_MspInit+0xcc>)
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001cc2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001cc6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481d      	ldr	r0, [pc, #116]	; (8001d54 <HAL_FSMC_MspInit+0xd0>)
 8001cde:	f001 f84d 	bl	8002d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001ce2:	f240 433f 	movw	r3, #1087	; 0x43f
 8001ce6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001cf4:	230c      	movs	r3, #12
 8001cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4816      	ldr	r0, [pc, #88]	; (8001d58 <HAL_FSMC_MspInit+0xd4>)
 8001cfe:	f001 f83d 	bl	8002d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001d02:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001d06:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d14:	230c      	movs	r3, #12
 8001d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480f      	ldr	r0, [pc, #60]	; (8001d5c <HAL_FSMC_MspInit+0xd8>)
 8001d1e:	f001 f82d 	bl	8002d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001d22:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001d26:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d34:	230c      	movs	r3, #12
 8001d36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <HAL_FSMC_MspInit+0xdc>)
 8001d3e:	f001 f81d 	bl	8002d7c <HAL_GPIO_Init>
 8001d42:	e000      	b.n	8001d46 <HAL_FSMC_MspInit+0xc2>
    return;
 8001d44:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200003d4 	.word	0x200003d4
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40020c00 	.word	0x40020c00

08001d64 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001d6c:	f7ff ff8a 	bl	8001c84 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	2036      	movs	r0, #54	; 0x36
 8001d8e:	f000 fcbd 	bl	800270c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d92:	2036      	movs	r0, #54	; 0x36
 8001d94:	f000 fcd6 	bl	8002744 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_InitTick+0xa0>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_InitTick+0xa0>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_InitTick+0xa0>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db4:	f107 0210 	add.w	r2, r7, #16
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fe7e 	bl	8005ac0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dc4:	f003 fe54 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8001dc8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <HAL_InitTick+0xa4>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0c9b      	lsrs	r3, r3, #18
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_InitTick+0xa8>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_InitTick+0xac>)
 8001ddc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_InitTick+0xa8>)
 8001de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001de4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001de6:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_InitTick+0xa8>)
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_InitTick+0xa8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_InitTick+0xa8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001df8:	4809      	ldr	r0, [pc, #36]	; (8001e20 <HAL_InitTick+0xa8>)
 8001dfa:	f004 fd4b 	bl	8006894 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d104      	bne.n	8001e0e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <HAL_InitTick+0xa8>)
 8001e06:	f004 fd9f 	bl	8006948 <HAL_TIM_Base_Start_IT>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3730      	adds	r7, #48	; 0x30
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	431bde83 	.word	0x431bde83
 8001e20:	20004d34 	.word	0x20004d34
 8001e24:	40001000 	.word	0x40001000

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <NMI_Handler+0x4>

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e58:	2040      	movs	r0, #64	; 0x40
 8001e5a:	f001 f955 	bl	8003108 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001e5e:	2080      	movs	r0, #128	; 0x80
 8001e60:	f001 f952 	bl	8003108 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001e64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e68:	f001 f94e 	bl	8003108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001e74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e78:	f001 f946 	bl	8003108 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001e7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e80:	f001 f942 	bl	8003108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <TIM6_DAC_IRQHandler+0x20>)
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001e96:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <TIM6_DAC_IRQHandler+0x20>)
 8001e98:	f000 fc84 	bl	80027a4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001e9c:	4803      	ldr	r0, [pc, #12]	; (8001eac <TIM6_DAC_IRQHandler+0x24>)
 8001e9e:	f004 fdc3 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200000f8 	.word	0x200000f8
 8001eac:	20004d34 	.word	0x20004d34

08001eb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <OTG_FS_IRQHandler+0x10>)
 8001eb6:	f001 fbb5 	bl	8003624 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200051c8 	.word	0x200051c8

08001ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	return 1;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_kill>:

int _kill(int pid, int sig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ede:	f00b fe09 	bl	800daf4 <__errno>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2216      	movs	r2, #22
 8001ee6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_exit>:

void _exit (int status)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ffe7 	bl	8001ed4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f06:	e7fe      	b.n	8001f06 <_exit+0x12>

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f00b fddc 	bl	800daf4 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20050000 	.word	0x20050000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	200003d8 	.word	0x200003d8
 8001f70:	200054e0 	.word	0x200054e0

08001f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <SystemInit+0x20>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <SystemInit+0x20>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f9e:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb4:	4c0b      	ldr	r4, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fc2:	f7ff ffd7 	bl	8001f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f00b fd9b 	bl	800db00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7fe fbd7 	bl	800077c <main>
  bx  lr    
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001fdc:	0800de78 	.word	0x0800de78
  ldr r2, =_sbss
 8001fe0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001fe4:	200054dc 	.word	0x200054dc

08001fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_Init+0x40>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_Init+0x40>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_Init+0x40>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 fb6e 	bl	80026f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff feac 	bl	8001d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff f9e0 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x20>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x24>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_IncTick+0x24>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000008 	.word	0x20000008
 8002054:	20004d7c 	.word	0x20004d7c

08002058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_GetTick+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20004d7c 	.word	0x20004d7c

08002070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff ffee 	bl	8002058 <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002088:	d005      	beq.n	8002096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_Delay+0x44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002096:	bf00      	nop
 8002098:	f7ff ffde 	bl	8002058 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8f7      	bhi.n	8002098 <HAL_Delay+0x28>
  {
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008

080020b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e033      	b.n	8002136 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff f9b0 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020fe:	f023 0302 	bic.w	r3, r3, #2
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f94a 	bl	80023a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
 8002126:	e001      	b.n	800212c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1c>
 8002158:	2302      	movs	r3, #2
 800215a:	e113      	b.n	8002384 <HAL_ADC_ConfigChannel+0x244>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b09      	cmp	r3, #9
 800216a:	d925      	bls.n	80021b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68d9      	ldr	r1, [r3, #12]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	3b1e      	subs	r3, #30
 8002182:	2207      	movs	r2, #7
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43da      	mvns	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	400a      	ands	r2, r1
 8002190:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68d9      	ldr	r1, [r3, #12]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	4603      	mov	r3, r0
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4403      	add	r3, r0
 80021aa:	3b1e      	subs	r3, #30
 80021ac:	409a      	lsls	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	e022      	b.n	80021fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6919      	ldr	r1, [r3, #16]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	2207      	movs	r2, #7
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	400a      	ands	r2, r1
 80021da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6919      	ldr	r1, [r3, #16]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4403      	add	r3, r0
 80021f4:	409a      	lsls	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b06      	cmp	r3, #6
 8002204:	d824      	bhi.n	8002250 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b05      	subs	r3, #5
 8002218:	221f      	movs	r2, #31
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	400a      	ands	r2, r1
 8002226:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	3b05      	subs	r3, #5
 8002242:	fa00 f203 	lsl.w	r2, r0, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
 800224e:	e04c      	b.n	80022ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d824      	bhi.n	80022a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	3b23      	subs	r3, #35	; 0x23
 800226a:	221f      	movs	r2, #31
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43da      	mvns	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	400a      	ands	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	4618      	mov	r0, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3b23      	subs	r3, #35	; 0x23
 8002294:	fa00 f203 	lsl.w	r2, r0, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
 80022a0:	e023      	b.n	80022ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	3b41      	subs	r3, #65	; 0x41
 80022b4:	221f      	movs	r2, #31
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3b41      	subs	r3, #65	; 0x41
 80022de:	fa00 f203 	lsl.w	r2, r0, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_ADC_ConfigChannel+0x250>)
 80022ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_ADC_ConfigChannel+0x254>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d10f      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1d8>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b12      	cmp	r3, #18
 80022fe:	d10b      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_ADC_ConfigChannel+0x254>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12b      	bne.n	800237a <HAL_ADC_ConfigChannel+0x23a>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_ADC_ConfigChannel+0x258>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x1f4>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b11      	cmp	r3, #17
 8002332:	d122      	bne.n	800237a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_ADC_ConfigChannel+0x258>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d111      	bne.n	800237a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_ADC_ConfigChannel+0x25c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_ADC_ConfigChannel+0x260>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0c9a      	lsrs	r2, r3, #18
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800236c:	e002      	b.n	8002374 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3b01      	subs	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f9      	bne.n	800236e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40012300 	.word	0x40012300
 8002394:	40012000 	.word	0x40012000
 8002398:	10000012 	.word	0x10000012
 800239c:	20000000 	.word	0x20000000
 80023a0:	431bde83 	.word	0x431bde83

080023a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ac:	4b79      	ldr	r3, [pc, #484]	; (8002594 <ADC_Init+0x1f0>)
 80023ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	021a      	lsls	r2, r3, #8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800241e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6899      	ldr	r1, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	4a58      	ldr	r2, [pc, #352]	; (8002598 <ADC_Init+0x1f4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800244a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800246c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e00f      	b.n	80024a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002490:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0202 	bic.w	r2, r2, #2
 80024b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7e1b      	ldrb	r3, [r3, #24]
 80024bc:	005a      	lsls	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	3b01      	subs	r3, #1
 80024fc:	035a      	lsls	r2, r3, #13
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	e007      	b.n	8002518 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002516:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	3b01      	subs	r3, #1
 8002534:	051a      	lsls	r2, r3, #20
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800254c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800255a:	025a      	lsls	r2, r3, #9
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6899      	ldr	r1, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	029a      	lsls	r2, r3, #10
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40012300 	.word	0x40012300
 8002598:	0f000001 	.word	0x0f000001

0800259c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ff4c 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271e:	f7ff ff61 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002722:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	6978      	ldr	r0, [r7, #20]
 800272a:	f7ff ffb1 	bl	8002690 <NVIC_EncodePriority>
 800272e:	4602      	mov	r2, r0
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff80 	bl	800263c <__NVIC_SetPriority>
}
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ff54 	bl	8002600 <__NVIC_EnableIRQ>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e014      	b.n	800279c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	791b      	ldrb	r3, [r3, #4]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe fed6 	bl	8001534 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	d120      	bne.n	80027fe <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ca:	d118      	bne.n	80027fe <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2204      	movs	r2, #4
 80027d0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027f6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f82d 	bl	8002858 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d120      	bne.n	8002850 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800281c:	d118      	bne.n	8002850 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2204      	movs	r2, #4
 8002822:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f043 0202 	orr.w	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002838:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002848:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f85d 	bl	800290a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	795b      	ldrb	r3, [r3, #5]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_DAC_ConfigChannel+0x18>
 8002880:	2302      	movs	r3, #2
 8002882:	e03c      	b.n	80028fe <HAL_DAC_ConfigChannel+0x92>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2202      	movs	r2, #2
 800288e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4013      	ands	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	22c0      	movs	r2, #192	; 0xc0
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0cf      	b.n	8002ad2 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a69      	ldr	r2, [pc, #420]	; (8002adc <HAL_DFSDM_ChannelInit+0x1bc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_DFSDM_ChannelInit+0x3a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a67      	ldr	r2, [pc, #412]	; (8002ae0 <HAL_DFSDM_ChannelInit+0x1c0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_DFSDM_ChannelInit+0x3a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a66      	ldr	r2, [pc, #408]	; (8002ae4 <HAL_DFSDM_ChannelInit+0x1c4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_DFSDM_ChannelInit+0x3a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a64      	ldr	r2, [pc, #400]	; (8002ae8 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d106      	bne.n	8002968 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800295a:	4b64      	ldr	r3, [pc, #400]	; (8002aec <HAL_DFSDM_ChannelInit+0x1cc>)
 800295c:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800295e:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002960:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002962:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_DFSDM_ChannelInit+0x1bc>)
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e005      	b.n	8002974 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002968:	4b62      	ldr	r3, [pc, #392]	; (8002af4 <HAL_DFSDM_ChannelInit+0x1d4>)
 800296a:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 800296c:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <HAL_DFSDM_ChannelInit+0x1d8>)
 800296e:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <HAL_DFSDM_ChannelInit+0x1dc>)
 8002972:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f8c1 	bl	8002b00 <DFSDM_GetChannelFromInstance>
 800297e:	4603      	mov	r3, r0
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0a0      	b.n	8002ad2 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fe fe1b 	bl	80015cc <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d125      	bne.n	80029f4 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	791b      	ldrb	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d108      	bne.n	80029e8 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	3b01      	subs	r3, #1
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002a02:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002a12:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002a18:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 020f 	bic.w	r2, r2, #15
 8002a30:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002a58:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6899      	ldr	r1, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 0207 	and.w	r2, r2, #7
 8002a84:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ab0:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f81e 	bl	8002b00 <DFSDM_GetChannelFromInstance>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40016000 	.word	0x40016000
 8002ae0:	40016020 	.word	0x40016020
 8002ae4:	40016040 	.word	0x40016040
 8002ae8:	40016060 	.word	0x40016060
 8002aec:	200003dc 	.word	0x200003dc
 8002af0:	200003e0 	.word	0x200003e0
 8002af4:	200003f0 	.word	0x200003f0
 8002af8:	200003f4 	.word	0x200003f4
 8002afc:	40016400 	.word	0x40016400

08002b00 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <DFSDM_GetChannelFromInstance+0x9c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <DFSDM_GetChannelFromInstance+0x18>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <DFSDM_GetChannelFromInstance+0xa0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d102      	bne.n	8002b1e <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e037      	b.n	8002b8e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <DFSDM_GetChannelFromInstance+0xa4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <DFSDM_GetChannelFromInstance+0x2e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <DFSDM_GetChannelFromInstance+0xa8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d102      	bne.n	8002b34 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e02c      	b.n	8002b8e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <DFSDM_GetChannelFromInstance+0xac>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <DFSDM_GetChannelFromInstance+0x44>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <DFSDM_GetChannelFromInstance+0xb0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8002b44:	2302      	movs	r3, #2
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e021      	b.n	8002b8e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <DFSDM_GetChannelFromInstance+0xb4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d003      	beq.n	8002b5a <DFSDM_GetChannelFromInstance+0x5a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <DFSDM_GetChannelFromInstance+0xb8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d102      	bne.n	8002b60 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e016      	b.n	8002b8e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <DFSDM_GetChannelFromInstance+0xbc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d102      	bne.n	8002b6e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002b68:	2304      	movs	r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e00f      	b.n	8002b8e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <DFSDM_GetChannelFromInstance+0xc0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d102      	bne.n	8002b7c <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8002b76:	2305      	movs	r3, #5
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e008      	b.n	8002b8e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <DFSDM_GetChannelFromInstance+0xc4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d102      	bne.n	8002b8a <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8002b84:	2306      	movs	r3, #6
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e001      	b.n	8002b8e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40016000 	.word	0x40016000
 8002ba0:	40016400 	.word	0x40016400
 8002ba4:	40016020 	.word	0x40016020
 8002ba8:	40016420 	.word	0x40016420
 8002bac:	40016040 	.word	0x40016040
 8002bb0:	40016440 	.word	0x40016440
 8002bb4:	40016060 	.word	0x40016060
 8002bb8:	40016460 	.word	0x40016460
 8002bbc:	40016480 	.word	0x40016480
 8002bc0:	400164a0 	.word	0x400164a0
 8002bc4:	400164c0 	.word	0x400164c0

08002bc8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e081      	b.n	8002cde <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fdfe 	bl	80017f0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c18:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c28:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	e006      	b.n	8002c50 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d104      	bne.n	8002c62 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c74:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c84:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	ea42 0103 	orr.w	r1, r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	021a      	lsls	r2, r3, #8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69d9      	ldr	r1, [r3, #28]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d138      	bne.n	8002d6e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e032      	b.n	8002d70 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2224      	movs	r2, #36	; 0x24
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e165      	b.n	8003064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f040 8154 	bne.w	800305e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d005      	beq.n	8002dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d130      	bne.n	8002e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 0201 	and.w	r2, r3, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d017      	beq.n	8002e6c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d123      	bne.n	8002ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80ae 	beq.w	800305e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_GPIO_Init+0x300>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a5c      	ldr	r2, [pc, #368]	; (800307c <HAL_GPIO_Init+0x300>)
 8002f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b5a      	ldr	r3, [pc, #360]	; (800307c <HAL_GPIO_Init+0x300>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1e:	4a58      	ldr	r2, [pc, #352]	; (8003080 <HAL_GPIO_Init+0x304>)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4f      	ldr	r2, [pc, #316]	; (8003084 <HAL_GPIO_Init+0x308>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_Init+0x21a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4e      	ldr	r2, [pc, #312]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x216>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4d      	ldr	r2, [pc, #308]	; (800308c <HAL_GPIO_Init+0x310>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x212>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4c      	ldr	r2, [pc, #304]	; (8003090 <HAL_GPIO_Init+0x314>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x20e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4b      	ldr	r2, [pc, #300]	; (8003094 <HAL_GPIO_Init+0x318>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x20a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	; (8003098 <HAL_GPIO_Init+0x31c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x206>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a49      	ldr	r2, [pc, #292]	; (800309c <HAL_GPIO_Init+0x320>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x202>
 8002f7a:	2306      	movs	r3, #6
 8002f7c:	e00c      	b.n	8002f98 <HAL_GPIO_Init+0x21c>
 8002f7e:	2307      	movs	r3, #7
 8002f80:	e00a      	b.n	8002f98 <HAL_GPIO_Init+0x21c>
 8002f82:	2305      	movs	r3, #5
 8002f84:	e008      	b.n	8002f98 <HAL_GPIO_Init+0x21c>
 8002f86:	2304      	movs	r3, #4
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x21c>
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e004      	b.n	8002f98 <HAL_GPIO_Init+0x21c>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x21c>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x21c>
 8002f96:	2300      	movs	r3, #0
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	f002 0203 	and.w	r2, r2, #3
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	4093      	lsls	r3, r2
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa8:	4935      	ldr	r1, [pc, #212]	; (8003080 <HAL_GPIO_Init+0x304>)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fda:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fe0:	4b2f      	ldr	r3, [pc, #188]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300a:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <HAL_GPIO_Init+0x324>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_GPIO_Init+0x324>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3301      	adds	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	f67f ae96 	bls.w	8002d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	40013800 	.word	0x40013800
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40020800 	.word	0x40020800
 8003090:	40020c00 	.word	0x40020c00
 8003094:	40021000 	.word	0x40021000
 8003098:	40021400 	.word	0x40021400
 800309c:	40021800 	.word	0x40021800
 80030a0:	40013c00 	.word	0x40013c00

080030a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	887b      	ldrh	r3, [r7, #2]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e001      	b.n	80030c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
 80030e0:	4613      	mov	r3, r2
 80030e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e4:	787b      	ldrb	r3, [r7, #1]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f0:	e003      	b.n	80030fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	041a      	lsls	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800311e:	4a05      	ldr	r2, [pc, #20]	; (8003134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f806 	bl	8003138 <HAL_GPIO_EXTI_Callback>
  }
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40013c00 	.word	0x40013c00

08003138 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800314e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003150:	b08f      	sub	sp, #60	; 0x3c
 8003152:	af0a      	add	r7, sp, #40	; 0x28
 8003154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e054      	b.n	800320a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f00a f9ea 	bl	800d554 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2203      	movs	r2, #3
 8003184:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 f9c2 	bl	8007528 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	687e      	ldr	r6, [r7, #4]
 80031ac:	466d      	mov	r5, sp
 80031ae:	f106 0410 	add.w	r4, r6, #16
 80031b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031be:	e885 0003 	stmia.w	r5, {r0, r1}
 80031c2:	1d33      	adds	r3, r6, #4
 80031c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	f004 f93c 	bl	8007444 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 f9b9 	bl	800754a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	687e      	ldr	r6, [r7, #4]
 80031e0:	466d      	mov	r5, sp
 80031e2:	f106 0410 	add.w	r4, r6, #16
 80031e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031f6:	1d33      	adds	r3, r6, #4
 80031f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031fa:	6838      	ldr	r0, [r7, #0]
 80031fc:	f004 facc 	bl	8007798 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003212 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003212:	b590      	push	{r4, r7, lr}
 8003214:	b089      	sub	sp, #36	; 0x24
 8003216:	af04      	add	r7, sp, #16
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	4608      	mov	r0, r1
 800321c:	4611      	mov	r1, r2
 800321e:	461a      	mov	r2, r3
 8003220:	4603      	mov	r3, r0
 8003222:	70fb      	strb	r3, [r7, #3]
 8003224:	460b      	mov	r3, r1
 8003226:	70bb      	strb	r3, [r7, #2]
 8003228:	4613      	mov	r3, r2
 800322a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_HCD_HC_Init+0x28>
 8003236:	2302      	movs	r3, #2
 8003238:	e076      	b.n	8003328 <HAL_HCD_HC_Init+0x116>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	333d      	adds	r3, #61	; 0x3d
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3338      	adds	r3, #56	; 0x38
 8003262:	787a      	ldrb	r2, [r7, #1]
 8003264:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3340      	adds	r3, #64	; 0x40
 8003274:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003276:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	3339      	adds	r3, #57	; 0x39
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	333f      	adds	r3, #63	; 0x3f
 8003298:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800329c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	78ba      	ldrb	r2, [r7, #2]
 80032a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032a6:	b2d0      	uxtb	r0, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	333a      	adds	r3, #58	; 0x3a
 80032b4:	4602      	mov	r2, r0
 80032b6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80032b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da09      	bge.n	80032d4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	333b      	adds	r3, #59	; 0x3b
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e008      	b.n	80032e6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	333b      	adds	r3, #59	; 0x3b
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	333c      	adds	r3, #60	; 0x3c
 80032f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032f8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	787c      	ldrb	r4, [r7, #1]
 8003300:	78ba      	ldrb	r2, [r7, #2]
 8003302:	78f9      	ldrb	r1, [r7, #3]
 8003304:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4623      	mov	r3, r4
 8003316:	f004 fbbb 	bl	8007a90 <USB_HC_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}

08003330 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_HCD_HC_Halt+0x1e>
 800334a:	2302      	movs	r3, #2
 800334c:	e00f      	b.n	800336e <HAL_HCD_HC_Halt+0x3e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f004 fdf7 	bl	8007f52 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	4608      	mov	r0, r1
 8003382:	4611      	mov	r1, r2
 8003384:	461a      	mov	r2, r3
 8003386:	4603      	mov	r3, r0
 8003388:	70fb      	strb	r3, [r7, #3]
 800338a:	460b      	mov	r3, r1
 800338c:	70bb      	strb	r3, [r7, #2]
 800338e:	4613      	mov	r3, r2
 8003390:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	333b      	adds	r3, #59	; 0x3b
 80033a0:	78ba      	ldrb	r2, [r7, #2]
 80033a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	333f      	adds	r3, #63	; 0x3f
 80033b2:	787a      	ldrb	r2, [r7, #1]
 80033b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80033b6:	7c3b      	ldrb	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d112      	bne.n	80033e2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3342      	adds	r3, #66	; 0x42
 80033ca:	2203      	movs	r2, #3
 80033cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	333d      	adds	r3, #61	; 0x3d
 80033dc:	7f3a      	ldrb	r2, [r7, #28]
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e008      	b.n	80033f4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	3342      	adds	r3, #66	; 0x42
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80033f4:	787b      	ldrb	r3, [r7, #1]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	f200 80c6 	bhi.w	8003588 <HAL_HCD_HC_SubmitRequest+0x210>
 80033fc:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80033fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	08003415 	.word	0x08003415
 8003408:	08003575 	.word	0x08003575
 800340c:	08003479 	.word	0x08003479
 8003410:	080034f7 	.word	0x080034f7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003414:	7c3b      	ldrb	r3, [r7, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	f040 80b8 	bne.w	800358c <HAL_HCD_HC_SubmitRequest+0x214>
 800341c:	78bb      	ldrb	r3, [r7, #2]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 80b4 	bne.w	800358c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003424:	8b3b      	ldrh	r3, [r7, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3355      	adds	r3, #85	; 0x55
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3355      	adds	r3, #85	; 0x55
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3342      	adds	r3, #66	; 0x42
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003462:	e093      	b.n	800358c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3342      	adds	r3, #66	; 0x42
 8003472:	2202      	movs	r2, #2
 8003474:	701a      	strb	r2, [r3, #0]
      break;
 8003476:	e089      	b.n	800358c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003478:	78bb      	ldrb	r3, [r7, #2]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11d      	bne.n	80034ba <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3355      	adds	r3, #85	; 0x55
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3342      	adds	r3, #66	; 0x42
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80034a4:	e073      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	212c      	movs	r1, #44	; 0x2c
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	3342      	adds	r3, #66	; 0x42
 80034b4:	2202      	movs	r2, #2
 80034b6:	701a      	strb	r2, [r3, #0]
      break;
 80034b8:	e069      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	3354      	adds	r3, #84	; 0x54
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	3342      	adds	r3, #66	; 0x42
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
      break;
 80034e0:	e055      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	212c      	movs	r1, #44	; 0x2c
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	3342      	adds	r3, #66	; 0x42
 80034f0:	2202      	movs	r2, #2
 80034f2:	701a      	strb	r2, [r3, #0]
      break;
 80034f4:	e04b      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034f6:	78bb      	ldrb	r3, [r7, #2]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11d      	bne.n	8003538 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3355      	adds	r3, #85	; 0x55
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3342      	adds	r3, #66	; 0x42
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003522:	e034      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3342      	adds	r3, #66	; 0x42
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
      break;
 8003536:	e02a      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3354      	adds	r3, #84	; 0x54
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3342      	adds	r3, #66	; 0x42
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
      break;
 800355e:	e016      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	212c      	movs	r1, #44	; 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3342      	adds	r3, #66	; 0x42
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]
      break;
 8003572:	e00c      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3342      	adds	r3, #66	; 0x42
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
      break;
 8003586:	e002      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003588:	bf00      	nop
 800358a:	e000      	b.n	800358e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800358c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	3344      	adds	r3, #68	; 0x44
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	8b3a      	ldrh	r2, [r7, #24]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	202c      	movs	r0, #44	; 0x2c
 80035a8:	fb00 f303 	mul.w	r3, r0, r3
 80035ac:	440b      	add	r3, r1
 80035ae:	334c      	adds	r3, #76	; 0x4c
 80035b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	3360      	adds	r3, #96	; 0x60
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3350      	adds	r3, #80	; 0x50
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	3339      	adds	r3, #57	; 0x39
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3361      	adds	r3, #97	; 0x61
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	222c      	movs	r2, #44	; 0x2c
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	3338      	adds	r3, #56	; 0x38
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	18d1      	adds	r1, r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	f004 fb4a 	bl	8007cac <USB_HC_StartXfer>
 8003618:	4603      	mov	r3, r0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop

08003624 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f004 f869 	bl	8007712 <USB_GetMode>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	f040 80ef 	bne.w	8003826 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f004 f84d 	bl	80076ec <USB_ReadInterrupts>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80e5 	beq.w	8003824 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 f844 	bl	80076ec <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800366a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366e:	d104      	bne.n	800367a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003678:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f004 f834 	bl	80076ec <USB_ReadInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368e:	d104      	bne.n	800369a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003698:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 f824 	bl	80076ec <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ae:	d104      	bne.n	80036ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 f814 	bl	80076ec <USB_ReadInterrupts>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d103      	bne.n	80036d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2202      	movs	r2, #2
 80036d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f004 f806 	bl	80076ec <USB_ReadInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ea:	d115      	bne.n	8003718 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d108      	bne.n	8003718 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f009 ffa2 	bl	800d650 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	4618      	mov	r0, r3
 8003714:	f004 f8f6 	bl	8007904 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f003 ffe5 	bl	80076ec <USB_ReadInterrupts>
 8003722:	4603      	mov	r3, r0
 8003724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800372c:	d102      	bne.n	8003734 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f001 f9ff 	bl	8004b32 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f003 ffd7 	bl	80076ec <USB_ReadInterrupts>
 800373e:	4603      	mov	r3, r0
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b08      	cmp	r3, #8
 8003746:	d106      	bne.n	8003756 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f009 ff65 	bl	800d618 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2208      	movs	r2, #8
 8003754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f003 ffc6 	bl	80076ec <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b10      	cmp	r3, #16
 8003768:	d101      	bne.n	800376e <HAL_HCD_IRQHandler+0x14a>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_HCD_IRQHandler+0x14c>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d012      	beq.n	800379a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0210 	bic.w	r2, r2, #16
 8003782:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f001 f902 	bl	800498e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699a      	ldr	r2, [r3, #24]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0210 	orr.w	r2, r2, #16
 8003798:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 ffa4 	bl	80076ec <USB_ReadInterrupts>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ae:	d13a      	bne.n	8003826 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 fbbb 	bl	8007f30 <USB_HC_ReadInterrupt>
 80037ba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e025      	b.n	800380e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ec:	d106      	bne.n	80037fc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8ab 	bl	8003950 <HCD_HC_IN_IRQHandler>
 80037fa:	e005      	b.n	8003808 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fcc6 	bl	8004194 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3301      	adds	r3, #1
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	429a      	cmp	r2, r3
 8003816:	d3d4      	bcc.n	80037c2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003820:	615a      	str	r2, [r3, #20]
 8003822:	e000      	b.n	8003826 <HAL_HCD_IRQHandler+0x202>
      return;
 8003824:	bf00      	nop
    }
  }
}
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_HCD_Start+0x16>
 800383e:	2302      	movs	r3, #2
 8003840:	e013      	b.n	800386a <HAL_HCD_Start+0x3e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f003 fe59 	bl	8007506 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f004 f8b6 	bl	80079cc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_HCD_Stop+0x16>
 8003884:	2302      	movs	r3, #2
 8003886:	e00d      	b.n	80038a4 <HAL_HCD_Stop+0x32>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f004 fcb5 	bl	8008204 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f004 f85d 	bl	8007978 <USB_ResetPort>
 80038be:	4603      	mov	r3, r0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3360      	adds	r3, #96	; 0x60
 80038e2:	781b      	ldrb	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3350      	adds	r3, #80	; 0x50
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f004 f8a1 	bl	8007a6c <USB_GetCurrentFrame>
 800392a:	4603      	mov	r3, r0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f004 f87c 	bl	8007a3e <USB_GetHostSpeed>
 8003946:	4603      	mov	r3, r0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b04      	cmp	r3, #4
 800397e:	d119      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398c:	461a      	mov	r2, r3
 800398e:	2304      	movs	r3, #4
 8003990:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4413      	add	r3, r2
 800399a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	0151      	lsls	r1, r2, #5
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	440a      	add	r2, r1
 80039a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	60d3      	str	r3, [r2, #12]
 80039b2:	e101      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d12b      	bne.n	8003a24 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3361      	adds	r3, #97	; 0x61
 80039ee:	2207      	movs	r2, #7
 80039f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	0151      	lsls	r1, r2, #5
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	440a      	add	r2, r1
 8003a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 fa98 	bl	8007f52 <USB_HC_Halt>
 8003a22:	e0c9      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d109      	bne.n	8003a4e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a46:	461a      	mov	r2, r3
 8003a48:	2320      	movs	r3, #32
 8003a4a:	6093      	str	r3, [r2, #8]
 8003a4c:	e0b4      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d133      	bne.n	8003acc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3361      	adds	r3, #97	; 0x61
 8003a92:	2205      	movs	r2, #5
 8003a94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f004 fa44 	bl	8007f52 <USB_HC_Halt>
 8003aca:	e075      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae2:	d134      	bne.n	8003b4e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3361      	adds	r3, #97	; 0x61
 8003b12:	2208      	movs	r2, #8
 8003b14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	461a      	mov	r2, r3
 8003b24:	2310      	movs	r3, #16
 8003b26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	461a      	mov	r2, r3
 8003b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 fa03 	bl	8007f52 <USB_HC_Halt>
 8003b4c:	e034      	b.n	8003bb8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d129      	bne.n	8003bb8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b7e:	f043 0302 	orr.w	r3, r3, #2
 8003b82:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3361      	adds	r3, #97	; 0x61
 8003b92:	2206      	movs	r2, #6
 8003b94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 f9d6 	bl	8007f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bce:	d122      	bne.n	8003c16 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bea:	f043 0302 	orr.w	r3, r3, #2
 8003bee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f004 f9a9 	bl	8007f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c12:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c14:	e2ba      	b.n	800418c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	f040 811b 	bne.w	8003e64 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d019      	beq.n	8003c6a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3348      	adds	r3, #72	; 0x48
 8003c44:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	0159      	lsls	r1, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	440b      	add	r3, r1
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c58:	1ad2      	subs	r2, r2, r3
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	202c      	movs	r0, #44	; 0x2c
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	440b      	add	r3, r1
 8003c66:	3350      	adds	r3, #80	; 0x50
 8003c68:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	3361      	adds	r3, #97	; 0x61
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	335c      	adds	r3, #92	; 0x5c
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	333f      	adds	r3, #63	; 0x3f
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	333f      	adds	r3, #63	; 0x3f
 8003cc2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d121      	bne.n	8003d0c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce2:	f043 0302 	orr.w	r3, r3, #2
 8003ce6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f004 f92d 	bl	8007f52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	461a      	mov	r2, r3
 8003d06:	2310      	movs	r3, #16
 8003d08:	6093      	str	r3, [r2, #8]
 8003d0a:	e066      	b.n	8003dda <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	333f      	adds	r3, #63	; 0x3f
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d127      	bne.n	8003d70 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d3e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	212c      	movs	r1, #44	; 0x2c
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3360      	adds	r3, #96	; 0x60
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	b2d9      	uxtb	r1, r3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	202c      	movs	r0, #44	; 0x2c
 8003d5c:	fb00 f303 	mul.w	r3, r0, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3360      	adds	r3, #96	; 0x60
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f009 fc7f 	bl	800d66c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d6e:	e034      	b.n	8003dda <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	333f      	adds	r3, #63	; 0x3f
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d12a      	bne.n	8003dda <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3360      	adds	r3, #96	; 0x60
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3354      	adds	r3, #84	; 0x54
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	f083 0301 	eor.w	r3, r3, #1
 8003daa:	b2d8      	uxtb	r0, r3
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3354      	adds	r3, #84	; 0x54
 8003dba:	4602      	mov	r2, r0
 8003dbc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	b2d9      	uxtb	r1, r3
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	202c      	movs	r0, #44	; 0x2c
 8003dc8:	fb00 f303 	mul.w	r3, r0, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3360      	adds	r3, #96	; 0x60
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f009 fc49 	bl	800d66c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d12b      	bne.n	8003e3a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3348      	adds	r3, #72	; 0x48
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	202c      	movs	r0, #44	; 0x2c
 8003df8:	fb00 f202 	mul.w	r2, r0, r2
 8003dfc:	440a      	add	r2, r1
 8003dfe:	3240      	adds	r2, #64	; 0x40
 8003e00:	8812      	ldrh	r2, [r2, #0]
 8003e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 81be 	beq.w	800418c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3354      	adds	r3, #84	; 0x54
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f083 0301 	eor.w	r3, r3, #1
 8003e24:	b2d8      	uxtb	r0, r3
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	3354      	adds	r3, #84	; 0x54
 8003e34:	4602      	mov	r2, r0
 8003e36:	701a      	strb	r2, [r3, #0]
}
 8003e38:	e1a8      	b.n	800418c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	212c      	movs	r1, #44	; 0x2c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	3354      	adds	r3, #84	; 0x54
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	f083 0301 	eor.w	r3, r3, #1
 8003e4e:	b2d8      	uxtb	r0, r3
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	212c      	movs	r1, #44	; 0x2c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3354      	adds	r3, #84	; 0x54
 8003e5e:	4602      	mov	r2, r0
 8003e60:	701a      	strb	r2, [r3, #0]
}
 8003e62:	e193      	b.n	800418c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	f040 8106 	bne.w	8004088 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e96:	f023 0302 	bic.w	r3, r3, #2
 8003e9a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3361      	adds	r3, #97	; 0x61
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d109      	bne.n	8003ec4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3360      	adds	r3, #96	; 0x60
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e0c9      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	212c      	movs	r1, #44	; 0x2c
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3361      	adds	r3, #97	; 0x61
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d109      	bne.n	8003eec <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3360      	adds	r3, #96	; 0x60
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	e0b5      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3361      	adds	r3, #97	; 0x61
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d009      	beq.n	8003f14 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3361      	adds	r3, #97	; 0x61
 8003f0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d150      	bne.n	8003fb6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	335c      	adds	r3, #92	; 0x5c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	202c      	movs	r0, #44	; 0x2c
 8003f2c:	fb00 f303 	mul.w	r3, r0, r3
 8003f30:	440b      	add	r3, r1
 8003f32:	335c      	adds	r3, #92	; 0x5c
 8003f34:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	335c      	adds	r3, #92	; 0x5c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d912      	bls.n	8003f70 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	335c      	adds	r3, #92	; 0x5c
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	3360      	adds	r3, #96	; 0x60
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f6e:	e073      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3360      	adds	r3, #96	; 0x60
 8003f7e:	2202      	movs	r2, #2
 8003f80:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f98:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fa0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fb4:	e050      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3361      	adds	r3, #97	; 0x61
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d122      	bne.n	8004010 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	212c      	movs	r1, #44	; 0x2c
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3360      	adds	r3, #96	; 0x60
 8003fd8:	2202      	movs	r2, #2
 8003fda:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ff2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ffa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	461a      	mov	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e023      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3361      	adds	r3, #97	; 0x61
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b07      	cmp	r3, #7
 8004022:	d119      	bne.n	8004058 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	335c      	adds	r3, #92	; 0x5c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	202c      	movs	r0, #44	; 0x2c
 800403c:	fb00 f303 	mul.w	r3, r0, r3
 8004040:	440b      	add	r3, r1
 8004042:	335c      	adds	r3, #92	; 0x5c
 8004044:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	3360      	adds	r3, #96	; 0x60
 8004054:	2204      	movs	r2, #4
 8004056:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004064:	461a      	mov	r2, r3
 8004066:	2302      	movs	r3, #2
 8004068:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	b2d9      	uxtb	r1, r3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	202c      	movs	r0, #44	; 0x2c
 8004074:	fb00 f303 	mul.w	r3, r0, r3
 8004078:	4413      	add	r3, r2
 800407a:	3360      	adds	r3, #96	; 0x60
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f009 faf3 	bl	800d66c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004086:	e081      	b.n	800418c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b10      	cmp	r3, #16
 800409c:	d176      	bne.n	800418c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	333f      	adds	r3, #63	; 0x3f
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d121      	bne.n	80040f6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	212c      	movs	r1, #44	; 0x2c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	335c      	adds	r3, #92	; 0x5c
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040de:	f043 0302 	orr.w	r3, r3, #2
 80040e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f003 ff2f 	bl	8007f52 <USB_HC_Halt>
 80040f4:	e041      	b.n	800417a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	333f      	adds	r3, #63	; 0x3f
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	212c      	movs	r1, #44	; 0x2c
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	4413      	add	r3, r2
 8004116:	333f      	adds	r3, #63	; 0x3f
 8004118:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800411a:	2b02      	cmp	r3, #2
 800411c:	d12d      	bne.n	800417a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	212c      	movs	r1, #44	; 0x2c
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	335c      	adds	r3, #92	; 0x5c
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d120      	bne.n	800417a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3361      	adds	r3, #97	; 0x61
 8004146:	2203      	movs	r2, #3
 8004148:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	0151      	lsls	r1, r2, #5
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	440a      	add	r2, r1
 8004160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f003 feec 	bl	8007f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004186:	461a      	mov	r2, r3
 8004188:	2310      	movs	r3, #16
 800418a:	6093      	str	r3, [r2, #8]
}
 800418c:	bf00      	nop
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d119      	bne.n	80041f8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d0:	461a      	mov	r2, r3
 80041d2:	2304      	movs	r3, #4
 80041d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80041f6:	e3c6      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b20      	cmp	r3, #32
 800420c:	d13e      	bne.n	800428c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421a:	461a      	mov	r2, r3
 800421c:	2320      	movs	r3, #32
 800421e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	212c      	movs	r1, #44	; 0x2c
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	4413      	add	r3, r2
 800422c:	333d      	adds	r3, #61	; 0x3d
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	f040 83a8 	bne.w	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	333d      	adds	r3, #61	; 0x3d
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	212c      	movs	r1, #44	; 0x2c
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	4413      	add	r3, r2
 8004254:	3360      	adds	r3, #96	; 0x60
 8004256:	2202      	movs	r2, #2
 8004258:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	440a      	add	r2, r1
 8004270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f003 fe64 	bl	8007f52 <USB_HC_Halt>
}
 800428a:	e37c      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a2:	d122      	bne.n	80042ea <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	0151      	lsls	r1, r2, #5
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	440a      	add	r2, r1
 80042ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042be:	f043 0302 	orr.w	r3, r3, #2
 80042c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 fe3f 	bl	8007f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e0:	461a      	mov	r2, r3
 80042e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e6:	6093      	str	r3, [r2, #8]
}
 80042e8:	e34d      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d150      	bne.n	80043a2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	212c      	movs	r1, #44	; 0x2c
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	4413      	add	r3, r2
 800430c:	335c      	adds	r3, #92	; 0x5c
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4413      	add	r3, r2
 800431a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d111      	bne.n	800434c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	333d      	adds	r3, #61	; 0x3d
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004346:	461a      	mov	r2, r3
 8004348:	2340      	movs	r3, #64	; 0x40
 800434a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	0151      	lsls	r1, r2, #5
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	440a      	add	r2, r1
 8004362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004366:	f043 0302 	orr.w	r3, r3, #2
 800436a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f003 fdeb 	bl	8007f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004388:	461a      	mov	r2, r3
 800438a:	2301      	movs	r3, #1
 800438c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	3361      	adds	r3, #97	; 0x61
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
}
 80043a0:	e2f1      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d13c      	bne.n	8004432 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	3361      	adds	r3, #97	; 0x61
 80043c6:	2204      	movs	r2, #4
 80043c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	333d      	adds	r3, #61	; 0x3d
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	335c      	adds	r3, #92	; 0x5c
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	0151      	lsls	r1, r2, #5
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	440a      	add	r2, r1
 8004404:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f003 fd9a 	bl	8007f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442a:	461a      	mov	r2, r3
 800442c:	2340      	movs	r3, #64	; 0x40
 800442e:	6093      	str	r3, [r2, #8]
}
 8004430:	e2a9      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b08      	cmp	r3, #8
 8004446:	d12a      	bne.n	800449e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004454:	461a      	mov	r2, r3
 8004456:	2308      	movs	r3, #8
 8004458:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	440a      	add	r2, r1
 8004470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004474:	f043 0302 	orr.w	r3, r3, #2
 8004478:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f003 fd64 	bl	8007f52 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	212c      	movs	r1, #44	; 0x2c
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	3361      	adds	r3, #97	; 0x61
 8004498:	2205      	movs	r2, #5
 800449a:	701a      	strb	r2, [r3, #0]
}
 800449c:	e273      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d150      	bne.n	8004556 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	335c      	adds	r3, #92	; 0x5c
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3361      	adds	r3, #97	; 0x61
 80044d4:	2203      	movs	r2, #3
 80044d6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	212c      	movs	r1, #44	; 0x2c
 80044de:	fb01 f303 	mul.w	r3, r1, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	333d      	adds	r3, #61	; 0x3d
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d112      	bne.n	8004512 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	212c      	movs	r1, #44	; 0x2c
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	333c      	adds	r3, #60	; 0x3c
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d108      	bne.n	8004512 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	212c      	movs	r1, #44	; 0x2c
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	4413      	add	r3, r2
 800450c:	333d      	adds	r3, #61	; 0x3d
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	4413      	add	r3, r2
 800451a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	0151      	lsls	r1, r2, #5
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	440a      	add	r2, r1
 8004528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f003 fd08 	bl	8007f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4413      	add	r3, r2
 800454a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454e:	461a      	mov	r2, r3
 8004550:	2310      	movs	r3, #16
 8004552:	6093      	str	r3, [r2, #8]
}
 8004554:	e217      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	4413      	add	r3, r2
 800455e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004568:	2b80      	cmp	r3, #128	; 0x80
 800456a:	d174      	bne.n	8004656 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d121      	bne.n	80045b8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3361      	adds	r3, #97	; 0x61
 8004582:	2206      	movs	r2, #6
 8004584:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4413      	add	r3, r2
 800458e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	440a      	add	r2, r1
 800459c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f003 fcce 	bl	8007f52 <USB_HC_Halt>
 80045b6:	e044      	b.n	8004642 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	335c      	adds	r3, #92	; 0x5c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	202c      	movs	r0, #44	; 0x2c
 80045d0:	fb00 f303 	mul.w	r3, r0, r3
 80045d4:	440b      	add	r3, r1
 80045d6:	335c      	adds	r3, #92	; 0x5c
 80045d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	212c      	movs	r1, #44	; 0x2c
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	4413      	add	r3, r2
 80045e6:	335c      	adds	r3, #92	; 0x5c
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d920      	bls.n	8004630 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	335c      	adds	r3, #92	; 0x5c
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3360      	adds	r3, #96	; 0x60
 800460e:	2204      	movs	r2, #4
 8004610:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	b2d9      	uxtb	r1, r3
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	202c      	movs	r0, #44	; 0x2c
 800461c:	fb00 f303 	mul.w	r3, r0, r3
 8004620:	4413      	add	r3, r2
 8004622:	3360      	adds	r3, #96	; 0x60
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f009 f81f 	bl	800d66c <HAL_HCD_HC_NotifyURBChange_Callback>
 800462e:	e008      	b.n	8004642 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3360      	adds	r3, #96	; 0x60
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	6093      	str	r3, [r2, #8]
}
 8004654:	e197      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466c:	d134      	bne.n	80046d8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	4413      	add	r3, r2
 8004676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	440a      	add	r2, r1
 8004684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f003 fc5a 	bl	8007f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	461a      	mov	r2, r3
 80046ac:	2310      	movs	r3, #16
 80046ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	461a      	mov	r2, r3
 80046be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	212c      	movs	r1, #44	; 0x2c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	3361      	adds	r3, #97	; 0x61
 80046d2:	2208      	movs	r2, #8
 80046d4:	701a      	strb	r2, [r3, #0]
}
 80046d6:	e156      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	f040 814b 	bne.w	8004986 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	440a      	add	r2, r1
 8004706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800470a:	f023 0302 	bic.w	r3, r3, #2
 800470e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3361      	adds	r3, #97	; 0x61
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d179      	bne.n	8004818 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3360      	adds	r3, #96	; 0x60
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	212c      	movs	r1, #44	; 0x2c
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	333f      	adds	r3, #63	; 0x3f
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d00a      	beq.n	8004760 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	333f      	adds	r3, #63	; 0x3f
 8004758:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800475a:	2b03      	cmp	r3, #3
 800475c:	f040 80fc 	bne.w	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d142      	bne.n	80047ee <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	334c      	adds	r3, #76	; 0x4c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80ed 	beq.w	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	212c      	movs	r1, #44	; 0x2c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	334c      	adds	r3, #76	; 0x4c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	202c      	movs	r0, #44	; 0x2c
 8004794:	fb00 f202 	mul.w	r2, r0, r2
 8004798:	440a      	add	r2, r1
 800479a:	3240      	adds	r2, #64	; 0x40
 800479c:	8812      	ldrh	r2, [r2, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	3b01      	subs	r3, #1
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	202c      	movs	r0, #44	; 0x2c
 80047a8:	fb00 f202 	mul.w	r2, r0, r2
 80047ac:	440a      	add	r2, r1
 80047ae:	3240      	adds	r2, #64	; 0x40
 80047b0:	8812      	ldrh	r2, [r2, #0]
 80047b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80ca 	beq.w	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	212c      	movs	r1, #44	; 0x2c
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	3355      	adds	r3, #85	; 0x55
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f083 0301 	eor.w	r3, r3, #1
 80047d8:	b2d8      	uxtb	r0, r3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	212c      	movs	r1, #44	; 0x2c
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	3355      	adds	r3, #85	; 0x55
 80047e8:	4602      	mov	r2, r0
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e0b4      	b.n	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	212c      	movs	r1, #44	; 0x2c
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	3355      	adds	r3, #85	; 0x55
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	f083 0301 	eor.w	r3, r3, #1
 8004802:	b2d8      	uxtb	r0, r3
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	212c      	movs	r1, #44	; 0x2c
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	4413      	add	r3, r2
 8004810:	3355      	adds	r3, #85	; 0x55
 8004812:	4602      	mov	r2, r0
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e09f      	b.n	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	212c      	movs	r1, #44	; 0x2c
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	4413      	add	r3, r2
 8004824:	3361      	adds	r3, #97	; 0x61
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d109      	bne.n	8004840 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	212c      	movs	r1, #44	; 0x2c
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	4413      	add	r3, r2
 8004838:	3360      	adds	r3, #96	; 0x60
 800483a:	2202      	movs	r2, #2
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e08b      	b.n	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	212c      	movs	r1, #44	; 0x2c
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	4413      	add	r3, r2
 800484c:	3361      	adds	r3, #97	; 0x61
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d109      	bne.n	8004868 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3360      	adds	r3, #96	; 0x60
 8004862:	2202      	movs	r2, #2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e077      	b.n	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	3361      	adds	r3, #97	; 0x61
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b05      	cmp	r3, #5
 800487a:	d109      	bne.n	8004890 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	212c      	movs	r1, #44	; 0x2c
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	4413      	add	r3, r2
 8004888:	3360      	adds	r3, #96	; 0x60
 800488a:	2205      	movs	r2, #5
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e063      	b.n	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	3361      	adds	r3, #97	; 0x61
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b06      	cmp	r3, #6
 80048a2:	d009      	beq.n	80048b8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	3361      	adds	r3, #97	; 0x61
 80048b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d14f      	bne.n	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	212c      	movs	r1, #44	; 0x2c
 80048be:	fb01 f303 	mul.w	r3, r1, r3
 80048c2:	4413      	add	r3, r2
 80048c4:	335c      	adds	r3, #92	; 0x5c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	202c      	movs	r0, #44	; 0x2c
 80048d0:	fb00 f303 	mul.w	r3, r0, r3
 80048d4:	440b      	add	r3, r1
 80048d6:	335c      	adds	r3, #92	; 0x5c
 80048d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	335c      	adds	r3, #92	; 0x5c
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d912      	bls.n	8004914 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	212c      	movs	r1, #44	; 0x2c
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	335c      	adds	r3, #92	; 0x5c
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	212c      	movs	r1, #44	; 0x2c
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	4413      	add	r3, r2
 800490c:	3360      	adds	r3, #96	; 0x60
 800490e:	2204      	movs	r2, #4
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e021      	b.n	8004958 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	212c      	movs	r1, #44	; 0x2c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	3360      	adds	r3, #96	; 0x60
 8004922:	2202      	movs	r2, #2
 8004924:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800493c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004944:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	461a      	mov	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004964:	461a      	mov	r2, r3
 8004966:	2302      	movs	r3, #2
 8004968:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	b2d9      	uxtb	r1, r3
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	202c      	movs	r0, #44	; 0x2c
 8004974:	fb00 f303 	mul.w	r3, r0, r3
 8004978:	4413      	add	r3, r2
 800497a:	3360      	adds	r3, #96	; 0x60
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f008 fe73 	bl	800d66c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004986:	bf00      	nop
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b08a      	sub	sp, #40	; 0x28
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	0c5b      	lsrs	r3, r3, #17
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d004      	beq.n	80049d4 <HCD_RXQLVL_IRQHandler+0x46>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	f000 80a9 	beq.w	8004b24 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049d2:	e0aa      	b.n	8004b2a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80a6 	beq.w	8004b28 <HCD_RXQLVL_IRQHandler+0x19a>
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	212c      	movs	r1, #44	; 0x2c
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	3344      	adds	r3, #68	; 0x44
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 809b 	beq.w	8004b28 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	212c      	movs	r1, #44	; 0x2c
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	3350      	adds	r3, #80	; 0x50
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	441a      	add	r2, r3
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	202c      	movs	r0, #44	; 0x2c
 8004a0c:	fb00 f303 	mul.w	r3, r0, r3
 8004a10:	440b      	add	r3, r1
 8004a12:	334c      	adds	r3, #76	; 0x4c
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d87a      	bhi.n	8004b10 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	212c      	movs	r1, #44	; 0x2c
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	3344      	adds	r3, #68	; 0x44
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	b292      	uxth	r2, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	f002 fe31 	bl	800769a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	212c      	movs	r1, #44	; 0x2c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	3344      	adds	r3, #68	; 0x44
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	441a      	add	r2, r3
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	202c      	movs	r0, #44	; 0x2c
 8004a52:	fb00 f303 	mul.w	r3, r0, r3
 8004a56:	440b      	add	r3, r1
 8004a58:	3344      	adds	r3, #68	; 0x44
 8004a5a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3350      	adds	r3, #80	; 0x50
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	441a      	add	r2, r3
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	202c      	movs	r0, #44	; 0x2c
 8004a76:	fb00 f303 	mul.w	r3, r0, r3
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3350      	adds	r3, #80	; 0x50
 8004a7e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	0cdb      	lsrs	r3, r3, #19
 8004a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a94:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	212c      	movs	r1, #44	; 0x2c
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3340      	adds	r3, #64	; 0x40
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d13c      	bne.n	8004b28 <HCD_RXQLVL_IRQHandler+0x19a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d039      	beq.n	8004b28 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ad2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	3354      	adds	r3, #84	; 0x54
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	f083 0301 	eor.w	r3, r3, #1
 8004afa:	b2d8      	uxtb	r0, r3
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	212c      	movs	r1, #44	; 0x2c
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	4413      	add	r3, r2
 8004b08:	3354      	adds	r3, #84	; 0x54
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	701a      	strb	r2, [r3, #0]
      break;
 8004b0e:	e00b      	b.n	8004b28 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	212c      	movs	r1, #44	; 0x2c
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3360      	adds	r3, #96	; 0x60
 8004b1e:	2204      	movs	r2, #4
 8004b20:	701a      	strb	r2, [r3, #0]
      break;
 8004b22:	e001      	b.n	8004b28 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004b28:	bf00      	nop
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3728      	adds	r7, #40	; 0x28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b5e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d10b      	bne.n	8004b82 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d102      	bne.n	8004b7a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f008 fd5d 	bl	800d634 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d132      	bne.n	8004bf2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f043 0308 	orr.w	r3, r3, #8
 8004b92:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d126      	bne.n	8004bec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d113      	bne.n	8004bce <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bb0:	d106      	bne.n	8004bc0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f002 fea3 	bl	8007904 <USB_InitFSLSPClkSel>
 8004bbe:	e011      	b.n	8004be4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f002 fe9c 	bl	8007904 <USB_InitFSLSPClkSel>
 8004bcc:	e00a      	b.n	8004be4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d106      	bne.n	8004be4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004be2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f008 fd53 	bl	800d690 <HAL_HCD_PortEnabled_Callback>
 8004bea:	e002      	b.n	8004bf2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f008 fd5d 	bl	800d6ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d103      	bne.n	8004c04 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f043 0320 	orr.w	r3, r3, #32
 8004c02:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e154      	b.n	8004ed4 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a98      	ldr	r2, [pc, #608]	; (8004ea4 <HAL_I2S_Init+0x28c>)
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fc fe1b 	bl	8001880 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c60:	f023 030f 	bic.w	r3, r3, #15
 8004c64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d06f      	beq.n	8004d56 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c7e:	2310      	movs	r3, #16
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e001      	b.n	8004c88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c84:	2320      	movs	r3, #32
 8004c86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d802      	bhi.n	8004c96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a83      	ldr	r2, [pc, #524]	; (8004ea8 <HAL_I2S_Init+0x290>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_I2S_Init+0x92>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a81      	ldr	r2, [pc, #516]	; (8004eac <HAL_I2S_Init+0x294>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d104      	bne.n	8004cb4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004caa:	2001      	movs	r0, #1
 8004cac:	f001 f9c6 	bl	800603c <HAL_RCCEx_GetPeriphCLKFreq>
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	e003      	b.n	8004cbc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8004cb4:	2002      	movs	r0, #2
 8004cb6:	f001 f9c1 	bl	800603c <HAL_RCCEx_GetPeriphCLKFreq>
 8004cba:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc4:	d125      	bne.n	8004d12 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d010      	beq.n	8004cf0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	3305      	adds	r3, #5
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	e01f      	b.n	8004d30 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	461a      	mov	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	3305      	adds	r3, #5
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e00e      	b.n	8004d30 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	3305      	adds	r3, #5
 8004d2e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4a5f      	ldr	r2, [pc, #380]	; (8004eb0 <HAL_I2S_Init+0x298>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	08db      	lsrs	r3, r3, #3
 8004d3a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	e003      	b.n	8004d5e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d56:	2302      	movs	r3, #2
 8004d58:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d902      	bls.n	8004d6a <HAL_I2S_Init+0x152>
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2bff      	cmp	r3, #255	; 0xff
 8004d68:	d907      	bls.n	8004d7a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	f043 0210 	orr.w	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e0ac      	b.n	8004ed4 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	ea42 0103 	orr.w	r1, r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d98:	f023 030f 	bic.w	r3, r3, #15
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6851      	ldr	r1, [r2, #4]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6892      	ldr	r2, [r2, #8]
 8004da4:	4311      	orrs	r1, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68d2      	ldr	r2, [r2, #12]
 8004daa:	4311      	orrs	r1, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6992      	ldr	r2, [r2, #24]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dbc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b30      	cmp	r3, #48	; 0x30
 8004dc4:	d003      	beq.n	8004dce <HAL_I2S_Init+0x1b6>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2bb0      	cmp	r3, #176	; 0xb0
 8004dcc:	d107      	bne.n	8004dde <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ddc:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d16e      	bne.n	8004ec4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a32      	ldr	r2, [pc, #200]	; (8004eb4 <HAL_I2S_Init+0x29c>)
 8004dea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2d      	ldr	r2, [pc, #180]	; (8004ea8 <HAL_I2S_Init+0x290>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <HAL_I2S_Init+0x1e2>
 8004df6:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <HAL_I2S_Init+0x2a0>)
 8004df8:	e001      	b.n	8004dfe <HAL_I2S_Init+0x1e6>
 8004dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	4928      	ldr	r1, [pc, #160]	; (8004ea8 <HAL_I2S_Init+0x290>)
 8004e06:	428a      	cmp	r2, r1
 8004e08:	d101      	bne.n	8004e0e <HAL_I2S_Init+0x1f6>
 8004e0a:	4a2b      	ldr	r2, [pc, #172]	; (8004eb8 <HAL_I2S_Init+0x2a0>)
 8004e0c:	e001      	b.n	8004e12 <HAL_I2S_Init+0x1fa>
 8004e0e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004e12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e16:	f023 030f 	bic.w	r3, r3, #15
 8004e1a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <HAL_I2S_Init+0x290>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_I2S_Init+0x212>
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <HAL_I2S_Init+0x2a0>)
 8004e28:	e001      	b.n	8004e2e <HAL_I2S_Init+0x216>
 8004e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2e:	2202      	movs	r2, #2
 8004e30:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <HAL_I2S_Init+0x290>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <HAL_I2S_Init+0x228>
 8004e3c:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <HAL_I2S_Init+0x2a0>)
 8004e3e:	e001      	b.n	8004e44 <HAL_I2S_Init+0x22c>
 8004e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e50:	d003      	beq.n	8004e5a <HAL_I2S_Init+0x242>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d103      	bne.n	8004e62 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e001      	b.n	8004e66 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e84:	4313      	orrs	r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	897b      	ldrh	r3, [r7, #10]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e92:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a03      	ldr	r2, [pc, #12]	; (8004ea8 <HAL_I2S_Init+0x290>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10e      	bne.n	8004ebc <HAL_I2S_Init+0x2a4>
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <HAL_I2S_Init+0x2a0>)
 8004ea0:	e00e      	b.n	8004ec0 <HAL_I2S_Init+0x2a8>
 8004ea2:	bf00      	nop
 8004ea4:	08004fd3 	.word	0x08004fd3
 8004ea8:	40003800 	.word	0x40003800
 8004eac:	40003c00 	.word	0x40003c00
 8004eb0:	cccccccd 	.word	0xcccccccd
 8004eb4:	080050e9 	.word	0x080050e9
 8004eb8:	40003400 	.word	0x40003400
 8004ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ec0:	897a      	ldrh	r2, [r7, #10]
 8004ec2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10e      	bne.n	8004f6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ffb8 	bl	8004edc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	b292      	uxth	r2, r2
 8004f88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	1c9a      	adds	r2, r3, #2
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10e      	bne.n	8004fca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff93 	bl	8004ef0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d13a      	bne.n	8005064 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d109      	bne.n	800500c <I2S_IRQHandler+0x3a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d102      	bne.n	800500c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ffb4 	bl	8004f74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d126      	bne.n	8005064 <I2S_IRQHandler+0x92>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b20      	cmp	r3, #32
 8005022:	d11f      	bne.n	8005064 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005032:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	f043 0202 	orr.w	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff ff50 	bl	8004f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d136      	bne.n	80050de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b02      	cmp	r3, #2
 8005078:	d109      	bne.n	800508e <I2S_IRQHandler+0xbc>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d102      	bne.n	800508e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff45 	bl	8004f18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b08      	cmp	r3, #8
 8005096:	d122      	bne.n	80050de <I2S_IRQHandler+0x10c>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d11b      	bne.n	80050de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	f043 0204 	orr.w	r2, r3, #4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff ff13 	bl	8004f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4aa2      	ldr	r2, [pc, #648]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005102:	4ba2      	ldr	r3, [pc, #648]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005104:	e001      	b.n	800510a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a9b      	ldr	r2, [pc, #620]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d101      	bne.n	8005124 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005120:	4b9a      	ldr	r3, [pc, #616]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005122:	e001      	b.n	8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005134:	d004      	beq.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 8099 	bne.w	8005272 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b02      	cmp	r3, #2
 8005148:	d107      	bne.n	800515a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f925 	bl	80053a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9c8 	bl	8005504 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d13a      	bne.n	80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d035      	beq.n	80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a7e      	ldr	r2, [pc, #504]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d101      	bne.n	8005196 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005192:	4b7e      	ldr	r3, [pc, #504]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005194:	e001      	b.n	800519a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4979      	ldr	r1, [pc, #484]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051a2:	428b      	cmp	r3, r1
 80051a4:	d101      	bne.n	80051aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80051a6:	4b79      	ldr	r3, [pc, #484]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051a8:	e001      	b.n	80051ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80051aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	f043 0202 	orr.w	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fe88 	bl	8004f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	f040 80be 	bne.w	800537c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80b8 	beq.w	800537c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800521a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a59      	ldr	r2, [pc, #356]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005226:	4b59      	ldr	r3, [pc, #356]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005228:	e001      	b.n	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800522a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4954      	ldr	r1, [pc, #336]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005236:	428b      	cmp	r3, r1
 8005238:	d101      	bne.n	800523e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800523a:	4b54      	ldr	r3, [pc, #336]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800523c:	e001      	b.n	8005242 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800523e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005242:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005246:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f043 0204 	orr.w	r2, r3, #4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fe4a 	bl	8004f04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005270:	e084      	b.n	800537c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b02      	cmp	r3, #2
 800527a:	d107      	bne.n	800528c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8be 	bl	8005408 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d107      	bne.n	80052a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f8fd 	bl	80054a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d12f      	bne.n	8005310 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d02a      	beq.n	8005310 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2e      	ldr	r2, [pc, #184]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d101      	bne.n	80052d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80052d4:	4b2d      	ldr	r3, [pc, #180]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052d6:	e001      	b.n	80052dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80052d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4929      	ldr	r1, [pc, #164]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052e4:	428b      	cmp	r3, r1
 80052e6:	d101      	bne.n	80052ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80052e8:	4b28      	ldr	r3, [pc, #160]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052ea:	e001      	b.n	80052f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80052ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fdfa 	bl	8004f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b08      	cmp	r3, #8
 8005318:	d131      	bne.n	800537e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02c      	beq.n	800537e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a17      	ldr	r2, [pc, #92]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d101      	bne.n	8005332 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005330:	e001      	b.n	8005336 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4912      	ldr	r1, [pc, #72]	; (8005388 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800533e:	428b      	cmp	r3, r1
 8005340:	d101      	bne.n	8005346 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005344:	e001      	b.n	800534a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800534a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800534e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800535e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	f043 0204 	orr.w	r2, r3, #4
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fdc5 	bl	8004f04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800537a:	e000      	b.n	800537e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800537c:	bf00      	nop
}
 800537e:	bf00      	nop
 8005380:	3720      	adds	r7, #32
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40003800 	.word	0x40003800
 800538c:	40003400 	.word	0x40003400

08005390 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	1c99      	adds	r1, r3, #2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6251      	str	r1, [r2, #36]	; 0x24
 80053b6:	881a      	ldrh	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d113      	bne.n	80053fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ffc9 	bl	8005390 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	1c99      	adds	r1, r3, #2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6251      	str	r1, [r2, #36]	; 0x24
 800541a:	8819      	ldrh	r1, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <I2SEx_TxISR_I2SExt+0x90>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <I2SEx_TxISR_I2SExt+0x22>
 8005426:	4b1d      	ldr	r3, [pc, #116]	; (800549c <I2SEx_TxISR_I2SExt+0x94>)
 8005428:	e001      	b.n	800542e <I2SEx_TxISR_I2SExt+0x26>
 800542a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800542e:	460a      	mov	r2, r1
 8005430:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d121      	bne.n	800548e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a12      	ldr	r2, [pc, #72]	; (8005498 <I2SEx_TxISR_I2SExt+0x90>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <I2SEx_TxISR_I2SExt+0x50>
 8005454:	4b11      	ldr	r3, [pc, #68]	; (800549c <I2SEx_TxISR_I2SExt+0x94>)
 8005456:	e001      	b.n	800545c <I2SEx_TxISR_I2SExt+0x54>
 8005458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	490d      	ldr	r1, [pc, #52]	; (8005498 <I2SEx_TxISR_I2SExt+0x90>)
 8005464:	428b      	cmp	r3, r1
 8005466:	d101      	bne.n	800546c <I2SEx_TxISR_I2SExt+0x64>
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <I2SEx_TxISR_I2SExt+0x94>)
 800546a:	e001      	b.n	8005470 <I2SEx_TxISR_I2SExt+0x68>
 800546c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005470:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005474:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff ff81 	bl	8005390 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40003800 	.word	0x40003800
 800549c:	40003400 	.word	0x40003400

080054a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68d8      	ldr	r0, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	1c99      	adds	r1, r3, #2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80054b8:	b282      	uxth	r2, r0
 80054ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d113      	bne.n	80054fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff ff4a 	bl	8005390 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a20      	ldr	r2, [pc, #128]	; (8005594 <I2SEx_RxISR_I2SExt+0x90>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <I2SEx_RxISR_I2SExt+0x16>
 8005516:	4b20      	ldr	r3, [pc, #128]	; (8005598 <I2SEx_RxISR_I2SExt+0x94>)
 8005518:	e001      	b.n	800551e <I2SEx_RxISR_I2SExt+0x1a>
 800551a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800551e:	68d8      	ldr	r0, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	1c99      	adds	r1, r3, #2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	62d1      	str	r1, [r2, #44]	; 0x2c
 800552a:	b282      	uxth	r2, r0
 800552c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d121      	bne.n	800558a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a12      	ldr	r2, [pc, #72]	; (8005594 <I2SEx_RxISR_I2SExt+0x90>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <I2SEx_RxISR_I2SExt+0x50>
 8005550:	4b11      	ldr	r3, [pc, #68]	; (8005598 <I2SEx_RxISR_I2SExt+0x94>)
 8005552:	e001      	b.n	8005558 <I2SEx_RxISR_I2SExt+0x54>
 8005554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	490d      	ldr	r1, [pc, #52]	; (8005594 <I2SEx_RxISR_I2SExt+0x90>)
 8005560:	428b      	cmp	r3, r1
 8005562:	d101      	bne.n	8005568 <I2SEx_RxISR_I2SExt+0x64>
 8005564:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <I2SEx_RxISR_I2SExt+0x94>)
 8005566:	e001      	b.n	800556c <I2SEx_RxISR_I2SExt+0x68>
 8005568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800556c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005570:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ff03 	bl	8005390 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40003800 	.word	0x40003800
 8005598:	40003400 	.word	0x40003400

0800559c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80055a4:	f7fc fd58 	bl	8002058 <HAL_GetTick>
 80055a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e069      	b.n	8005688 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fc fa13 	bl	80019f4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80055ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f85e 	bl	8005694 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	021a      	lsls	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	2120      	movs	r1, #32
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f856 	bl	80056b0 <QSPI_WaitFlagStateUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005608:	7afb      	ldrb	r3, [r7, #11]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d137      	bne.n	800567e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005618:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6852      	ldr	r2, [r2, #4]
 8005620:	0611      	lsls	r1, r2, #24
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68d2      	ldr	r2, [r2, #12]
 8005626:	4311      	orrs	r1, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	69d2      	ldr	r2, [r2, #28]
 800562c:	4311      	orrs	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6a12      	ldr	r2, [r2, #32]
 8005632:	4311      	orrs	r1, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	430b      	orrs	r3, r1
 800563a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	4b13      	ldr	r3, [pc, #76]	; (8005690 <HAL_QSPI_Init+0xf4>)
 8005644:	4013      	ands	r3, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6912      	ldr	r2, [r2, #16]
 800564a:	0411      	lsls	r1, r2, #16
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6952      	ldr	r2, [r2, #20]
 8005650:	4311      	orrs	r1, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6992      	ldr	r2, [r2, #24]
 8005656:	4311      	orrs	r1, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	430b      	orrs	r3, r1
 800565e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005686:	7afb      	ldrb	r3, [r7, #11]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	ffe0f8fe 	.word	0xffe0f8fe

08005694 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	4613      	mov	r3, r2
 80056be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80056c0:	e01a      	b.n	80056f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c8:	d016      	beq.n	80056f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ca:	f7fc fcc5 	bl	8002058 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d302      	bcc.n	80056e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2204      	movs	r2, #4
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	f043 0201 	orr.w	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e00e      	b.n	8005716 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf14      	ite	ne
 8005706:	2301      	movne	r3, #1
 8005708:	2300      	moveq	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	429a      	cmp	r2, r3
 8005712:	d1d6      	bne.n	80056c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0cc      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005734:	4b68      	ldr	r3, [pc, #416]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d90c      	bls.n	800575c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005742:	4b65      	ldr	r3, [pc, #404]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800574a:	4b63      	ldr	r3, [pc, #396]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d001      	beq.n	800575c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0b8      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d020      	beq.n	80057aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005774:	4b59      	ldr	r3, [pc, #356]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a58      	ldr	r2, [pc, #352]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800577e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800578c:	4b53      	ldr	r3, [pc, #332]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4a52      	ldr	r2, [pc, #328]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005798:	4b50      	ldr	r3, [pc, #320]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	494d      	ldr	r1, [pc, #308]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d044      	beq.n	8005840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d119      	bne.n	80057fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e07f      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d003      	beq.n	80057de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d107      	bne.n	80057ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057de:	4b3f      	ldr	r3, [pc, #252]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e06f      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e067      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 0203 	bic.w	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	4934      	ldr	r1, [pc, #208]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	4313      	orrs	r3, r2
 800580e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005810:	f7fc fc22 	bl	8002058 <HAL_GetTick>
 8005814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	e00a      	b.n	800582e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005818:	f7fc fc1e 	bl	8002058 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	; 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e04f      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582e:	4b2b      	ldr	r3, [pc, #172]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 020c 	and.w	r2, r3, #12
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	429a      	cmp	r2, r3
 800583e:	d1eb      	bne.n	8005818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005840:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d20c      	bcs.n	8005868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584e:	4b22      	ldr	r3, [pc, #136]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005856:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e032      	b.n	80058ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005874:	4b19      	ldr	r3, [pc, #100]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4916      	ldr	r1, [pc, #88]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	490e      	ldr	r1, [pc, #56]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058a6:	f000 f821 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 80058aa:	4602      	mov	r2, r0
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	490a      	ldr	r1, [pc, #40]	; (80058e0 <HAL_RCC_ClockConfig+0x1c0>)
 80058b8:	5ccb      	ldrb	r3, [r1, r3]
 80058ba:	fa22 f303 	lsr.w	r3, r2, r3
 80058be:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <HAL_RCC_ClockConfig+0x1c4>)
 80058c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <HAL_RCC_ClockConfig+0x1c8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fc fa56 	bl	8001d78 <HAL_InitTick>

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40023c00 	.word	0x40023c00
 80058dc:	40023800 	.word	0x40023800
 80058e0:	0800de4c 	.word	0x0800de4c
 80058e4:	20000000 	.word	0x20000000
 80058e8:	20000004 	.word	0x20000004

080058ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ec:	b5b0      	push	{r4, r5, r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058f2:	2100      	movs	r1, #0
 80058f4:	6079      	str	r1, [r7, #4]
 80058f6:	2100      	movs	r1, #0
 80058f8:	60f9      	str	r1, [r7, #12]
 80058fa:	2100      	movs	r1, #0
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80058fe:	2100      	movs	r1, #0
 8005900:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005902:	4952      	ldr	r1, [pc, #328]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005904:	6889      	ldr	r1, [r1, #8]
 8005906:	f001 010c 	and.w	r1, r1, #12
 800590a:	2908      	cmp	r1, #8
 800590c:	d00d      	beq.n	800592a <HAL_RCC_GetSysClockFreq+0x3e>
 800590e:	2908      	cmp	r1, #8
 8005910:	f200 8094 	bhi.w	8005a3c <HAL_RCC_GetSysClockFreq+0x150>
 8005914:	2900      	cmp	r1, #0
 8005916:	d002      	beq.n	800591e <HAL_RCC_GetSysClockFreq+0x32>
 8005918:	2904      	cmp	r1, #4
 800591a:	d003      	beq.n	8005924 <HAL_RCC_GetSysClockFreq+0x38>
 800591c:	e08e      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800591e:	4b4c      	ldr	r3, [pc, #304]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x164>)
 8005920:	60bb      	str	r3, [r7, #8]
       break;
 8005922:	e08e      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005924:	4b4b      	ldr	r3, [pc, #300]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x168>)
 8005926:	60bb      	str	r3, [r7, #8]
      break;
 8005928:	e08b      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800592a:	4948      	ldr	r1, [pc, #288]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x160>)
 800592c:	6849      	ldr	r1, [r1, #4]
 800592e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005932:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005934:	4945      	ldr	r1, [pc, #276]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005936:	6849      	ldr	r1, [r1, #4]
 8005938:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800593c:	2900      	cmp	r1, #0
 800593e:	d024      	beq.n	800598a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005940:	4942      	ldr	r1, [pc, #264]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005942:	6849      	ldr	r1, [r1, #4]
 8005944:	0989      	lsrs	r1, r1, #6
 8005946:	4608      	mov	r0, r1
 8005948:	f04f 0100 	mov.w	r1, #0
 800594c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005950:	f04f 0500 	mov.w	r5, #0
 8005954:	ea00 0204 	and.w	r2, r0, r4
 8005958:	ea01 0305 	and.w	r3, r1, r5
 800595c:	493d      	ldr	r1, [pc, #244]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x168>)
 800595e:	fb01 f003 	mul.w	r0, r1, r3
 8005962:	2100      	movs	r1, #0
 8005964:	fb01 f102 	mul.w	r1, r1, r2
 8005968:	1844      	adds	r4, r0, r1
 800596a:	493a      	ldr	r1, [pc, #232]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x168>)
 800596c:	fba2 0101 	umull	r0, r1, r2, r1
 8005970:	1863      	adds	r3, r4, r1
 8005972:	4619      	mov	r1, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	461a      	mov	r2, r3
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	f7fa fc50 	bl	8000220 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4613      	mov	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e04a      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598a:	4b30      	ldr	r3, [pc, #192]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x160>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	461a      	mov	r2, r3
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	f240 10ff 	movw	r0, #511	; 0x1ff
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	ea02 0400 	and.w	r4, r2, r0
 80059a2:	ea03 0501 	and.w	r5, r3, r1
 80059a6:	4620      	mov	r0, r4
 80059a8:	4629      	mov	r1, r5
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	014b      	lsls	r3, r1, #5
 80059b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059b8:	0142      	lsls	r2, r0, #5
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	1b00      	subs	r0, r0, r4
 80059c0:	eb61 0105 	sbc.w	r1, r1, r5
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	018b      	lsls	r3, r1, #6
 80059ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059d2:	0182      	lsls	r2, r0, #6
 80059d4:	1a12      	subs	r2, r2, r0
 80059d6:	eb63 0301 	sbc.w	r3, r3, r1
 80059da:	f04f 0000 	mov.w	r0, #0
 80059de:	f04f 0100 	mov.w	r1, #0
 80059e2:	00d9      	lsls	r1, r3, #3
 80059e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059e8:	00d0      	lsls	r0, r2, #3
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	1912      	adds	r2, r2, r4
 80059f0:	eb45 0303 	adc.w	r3, r5, r3
 80059f4:	f04f 0000 	mov.w	r0, #0
 80059f8:	f04f 0100 	mov.w	r1, #0
 80059fc:	0299      	lsls	r1, r3, #10
 80059fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a02:	0290      	lsls	r0, r2, #10
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	f7fa fc04 	bl	8000220 <__aeabi_uldivmod>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a20:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	60bb      	str	r3, [r7, #8]
      break;
 8005a3a:	e002      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a3e:	60bb      	str	r3, [r7, #8]
      break;
 8005a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a42:	68bb      	ldr	r3, [r7, #8]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	017d7840 	.word	0x017d7840

08005a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000000 	.word	0x20000000

08005a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a74:	f7ff fff0 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0a9b      	lsrs	r3, r3, #10
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4903      	ldr	r1, [pc, #12]	; (8005a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40023800 	.word	0x40023800
 8005a94:	0800de5c 	.word	0x0800de5c

08005a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a9c:	f7ff ffdc 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	0b5b      	lsrs	r3, r3, #13
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	4903      	ldr	r1, [pc, #12]	; (8005abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aae:	5ccb      	ldrb	r3, [r1, r3]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	0800de5c 	.word	0x0800de5c

08005ac0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	220f      	movs	r2, #15
 8005ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ad0:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0203 	and.w	r2, r3, #3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <HAL_RCC_GetClockConfig+0x5c>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <HAL_RCC_GetClockConfig+0x5c>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	08db      	lsrs	r3, r3, #3
 8005afa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <HAL_RCC_GetClockConfig+0x60>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0207 	and.w	r2, r3, #7
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	601a      	str	r2, [r3, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40023c00 	.word	0x40023c00

08005b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d010      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005b48:	4b7a      	ldr	r3, [pc, #488]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	4977      	ldr	r1, [pc, #476]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8005b66:	2301      	movs	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d010      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005b76:	4b6f      	ldr	r3, [pc, #444]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b7c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	496b      	ldr	r1, [pc, #428]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005b94:	2301      	movs	r3, #1
 8005b96:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d022      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005ba4:	4b63      	ldr	r3, [pc, #396]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb2:	4960      	ldr	r1, [pc, #384]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bce:	d10c      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005bd0:	4b58      	ldr	r3, [pc, #352]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	4954      	ldr	r1, [pc, #336]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d022      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005bf6:	4b4f      	ldr	r3, [pc, #316]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c04:	494b      	ldr	r1, [pc, #300]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005c14:	2301      	movs	r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c20:	d10c      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005c22:	4b44      	ldr	r3, [pc, #272]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	493f      	ldr	r1, [pc, #252]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 808a 	beq.w	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	4a38      	ldr	r2, [pc, #224]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c58:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5a:	4b36      	ldr	r3, [pc, #216]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c66:	4b34      	ldr	r3, [pc, #208]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a33      	ldr	r2, [pc, #204]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c72:	f7fc f9f1 	bl	8002058 <HAL_GetTick>
 8005c76:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c78:	e008      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c7a:	f7fc f9ed 	bl	8002058 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e1d1      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c98:	4b26      	ldr	r3, [pc, #152]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d02f      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d028      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cb6:	4b1f      	ldr	r3, [pc, #124]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cbe:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cc6:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ccc:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cd2:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d114      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cde:	f7fc f9bb 	bl	8002058 <HAL_GetTick>
 8005ce2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce4:	e00a      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce6:	f7fc f9b7 	bl	8002058 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e199      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0ee      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d14:	d114      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d2a:	4902      	ldr	r1, [pc, #8]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	608b      	str	r3, [r1, #8]
 8005d30:	e00c      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005d32:	bf00      	nop
 8005d34:	40023800 	.word	0x40023800
 8005d38:	40007000 	.word	0x40007000
 8005d3c:	42470e40 	.word	0x42470e40
 8005d40:	4b89      	ldr	r3, [pc, #548]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4a88      	ldr	r2, [pc, #544]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d4a:	6093      	str	r3, [r2, #8]
 8005d4c:	4b86      	ldr	r3, [pc, #536]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d58:	4983      	ldr	r1, [pc, #524]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005d70:	4b7e      	ldr	r3, [pc, #504]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8005d72:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005d80:	4b79      	ldr	r3, [pc, #484]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	4976      	ldr	r1, [pc, #472]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005da2:	4b71      	ldr	r3, [pc, #452]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	496d      	ldr	r1, [pc, #436]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005dd2:	4b65      	ldr	r3, [pc, #404]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	4961      	ldr	r1, [pc, #388]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d004      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	f040 80c6 	bne.w	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005df8:	4b5d      	ldr	r3, [pc, #372]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dfe:	f7fc f92b 	bl	8002058 <HAL_GetTick>
 8005e02:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e04:	e008      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e06:	f7fc f927 	bl	8002058 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e10b      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e18:	4b53      	ldr	r3, [pc, #332]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005e24:	4a53      	ldr	r2, [pc, #332]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d023      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d019      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e68:	d00e      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d019      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d115      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e86:	d110      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	019b      	lsls	r3, r3, #6
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	061b      	lsls	r3, r3, #24
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	071b      	lsls	r3, r3, #28
 8005ea2:	4931      	ldr	r1, [pc, #196]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d026      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d122      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ed2:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ed8:	0e1b      	lsrs	r3, r3, #24
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	019b      	lsls	r3, r3, #6
 8005eea:	431a      	orrs	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	061b      	lsls	r3, r3, #24
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	071b      	lsls	r3, r3, #28
 8005ef8:	491b      	ldr	r1, [pc, #108]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005f00:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f06:	f023 021f 	bic.w	r2, r3, #31
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	4915      	ldr	r1, [pc, #84]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d010      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	061b      	lsls	r3, r3, #24
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	071b      	lsls	r3, r3, #28
 8005f3e:	490a      	ldr	r1, [pc, #40]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f4c:	f7fc f884 	bl	8002058 <HAL_GetTick>
 8005f50:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f52:	e011      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f54:	f7fc f880 	bl	8002058 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d90a      	bls.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e064      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005f66:	bf00      	nop
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	424711e0 	.word	0x424711e0
 8005f70:	42470068 	.word	0x42470068
 8005f74:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f78:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0e7      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f90:	4b29      	ldr	r3, [pc, #164]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	4926      	ldr	r1, [pc, #152]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005fb2:	4b21      	ldr	r3, [pc, #132]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	491d      	ldr	r1, [pc, #116]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005fd4:	4b18      	ldr	r3, [pc, #96]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	4915      	ldr	r1, [pc, #84]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ffc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	490c      	ldr	r1, [pc, #48]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006018:	4b07      	ldr	r3, [pc, #28]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800601a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006026:	4904      	ldr	r1, [pc, #16]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40023800 	.word	0x40023800

0800603c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d004      	beq.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b02      	cmp	r3, #2
 800605e:	f000 80a1 	beq.w	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8006062:	e13f      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8006064:	4ba3      	ldr	r3, [pc, #652]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800606a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006076:	f000 8084 	beq.w	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006080:	f200 808c 	bhi.w	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800608a:	d04f      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006092:	f200 8083 	bhi.w	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d006      	beq.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060a2:	d17b      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80060a4:	4b94      	ldr	r3, [pc, #592]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80060a6:	617b      	str	r3, [r7, #20]
          break;
 80060a8:	e07b      	b.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80060aa:	4b92      	ldr	r3, [pc, #584]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80060ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060b8:	d109      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80060ba:	4b8e      	ldr	r3, [pc, #568]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80060bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c4:	4a8c      	ldr	r2, [pc, #560]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80060c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	e019      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80060ce:	4b89      	ldr	r3, [pc, #548]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060da:	d109      	bne.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80060dc:	4b85      	ldr	r3, [pc, #532]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80060de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e6:	4a85      	ldr	r2, [pc, #532]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	e008      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80060f0:	4b80      	ldr	r3, [pc, #512]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80060f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060fa:	4a81      	ldr	r2, [pc, #516]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006102:	4b7c      	ldr	r3, [pc, #496]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006108:	099b      	lsrs	r3, r3, #6
 800610a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	fb02 f303 	mul.w	r3, r2, r3
 8006114:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006116:	4b77      	ldr	r3, [pc, #476]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800611c:	0f1b      	lsrs	r3, r3, #28
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	617b      	str	r3, [r7, #20]
          break;
 800612a:	e03a      	b.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800612c:	4b71      	ldr	r3, [pc, #452]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006138:	d108      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800613a:	4b6e      	ldr	r3, [pc, #440]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006142:	4a6e      	ldr	r2, [pc, #440]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e007      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800614c:	4b69      	ldr	r3, [pc, #420]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006154:	4a6a      	ldr	r2, [pc, #424]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800615c:	4b65      	ldr	r3, [pc, #404]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	099b      	lsrs	r3, r3, #6
 8006162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	fb02 f303 	mul.w	r3, r2, r3
 800616c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800616e:	4b61      	ldr	r3, [pc, #388]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	0f1b      	lsrs	r3, r3, #28
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	fbb2 f3f3 	udiv	r3, r2, r3
 800617e:	617b      	str	r3, [r7, #20]
          break;
 8006180:	e00f      	b.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006182:	4b5c      	ldr	r3, [pc, #368]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800618e:	d102      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8006190:	4b5a      	ldr	r3, [pc, #360]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006192:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006194:	e005      	b.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8006196:	4b5a      	ldr	r3, [pc, #360]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006198:	617b      	str	r3, [r7, #20]
          break;
 800619a:	e002      	b.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
          break;
 80061a0:	bf00      	nop
        }
      }
      break;
 80061a2:	e09f      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80061a4:	4b53      	ldr	r3, [pc, #332]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80061a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061aa:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80061b6:	f000 8084 	beq.w	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80061c0:	f200 808c 	bhi.w	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ca:	d04f      	beq.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061d2:	f200 8083 	bhi.w	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d006      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e2:	d17b      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80061e4:	4b44      	ldr	r3, [pc, #272]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80061e6:	617b      	str	r3, [r7, #20]
          break;
 80061e8:	e07b      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80061ea:	4b42      	ldr	r3, [pc, #264]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f8:	d109      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80061fa:	4b3e      	ldr	r3, [pc, #248]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80061fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006204:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	e019      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800620e:	4b39      	ldr	r3, [pc, #228]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621a:	d109      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800621c:	4b35      	ldr	r3, [pc, #212]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800621e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006226:	4a35      	ldr	r2, [pc, #212]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	e008      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006230:	4b30      	ldr	r3, [pc, #192]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623a:	4a31      	ldr	r2, [pc, #196]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006242:	4b2c      	ldr	r3, [pc, #176]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006248:	099b      	lsrs	r3, r3, #6
 800624a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006256:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800625c:	0f1b      	lsrs	r3, r3, #28
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	617b      	str	r3, [r7, #20]
          break;
 800626a:	e03a      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800626c:	4b21      	ldr	r3, [pc, #132]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006278:	d108      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800627a:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006282:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e007      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800628c:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006294:	4a1a      	ldr	r2, [pc, #104]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006296:	fbb2 f3f3 	udiv	r3, r2, r3
 800629a:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800629c:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	099b      	lsrs	r3, r3, #6
 80062a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
 80062ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80062ae:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	0f1b      	lsrs	r3, r3, #28
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	617b      	str	r3, [r7, #20]
          break;
 80062c0:	e00f      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80062c2:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ce:	d102      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 80062d0:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80062d2:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80062d4:	e005      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80062d8:	617b      	str	r3, [r7, #20]
          break;
 80062da:	e002      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]
          break;
 80062e0:	bf00      	nop
        }
      }
      break;
 80062e2:	bf00      	nop
    }
  }
  return frequency;
 80062e4:	697b      	ldr	r3, [r7, #20]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40023800 	.word	0x40023800
 80062f8:	00bb8000 	.word	0x00bb8000
 80062fc:	017d7840 	.word	0x017d7840
 8006300:	00f42400 	.word	0x00f42400

08006304 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e270      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d075      	beq.n	800640e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006322:	4ba3      	ldr	r3, [pc, #652]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
 800632a:	2b04      	cmp	r3, #4
 800632c:	d00c      	beq.n	8006348 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800632e:	4ba0      	ldr	r3, [pc, #640]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006336:	2b08      	cmp	r3, #8
 8006338:	d112      	bne.n	8006360 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633a:	4b9d      	ldr	r3, [pc, #628]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006346:	d10b      	bne.n	8006360 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006348:	4b99      	ldr	r3, [pc, #612]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d05b      	beq.n	800640c <HAL_RCC_OscConfig+0x108>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d157      	bne.n	800640c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e24b      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006368:	d106      	bne.n	8006378 <HAL_RCC_OscConfig+0x74>
 800636a:	4b91      	ldr	r3, [pc, #580]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a90      	ldr	r2, [pc, #576]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e01d      	b.n	80063b4 <HAL_RCC_OscConfig+0xb0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006380:	d10c      	bne.n	800639c <HAL_RCC_OscConfig+0x98>
 8006382:	4b8b      	ldr	r3, [pc, #556]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a8a      	ldr	r2, [pc, #552]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	4b88      	ldr	r3, [pc, #544]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a87      	ldr	r2, [pc, #540]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e00b      	b.n	80063b4 <HAL_RCC_OscConfig+0xb0>
 800639c:	4b84      	ldr	r3, [pc, #528]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a83      	ldr	r2, [pc, #524]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 80063a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	4b81      	ldr	r3, [pc, #516]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a80      	ldr	r2, [pc, #512]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 80063ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d013      	beq.n	80063e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fb fe4c 	bl	8002058 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063c4:	f7fb fe48 	bl	8002058 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	; 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e210      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d6:	4b76      	ldr	r3, [pc, #472]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0xc0>
 80063e2:	e014      	b.n	800640e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fb fe38 	bl	8002058 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063ec:	f7fb fe34 	bl	8002058 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b64      	cmp	r3, #100	; 0x64
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e1fc      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063fe:	4b6c      	ldr	r3, [pc, #432]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0xe8>
 800640a:	e000      	b.n	800640e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800640c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d063      	beq.n	80064e2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800641a:	4b65      	ldr	r3, [pc, #404]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 030c 	and.w	r3, r3, #12
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006426:	4b62      	ldr	r3, [pc, #392]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800642e:	2b08      	cmp	r3, #8
 8006430:	d11c      	bne.n	800646c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006432:	4b5f      	ldr	r3, [pc, #380]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d116      	bne.n	800646c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800643e:	4b5c      	ldr	r3, [pc, #368]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_RCC_OscConfig+0x152>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d001      	beq.n	8006456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e1d0      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006456:	4b56      	ldr	r3, [pc, #344]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4952      	ldr	r1, [pc, #328]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006466:	4313      	orrs	r3, r2
 8006468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646a:	e03a      	b.n	80064e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d020      	beq.n	80064b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006474:	4b4f      	ldr	r3, [pc, #316]	; (80065b4 <HAL_RCC_OscConfig+0x2b0>)
 8006476:	2201      	movs	r2, #1
 8006478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647a:	f7fb fded 	bl	8002058 <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006482:	f7fb fde9 	bl	8002058 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e1b1      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006494:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0f0      	beq.n	8006482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a0:	4b43      	ldr	r3, [pc, #268]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	4940      	ldr	r1, [pc, #256]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	600b      	str	r3, [r1, #0]
 80064b4:	e015      	b.n	80064e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064b6:	4b3f      	ldr	r3, [pc, #252]	; (80065b4 <HAL_RCC_OscConfig+0x2b0>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064bc:	f7fb fdcc 	bl	8002058 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064c4:	f7fb fdc8 	bl	8002058 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e190      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064d6:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d030      	beq.n	8006550 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d016      	beq.n	8006524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064f6:	4b30      	ldr	r3, [pc, #192]	; (80065b8 <HAL_RCC_OscConfig+0x2b4>)
 80064f8:	2201      	movs	r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fc:	f7fb fdac 	bl	8002058 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006504:	f7fb fda8 	bl	8002058 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e170      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006516:	4b26      	ldr	r3, [pc, #152]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0x200>
 8006522:	e015      	b.n	8006550 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006524:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <HAL_RCC_OscConfig+0x2b4>)
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652a:	f7fb fd95 	bl	8002058 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006532:	f7fb fd91 	bl	8002058 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e159      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006544:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f0      	bne.n	8006532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80a0 	beq.w	800669e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655e:	2300      	movs	r3, #0
 8006560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	4a0e      	ldr	r2, [pc, #56]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657c:	6413      	str	r3, [r2, #64]	; 0x40
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <HAL_RCC_OscConfig+0x2ac>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006586:	60bb      	str	r3, [r7, #8]
 8006588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658e:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <HAL_RCC_OscConfig+0x2b8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d121      	bne.n	80065de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800659a:	4b08      	ldr	r3, [pc, #32]	; (80065bc <HAL_RCC_OscConfig+0x2b8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a07      	ldr	r2, [pc, #28]	; (80065bc <HAL_RCC_OscConfig+0x2b8>)
 80065a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a6:	f7fb fd57 	bl	8002058 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ac:	e011      	b.n	80065d2 <HAL_RCC_OscConfig+0x2ce>
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800
 80065b4:	42470000 	.word	0x42470000
 80065b8:	42470e80 	.word	0x42470e80
 80065bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c0:	f7fb fd4a 	bl	8002058 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e112      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d2:	4b8b      	ldr	r3, [pc, #556]	; (8006800 <HAL_RCC_OscConfig+0x4fc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d106      	bne.n	80065f4 <HAL_RCC_OscConfig+0x2f0>
 80065e6:	4b87      	ldr	r3, [pc, #540]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	4a86      	ldr	r2, [pc, #536]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 80065ec:	f043 0301 	orr.w	r3, r3, #1
 80065f0:	6713      	str	r3, [r2, #112]	; 0x70
 80065f2:	e01c      	b.n	800662e <HAL_RCC_OscConfig+0x32a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b05      	cmp	r3, #5
 80065fa:	d10c      	bne.n	8006616 <HAL_RCC_OscConfig+0x312>
 80065fc:	4b81      	ldr	r3, [pc, #516]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 80065fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006600:	4a80      	ldr	r2, [pc, #512]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006602:	f043 0304 	orr.w	r3, r3, #4
 8006606:	6713      	str	r3, [r2, #112]	; 0x70
 8006608:	4b7e      	ldr	r3, [pc, #504]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	4a7d      	ldr	r2, [pc, #500]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	6713      	str	r3, [r2, #112]	; 0x70
 8006614:	e00b      	b.n	800662e <HAL_RCC_OscConfig+0x32a>
 8006616:	4b7b      	ldr	r3, [pc, #492]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	4a7a      	ldr	r2, [pc, #488]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	6713      	str	r3, [r2, #112]	; 0x70
 8006622:	4b78      	ldr	r3, [pc, #480]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	4a77      	ldr	r2, [pc, #476]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006628:	f023 0304 	bic.w	r3, r3, #4
 800662c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d015      	beq.n	8006662 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006636:	f7fb fd0f 	bl	8002058 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663c:	e00a      	b.n	8006654 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800663e:	f7fb fd0b 	bl	8002058 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f241 3288 	movw	r2, #5000	; 0x1388
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e0d1      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006654:	4b6b      	ldr	r3, [pc, #428]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ee      	beq.n	800663e <HAL_RCC_OscConfig+0x33a>
 8006660:	e014      	b.n	800668c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006662:	f7fb fcf9 	bl	8002058 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800666a:	f7fb fcf5 	bl	8002058 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0bb      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006680:	4b60      	ldr	r3, [pc, #384]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1ee      	bne.n	800666a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d105      	bne.n	800669e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006692:	4b5c      	ldr	r3, [pc, #368]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	4a5b      	ldr	r2, [pc, #364]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80a7 	beq.w	80067f6 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066a8:	4b56      	ldr	r3, [pc, #344]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 030c 	and.w	r3, r3, #12
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d060      	beq.n	8006776 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d145      	bne.n	8006748 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066bc:	4b52      	ldr	r3, [pc, #328]	; (8006808 <HAL_RCC_OscConfig+0x504>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c2:	f7fb fcc9 	bl	8002058 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ca:	f7fb fcc5 	bl	8002058 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e08d      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066dc:	4b49      	ldr	r3, [pc, #292]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1f0      	bne.n	80066ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	019b      	lsls	r3, r3, #6
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	3b01      	subs	r3, #1
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	061b      	lsls	r3, r3, #24
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	071b      	lsls	r3, r3, #28
 8006714:	493b      	ldr	r1, [pc, #236]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800671a:	4b3b      	ldr	r3, [pc, #236]	; (8006808 <HAL_RCC_OscConfig+0x504>)
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006720:	f7fb fc9a 	bl	8002058 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006728:	f7fb fc96 	bl	8002058 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e05e      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800673a:	4b32      	ldr	r3, [pc, #200]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0x424>
 8006746:	e056      	b.n	80067f6 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006748:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <HAL_RCC_OscConfig+0x504>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674e:	f7fb fc83 	bl	8002058 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006756:	f7fb fc7f 	bl	8002058 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e047      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006768:	4b26      	ldr	r3, [pc, #152]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f0      	bne.n	8006756 <HAL_RCC_OscConfig+0x452>
 8006774:	e03f      	b.n	80067f6 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e03a      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006782:	4b20      	ldr	r3, [pc, #128]	; (8006804 <HAL_RCC_OscConfig+0x500>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d030      	beq.n	80067f2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800679a:	429a      	cmp	r2, r3
 800679c:	d129      	bne.n	80067f2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d122      	bne.n	80067f2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067b2:	4013      	ands	r3, r2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d119      	bne.n	80067f2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	3b01      	subs	r3, #1
 80067cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d10f      	bne.n	80067f2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067de:	429a      	cmp	r2, r3
 80067e0:	d107      	bne.n	80067f2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d001      	beq.n	80067f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40007000 	.word	0x40007000
 8006804:	40023800 	.word	0x40023800
 8006808:	42470060 	.word	0x42470060

0800680c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e034      	b.n	800688c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7fb fa94 	bl	8001d64 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3308      	adds	r3, #8
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f000 fcf8 	bl	800723c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	461a      	mov	r2, r3
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	f000 fd60 	bl	800731c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6858      	ldr	r0, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	f000 fdab 	bl	80073c4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	6892      	ldr	r2, [r2, #8]
 8006876:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	6892      	ldr	r2, [r2, #8]
 8006882:	f041 0101 	orr.w	r1, r1, #1
 8006886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e041      	b.n	800692a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f839 	bl	8006932 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f000 f9d8 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b01      	cmp	r3, #1
 800695a:	d001      	beq.n	8006960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e04e      	b.n	80069fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <HAL_TIM_Base_Start_IT+0xc4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d022      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x80>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d01d      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x80>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <HAL_TIM_Base_Start_IT+0xc8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d018      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x80>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1e      	ldr	r2, [pc, #120]	; (8006a14 <HAL_TIM_Base_Start_IT+0xcc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x80>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <HAL_TIM_Base_Start_IT+0xd0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00e      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x80>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <HAL_TIM_Base_Start_IT+0xd4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x80>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <HAL_TIM_Base_Start_IT+0xd8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d004      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x80>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d111      	bne.n	80069ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b06      	cmp	r3, #6
 80069d8:	d010      	beq.n	80069fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 0201 	orr.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ea:	e007      	b.n	80069fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	40010400 	.word	0x40010400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40001800 	.word	0x40001800

08006a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d122      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d11b      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0202 	mvn.w	r2, #2
 8006a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8ee 	bl	8006c4c <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8e0 	bl	8006c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8f1 	bl	8006c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d122      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0204 	mvn.w	r2, #4
 8006aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8c4 	bl	8006c4c <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8b6 	bl	8006c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8c7 	bl	8006c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0208 	mvn.w	r2, #8
 8006afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2204      	movs	r2, #4
 8006b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f89a 	bl	8006c4c <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f88c 	bl	8006c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f89d 	bl	8006c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0310 	and.w	r3, r3, #16
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d122      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d11b      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0210 	mvn.w	r2, #16
 8006b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2208      	movs	r2, #8
 8006b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f870 	bl	8006c4c <HAL_TIM_IC_CaptureCallback>
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f862 	bl	8006c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f873 	bl	8006c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10e      	bne.n	8006bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d107      	bne.n	8006bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0201 	mvn.w	r2, #1
 8006ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fa fbb8 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d10e      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d107      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f902 	bl	8006ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b40      	cmp	r3, #64	; 0x40
 8006be4:	d10e      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d107      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f838 	bl	8006c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d10e      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d107      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0220 	mvn.w	r2, #32
 8006c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f8cc 	bl	8006dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a40      	ldr	r2, [pc, #256]	; (8006d9c <TIM_Base_SetConfig+0x114>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca6:	d00f      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3d      	ldr	r2, [pc, #244]	; (8006da0 <TIM_Base_SetConfig+0x118>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3c      	ldr	r2, [pc, #240]	; (8006da4 <TIM_Base_SetConfig+0x11c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3b      	ldr	r2, [pc, #236]	; (8006da8 <TIM_Base_SetConfig+0x120>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a3a      	ldr	r2, [pc, #232]	; (8006dac <TIM_Base_SetConfig+0x124>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d108      	bne.n	8006cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2f      	ldr	r2, [pc, #188]	; (8006d9c <TIM_Base_SetConfig+0x114>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d02b      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce8:	d027      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2c      	ldr	r2, [pc, #176]	; (8006da0 <TIM_Base_SetConfig+0x118>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d023      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2b      	ldr	r2, [pc, #172]	; (8006da4 <TIM_Base_SetConfig+0x11c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01f      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2a      	ldr	r2, [pc, #168]	; (8006da8 <TIM_Base_SetConfig+0x120>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01b      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a29      	ldr	r2, [pc, #164]	; (8006dac <TIM_Base_SetConfig+0x124>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d017      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a28      	ldr	r2, [pc, #160]	; (8006db0 <TIM_Base_SetConfig+0x128>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a27      	ldr	r2, [pc, #156]	; (8006db4 <TIM_Base_SetConfig+0x12c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a26      	ldr	r2, [pc, #152]	; (8006db8 <TIM_Base_SetConfig+0x130>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <TIM_Base_SetConfig+0x134>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a24      	ldr	r2, [pc, #144]	; (8006dc0 <TIM_Base_SetConfig+0x138>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <TIM_Base_SetConfig+0x13c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <TIM_Base_SetConfig+0x114>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_Base_SetConfig+0xf8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	; (8006dac <TIM_Base_SetConfig+0x124>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d103      	bne.n	8006d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	615a      	str	r2, [r3, #20]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40014400 	.word	0x40014400
 8006db8:	40014800 	.word	0x40014800
 8006dbc:	40001800 	.word	0x40001800
 8006dc0:	40001c00 	.word	0x40001c00
 8006dc4:	40002000 	.word	0x40002000

08006dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e03f      	b.n	8006e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fa feb6 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2224      	movs	r2, #36	; 0x24
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f829 	bl	8006e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695a      	ldr	r2, [r3, #20]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	b09f      	sub	sp, #124	; 0x7c
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea2:	68d9      	ldr	r1, [r3, #12]
 8006ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	ea40 0301 	orr.w	r3, r0, r1
 8006eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ed0:	f021 010c 	bic.w	r1, r1, #12
 8006ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eda:	430b      	orrs	r3, r1
 8006edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eea:	6999      	ldr	r1, [r3, #24]
 8006eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	ea40 0301 	orr.w	r3, r0, r1
 8006ef4:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4b6a      	ldr	r3, [pc, #424]	; (80070a4 <UART_SetConfig+0x218>)
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d00e      	beq.n	8006f1e <UART_SetConfig+0x92>
 8006f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4b68      	ldr	r3, [pc, #416]	; (80070a8 <UART_SetConfig+0x21c>)
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d009      	beq.n	8006f1e <UART_SetConfig+0x92>
 8006f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b67      	ldr	r3, [pc, #412]	; (80070ac <UART_SetConfig+0x220>)
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d004      	beq.n	8006f1e <UART_SetConfig+0x92>
 8006f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	4b65      	ldr	r3, [pc, #404]	; (80070b0 <UART_SetConfig+0x224>)
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d103      	bne.n	8006f26 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f1e:	f7fe fdbb 	bl	8005a98 <HAL_RCC_GetPCLK2Freq>
 8006f22:	6778      	str	r0, [r7, #116]	; 0x74
 8006f24:	e002      	b.n	8006f2c <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f26:	f7fe fda3 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006f2a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f34:	f040 80c0 	bne.w	80070b8 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3a:	461c      	mov	r4, r3
 8006f3c:	f04f 0500 	mov.w	r5, #0
 8006f40:	4622      	mov	r2, r4
 8006f42:	462b      	mov	r3, r5
 8006f44:	1891      	adds	r1, r2, r2
 8006f46:	6439      	str	r1, [r7, #64]	; 0x40
 8006f48:	415b      	adcs	r3, r3
 8006f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f50:	1912      	adds	r2, r2, r4
 8006f52:	eb45 0303 	adc.w	r3, r5, r3
 8006f56:	f04f 0000 	mov.w	r0, #0
 8006f5a:	f04f 0100 	mov.w	r1, #0
 8006f5e:	00d9      	lsls	r1, r3, #3
 8006f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f64:	00d0      	lsls	r0, r2, #3
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	1911      	adds	r1, r2, r4
 8006f6c:	6639      	str	r1, [r7, #96]	; 0x60
 8006f6e:	416b      	adcs	r3, r5
 8006f70:	667b      	str	r3, [r7, #100]	; 0x64
 8006f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	1891      	adds	r1, r2, r2
 8006f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f80:	415b      	adcs	r3, r3
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f8c:	f7f9 f948 	bl	8000220 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4b47      	ldr	r3, [pc, #284]	; (80070b4 <UART_SetConfig+0x228>)
 8006f96:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	011e      	lsls	r6, r3, #4
 8006f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa0:	461c      	mov	r4, r3
 8006fa2:	f04f 0500 	mov.w	r5, #0
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	462b      	mov	r3, r5
 8006faa:	1891      	adds	r1, r2, r2
 8006fac:	6339      	str	r1, [r7, #48]	; 0x30
 8006fae:	415b      	adcs	r3, r3
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fb6:	1912      	adds	r2, r2, r4
 8006fb8:	eb45 0303 	adc.w	r3, r5, r3
 8006fbc:	f04f 0000 	mov.w	r0, #0
 8006fc0:	f04f 0100 	mov.w	r1, #0
 8006fc4:	00d9      	lsls	r1, r3, #3
 8006fc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fca:	00d0      	lsls	r0, r2, #3
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	1911      	adds	r1, r2, r4
 8006fd2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fd4:	416b      	adcs	r3, r5
 8006fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	1891      	adds	r1, r2, r2
 8006fe4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006fe6:	415b      	adcs	r3, r3
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ff2:	f7f9 f915 	bl	8000220 <__aeabi_uldivmod>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4b2e      	ldr	r3, [pc, #184]	; (80070b4 <UART_SetConfig+0x228>)
 8006ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	2164      	movs	r1, #100	; 0x64
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	3332      	adds	r3, #50	; 0x32
 800700e:	4a29      	ldr	r2, [pc, #164]	; (80070b4 <UART_SetConfig+0x228>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800701c:	441e      	add	r6, r3
 800701e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007020:	4618      	mov	r0, r3
 8007022:	f04f 0100 	mov.w	r1, #0
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	1894      	adds	r4, r2, r2
 800702c:	623c      	str	r4, [r7, #32]
 800702e:	415b      	adcs	r3, r3
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
 8007032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007036:	1812      	adds	r2, r2, r0
 8007038:	eb41 0303 	adc.w	r3, r1, r3
 800703c:	f04f 0400 	mov.w	r4, #0
 8007040:	f04f 0500 	mov.w	r5, #0
 8007044:	00dd      	lsls	r5, r3, #3
 8007046:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800704a:	00d4      	lsls	r4, r2, #3
 800704c:	4622      	mov	r2, r4
 800704e:	462b      	mov	r3, r5
 8007050:	1814      	adds	r4, r2, r0
 8007052:	653c      	str	r4, [r7, #80]	; 0x50
 8007054:	414b      	adcs	r3, r1
 8007056:	657b      	str	r3, [r7, #84]	; 0x54
 8007058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	461a      	mov	r2, r3
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	1891      	adds	r1, r2, r2
 8007064:	61b9      	str	r1, [r7, #24]
 8007066:	415b      	adcs	r3, r3
 8007068:	61fb      	str	r3, [r7, #28]
 800706a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800706e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007072:	f7f9 f8d5 	bl	8000220 <__aeabi_uldivmod>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <UART_SetConfig+0x228>)
 800707c:	fba3 1302 	umull	r1, r3, r3, r2
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	2164      	movs	r1, #100	; 0x64
 8007084:	fb01 f303 	mul.w	r3, r1, r3
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	3332      	adds	r3, #50	; 0x32
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <UART_SetConfig+0x228>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	f003 0207 	and.w	r2, r3, #7
 800709a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4432      	add	r2, r6
 80070a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070a2:	e0c3      	b.n	800722c <UART_SetConfig+0x3a0>
 80070a4:	40011000 	.word	0x40011000
 80070a8:	40011400 	.word	0x40011400
 80070ac:	40011800 	.word	0x40011800
 80070b0:	40011c00 	.word	0x40011c00
 80070b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ba:	461c      	mov	r4, r3
 80070bc:	f04f 0500 	mov.w	r5, #0
 80070c0:	4622      	mov	r2, r4
 80070c2:	462b      	mov	r3, r5
 80070c4:	1891      	adds	r1, r2, r2
 80070c6:	6139      	str	r1, [r7, #16]
 80070c8:	415b      	adcs	r3, r3
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070d0:	1912      	adds	r2, r2, r4
 80070d2:	eb45 0303 	adc.w	r3, r5, r3
 80070d6:	f04f 0000 	mov.w	r0, #0
 80070da:	f04f 0100 	mov.w	r1, #0
 80070de:	00d9      	lsls	r1, r3, #3
 80070e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070e4:	00d0      	lsls	r0, r2, #3
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	eb12 0804 	adds.w	r8, r2, r4
 80070ee:	eb43 0905 	adc.w	r9, r3, r5
 80070f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f04f 0100 	mov.w	r1, #0
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	008b      	lsls	r3, r1, #2
 8007106:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800710a:	0082      	lsls	r2, r0, #2
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 f886 	bl	8000220 <__aeabi_uldivmod>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4b47      	ldr	r3, [pc, #284]	; (8007238 <UART_SetConfig+0x3ac>)
 800711a:	fba3 2302 	umull	r2, r3, r3, r2
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	011e      	lsls	r6, r3, #4
 8007122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007124:	4618      	mov	r0, r3
 8007126:	f04f 0100 	mov.w	r1, #0
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	1894      	adds	r4, r2, r2
 8007130:	60bc      	str	r4, [r7, #8]
 8007132:	415b      	adcs	r3, r3
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800713a:	1812      	adds	r2, r2, r0
 800713c:	eb41 0303 	adc.w	r3, r1, r3
 8007140:	f04f 0400 	mov.w	r4, #0
 8007144:	f04f 0500 	mov.w	r5, #0
 8007148:	00dd      	lsls	r5, r3, #3
 800714a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800714e:	00d4      	lsls	r4, r2, #3
 8007150:	4622      	mov	r2, r4
 8007152:	462b      	mov	r3, r5
 8007154:	1814      	adds	r4, r2, r0
 8007156:	64bc      	str	r4, [r7, #72]	; 0x48
 8007158:	414b      	adcs	r3, r1
 800715a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800715c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4618      	mov	r0, r3
 8007162:	f04f 0100 	mov.w	r1, #0
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	008b      	lsls	r3, r1, #2
 8007170:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007174:	0082      	lsls	r2, r0, #2
 8007176:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800717a:	f7f9 f851 	bl	8000220 <__aeabi_uldivmod>
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4b2d      	ldr	r3, [pc, #180]	; (8007238 <UART_SetConfig+0x3ac>)
 8007184:	fba3 1302 	umull	r1, r3, r3, r2
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	2164      	movs	r1, #100	; 0x64
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	3332      	adds	r3, #50	; 0x32
 8007196:	4a28      	ldr	r2, [pc, #160]	; (8007238 <UART_SetConfig+0x3ac>)
 8007198:	fba2 2303 	umull	r2, r3, r2, r3
 800719c:	095b      	lsrs	r3, r3, #5
 800719e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071a2:	441e      	add	r6, r3
 80071a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a6:	4618      	mov	r0, r3
 80071a8:	f04f 0100 	mov.w	r1, #0
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	1894      	adds	r4, r2, r2
 80071b2:	603c      	str	r4, [r7, #0]
 80071b4:	415b      	adcs	r3, r3
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071bc:	1812      	adds	r2, r2, r0
 80071be:	eb41 0303 	adc.w	r3, r1, r3
 80071c2:	f04f 0400 	mov.w	r4, #0
 80071c6:	f04f 0500 	mov.w	r5, #0
 80071ca:	00dd      	lsls	r5, r3, #3
 80071cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071d0:	00d4      	lsls	r4, r2, #3
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	eb12 0a00 	adds.w	sl, r2, r0
 80071da:	eb43 0b01 	adc.w	fp, r3, r1
 80071de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f04f 0100 	mov.w	r1, #0
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	008b      	lsls	r3, r1, #2
 80071f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071f6:	0082      	lsls	r2, r0, #2
 80071f8:	4650      	mov	r0, sl
 80071fa:	4659      	mov	r1, fp
 80071fc:	f7f9 f810 	bl	8000220 <__aeabi_uldivmod>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <UART_SetConfig+0x3ac>)
 8007206:	fba3 1302 	umull	r1, r3, r3, r2
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	2164      	movs	r1, #100	; 0x64
 800720e:	fb01 f303 	mul.w	r3, r1, r3
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	3332      	adds	r3, #50	; 0x32
 8007218:	4a07      	ldr	r2, [pc, #28]	; (8007238 <UART_SetConfig+0x3ac>)
 800721a:	fba2 2303 	umull	r2, r3, r2, r3
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4432      	add	r2, r6
 800722a:	609a      	str	r2, [r3, #8]
}
 800722c:	bf00      	nop
 800722e:	377c      	adds	r7, #124	; 0x7c
 8007230:	46bd      	mov	sp, r7
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007236:	bf00      	nop
 8007238:	51eb851f 	.word	0x51eb851f

0800723c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007254:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4b2f      	ldr	r3, [pc, #188]	; (8007318 <FSMC_NORSRAM_Init+0xdc>)
 800725a:	4013      	ands	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007266:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800726c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007272:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007278:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800727e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007284:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800728a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007290:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007296:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800729c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80072a2:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80072a8:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80072ae:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d103      	bne.n	80072c6 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c4:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68f9      	ldr	r1, [r7, #12]
 80072ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072da:	d10a      	bne.n	80072f2 <FSMC_NORSRAM_Init+0xb6>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d006      	beq.n	8007308 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	ffc00480 	.word	0xffc00480

0800731c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007336:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800733e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800734a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007352:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800735a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	3b01      	subs	r3, #1
 8007362:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007364:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	3b02      	subs	r3, #2
 800736c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800736e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007374:	4313      	orrs	r3, r2
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6979      	ldr	r1, [r7, #20]
 8007384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007394:	d10e      	bne.n	80073b4 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800739e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	051b      	lsls	r3, r3, #20
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073dc:	d122      	bne.n	8007424 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4b15      	ldr	r3, [pc, #84]	; (8007440 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073fa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007402:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800740a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007410:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6979      	ldr	r1, [r7, #20]
 800741e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007422:	e005      	b.n	8007430 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800742c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	cff00000 	.word	0xcff00000

08007444 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007444:	b084      	sub	sp, #16
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	f107 001c 	add.w	r0, r7, #28
 8007452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2b01      	cmp	r3, #1
 800745a:	d122      	bne.n	80074a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d105      	bne.n	8007496 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f94a 	bl	8007730 <USB_CoreReset>
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]
 80074a0:	e01a      	b.n	80074d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f93e 	bl	8007730 <USB_CoreReset>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38
 80074ca:	e005      	b.n	80074d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10b      	bne.n	80074f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f043 0206 	orr.w	r2, r3, #6
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f043 0220 	orr.w	r2, r3, #32
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007502:	b004      	add	sp, #16
 8007504:	4770      	bx	lr

08007506 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f043 0201 	orr.w	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f023 0201 	bic.w	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007562:	78fb      	ldrb	r3, [r7, #3]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d106      	bne.n	8007576 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
 8007574:	e00b      	b.n	800758e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	60da      	str	r2, [r3, #12]
 8007588:	e001      	b.n	800758e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e003      	b.n	8007596 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800758e:	2032      	movs	r0, #50	; 0x32
 8007590:	f7fa fd6e 	bl	8002070 <HAL_Delay>

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	019b      	lsls	r3, r3, #6
 80075b2:	f043 0220 	orr.w	r2, r3, #32
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a09      	ldr	r2, [pc, #36]	; (80075e8 <USB_FlushTxFifo+0x48>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d901      	bls.n	80075cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e006      	b.n	80075da <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d0f0      	beq.n	80075ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	00030d40 	.word	0x00030d40

080075ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2210      	movs	r2, #16
 80075fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4a09      	ldr	r2, [pc, #36]	; (800762c <USB_FlushRxFifo+0x40>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d901      	bls.n	8007610 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e006      	b.n	800761e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b10      	cmp	r3, #16
 800761a:	d0f0      	beq.n	80075fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	00030d40 	.word	0x00030d40

08007630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007630:	b480      	push	{r7}
 8007632:	b089      	sub	sp, #36	; 0x24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4611      	mov	r1, r2
 800763c:	461a      	mov	r2, r3
 800763e:	460b      	mov	r3, r1
 8007640:	71fb      	strb	r3, [r7, #7]
 8007642:	4613      	mov	r3, r2
 8007644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800764e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d11a      	bne.n	800768c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007656:	88bb      	ldrh	r3, [r7, #4]
 8007658:	3303      	adds	r3, #3
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e00f      	b.n	8007684 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	031a      	lsls	r2, r3, #12
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007670:	461a      	mov	r2, r3
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3304      	adds	r3, #4
 800767c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	3301      	adds	r3, #1
 8007682:	61bb      	str	r3, [r7, #24]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	429a      	cmp	r2, r3
 800768a:	d3eb      	bcc.n	8007664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3724      	adds	r7, #36	; 0x24
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800769a:	b480      	push	{r7}
 800769c:	b089      	sub	sp, #36	; 0x24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	4613      	mov	r3, r2
 80076a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	3303      	adds	r3, #3
 80076b4:	089b      	lsrs	r3, r3, #2
 80076b6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	e00b      	b.n	80076d6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	601a      	str	r2, [r3, #0]
    pDest++;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	3304      	adds	r3, #4
 80076ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	3301      	adds	r3, #1
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d3ef      	bcc.n	80076be <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80076de:	69fb      	ldr	r3, [r7, #28]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3724      	adds	r7, #36	; 0x24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4013      	ands	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	f003 0301 	and.w	r3, r3, #1
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3301      	adds	r3, #1
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a13      	ldr	r2, [pc, #76]	; (8007794 <USB_CoreReset+0x64>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d901      	bls.n	800774e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e01b      	b.n	8007786 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	daf2      	bge.n	800773c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f043 0201 	orr.w	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4a09      	ldr	r2, [pc, #36]	; (8007794 <USB_CoreReset+0x64>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d901      	bls.n	8007778 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e006      	b.n	8007786 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b01      	cmp	r3, #1
 8007782:	d0f0      	beq.n	8007766 <USB_CoreReset+0x36>

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	00030d40 	.word	0x00030d40

08007798 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007798:	b084      	sub	sp, #16
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	f107 001c 	add.w	r0, r7, #28
 80077a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077b4:	461a      	mov	r2, r3
 80077b6:	2300      	movs	r3, #0
 80077b8:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d018      	beq.n	8007810 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d10a      	bne.n	80077fa <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077f2:	f043 0304 	orr.w	r3, r3, #4
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	e014      	b.n	8007824 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007808:	f023 0304 	bic.w	r3, r3, #4
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	e009      	b.n	8007824 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800781e:	f023 0304 	bic.w	r3, r3, #4
 8007822:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007824:	2110      	movs	r1, #16
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff feba 	bl	80075a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff fedd 	bl	80075ec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	e015      	b.n	8007864 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4413      	add	r3, r2
 8007840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007844:	461a      	mov	r2, r3
 8007846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800784a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4413      	add	r3, r2
 8007854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007858:	461a      	mov	r2, r3
 800785a:	2300      	movs	r3, #0
 800785c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	429a      	cmp	r2, r3
 800786a:	d3e5      	bcc.n	8007838 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800786c:	2101      	movs	r1, #1
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8ac 	bl	80079cc <USB_DriveVbus>

  HAL_Delay(200U);
 8007874:	20c8      	movs	r0, #200	; 0xc8
 8007876:	f7fa fbfb 	bl	8002070 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007886:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800789a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a14      	ldr	r2, [pc, #80]	; (80078f0 <USB_HostInit+0x158>)
 80078a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <USB_HostInit+0x15c>)
 80078a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80078aa:	e009      	b.n	80078c0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2280      	movs	r2, #128	; 0x80
 80078b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a10      	ldr	r2, [pc, #64]	; (80078f8 <USB_HostInit+0x160>)
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a10      	ldr	r2, [pc, #64]	; (80078fc <USB_HostInit+0x164>)
 80078bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f043 0210 	orr.w	r2, r3, #16
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <USB_HostInit+0x168>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078ea:	b004      	add	sp, #16
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	01000200 	.word	0x01000200
 80078f4:	00e00300 	.word	0x00e00300
 80078f8:	00600080 	.word	0x00600080
 80078fc:	004000e0 	.word	0x004000e0
 8007900:	a3200008 	.word	0xa3200008

08007904 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007922:	f023 0303 	bic.w	r3, r3, #3
 8007926:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	68f9      	ldr	r1, [r7, #12]
 8007938:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800793c:	4313      	orrs	r3, r2
 800793e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d107      	bne.n	8007956 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794c:	461a      	mov	r2, r3
 800794e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007952:	6053      	str	r3, [r2, #4]
 8007954:	e009      	b.n	800796a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	2b02      	cmp	r3, #2
 800795a:	d106      	bne.n	800796a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007962:	461a      	mov	r2, r3
 8007964:	f241 7370 	movw	r3, #6000	; 0x1770
 8007968:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007998:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80079a8:	2064      	movs	r0, #100	; 0x64
 80079aa:	f7fa fb61 	bl	8002070 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80079bc:	200a      	movs	r0, #10
 80079be:	f7fa fb57 	bl	8002070 <HAL_Delay>

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80079f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d109      	bne.n	8007a10 <USB_DriveVbus+0x44>
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d106      	bne.n	8007a10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1a:	d109      	bne.n	8007a30 <USB_DriveVbus+0x64>
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b085      	sub	sp, #20
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	0c5b      	lsrs	r3, r3, #17
 8007a5c:	f003 0303 	and.w	r3, r3, #3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	b29b      	uxth	r3, r3
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	4608      	mov	r0, r1
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	70fb      	strb	r3, [r7, #3]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70bb      	strb	r3, [r7, #2]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ac4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d87e      	bhi.n	8007bcc <USB_HC_Init+0x13c>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <USB_HC_Init+0x44>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007ae5 	.word	0x08007ae5
 8007ad8:	08007b8f 	.word	0x08007b8f
 8007adc:	08007ae5 	.word	0x08007ae5
 8007ae0:	08007b51 	.word	0x08007b51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af0:	461a      	mov	r2, r3
 8007af2:	f240 439d 	movw	r3, #1181	; 0x49d
 8007af6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007af8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da10      	bge.n	8007b22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b1e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007b20:	e057      	b.n	8007bd2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d051      	beq.n	8007bd2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	0151      	lsls	r1, r2, #5
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	440a      	add	r2, r1
 8007b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b4c:	60d3      	str	r3, [r2, #12]
      break;
 8007b4e:	e040      	b.n	8007bd2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007b62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	da34      	bge.n	8007bd6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	0151      	lsls	r1, r2, #5
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	440a      	add	r2, r1
 8007b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b8c:	e023      	b.n	8007bd6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f240 2325 	movw	r3, #549	; 0x225
 8007ba0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da17      	bge.n	8007bda <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	0151      	lsls	r1, r2, #5
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	440a      	add	r2, r1
 8007bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bc4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007bc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007bca:	e006      	b.n	8007bda <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	77fb      	strb	r3, [r7, #31]
      break;
 8007bd0:	e004      	b.n	8007bdc <USB_HC_Init+0x14c>
      break;
 8007bd2:	bf00      	nop
 8007bd4:	e002      	b.n	8007bdc <USB_HC_Init+0x14c>
      break;
 8007bd6:	bf00      	nop
 8007bd8:	e000      	b.n	8007bdc <USB_HC_Init+0x14c>
      break;
 8007bda:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	2101      	movs	r1, #1
 8007bec:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf0:	6939      	ldr	r1, [r7, #16]
 8007bf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007c06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da03      	bge.n	8007c16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	e001      	b.n	8007c1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff ff0f 	bl	8007a3e <USB_GetHostSpeed>
 8007c20:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007c22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d106      	bne.n	8007c38 <USB_HC_Init+0x1a8>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d003      	beq.n	8007c38 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e001      	b.n	8007c3c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c3c:	787b      	ldrb	r3, [r7, #1]
 8007c3e:	059b      	lsls	r3, r3, #22
 8007c40:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c44:	78bb      	ldrb	r3, [r7, #2]
 8007c46:	02db      	lsls	r3, r3, #11
 8007c48:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c4c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c52:	049b      	lsls	r3, r3, #18
 8007c54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c5a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c66:	78fb      	ldrb	r3, [r7, #3]
 8007c68:	0159      	lsls	r1, r3, #5
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	440b      	add	r3, r1
 8007c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c72:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c78:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d10f      	bne.n	8007ca2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	78fa      	ldrb	r2, [r7, #3]
 8007c92:	0151      	lsls	r1, r2, #5
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	440a      	add	r2, r1
 8007c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ca0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3720      	adds	r7, #32
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08c      	sub	sp, #48	; 0x30
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cc8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d02d      	beq.n	8007d32 <USB_HC_StartXfer+0x86>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	791b      	ldrb	r3, [r3, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d129      	bne.n	8007d32 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d117      	bne.n	8007d14 <USB_HC_StartXfer+0x68>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	79db      	ldrb	r3, [r3, #7]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <USB_HC_StartXfer+0x48>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	79db      	ldrb	r3, [r3, #7]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d10f      	bne.n	8007d14 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	0151      	lsls	r1, r2, #5
 8007d06:	6a3a      	ldr	r2, [r7, #32]
 8007d08:	440a      	add	r2, r1
 8007d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d12:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <USB_HC_StartXfer+0x86>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	795b      	ldrb	r3, [r3, #5]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d107      	bne.n	8007d32 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	4619      	mov	r1, r3
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fa2f 	bl	800818c <USB_DoPing>
      return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e0f8      	b.n	8007f24 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d018      	beq.n	8007d6c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	8912      	ldrh	r2, [r2, #8]
 8007d42:	4413      	add	r3, r2
 8007d44:	3b01      	subs	r3, #1
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	8912      	ldrh	r2, [r2, #8]
 8007d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d4e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007d50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007d52:	8b7b      	ldrh	r3, [r7, #26]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d90b      	bls.n	8007d70 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007d58:	8b7b      	ldrh	r3, [r7, #26]
 8007d5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	8912      	ldrh	r2, [r2, #8]
 8007d62:	fb02 f203 	mul.w	r2, r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	611a      	str	r2, [r3, #16]
 8007d6a:	e001      	b.n	8007d70 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	78db      	ldrb	r3, [r3, #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	8912      	ldrh	r2, [r2, #8]
 8007d7e:	fb02 f203 	mul.w	r2, r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	611a      	str	r2, [r3, #16]
 8007d86:	e003      	b.n	8007d90 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	695a      	ldr	r2, [r3, #20]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d9a:	04d9      	lsls	r1, r3, #19
 8007d9c:	4b63      	ldr	r3, [pc, #396]	; (8007f2c <USB_HC_StartXfer+0x280>)
 8007d9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007da0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	7a9b      	ldrb	r3, [r3, #10]
 8007da6:	075b      	lsls	r3, r3, #29
 8007da8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007dac:	69f9      	ldr	r1, [r7, #28]
 8007dae:	0148      	lsls	r0, r1, #5
 8007db0:	6a39      	ldr	r1, [r7, #32]
 8007db2:	4401      	add	r1, r0
 8007db4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007db8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007dba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d009      	beq.n	8007dd6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	68d9      	ldr	r1, [r3, #12]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bf0c      	ite	eq
 8007de6:	2301      	moveq	r3, #1
 8007de8:	2300      	movne	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	6a3a      	ldr	r2, [r7, #32]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	7e7b      	ldrb	r3, [r7, #25]
 8007e1e:	075b      	lsls	r3, r3, #29
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	0148      	lsls	r0, r1, #5
 8007e24:	6a39      	ldr	r1, [r7, #32]
 8007e26:	4401      	add	r1, r0
 8007e28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e46:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	78db      	ldrb	r3, [r3, #3]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e56:	613b      	str	r3, [r7, #16]
 8007e58:	e003      	b.n	8007e62 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e60:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e68:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e76:	461a      	mov	r2, r3
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e04e      	b.n	8007f24 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	78db      	ldrb	r3, [r3, #3]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d149      	bne.n	8007f22 <USB_HC_StartXfer+0x276>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d045      	beq.n	8007f22 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	79db      	ldrb	r3, [r3, #7]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d830      	bhi.n	8007f00 <USB_HC_StartXfer+0x254>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <USB_HC_StartXfer+0x1f8>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007eb5 	.word	0x08007eb5
 8007ea8:	08007ed9 	.word	0x08007ed9
 8007eac:	08007eb5 	.word	0x08007eb5
 8007eb0:	08007ed9 	.word	0x08007ed9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	089b      	lsrs	r3, r3, #2
 8007ebc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007ebe:	8afa      	ldrh	r2, [r7, #22]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d91c      	bls.n	8007f04 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f043 0220 	orr.w	r2, r3, #32
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ed6:	e015      	b.n	8007f04 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	3303      	adds	r3, #3
 8007ede:	089b      	lsrs	r3, r3, #2
 8007ee0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ee2:	8afa      	ldrh	r2, [r7, #22]
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d90a      	bls.n	8007f08 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	619a      	str	r2, [r3, #24]
        }
        break;
 8007efe:	e003      	b.n	8007f08 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007f00:	bf00      	nop
 8007f02:	e002      	b.n	8007f0a <USB_HC_StartXfer+0x25e>
        break;
 8007f04:	bf00      	nop
 8007f06:	e000      	b.n	8007f0a <USB_HC_StartXfer+0x25e>
        break;
 8007f08:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	68d9      	ldr	r1, [r3, #12]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	785a      	ldrb	r2, [r3, #1]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2000      	movs	r0, #0
 8007f1a:	9000      	str	r0, [sp, #0]
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff fb87 	bl	8007630 <USB_WritePacket>
  }

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3728      	adds	r7, #40	; 0x28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	1ff80000 	.word	0x1ff80000

08007f30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	b29b      	uxth	r3, r3
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b089      	sub	sp, #36	; 0x24
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	0c9b      	lsrs	r3, r3, #18
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	0fdb      	lsrs	r3, r3, #31
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d104      	bne.n	8007fac <USB_HC_Halt+0x5a>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e0e8      	b.n	800817e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <USB_HC_Halt+0x66>
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d173      	bne.n	80080a0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fd6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f040 80cb 	bne.w	800817c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d143      	bne.n	800807a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	440a      	add	r2, r1
 8008008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800800c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008010:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	4413      	add	r3, r2
 800801a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	440a      	add	r2, r1
 8008028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800802c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008030:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	4413      	add	r3, r2
 800803a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	440a      	add	r2, r1
 8008048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800804c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008050:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	3301      	adds	r3, #1
 8008056:	61fb      	str	r3, [r7, #28]
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800805e:	d81d      	bhi.n	800809c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	4413      	add	r3, r2
 8008068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008076:	d0ec      	beq.n	8008052 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008078:	e080      	b.n	800817c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	0151      	lsls	r1, r2, #5
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	440a      	add	r2, r1
 8008090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008098:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800809a:	e06f      	b.n	800817c <USB_HC_Halt+0x22a>
            break;
 800809c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800809e:	e06d      	b.n	800817c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d143      	bne.n	8008158 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	440a      	add	r2, r1
 8008106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800810a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800810e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	4413      	add	r3, r2
 8008118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	440a      	add	r2, r1
 8008126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800812a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800812e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	3301      	adds	r3, #1
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800813c:	d81d      	bhi.n	800817a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	4413      	add	r3, r2
 8008146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008154:	d0ec      	beq.n	8008130 <USB_HC_Halt+0x1de>
 8008156:	e011      	b.n	800817c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	4413      	add	r3, r2
 8008160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	440a      	add	r2, r1
 800816e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	e000      	b.n	800817c <USB_HC_Halt+0x22a>
          break;
 800817a:	bf00      	nop
    }
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3724      	adds	r7, #36	; 0x24
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
	...

0800818c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80081a0:	2301      	movs	r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	04da      	lsls	r2, r3, #19
 80081a8:	4b15      	ldr	r3, [pc, #84]	; (8008200 <USB_DoPing+0x74>)
 80081aa:	4013      	ands	r3, r2
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	0151      	lsls	r1, r2, #5
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	440a      	add	r2, r1
 80081b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ea:	461a      	mov	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	1ff80000 	.word	0x1ff80000

08008204 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff f987 	bl	8007528 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800821a:	2110      	movs	r1, #16
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff f9bf 	bl	80075a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff f9e2 	bl	80075ec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008228:	2300      	movs	r3, #0
 800822a:	613b      	str	r3, [r7, #16]
 800822c:	e01f      	b.n	800826e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008244:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800824c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008254:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008262:	461a      	mov	r2, r3
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3301      	adds	r3, #1
 800826c:	613b      	str	r3, [r7, #16]
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b0f      	cmp	r3, #15
 8008272:	d9dc      	bls.n	800822e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008274:	2300      	movs	r3, #0
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	e034      	b.n	80082e4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008290:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008298:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ae:	461a      	mov	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	3301      	adds	r3, #1
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082c0:	d80c      	bhi.n	80082dc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d8:	d0ec      	beq.n	80082b4 <USB_StopHost+0xb0>
 80082da:	e000      	b.n	80082de <USB_StopHost+0xda>
        break;
 80082dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3301      	adds	r3, #1
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	d9c7      	bls.n	800827a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082f0:	461a      	mov	r2, r3
 80082f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff f900 	bl	8007506 <USB_EnableGlobalInt>

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	b089      	sub	sp, #36	; 0x24
 8008314:	af04      	add	r7, sp, #16
 8008316:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008318:	2301      	movs	r3, #1
 800831a:	2202      	movs	r2, #2
 800831c:	2102      	movs	r1, #2
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fcb2 	bl	8008c88 <USBH_FindInterface>
 8008324:	4603      	mov	r3, r0
 8008326:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	2bff      	cmp	r3, #255	; 0xff
 800832c:	d002      	beq.n	8008334 <USBH_CDC_InterfaceInit+0x24>
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d901      	bls.n	8008338 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008334:	2302      	movs	r3, #2
 8008336:	e13d      	b.n	80085b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fc87 	bl	8008c50 <USBH_SelectInterface>
 8008342:	4603      	mov	r3, r0
 8008344:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800834c:	2302      	movs	r3, #2
 800834e:	e131      	b.n	80085b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008356:	2050      	movs	r0, #80	; 0x50
 8008358:	f005 fbf6 	bl	800db48 <malloc>
 800835c:	4603      	mov	r3, r0
 800835e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008370:	2302      	movs	r3, #2
 8008372:	e11f      	b.n	80085b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008374:	2250      	movs	r2, #80	; 0x50
 8008376:	2100      	movs	r1, #0
 8008378:	68b8      	ldr	r0, [r7, #8]
 800837a:	f005 fc03 	bl	800db84 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	211a      	movs	r1, #26
 8008384:	fb01 f303 	mul.w	r3, r1, r3
 8008388:	4413      	add	r3, r2
 800838a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	b25b      	sxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	da15      	bge.n	80083c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	211a      	movs	r1, #26
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	4413      	add	r3, r2
 80083a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	211a      	movs	r1, #26
 80083b2:	fb01 f303 	mul.w	r3, r1, r3
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80083bc:	881a      	ldrh	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f002 f88c 	bl	800a4e6 <USBH_AllocPipe>
 80083ce:	4603      	mov	r3, r0
 80083d0:	461a      	mov	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	7819      	ldrb	r1, [r3, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	7858      	ldrb	r0, [r3, #1]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	8952      	ldrh	r2, [r2, #10]
 80083ee:	9202      	str	r2, [sp, #8]
 80083f0:	2203      	movs	r2, #3
 80083f2:	9201      	str	r2, [sp, #4]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	4623      	mov	r3, r4
 80083f8:	4602      	mov	r2, r0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f002 f844 	bl	800a488 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f005 facd 	bl	800d9a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800840e:	2300      	movs	r3, #0
 8008410:	2200      	movs	r2, #0
 8008412:	210a      	movs	r1, #10
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fc37 	bl	8008c88 <USBH_FindInterface>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	2bff      	cmp	r3, #255	; 0xff
 8008422:	d002      	beq.n	800842a <USBH_CDC_InterfaceInit+0x11a>
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d901      	bls.n	800842e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800842a:	2302      	movs	r3, #2
 800842c:	e0c2      	b.n	80085b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	211a      	movs	r1, #26
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	b25b      	sxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	da16      	bge.n	8008474 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	211a      	movs	r1, #26
 800844c:	fb01 f303 	mul.w	r3, r1, r3
 8008450:	4413      	add	r3, r2
 8008452:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008456:	781a      	ldrb	r2, [r3, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	211a      	movs	r1, #26
 8008462:	fb01 f303 	mul.w	r3, r1, r3
 8008466:	4413      	add	r3, r2
 8008468:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800846c:	881a      	ldrh	r2, [r3, #0]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	835a      	strh	r2, [r3, #26]
 8008472:	e015      	b.n	80084a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	211a      	movs	r1, #26
 800847a:	fb01 f303 	mul.w	r3, r1, r3
 800847e:	4413      	add	r3, r2
 8008480:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008484:	781a      	ldrb	r2, [r3, #0]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	211a      	movs	r1, #26
 8008490:	fb01 f303 	mul.w	r3, r1, r3
 8008494:	4413      	add	r3, r2
 8008496:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800849a:	881a      	ldrh	r2, [r3, #0]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	211a      	movs	r1, #26
 80084a6:	fb01 f303 	mul.w	r3, r1, r3
 80084aa:	4413      	add	r3, r2
 80084ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b25b      	sxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	da16      	bge.n	80084e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	211a      	movs	r1, #26
 80084be:	fb01 f303 	mul.w	r3, r1, r3
 80084c2:	4413      	add	r3, r2
 80084c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	211a      	movs	r1, #26
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	4413      	add	r3, r2
 80084da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80084de:	881a      	ldrh	r2, [r3, #0]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	835a      	strh	r2, [r3, #26]
 80084e4:	e015      	b.n	8008512 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	211a      	movs	r1, #26
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	4413      	add	r3, r2
 80084f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	211a      	movs	r1, #26
 8008502:	fb01 f303 	mul.w	r3, r1, r3
 8008506:	4413      	add	r3, r2
 8008508:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800850c:	881a      	ldrh	r2, [r3, #0]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	7b9b      	ldrb	r3, [r3, #14]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 ffe4 	bl	800a4e6 <USBH_AllocPipe>
 800851e:	4603      	mov	r3, r0
 8008520:	461a      	mov	r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	7bdb      	ldrb	r3, [r3, #15]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 ffda 	bl	800a4e6 <USBH_AllocPipe>
 8008532:	4603      	mov	r3, r0
 8008534:	461a      	mov	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	7b59      	ldrb	r1, [r3, #13]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	7b98      	ldrb	r0, [r3, #14]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	8b12      	ldrh	r2, [r2, #24]
 8008552:	9202      	str	r2, [sp, #8]
 8008554:	2202      	movs	r2, #2
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4623      	mov	r3, r4
 800855c:	4602      	mov	r2, r0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 ff92 	bl	800a488 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	7b19      	ldrb	r1, [r3, #12]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	7bd8      	ldrb	r0, [r3, #15]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	8b52      	ldrh	r2, [r2, #26]
 800857c:	9202      	str	r2, [sp, #8]
 800857e:	2202      	movs	r2, #2
 8008580:	9201      	str	r2, [sp, #4]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	4623      	mov	r3, r4
 8008586:	4602      	mov	r2, r0
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 ff7d 	bl	800a488 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	7b5b      	ldrb	r3, [r3, #13]
 800859a:	2200      	movs	r2, #0
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f005 fa02 	bl	800d9a8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	7b1b      	ldrb	r3, [r3, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f005 f9fb 	bl	800d9a8 <USBH_LL_SetToggle>

  return USBH_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd90      	pop	{r4, r7, pc}

080085bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00e      	beq.n	80085f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 ff72 	bl	800a4c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 ff9d 	bl	800a528 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	7b1b      	ldrb	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00e      	beq.n	800861a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	7b1b      	ldrb	r3, [r3, #12]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 ff5f 	bl	800a4c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	7b1b      	ldrb	r3, [r3, #12]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 ff8a 	bl	800a528 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	7b5b      	ldrb	r3, [r3, #13]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00e      	beq.n	8008640 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	7b5b      	ldrb	r3, [r3, #13]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 ff4c 	bl	800a4c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	7b5b      	ldrb	r3, [r3, #13]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 ff77 	bl	800a528 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	4618      	mov	r0, r3
 8008656:	f005 fa7f 	bl	800db58 <free>
    phost->pActiveClass->pData = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008660:	2200      	movs	r2, #0
 8008662:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3340      	adds	r3, #64	; 0x40
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f8b1 	bl	80087ee <GetLineCoding>
 800868c:	4603      	mov	r3, r0
 800868e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800869c:	2102      	movs	r1, #2
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80086a2:	7afb      	ldrb	r3, [r7, #11]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d877      	bhi.n	80087c0 <USBH_CDC_Process+0x114>
 80086d0:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <USBH_CDC_Process+0x2c>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	080086ed 	.word	0x080086ed
 80086dc:	080086f3 	.word	0x080086f3
 80086e0:	08008723 	.word	0x08008723
 80086e4:	08008797 	.word	0x08008797
 80086e8:	080087a5 	.word	0x080087a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
      break;
 80086f0:	e06d      	b.n	80087ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f897 	bl	800882c <SetLineCoding>
 80086fe:	4603      	mov	r3, r0
 8008700:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008710:	e058      	b.n	80087c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d055      	beq.n	80087c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2204      	movs	r2, #4
 800871c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008720:	e050      	b.n	80087c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	3340      	adds	r3, #64	; 0x40
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f860 	bl	80087ee <GetLineCoding>
 800872e:	4603      	mov	r3, r0
 8008730:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d126      	bne.n	8008786 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800874a:	791b      	ldrb	r3, [r3, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d13b      	bne.n	80087c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800875a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800875c:	429a      	cmp	r2, r3
 800875e:	d133      	bne.n	80087c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800876a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800876c:	429a      	cmp	r2, r3
 800876e:	d12b      	bne.n	80087c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008778:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800877a:	429a      	cmp	r2, r3
 800877c:	d124      	bne.n	80087c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f982 	bl	8008a88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008784:	e020      	b.n	80087c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d01d      	beq.n	80087c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2204      	movs	r2, #4
 8008790:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008794:	e018      	b.n	80087c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f867 	bl	800886a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f8f6 	bl	800898e <CDC_ProcessReception>
      break;
 80087a2:	e014      	b.n	80087ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 f94d 	bl	8009a46 <USBH_ClrFeature>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10a      	bne.n	80087cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80087be:	e005      	b.n	80087cc <USBH_CDC_Process+0x120>

    default:
      break;
 80087c0:	bf00      	nop
 80087c2:	e004      	b.n	80087ce <USBH_CDC_Process+0x122>
      break;
 80087c4:	bf00      	nop
 80087c6:	e002      	b.n	80087ce <USBH_CDC_Process+0x122>
      break;
 80087c8:	bf00      	nop
 80087ca:	e000      	b.n	80087ce <USBH_CDC_Process+0x122>
      break;
 80087cc:	bf00      	nop

  }

  return status;
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	22a1      	movs	r2, #161	; 0xa1
 80087fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2221      	movs	r2, #33	; 0x21
 8008802:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2207      	movs	r2, #7
 8008814:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2207      	movs	r2, #7
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 faf2 	bl	8009e06 <USBH_CtlReq>
 8008822:	4603      	mov	r3, r0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2221      	movs	r2, #33	; 0x21
 800883a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2220      	movs	r2, #32
 8008840:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2207      	movs	r2, #7
 8008852:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2207      	movs	r2, #7
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fad3 	bl	8009e06 <USBH_CtlReq>
 8008860:	4603      	mov	r3, r0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b086      	sub	sp, #24
 800886e:	af02      	add	r7, sp, #8
 8008870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800887c:	2300      	movs	r3, #0
 800887e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008886:	2b01      	cmp	r3, #1
 8008888:	d002      	beq.n	8008890 <CDC_ProcessTransmission+0x26>
 800888a:	2b02      	cmp	r3, #2
 800888c:	d023      	beq.n	80088d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800888e:	e07a      	b.n	8008986 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	8b12      	ldrh	r2, [r2, #24]
 8008898:	4293      	cmp	r3, r2
 800889a:	d90b      	bls.n	80088b4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	69d9      	ldr	r1, [r3, #28]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8b1a      	ldrh	r2, [r3, #24]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	7b5b      	ldrb	r3, [r3, #13]
 80088a8:	2001      	movs	r0, #1
 80088aa:	9000      	str	r0, [sp, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 fda8 	bl	800a402 <USBH_BulkSendData>
 80088b2:	e00b      	b.n	80088cc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	7b5b      	ldrb	r3, [r3, #13]
 80088c2:	2001      	movs	r0, #1
 80088c4:	9000      	str	r0, [sp, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fd9b 	bl	800a402 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80088d4:	e057      	b.n	8008986 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	7b5b      	ldrb	r3, [r3, #13]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f005 f839 	bl	800d954 <USBH_LL_GetURBState>
 80088e2:	4603      	mov	r3, r0
 80088e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d136      	bne.n	800895a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	8b12      	ldrh	r2, [r2, #24]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d90e      	bls.n	8008916 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	8b12      	ldrh	r2, [r2, #24]
 8008900:	1a9a      	subs	r2, r3, r2
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	8b12      	ldrh	r2, [r2, #24]
 800890e:	441a      	add	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	61da      	str	r2, [r3, #28]
 8008914:	e002      	b.n	800891c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800892c:	e006      	b.n	800893c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f892 	bl	8008a60 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2204      	movs	r2, #4
 8008940:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008950:	2300      	movs	r3, #0
 8008952:	2200      	movs	r2, #0
 8008954:	f001 ffd8 	bl	800a908 <osMessageQueuePut>
      break;
 8008958:	e014      	b.n	8008984 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d111      	bne.n	8008984 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2204      	movs	r2, #4
 800896c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800897c:	2300      	movs	r3, #0
 800897e:	2200      	movs	r2, #0
 8008980:	f001 ffc2 	bl	800a908 <osMessageQueuePut>
      break;
 8008984:	bf00      	nop
  }
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d002      	beq.n	80089b4 <CDC_ProcessReception+0x26>
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d00e      	beq.n	80089d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80089b2:	e051      	b.n	8008a58 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	6a19      	ldr	r1, [r3, #32]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	8b5a      	ldrh	r2, [r3, #26]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	7b1b      	ldrb	r3, [r3, #12]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 fd43 	bl	800a44c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2204      	movs	r2, #4
 80089ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80089ce:	e043      	b.n	8008a58 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	7b1b      	ldrb	r3, [r3, #12]
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f004 ffbc 	bl	800d954 <USBH_LL_GetURBState>
 80089dc:	4603      	mov	r3, r0
 80089de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80089e0:	7cfb      	ldrb	r3, [r7, #19]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d137      	bne.n	8008a56 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	7b1b      	ldrb	r3, [r3, #12]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f004 ff1f 	bl	800d830 <USBH_LL_GetLastXferSize>
 80089f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d016      	beq.n	8008a2c <CDC_ProcessReception+0x9e>
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	8b5b      	ldrh	r3, [r3, #26]
 8008a02:	461a      	mov	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d910      	bls.n	8008a2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1ad2      	subs	r2, r2, r3
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	6a1a      	ldr	r2, [r3, #32]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	441a      	add	r2, r3
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2203      	movs	r2, #3
 8008a26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008a2a:	e006      	b.n	8008a3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f81d 	bl	8008a74 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2204      	movs	r2, #4
 8008a3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2200      	movs	r2, #0
 8008a52:	f001 ff59 	bl	800a908 <osMessageQueuePut>
      break;
 8008a56:	bf00      	nop
  }
}
 8008a58:	bf00      	nop
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e044      	b.n	8008b3e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	79fa      	ldrb	r2, [r7, #7]
 8008ab8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f841 	bl	8008b54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8008b00:	2200      	movs	r2, #0
 8008b02:	2104      	movs	r1, #4
 8008b04:	2010      	movs	r0, #16
 8008b06:	f001 fe8c 	bl	800a822 <osMessageQueueNew>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8008b12:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <USBH_Init+0xac>)
 8008b14:	4a0d      	ldr	r2, [pc, #52]	; (8008b4c <USBH_Init+0xb0>)
 8008b16:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008b18:	4b0b      	ldr	r3, [pc, #44]	; (8008b48 <USBH_Init+0xac>)
 8008b1a:	2280      	movs	r2, #128	; 0x80
 8008b1c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <USBH_Init+0xac>)
 8008b20:	2218      	movs	r2, #24
 8008b22:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008b24:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <USBH_Init+0xac>)
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	4809      	ldr	r0, [pc, #36]	; (8008b50 <USBH_Init+0xb4>)
 8008b2a:	f001 fdcd 	bl	800a6c8 <osThreadNew>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f004 fdc6 	bl	800d6c8 <USBH_LL_Init>

  return USBH_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20004d80 	.word	0x20004d80
 8008b4c:	0800dde0 	.word	0x0800dde0
 8008b50:	080097bd 	.word	0x080097bd

08008b54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e009      	b.n	8008b7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	33e0      	adds	r3, #224	; 0xe0
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	2200      	movs	r2, #0
 8008b72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b0e      	cmp	r3, #14
 8008b7e:	d9f2      	bls.n	8008b66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e009      	b.n	8008b9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba0:	d3f1      	bcc.n	8008b86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2240      	movs	r2, #64	; 0x40
 8008bc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d016      	beq.n	8008c3e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10e      	bne.n	8008c38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008c20:	1c59      	adds	r1, r3, #1
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	33de      	adds	r3, #222	; 0xde
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
 8008c36:	e004      	b.n	8008c42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	73fb      	strb	r3, [r7, #15]
 8008c3c:	e001      	b.n	8008c42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d204      	bcs.n	8008c76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008c74:	e001      	b.n	8008c7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008c76:	2302      	movs	r3, #2
 8008c78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	4608      	mov	r0, r1
 8008c92:	4611      	mov	r1, r2
 8008c94:	461a      	mov	r2, r3
 8008c96:	4603      	mov	r3, r0
 8008c98:	70fb      	strb	r3, [r7, #3]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70bb      	strb	r3, [r7, #2]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008cb0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008cb2:	e025      	b.n	8008d00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	221a      	movs	r2, #26
 8008cb8:	fb02 f303 	mul.w	r3, r2, r3
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3302      	adds	r3, #2
 8008cc4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	795b      	ldrb	r3, [r3, #5]
 8008cca:	78fa      	ldrb	r2, [r7, #3]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d002      	beq.n	8008cd6 <USBH_FindInterface+0x4e>
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	2bff      	cmp	r3, #255	; 0xff
 8008cd4:	d111      	bne.n	8008cfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008cda:	78ba      	ldrb	r2, [r7, #2]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d002      	beq.n	8008ce6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ce0:	78bb      	ldrb	r3, [r7, #2]
 8008ce2:	2bff      	cmp	r3, #255	; 0xff
 8008ce4:	d109      	bne.n	8008cfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008cea:	787a      	ldrb	r2, [r7, #1]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d002      	beq.n	8008cf6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008cf0:	787b      	ldrb	r3, [r7, #1]
 8008cf2:	2bff      	cmp	r3, #255	; 0xff
 8008cf4:	d101      	bne.n	8008cfa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	e006      	b.n	8008d08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d9d6      	bls.n	8008cb4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d06:	23ff      	movs	r3, #255	; 0xff
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f004 fd0f 	bl	800d740 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008d22:	2101      	movs	r1, #1
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f004 fe28 	bl	800d97a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af04      	add	r7, sp, #16
 8008d3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d102      	bne.n	8008d56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2203      	movs	r2, #3
 8008d54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b0b      	cmp	r3, #11
 8008d5e:	f200 823c 	bhi.w	80091da <USBH_Process+0x4a6>
 8008d62:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <USBH_Process+0x34>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d99 	.word	0x08008d99
 8008d6c:	08008de7 	.word	0x08008de7
 8008d70:	08008e6b 	.word	0x08008e6b
 8008d74:	08009159 	.word	0x08009159
 8008d78:	080091db 	.word	0x080091db
 8008d7c:	08008f2b 	.word	0x08008f2b
 8008d80:	080090e3 	.word	0x080090e3
 8008d84:	08008f7d 	.word	0x08008f7d
 8008d88:	08008fb9 	.word	0x08008fb9
 8008d8c:	08008ff3 	.word	0x08008ff3
 8008d90:	0800903b 	.word	0x0800903b
 8008d94:	08009141 	.word	0x08009141
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 821c 	beq.w	80091de <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008dac:	20c8      	movs	r0, #200	; 0xc8
 8008dae:	f004 fe2b 	bl	800da08 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f004 fd21 	bl	800d7fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2200      	movs	r2, #0
 8008de0:	f001 fd92 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008de4:	e1fb      	b.n	80091de <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d107      	bne.n	8008e00 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	e025      	b.n	8008e4c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e0a:	d914      	bls.n	8008e36 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008e12:	3301      	adds	r3, #1
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d903      	bls.n	8008e2e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	220d      	movs	r2, #13
 8008e2a:	701a      	strb	r2, [r3, #0]
 8008e2c:	e00e      	b.n	8008e4c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	e00a      	b.n	8008e4c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008e3c:	f103 020a 	add.w	r2, r3, #10
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008e46:	200a      	movs	r0, #10
 8008e48:	f004 fdde 	bl	800da08 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e60:	2300      	movs	r3, #0
 8008e62:	2200      	movs	r2, #0
 8008e64:	f001 fd50 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      break;
 8008e68:	e1c0      	b.n	80091ec <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e7a:	2104      	movs	r1, #4
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008e80:	2064      	movs	r0, #100	; 0x64
 8008e82:	f004 fdc1 	bl	800da08 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f004 fc90 	bl	800d7ac <USBH_LL_GetSpeed>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	461a      	mov	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2205      	movs	r2, #5
 8008e9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 fb21 	bl	800a4e6 <USBH_AllocPipe>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008eac:	2180      	movs	r1, #128	; 0x80
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 fb19 	bl	800a4e6 <USBH_AllocPipe>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	7919      	ldrb	r1, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ed0:	b292      	uxth	r2, r2
 8008ed2:	9202      	str	r2, [sp, #8]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	9201      	str	r2, [sp, #4]
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	4603      	mov	r3, r0
 8008edc:	2280      	movs	r2, #128	; 0x80
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 fad2 	bl	800a488 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	7959      	ldrb	r1, [r3, #5]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ef8:	b292      	uxth	r2, r2
 8008efa:	9202      	str	r2, [sp, #8]
 8008efc:	2200      	movs	r2, #0
 8008efe:	9201      	str	r2, [sp, #4]
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	4603      	mov	r3, r0
 8008f04:	2200      	movs	r2, #0
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f001 fabe 	bl	800a488 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f20:	2300      	movs	r3, #0
 8008f22:	2200      	movs	r2, #0
 8008f24:	f001 fcf0 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      break;
 8008f28:	e160      	b.n	80091ec <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f964 	bl	80091f8 <USBH_HandleEnum>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f040 8152 	bne.w	80091e2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d103      	bne.n	8008f58 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2208      	movs	r2, #8
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e002      	b.n	8008f5e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2207      	movs	r2, #7
 8008f5c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2205      	movs	r2, #5
 8008f62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f72:	2300      	movs	r3, #0
 8008f74:	2200      	movs	r2, #0
 8008f76:	f001 fcc7 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008f7a:	e132      	b.n	80091e2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 812f 	beq.w	80091e6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f8e:	2101      	movs	r1, #1
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2208      	movs	r2, #8
 8008f98:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2205      	movs	r2, #5
 8008f9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f001 fca9 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8008fb6:	e116      	b.n	80091e6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fcf8 	bl	80099b8 <USBH_SetCfg>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d102      	bne.n	8008fd4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2209      	movs	r2, #9
 8008fd2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2200      	movs	r2, #0
 8008fec:	f001 fc8c 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      break;
 8008ff0:	e0fc      	b.n	80091ec <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00a      	beq.n	8009016 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009000:	2101      	movs	r1, #1
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fcfb 	bl	80099fe <USBH_SetFeature>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	220a      	movs	r2, #10
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	e002      	b.n	800901c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	220a      	movs	r2, #10
 800901a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009030:	2300      	movs	r3, #0
 8009032:	2200      	movs	r2, #0
 8009034:	f001 fc68 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      break;
 8009038:	e0d8      	b.n	80091ec <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009040:	2b00      	cmp	r3, #0
 8009042:	d03f      	beq.n	80090c4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
 8009050:	e016      	b.n	8009080 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009052:	7bfa      	ldrb	r2, [r7, #15]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	32de      	adds	r2, #222	; 0xde
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	791a      	ldrb	r2, [r3, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009064:	429a      	cmp	r2, r3
 8009066:	d108      	bne.n	800907a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009068:	7bfa      	ldrb	r2, [r7, #15]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	32de      	adds	r2, #222	; 0xde
 800906e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009078:	e005      	b.n	8009086 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	3301      	adds	r3, #1
 800907e:	73fb      	strb	r3, [r7, #15]
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0e5      	beq.n	8009052 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800908c:	2b00      	cmp	r3, #0
 800908e:	d016      	beq.n	80090be <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	4798      	blx	r3
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2206      	movs	r2, #6
 80090a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090ae:	2103      	movs	r1, #3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
 80090b4:	e006      	b.n	80090c4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	220d      	movs	r2, #13
 80090ba:	701a      	strb	r2, [r3, #0]
 80090bc:	e002      	b.n	80090c4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	220d      	movs	r2, #13
 80090c2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2205      	movs	r2, #5
 80090c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090d8:	2300      	movs	r3, #0
 80090da:	2200      	movs	r2, #0
 80090dc:	f001 fc14 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      break;
 80090e0:	e084      	b.n	80091ec <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d017      	beq.n	800911c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	4798      	blx	r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220b      	movs	r2, #11
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	e00a      	b.n	8009122 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d106      	bne.n	8009122 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	220d      	movs	r2, #13
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	e002      	b.n	8009122 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	220d      	movs	r2, #13
 8009120:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2205      	movs	r2, #5
 8009126:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009136:	2300      	movs	r3, #0
 8009138:	2200      	movs	r2, #0
 800913a:	f001 fbe5 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      break;
 800913e:	e055      	b.n	80091ec <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d04f      	beq.n	80091ea <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
      }
      break;
 8009156:	e048      	b.n	80091ea <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff fcf7 	bl	8008b54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009194:	2105      	movs	r1, #5
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d107      	bne.n	80091b6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff fdb0 	bl	8008d14 <USBH_Start>
 80091b4:	e002      	b.n	80091bc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f004 fac2 	bl	800d740 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80091d0:	2300      	movs	r3, #0
 80091d2:	2200      	movs	r2, #0
 80091d4:	f001 fb98 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      break;
 80091d8:	e008      	b.n	80091ec <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80091da:	bf00      	nop
 80091dc:	e006      	b.n	80091ec <USBH_Process+0x4b8>
      break;
 80091de:	bf00      	nop
 80091e0:	e004      	b.n	80091ec <USBH_Process+0x4b8>
      break;
 80091e2:	bf00      	nop
 80091e4:	e002      	b.n	80091ec <USBH_Process+0x4b8>
    break;
 80091e6:	bf00      	nop
 80091e8:	e000      	b.n	80091ec <USBH_Process+0x4b8>
      break;
 80091ea:	bf00      	nop
  }
  return USBH_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop

080091f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af04      	add	r7, sp, #16
 80091fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009200:	2301      	movs	r3, #1
 8009202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009204:	2301      	movs	r3, #1
 8009206:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b07      	cmp	r3, #7
 800920e:	f200 8208 	bhi.w	8009622 <USBH_HandleEnum+0x42a>
 8009212:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <USBH_HandleEnum+0x20>)
 8009214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009218:	08009239 	.word	0x08009239
 800921c:	080092f7 	.word	0x080092f7
 8009220:	08009361 	.word	0x08009361
 8009224:	080093ef 	.word	0x080093ef
 8009228:	08009459 	.word	0x08009459
 800922c:	080094c9 	.word	0x080094c9
 8009230:	08009565 	.word	0x08009565
 8009234:	080095e3 	.word	0x080095e3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009238:	2108      	movs	r1, #8
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 faec 	bl	8009818 <USBH_Get_DevDesc>
 8009240:	4603      	mov	r3, r0
 8009242:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d130      	bne.n	80092ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	7919      	ldrb	r1, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800926e:	b292      	uxth	r2, r2
 8009270:	9202      	str	r2, [sp, #8]
 8009272:	2200      	movs	r2, #0
 8009274:	9201      	str	r2, [sp, #4]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4603      	mov	r3, r0
 800927a:	2280      	movs	r2, #128	; 0x80
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 f903 	bl	800a488 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	7959      	ldrb	r1, [r3, #5]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009296:	b292      	uxth	r2, r2
 8009298:	9202      	str	r2, [sp, #8]
 800929a:	2200      	movs	r2, #0
 800929c:	9201      	str	r2, [sp, #4]
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	4603      	mov	r3, r0
 80092a2:	2200      	movs	r2, #0
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 f8ef 	bl	800a488 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80092aa:	e1bc      	b.n	8009626 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	f040 81b9 	bne.w	8009626 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ba:	3301      	adds	r3, #1
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d903      	bls.n	80092d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	220d      	movs	r2, #13
 80092d2:	701a      	strb	r2, [r3, #0]
      break;
 80092d4:	e1a7      	b.n	8009626 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	795b      	ldrb	r3, [r3, #5]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f923 	bl	800a528 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	791b      	ldrb	r3, [r3, #4]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 f91d 	bl	800a528 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
      break;
 80092f4:	e197      	b.n	8009626 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80092f6:	2112      	movs	r1, #18
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa8d 	bl	8009818 <USBH_Get_DevDesc>
 80092fe:	4603      	mov	r3, r0
 8009300:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d103      	bne.n	8009310 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800930e:	e18c      	b.n	800962a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	2b03      	cmp	r3, #3
 8009314:	f040 8189 	bne.w	800962a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800931e:	3301      	adds	r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800932e:	2b03      	cmp	r3, #3
 8009330:	d903      	bls.n	800933a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	220d      	movs	r2, #13
 8009336:	701a      	strb	r2, [r3, #0]
      break;
 8009338:	e177      	b.n	800962a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	795b      	ldrb	r3, [r3, #5]
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 f8f1 	bl	800a528 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	791b      	ldrb	r3, [r3, #4]
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 f8eb 	bl	800a528 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
      break;
 800935e:	e164      	b.n	800962a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009360:	2101      	movs	r1, #1
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fb04 	bl	8009970 <USBH_SetAddress>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d132      	bne.n	80093d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009372:	2002      	movs	r0, #2
 8009374:	f004 fb48 	bl	800da08 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2203      	movs	r2, #3
 8009384:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7919      	ldrb	r1, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800939a:	b292      	uxth	r2, r2
 800939c:	9202      	str	r2, [sp, #8]
 800939e:	2200      	movs	r2, #0
 80093a0:	9201      	str	r2, [sp, #4]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	4603      	mov	r3, r0
 80093a6:	2280      	movs	r2, #128	; 0x80
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f86d 	bl	800a488 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	7959      	ldrb	r1, [r3, #5]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093c2:	b292      	uxth	r2, r2
 80093c4:	9202      	str	r2, [sp, #8]
 80093c6:	2200      	movs	r2, #0
 80093c8:	9201      	str	r2, [sp, #4]
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	4603      	mov	r3, r0
 80093ce:	2200      	movs	r2, #0
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 f859 	bl	800a488 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093d6:	e12a      	b.n	800962e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	2b03      	cmp	r3, #3
 80093dc:	f040 8127 	bne.w	800962e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	220d      	movs	r2, #13
 80093e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	705a      	strb	r2, [r3, #1]
      break;
 80093ec:	e11f      	b.n	800962e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80093ee:	2109      	movs	r1, #9
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa39 	bl	8009868 <USBH_Get_CfgDesc>
 80093f6:	4603      	mov	r3, r0
 80093f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d103      	bne.n	8009408 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2204      	movs	r2, #4
 8009404:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009406:	e114      	b.n	8009632 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	2b03      	cmp	r3, #3
 800940c:	f040 8111 	bne.w	8009632 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009416:	3301      	adds	r3, #1
 8009418:	b2da      	uxtb	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009426:	2b03      	cmp	r3, #3
 8009428:	d903      	bls.n	8009432 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	220d      	movs	r2, #13
 800942e:	701a      	strb	r2, [r3, #0]
      break;
 8009430:	e0ff      	b.n	8009632 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	795b      	ldrb	r3, [r3, #5]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 f875 	bl	800a528 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	791b      	ldrb	r3, [r3, #4]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 f86f 	bl	800a528 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	701a      	strb	r2, [r3, #0]
      break;
 8009456:	e0ec      	b.n	8009632 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa01 	bl	8009868 <USBH_Get_CfgDesc>
 8009466:	4603      	mov	r3, r0
 8009468:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2205      	movs	r2, #5
 8009474:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009476:	e0de      	b.n	8009636 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	2b03      	cmp	r3, #3
 800947c:	f040 80db 	bne.w	8009636 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009486:	3301      	adds	r3, #1
 8009488:	b2da      	uxtb	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009496:	2b03      	cmp	r3, #3
 8009498:	d903      	bls.n	80094a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	220d      	movs	r2, #13
 800949e:	701a      	strb	r2, [r3, #0]
      break;
 80094a0:	e0c9      	b.n	8009636 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	795b      	ldrb	r3, [r3, #5]
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f83d 	bl	800a528 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	791b      	ldrb	r3, [r3, #4]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 f837 	bl	800a528 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
      break;
 80094c6:	e0b6      	b.n	8009636 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d036      	beq.n	8009540 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094de:	23ff      	movs	r3, #255	; 0xff
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f9e5 	bl	80098b0 <USBH_Get_StringDesc>
 80094e6:	4603      	mov	r3, r0
 80094e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d111      	bne.n	8009514 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2206      	movs	r2, #6
 80094f4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2205      	movs	r2, #5
 80094fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800950a:	2300      	movs	r3, #0
 800950c:	2200      	movs	r2, #0
 800950e:	f001 f9fb 	bl	800a908 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009512:	e092      	b.n	800963a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	2b03      	cmp	r3, #3
 8009518:	f040 808f 	bne.w	800963a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2206      	movs	r2, #6
 8009520:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2205      	movs	r2, #5
 8009526:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009536:	2300      	movs	r3, #0
 8009538:	2200      	movs	r2, #0
 800953a:	f001 f9e5 	bl	800a908 <osMessageQueuePut>
      break;
 800953e:	e07c      	b.n	800963a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2206      	movs	r2, #6
 8009544:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2205      	movs	r2, #5
 800954a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800955a:	2300      	movs	r3, #0
 800955c:	2200      	movs	r2, #0
 800955e:	f001 f9d3 	bl	800a908 <osMessageQueuePut>
      break;
 8009562:	e06a      	b.n	800963a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800956a:	2b00      	cmp	r3, #0
 800956c:	d027      	beq.n	80095be <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800957a:	23ff      	movs	r3, #255	; 0xff
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f997 	bl	80098b0 <USBH_Get_StringDesc>
 8009582:	4603      	mov	r3, r0
 8009584:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2207      	movs	r2, #7
 8009590:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009592:	e054      	b.n	800963e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	2b03      	cmp	r3, #3
 8009598:	d151      	bne.n	800963e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2207      	movs	r2, #7
 800959e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2205      	movs	r2, #5
 80095a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095b4:	2300      	movs	r3, #0
 80095b6:	2200      	movs	r2, #0
 80095b8:	f001 f9a6 	bl	800a908 <osMessageQueuePut>
      break;
 80095bc:	e03f      	b.n	800963e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2207      	movs	r2, #7
 80095c2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2205      	movs	r2, #5
 80095c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095d8:	2300      	movs	r3, #0
 80095da:	2200      	movs	r2, #0
 80095dc:	f001 f994 	bl	800a908 <osMessageQueuePut>
      break;
 80095e0:	e02d      	b.n	800963e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d017      	beq.n	800961c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095f8:	23ff      	movs	r3, #255	; 0xff
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f958 	bl	80098b0 <USBH_Get_StringDesc>
 8009600:	4603      	mov	r3, r0
 8009602:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800960e:	e018      	b.n	8009642 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	2b03      	cmp	r3, #3
 8009614:	d115      	bne.n	8009642 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	73fb      	strb	r3, [r7, #15]
      break;
 800961a:	e012      	b.n	8009642 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]
      break;
 8009620:	e00f      	b.n	8009642 <USBH_HandleEnum+0x44a>

    default:
      break;
 8009622:	bf00      	nop
 8009624:	e00e      	b.n	8009644 <USBH_HandleEnum+0x44c>
      break;
 8009626:	bf00      	nop
 8009628:	e00c      	b.n	8009644 <USBH_HandleEnum+0x44c>
      break;
 800962a:	bf00      	nop
 800962c:	e00a      	b.n	8009644 <USBH_HandleEnum+0x44c>
      break;
 800962e:	bf00      	nop
 8009630:	e008      	b.n	8009644 <USBH_HandleEnum+0x44c>
      break;
 8009632:	bf00      	nop
 8009634:	e006      	b.n	8009644 <USBH_HandleEnum+0x44c>
      break;
 8009636:	bf00      	nop
 8009638:	e004      	b.n	8009644 <USBH_HandleEnum+0x44c>
      break;
 800963a:	bf00      	nop
 800963c:	e002      	b.n	8009644 <USBH_HandleEnum+0x44c>
      break;
 800963e:	bf00      	nop
 8009640:	e000      	b.n	8009644 <USBH_HandleEnum+0x44c>
      break;
 8009642:	bf00      	nop
  }
  return Status;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop

08009650 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f804 	bl	8009692 <USBH_HandleSof>
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b0b      	cmp	r3, #11
 80096a2:	d10a      	bne.n	80096ba <USBH_HandleSof+0x28>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	4798      	blx	r3
  }
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80096e6:	2300      	movs	r3, #0
 80096e8:	2200      	movs	r2, #0
 80096ea:	f001 f90d 	bl	800a908 <osMessageQueuePut>
#endif
#endif

  return;
 80096ee:	bf00      	nop
}
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b083      	sub	sp, #12
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009706:	bf00      	nop
}
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009746:	2300      	movs	r3, #0
 8009748:	2200      	movs	r2, #0
 800974a:	f001 f8dd 	bl	800a908 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f003 fffc 	bl	800d776 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	791b      	ldrb	r3, [r3, #4]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fecf 	bl	800a528 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	795b      	ldrb	r3, [r3, #5]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fec9 	bl	800a528 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80097aa:	2300      	movs	r3, #0
 80097ac:	2200      	movs	r2, #0
 80097ae:	f001 f8ab 	bl	800a908 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097d4:	2200      	movs	r2, #0
 80097d6:	f001 f8f7 	bl	800a9c8 <osMessageQueueGet>
 80097da:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f0      	bne.n	80097c4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff faa6 	bl	8008d34 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80097e8:	e7ec      	b.n	80097c4 <USBH_Process_OS+0x8>

080097ea <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009806:	2300      	movs	r3, #0
 8009808:	2200      	movs	r2, #0
 800980a:	f001 f87d 	bl	800a908 <osMessageQueuePut>
#endif

  return USBH_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	b29b      	uxth	r3, r3
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	4613      	mov	r3, r2
 8009832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009836:	2100      	movs	r1, #0
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f864 	bl	8009906 <USBH_GetDescriptor>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10a      	bne.n	800985e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009854:	78fa      	ldrb	r2, [r7, #3]
 8009856:	b292      	uxth	r2, r2
 8009858:	4619      	mov	r1, r3
 800985a:	f000 f918 	bl	8009a8e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	331c      	adds	r3, #28
 8009878:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800987a:	887b      	ldrh	r3, [r7, #2]
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f83d 	bl	8009906 <USBH_GetDescriptor>
 800988c:	4603      	mov	r3, r0
 800988e:	72fb      	strb	r3, [r7, #11]
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d107      	bne.n	80098a6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800989c:	887a      	ldrh	r2, [r7, #2]
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 f964 	bl	8009b6e <USBH_ParseCfgDesc>
  }

  return status;
 80098a6:	7afb      	ldrb	r3, [r7, #11]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	607a      	str	r2, [r7, #4]
 80098ba:	461a      	mov	r2, r3
 80098bc:	460b      	mov	r3, r1
 80098be:	72fb      	strb	r3, [r7, #11]
 80098c0:	4613      	mov	r3, r2
 80098c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80098cc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80098d4:	893b      	ldrh	r3, [r7, #8]
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	460b      	mov	r3, r1
 80098da:	2100      	movs	r1, #0
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 f812 	bl	8009906 <USBH_GetDescriptor>
 80098e2:	4603      	mov	r3, r0
 80098e4:	75fb      	strb	r3, [r7, #23]
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d107      	bne.n	80098fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098f2:	893a      	ldrh	r2, [r7, #8]
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 fa37 	bl	8009d6a <USBH_ParseStringDesc>
  }

  return status;
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	607b      	str	r3, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	72fb      	strb	r3, [r7, #11]
 8009914:	4613      	mov	r3, r2
 8009916:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	789b      	ldrb	r3, [r3, #2]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d11c      	bne.n	800995a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009926:	b2da      	uxtb	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2206      	movs	r2, #6
 8009930:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	893a      	ldrh	r2, [r7, #8]
 8009936:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009938:	893b      	ldrh	r3, [r7, #8]
 800993a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800993e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009942:	d104      	bne.n	800994e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f240 4209 	movw	r2, #1033	; 0x409
 800994a:	829a      	strh	r2, [r3, #20]
 800994c:	e002      	b.n	8009954 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8b3a      	ldrh	r2, [r7, #24]
 8009958:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800995a:	8b3b      	ldrh	r3, [r7, #24]
 800995c:	461a      	mov	r2, r3
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 fa50 	bl	8009e06 <USBH_CtlReq>
 8009966:	4603      	mov	r3, r0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	789b      	ldrb	r3, [r3, #2]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d10f      	bne.n	80099a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2205      	movs	r2, #5
 800998e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80099a4:	2200      	movs	r2, #0
 80099a6:	2100      	movs	r1, #0
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fa2c 	bl	8009e06 <USBH_CtlReq>
 80099ae:	4603      	mov	r3, r0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	789b      	ldrb	r3, [r3, #2]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d10e      	bne.n	80099ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2209      	movs	r2, #9
 80099d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	887a      	ldrh	r2, [r7, #2]
 80099dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80099ea:	2200      	movs	r2, #0
 80099ec:	2100      	movs	r1, #0
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fa09 	bl	8009e06 <USBH_CtlReq>
 80099f4:	4603      	mov	r3, r0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	460b      	mov	r3, r1
 8009a08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	789b      	ldrb	r3, [r3, #2]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d10f      	bne.n	8009a32 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2203      	movs	r2, #3
 8009a1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a1e:	78fb      	ldrb	r3, [r7, #3]
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f9e5 	bl	8009e06 <USBH_CtlReq>
 8009a3c:	4603      	mov	r3, r0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	789b      	ldrb	r3, [r3, #2]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d10f      	bne.n	8009a7a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a6c:	78fb      	ldrb	r3, [r7, #3]
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f9c1 	bl	8009e06 <USBH_CtlReq>
 8009a84:	4603      	mov	r3, r0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b085      	sub	sp, #20
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	60b9      	str	r1, [r7, #8]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	785a      	ldrb	r2, [r3, #1]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	3302      	adds	r3, #2
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	3303      	adds	r3, #3
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	791a      	ldrb	r2, [r3, #4]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	795a      	ldrb	r2, [r3, #5]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	799a      	ldrb	r2, [r3, #6]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	79da      	ldrb	r2, [r3, #7]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	2b08      	cmp	r3, #8
 8009aec:	d939      	bls.n	8009b62 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	3308      	adds	r3, #8
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	3309      	adds	r3, #9
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	4313      	orrs	r3, r2
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	330a      	adds	r3, #10
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	330b      	adds	r3, #11
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	021b      	lsls	r3, r3, #8
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	330d      	adds	r3, #13
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	021b      	lsls	r3, r3, #8
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	7b9a      	ldrb	r2, [r3, #14]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	7bda      	ldrb	r2, [r3, #15]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	7c1a      	ldrb	r2, [r3, #16]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	7c5a      	ldrb	r2, [r3, #17]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	745a      	strb	r2, [r3, #17]
  }
}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b08a      	sub	sp, #40	; 0x28
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	781a      	ldrb	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	785a      	ldrb	r2, [r3, #1]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	3302      	adds	r3, #2
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	3303      	adds	r3, #3
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	791a      	ldrb	r2, [r3, #4]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	795a      	ldrb	r2, [r3, #5]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	799a      	ldrb	r2, [r3, #6]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	79da      	ldrb	r2, [r3, #7]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	7a1a      	ldrb	r2, [r3, #8]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009be4:	88fb      	ldrh	r3, [r7, #6]
 8009be6:	2b09      	cmp	r3, #9
 8009be8:	d95f      	bls.n	8009caa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009bea:	2309      	movs	r3, #9
 8009bec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009bf2:	e051      	b.n	8009c98 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009bf4:	f107 0316 	add.w	r3, r7, #22
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bfc:	f000 f8e8 	bl	8009dd0 <USBH_GetNextDesc>
 8009c00:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	785b      	ldrb	r3, [r3, #1]
 8009c06:	2b04      	cmp	r3, #4
 8009c08:	d146      	bne.n	8009c98 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c0e:	221a      	movs	r2, #26
 8009c10:	fb02 f303 	mul.w	r3, r2, r3
 8009c14:	3308      	adds	r3, #8
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	3302      	adds	r3, #2
 8009c1c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c20:	69f8      	ldr	r0, [r7, #28]
 8009c22:	f000 f846 	bl	8009cb2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c30:	e022      	b.n	8009c78 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c32:	f107 0316 	add.w	r3, r7, #22
 8009c36:	4619      	mov	r1, r3
 8009c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c3a:	f000 f8c9 	bl	8009dd0 <USBH_GetNextDesc>
 8009c3e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	785b      	ldrb	r3, [r3, #1]
 8009c44:	2b05      	cmp	r3, #5
 8009c46:	d117      	bne.n	8009c78 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009c48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009c50:	3201      	adds	r2, #1
 8009c52:	00d2      	lsls	r2, r2, #3
 8009c54:	211a      	movs	r1, #26
 8009c56:	fb01 f303 	mul.w	r3, r1, r3
 8009c5a:	4413      	add	r3, r2
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	4413      	add	r3, r2
 8009c62:	3304      	adds	r3, #4
 8009c64:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c68:	69b8      	ldr	r0, [r7, #24]
 8009c6a:	f000 f851 	bl	8009d10 <USBH_ParseEPDesc>
            ep_ix++;
 8009c6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c72:	3301      	adds	r3, #1
 8009c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	791b      	ldrb	r3, [r3, #4]
 8009c7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d204      	bcs.n	8009c8e <USBH_ParseCfgDesc+0x120>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	885a      	ldrh	r2, [r3, #2]
 8009c88:	8afb      	ldrh	r3, [r7, #22]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d8d1      	bhi.n	8009c32 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c92:	3301      	adds	r3, #1
 8009c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d804      	bhi.n	8009caa <USBH_ParseCfgDesc+0x13c>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	885a      	ldrh	r2, [r3, #2]
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d8a4      	bhi.n	8009bf4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009caa:	bf00      	nop
 8009cac:	3728      	adds	r7, #40	; 0x28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b083      	sub	sp, #12
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781a      	ldrb	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	785a      	ldrb	r2, [r3, #1]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	789a      	ldrb	r2, [r3, #2]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	78da      	ldrb	r2, [r3, #3]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	791a      	ldrb	r2, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	795a      	ldrb	r2, [r3, #5]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	799a      	ldrb	r2, [r3, #6]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	79da      	ldrb	r2, [r3, #7]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	7a1a      	ldrb	r2, [r3, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	721a      	strb	r2, [r3, #8]
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781a      	ldrb	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	785a      	ldrb	r2, [r3, #1]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	789a      	ldrb	r2, [r3, #2]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	78da      	ldrb	r2, [r3, #3]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	3305      	adds	r3, #5
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	021b      	lsls	r3, r3, #8
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	799a      	ldrb	r2, [r3, #6]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	719a      	strb	r2, [r3, #6]
}
 8009d5e:	bf00      	nop
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b087      	sub	sp, #28
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	4613      	mov	r3, r2
 8009d76:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d120      	bne.n	8009dc4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	1e9a      	subs	r2, r3, #2
 8009d88:	88fb      	ldrh	r3, [r7, #6]
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	bf28      	it	cs
 8009d8e:	4613      	movcs	r3, r2
 8009d90:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3302      	adds	r3, #2
 8009d96:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	82fb      	strh	r3, [r7, #22]
 8009d9c:	e00b      	b.n	8009db6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009d9e:	8afb      	ldrh	r3, [r7, #22]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	781a      	ldrb	r2, [r3, #0]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	3301      	adds	r3, #1
 8009dae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009db0:	8afb      	ldrh	r3, [r7, #22]
 8009db2:	3302      	adds	r3, #2
 8009db4:	82fb      	strh	r3, [r7, #22]
 8009db6:	8afa      	ldrh	r2, [r7, #22]
 8009db8:	8abb      	ldrh	r3, [r7, #20]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d3ef      	bcc.n	8009d9e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	701a      	strb	r2, [r3, #0]
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	371c      	adds	r7, #28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	881a      	ldrh	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	4413      	add	r3, r2
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4413      	add	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009df8:	68fb      	ldr	r3, [r7, #12]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b086      	sub	sp, #24
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	4613      	mov	r3, r2
 8009e12:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009e14:	2301      	movs	r3, #1
 8009e16:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	789b      	ldrb	r3, [r3, #2]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d002      	beq.n	8009e26 <USBH_CtlReq+0x20>
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d01d      	beq.n	8009e60 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009e24:	e043      	b.n	8009eae <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	88fa      	ldrh	r2, [r7, #6]
 8009e30:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2203      	movs	r2, #3
 8009e46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009e56:	2300      	movs	r3, #0
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f000 fd55 	bl	800a908 <osMessageQueuePut>
      break;
 8009e5e:	e026      	b.n	8009eae <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 f829 	bl	8009eb8 <USBH_HandleControl>
 8009e66:	4603      	mov	r3, r0
 8009e68:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <USBH_CtlReq+0x70>
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d106      	bne.n	8009e84 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	761a      	strb	r2, [r3, #24]
 8009e82:	e005      	b.n	8009e90 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d102      	bne.n	8009e90 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2203      	movs	r2, #3
 8009e94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f000 fd2e 	bl	800a908 <osMessageQueuePut>
      break;
 8009eac:	bf00      	nop
  }
  return status;
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	7e1b      	ldrb	r3, [r3, #24]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	2b0a      	cmp	r3, #10
 8009ed0:	f200 8229 	bhi.w	800a326 <USBH_HandleControl+0x46e>
 8009ed4:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <USBH_HandleControl+0x24>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009f09 	.word	0x08009f09
 8009ee0:	08009f23 	.word	0x08009f23
 8009ee4:	08009fc5 	.word	0x08009fc5
 8009ee8:	08009feb 	.word	0x08009feb
 8009eec:	0800a077 	.word	0x0800a077
 8009ef0:	0800a0a1 	.word	0x0800a0a1
 8009ef4:	0800a163 	.word	0x0800a163
 8009ef8:	0800a185 	.word	0x0800a185
 8009efc:	0800a217 	.word	0x0800a217
 8009f00:	0800a23d 	.word	0x0800a23d
 8009f04:	0800a2cf 	.word	0x0800a2cf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f103 0110 	add.w	r1, r3, #16
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	795b      	ldrb	r3, [r3, #5]
 8009f12:	461a      	mov	r2, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fa17 	bl	800a348 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	761a      	strb	r2, [r3, #24]
      break;
 8009f20:	e20c      	b.n	800a33c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	795b      	ldrb	r3, [r3, #5]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f003 fd13 	bl	800d954 <USBH_LL_GetURBState>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d12c      	bne.n	8009f92 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	7c1b      	ldrb	r3, [r3, #16]
 8009f3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	8adb      	ldrh	r3, [r3, #22]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009f4a:	7b7b      	ldrb	r3, [r7, #13]
 8009f4c:	2b80      	cmp	r3, #128	; 0x80
 8009f4e:	d103      	bne.n	8009f58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2203      	movs	r2, #3
 8009f54:	761a      	strb	r2, [r3, #24]
 8009f56:	e00d      	b.n	8009f74 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2205      	movs	r2, #5
 8009f5c:	761a      	strb	r2, [r3, #24]
 8009f5e:	e009      	b.n	8009f74 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009f60:	7b7b      	ldrb	r3, [r7, #13]
 8009f62:	2b80      	cmp	r3, #128	; 0x80
 8009f64:	d103      	bne.n	8009f6e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2209      	movs	r2, #9
 8009f6a:	761a      	strb	r2, [r3, #24]
 8009f6c:	e002      	b.n	8009f74 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2207      	movs	r2, #7
 8009f72:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2203      	movs	r2, #3
 8009f78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f000 fcbc 	bl	800a908 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f90:	e1cb      	b.n	800a32a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	2b04      	cmp	r3, #4
 8009f96:	d003      	beq.n	8009fa0 <USBH_HandleControl+0xe8>
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	f040 81c5 	bne.w	800a32a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	220b      	movs	r2, #11
 8009fa4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2203      	movs	r2, #3
 8009faa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f000 fca3 	bl	800a908 <osMessageQueuePut>
      break;
 8009fc2:	e1b2      	b.n	800a32a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6899      	ldr	r1, [r3, #8]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	899a      	ldrh	r2, [r3, #12]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	791b      	ldrb	r3, [r3, #4]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f9f2 	bl	800a3c6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2204      	movs	r2, #4
 8009fe6:	761a      	strb	r2, [r3, #24]
      break;
 8009fe8:	e1a8      	b.n	800a33c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	791b      	ldrb	r3, [r3, #4]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f003 fcaf 	bl	800d954 <USBH_LL_GetURBState>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d110      	bne.n	800a022 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2209      	movs	r2, #9
 800a004:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2203      	movs	r2, #3
 800a00a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a01a:	2300      	movs	r3, #0
 800a01c:	2200      	movs	r2, #0
 800a01e:	f000 fc73 	bl	800a908 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b05      	cmp	r3, #5
 800a026:	d110      	bne.n	800a04a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a028:	2303      	movs	r3, #3
 800a02a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2203      	movs	r2, #3
 800a030:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a040:	2300      	movs	r3, #0
 800a042:	2200      	movs	r2, #0
 800a044:	f000 fc60 	bl	800a908 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a048:	e171      	b.n	800a32e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a04a:	7bbb      	ldrb	r3, [r7, #14]
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	f040 816e 	bne.w	800a32e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	220b      	movs	r2, #11
 800a056:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2203      	movs	r2, #3
 800a05c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a06c:	2300      	movs	r3, #0
 800a06e:	2200      	movs	r2, #0
 800a070:	f000 fc4a 	bl	800a908 <osMessageQueuePut>
      break;
 800a074:	e15b      	b.n	800a32e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6899      	ldr	r1, [r3, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	899a      	ldrh	r2, [r3, #12]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	795b      	ldrb	r3, [r3, #5]
 800a082:	2001      	movs	r0, #1
 800a084:	9000      	str	r0, [sp, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f978 	bl	800a37c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a092:	b29a      	uxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2206      	movs	r2, #6
 800a09c:	761a      	strb	r2, [r3, #24]
      break;
 800a09e:	e14d      	b.n	800a33c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	795b      	ldrb	r3, [r3, #5]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f003 fc54 	bl	800d954 <USBH_LL_GetURBState>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a0b0:	7bbb      	ldrb	r3, [r7, #14]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d111      	bne.n	800a0da <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2207      	movs	r2, #7
 800a0ba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2203      	movs	r2, #3
 800a0c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f000 fc18 	bl	800a908 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a0d8:	e12b      	b.n	800a332 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	2b05      	cmp	r3, #5
 800a0de:	d113      	bne.n	800a108 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	220c      	movs	r2, #12
 800a0e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2203      	movs	r2, #3
 800a0ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a0fe:	2300      	movs	r3, #0
 800a100:	2200      	movs	r2, #0
 800a102:	f000 fc01 	bl	800a908 <osMessageQueuePut>
      break;
 800a106:	e114      	b.n	800a332 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d111      	bne.n	800a132 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2205      	movs	r2, #5
 800a112:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2203      	movs	r2, #3
 800a118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a128:	2300      	movs	r3, #0
 800a12a:	2200      	movs	r2, #0
 800a12c:	f000 fbec 	bl	800a908 <osMessageQueuePut>
      break;
 800a130:	e0ff      	b.n	800a332 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a132:	7bbb      	ldrb	r3, [r7, #14]
 800a134:	2b04      	cmp	r3, #4
 800a136:	f040 80fc 	bne.w	800a332 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	220b      	movs	r2, #11
 800a13e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a140:	2302      	movs	r3, #2
 800a142:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2203      	movs	r2, #3
 800a148:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a158:	2300      	movs	r3, #0
 800a15a:	2200      	movs	r2, #0
 800a15c:	f000 fbd4 	bl	800a908 <osMessageQueuePut>
      break;
 800a160:	e0e7      	b.n	800a332 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	791b      	ldrb	r3, [r3, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	2100      	movs	r1, #0
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f92b 	bl	800a3c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a176:	b29a      	uxth	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2208      	movs	r2, #8
 800a180:	761a      	strb	r2, [r3, #24]

      break;
 800a182:	e0db      	b.n	800a33c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	791b      	ldrb	r3, [r3, #4]
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f003 fbe2 	bl	800d954 <USBH_LL_GetURBState>
 800a190:	4603      	mov	r3, r0
 800a192:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d113      	bne.n	800a1c2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	220d      	movs	r2, #13
 800a19e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2203      	movs	r2, #3
 800a1a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f000 fba4 	bl	800a908 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1c0:	e0b9      	b.n	800a336 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	d111      	bne.n	800a1ec <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	220b      	movs	r2, #11
 800a1cc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2203      	movs	r2, #3
 800a1d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f000 fb8f 	bl	800a908 <osMessageQueuePut>
      break;
 800a1ea:	e0a4      	b.n	800a336 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
 800a1ee:	2b05      	cmp	r3, #5
 800a1f0:	f040 80a1 	bne.w	800a336 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2203      	movs	r2, #3
 800a1fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a20c:	2300      	movs	r3, #0
 800a20e:	2200      	movs	r2, #0
 800a210:	f000 fb7a 	bl	800a908 <osMessageQueuePut>
      break;
 800a214:	e08f      	b.n	800a336 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	795b      	ldrb	r3, [r3, #5]
 800a21a:	2201      	movs	r2, #1
 800a21c:	9200      	str	r2, [sp, #0]
 800a21e:	2200      	movs	r2, #0
 800a220:	2100      	movs	r1, #0
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8aa 	bl	800a37c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	220a      	movs	r2, #10
 800a238:	761a      	strb	r2, [r3, #24]
      break;
 800a23a:	e07f      	b.n	800a33c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	795b      	ldrb	r3, [r3, #5]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f003 fb86 	bl	800d954 <USBH_LL_GetURBState>
 800a248:	4603      	mov	r3, r0
 800a24a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d113      	bne.n	800a27a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	220d      	movs	r2, #13
 800a25a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2203      	movs	r2, #3
 800a260:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a270:	2300      	movs	r3, #0
 800a272:	2200      	movs	r2, #0
 800a274:	f000 fb48 	bl	800a908 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a278:	e05f      	b.n	800a33a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a27a:	7bbb      	ldrb	r3, [r7, #14]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d111      	bne.n	800a2a4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2209      	movs	r2, #9
 800a284:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2203      	movs	r2, #3
 800a28a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a29a:	2300      	movs	r3, #0
 800a29c:	2200      	movs	r2, #0
 800a29e:	f000 fb33 	bl	800a908 <osMessageQueuePut>
      break;
 800a2a2:	e04a      	b.n	800a33a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	2b04      	cmp	r3, #4
 800a2a8:	d147      	bne.n	800a33a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	220b      	movs	r2, #11
 800a2ae:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f000 fb1e 	bl	800a908 <osMessageQueuePut>
      break;
 800a2cc:	e035      	b.n	800a33a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	7e5b      	ldrb	r3, [r3, #25]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	765a      	strb	r2, [r3, #25]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	7e5b      	ldrb	r3, [r3, #25]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d806      	bhi.n	800a2f0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a2ee:	e025      	b.n	800a33c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2f6:	2106      	movs	r1, #6
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	795b      	ldrb	r3, [r3, #5]
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f90d 	bl	800a528 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	791b      	ldrb	r3, [r3, #4]
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f907 	bl	800a528 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a320:	2302      	movs	r3, #2
 800a322:	73fb      	strb	r3, [r7, #15]
      break;
 800a324:	e00a      	b.n	800a33c <USBH_HandleControl+0x484>

    default:
      break;
 800a326:	bf00      	nop
 800a328:	e008      	b.n	800a33c <USBH_HandleControl+0x484>
      break;
 800a32a:	bf00      	nop
 800a32c:	e006      	b.n	800a33c <USBH_HandleControl+0x484>
      break;
 800a32e:	bf00      	nop
 800a330:	e004      	b.n	800a33c <USBH_HandleControl+0x484>
      break;
 800a332:	bf00      	nop
 800a334:	e002      	b.n	800a33c <USBH_HandleControl+0x484>
      break;
 800a336:	bf00      	nop
 800a338:	e000      	b.n	800a33c <USBH_HandleControl+0x484>
      break;
 800a33a:	bf00      	nop
  }

  return status;
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop

0800a348 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af04      	add	r7, sp, #16
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a356:	79f9      	ldrb	r1, [r7, #7]
 800a358:	2300      	movs	r3, #0
 800a35a:	9303      	str	r3, [sp, #12]
 800a35c:	2308      	movs	r3, #8
 800a35e:	9302      	str	r3, [sp, #8]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	2300      	movs	r3, #0
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	2300      	movs	r3, #0
 800a36a:	2200      	movs	r2, #0
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f003 fac0 	bl	800d8f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af04      	add	r7, sp, #16
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4611      	mov	r1, r2
 800a388:	461a      	mov	r2, r3
 800a38a:	460b      	mov	r3, r1
 800a38c:	80fb      	strh	r3, [r7, #6]
 800a38e:	4613      	mov	r3, r2
 800a390:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3a0:	7979      	ldrb	r1, [r7, #5]
 800a3a2:	7e3b      	ldrb	r3, [r7, #24]
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	88fb      	ldrh	r3, [r7, #6]
 800a3a8:	9302      	str	r3, [sp, #8]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f003 fa9b 	bl	800d8f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b088      	sub	sp, #32
 800a3ca:	af04      	add	r7, sp, #16
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	80fb      	strh	r3, [r7, #6]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3dc:	7979      	ldrb	r1, [r7, #5]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	88fb      	ldrh	r3, [r7, #6]
 800a3e4:	9302      	str	r3, [sp, #8]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f003 fa7d 	bl	800d8f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a3f8:	2300      	movs	r3, #0

}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b088      	sub	sp, #32
 800a406:	af04      	add	r7, sp, #16
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	4611      	mov	r1, r2
 800a40e:	461a      	mov	r2, r3
 800a410:	460b      	mov	r3, r1
 800a412:	80fb      	strh	r3, [r7, #6]
 800a414:	4613      	mov	r3, r2
 800a416:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a426:	7979      	ldrb	r1, [r7, #5]
 800a428:	7e3b      	ldrb	r3, [r7, #24]
 800a42a:	9303      	str	r3, [sp, #12]
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	9302      	str	r3, [sp, #8]
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	2301      	movs	r3, #1
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	2302      	movs	r3, #2
 800a43a:	2200      	movs	r2, #0
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f003 fa58 	bl	800d8f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af04      	add	r7, sp, #16
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	4611      	mov	r1, r2
 800a458:	461a      	mov	r2, r3
 800a45a:	460b      	mov	r3, r1
 800a45c:	80fb      	strh	r3, [r7, #6]
 800a45e:	4613      	mov	r3, r2
 800a460:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a462:	7979      	ldrb	r1, [r7, #5]
 800a464:	2300      	movs	r3, #0
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	9302      	str	r3, [sp, #8]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	2301      	movs	r3, #1
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	2302      	movs	r3, #2
 800a476:	2201      	movs	r2, #1
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f003 fa3a 	bl	800d8f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af04      	add	r7, sp, #16
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	4608      	mov	r0, r1
 800a492:	4611      	mov	r1, r2
 800a494:	461a      	mov	r2, r3
 800a496:	4603      	mov	r3, r0
 800a498:	70fb      	strb	r3, [r7, #3]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70bb      	strb	r3, [r7, #2]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a4a2:	7878      	ldrb	r0, [r7, #1]
 800a4a4:	78ba      	ldrb	r2, [r7, #2]
 800a4a6:	78f9      	ldrb	r1, [r7, #3]
 800a4a8:	8b3b      	ldrh	r3, [r7, #24]
 800a4aa:	9302      	str	r3, [sp, #8]
 800a4ac:	7d3b      	ldrb	r3, [r7, #20]
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	7c3b      	ldrb	r3, [r7, #16]
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f003 f9cd 	bl	800d856 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f003 f9ec 	bl	800d8b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f836 	bl	800a564 <USBH_GetFreePipe>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a4fc:	89fb      	ldrh	r3, [r7, #14]
 800a4fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a502:	4293      	cmp	r3, r2
 800a504:	d00a      	beq.n	800a51c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a506:	78fa      	ldrb	r2, [r7, #3]
 800a508:	89fb      	ldrh	r3, [r7, #14]
 800a50a:	f003 030f 	and.w	r3, r3, #15
 800a50e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	33e0      	adds	r3, #224	; 0xe0
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	440b      	add	r3, r1
 800a51a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a51c:	89fb      	ldrh	r3, [r7, #14]
 800a51e:	b2db      	uxtb	r3, r3
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	2b0a      	cmp	r3, #10
 800a538:	d80d      	bhi.n	800a556 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	33e0      	adds	r3, #224	; 0xe0
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a54c:	6879      	ldr	r1, [r7, #4]
 800a54e:	33e0      	adds	r3, #224	; 0xe0
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	440b      	add	r3, r1
 800a554:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
 800a574:	e00f      	b.n	800a596 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	33e0      	adds	r3, #224	; 0xe0
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	e007      	b.n	800a5a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	3301      	adds	r3, #1
 800a594:	73fb      	strb	r3, [r7, #15]
 800a596:	7bfb      	ldrb	r3, [r7, #15]
 800a598:	2b0a      	cmp	r3, #10
 800a59a:	d9ec      	bls.n	800a576 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a59c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <__NVIC_SetPriority>:
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	db0a      	blt.n	800a5d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	490c      	ldr	r1, [pc, #48]	; (800a5f8 <__NVIC_SetPriority+0x4c>)
 800a5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ca:	0112      	lsls	r2, r2, #4
 800a5cc:	b2d2      	uxtb	r2, r2
 800a5ce:	440b      	add	r3, r1
 800a5d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a5d4:	e00a      	b.n	800a5ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	4908      	ldr	r1, [pc, #32]	; (800a5fc <__NVIC_SetPriority+0x50>)
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	0112      	lsls	r2, r2, #4
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	761a      	strb	r2, [r3, #24]
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	e000e100 	.word	0xe000e100
 800a5fc:	e000ed00 	.word	0xe000ed00

0800a600 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <SysTick_Handler+0x1c>)
 800a606:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a608:	f001 fee8 	bl	800c3dc <xTaskGetSchedulerState>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d001      	beq.n	800a616 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a612:	f002 fcd1 	bl	800cfb8 <xPortSysTickHandler>
  }
}
 800a616:	bf00      	nop
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	e000e010 	.word	0xe000e010

0800a620 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a624:	2100      	movs	r1, #0
 800a626:	f06f 0004 	mvn.w	r0, #4
 800a62a:	f7ff ffbf 	bl	800a5ac <__NVIC_SetPriority>
#endif
}
 800a62e:	bf00      	nop
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a63a:	f3ef 8305 	mrs	r3, IPSR
 800a63e:	603b      	str	r3, [r7, #0]
  return(result);
 800a640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a646:	f06f 0305 	mvn.w	r3, #5
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	e00c      	b.n	800a668 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a64e:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <osKernelInitialize+0x44>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a656:	4b08      	ldr	r3, [pc, #32]	; (800a678 <osKernelInitialize+0x44>)
 800a658:	2201      	movs	r2, #1
 800a65a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	607b      	str	r3, [r7, #4]
 800a660:	e002      	b.n	800a668 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a668:	687b      	ldr	r3, [r7, #4]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	20000414 	.word	0x20000414

0800a67c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a682:	f3ef 8305 	mrs	r3, IPSR
 800a686:	603b      	str	r3, [r7, #0]
  return(result);
 800a688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a68e:	f06f 0305 	mvn.w	r3, #5
 800a692:	607b      	str	r3, [r7, #4]
 800a694:	e010      	b.n	800a6b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a696:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <osKernelStart+0x48>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d109      	bne.n	800a6b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a69e:	f7ff ffbf 	bl	800a620 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6a2:	4b08      	ldr	r3, [pc, #32]	; (800a6c4 <osKernelStart+0x48>)
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6a8:	f001 fa50 	bl	800bb4c <vTaskStartScheduler>
      stat = osOK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	607b      	str	r3, [r7, #4]
 800a6b0:	e002      	b.n	800a6b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6b8:	687b      	ldr	r3, [r7, #4]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20000414 	.word	0x20000414

0800a6c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08e      	sub	sp, #56	; 0x38
 800a6cc:	af04      	add	r7, sp, #16
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6d8:	f3ef 8305 	mrs	r3, IPSR
 800a6dc:	617b      	str	r3, [r7, #20]
  return(result);
 800a6de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d17e      	bne.n	800a7e2 <osThreadNew+0x11a>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d07b      	beq.n	800a7e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a6ea:	2380      	movs	r3, #128	; 0x80
 800a6ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a6ee:	2318      	movs	r3, #24
 800a6f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a6f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d045      	beq.n	800a78e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <osThreadNew+0x48>
        name = attr->name;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d008      	beq.n	800a736 <osThreadNew+0x6e>
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	2b38      	cmp	r3, #56	; 0x38
 800a728:	d805      	bhi.n	800a736 <osThreadNew+0x6e>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <osThreadNew+0x72>
        return (NULL);
 800a736:	2300      	movs	r3, #0
 800a738:	e054      	b.n	800a7e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	089b      	lsrs	r3, r3, #2
 800a748:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00e      	beq.n	800a770 <osThreadNew+0xa8>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	2b5b      	cmp	r3, #91	; 0x5b
 800a758:	d90a      	bls.n	800a770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d006      	beq.n	800a770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <osThreadNew+0xa8>
        mem = 1;
 800a76a:	2301      	movs	r3, #1
 800a76c:	61bb      	str	r3, [r7, #24]
 800a76e:	e010      	b.n	800a792 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10c      	bne.n	800a792 <osThreadNew+0xca>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d108      	bne.n	800a792 <osThreadNew+0xca>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d104      	bne.n	800a792 <osThreadNew+0xca>
          mem = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	61bb      	str	r3, [r7, #24]
 800a78c:	e001      	b.n	800a792 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d110      	bne.n	800a7ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7a0:	9202      	str	r2, [sp, #8]
 800a7a2:	9301      	str	r3, [sp, #4]
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	6a3a      	ldr	r2, [r7, #32]
 800a7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fff6 	bl	800b7a0 <xTaskCreateStatic>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	613b      	str	r3, [r7, #16]
 800a7b8:	e013      	b.n	800a7e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d110      	bne.n	800a7e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	f107 0310 	add.w	r3, r7, #16
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f001 f841 	bl	800b85a <xTaskCreate>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d001      	beq.n	800a7e2 <osThreadNew+0x11a>
            hTask = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a7e2:	693b      	ldr	r3, [r7, #16]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3728      	adds	r7, #40	; 0x28
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7f4:	f3ef 8305 	mrs	r3, IPSR
 800a7f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <osDelay+0x1c>
    stat = osErrorISR;
 800a800:	f06f 0305 	mvn.w	r3, #5
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	e007      	b.n	800a818 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d002      	beq.n	800a818 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 f966 	bl	800bae4 <vTaskDelay>
    }
  }

  return (stat);
 800a818:	68fb      	ldr	r3, [r7, #12]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a822:	b580      	push	{r7, lr}
 800a824:	b08a      	sub	sp, #40	; 0x28
 800a826:	af02      	add	r7, sp, #8
 800a828:	60f8      	str	r0, [r7, #12]
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a832:	f3ef 8305 	mrs	r3, IPSR
 800a836:	613b      	str	r3, [r7, #16]
  return(result);
 800a838:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d15f      	bne.n	800a8fe <osMessageQueueNew+0xdc>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d05c      	beq.n	800a8fe <osMessageQueueNew+0xdc>
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d059      	beq.n	800a8fe <osMessageQueueNew+0xdc>
    mem = -1;
 800a84a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a84e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d029      	beq.n	800a8aa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d012      	beq.n	800a884 <osMessageQueueNew+0x62>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	2b4f      	cmp	r3, #79	; 0x4f
 800a864:	d90e      	bls.n	800a884 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00a      	beq.n	800a884 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	695a      	ldr	r2, [r3, #20]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	fb01 f303 	mul.w	r3, r1, r3
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d302      	bcc.n	800a884 <osMessageQueueNew+0x62>
        mem = 1;
 800a87e:	2301      	movs	r3, #1
 800a880:	61bb      	str	r3, [r7, #24]
 800a882:	e014      	b.n	800a8ae <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d110      	bne.n	800a8ae <osMessageQueueNew+0x8c>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10c      	bne.n	800a8ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d108      	bne.n	800a8ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d104      	bne.n	800a8ae <osMessageQueueNew+0x8c>
          mem = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61bb      	str	r3, [r7, #24]
 800a8a8:	e001      	b.n	800a8ae <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d10b      	bne.n	800a8cc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	691a      	ldr	r2, [r3, #16]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	2100      	movs	r1, #0
 800a8be:	9100      	str	r1, [sp, #0]
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 fa2e 	bl	800ad24 <xQueueGenericCreateStatic>
 800a8c8:	61f8      	str	r0, [r7, #28]
 800a8ca:	e008      	b.n	800a8de <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d105      	bne.n	800a8de <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 fa9c 	bl	800ae14 <xQueueGenericCreate>
 800a8dc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00c      	beq.n	800a8fe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	617b      	str	r3, [r7, #20]
 800a8f0:	e001      	b.n	800a8f6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a8f6:	6979      	ldr	r1, [r7, #20]
 800a8f8:	69f8      	ldr	r0, [r7, #28]
 800a8fa:	f000 fef3 	bl	800b6e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a8fe:	69fb      	ldr	r3, [r7, #28]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3720      	adds	r7, #32
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	603b      	str	r3, [r7, #0]
 800a914:	4613      	mov	r3, r2
 800a916:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a920:	f3ef 8305 	mrs	r3, IPSR
 800a924:	617b      	str	r3, [r7, #20]
  return(result);
 800a926:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d028      	beq.n	800a97e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d005      	beq.n	800a93e <osMessageQueuePut+0x36>
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <osMessageQueuePut+0x36>
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a93e:	f06f 0303 	mvn.w	r3, #3
 800a942:	61fb      	str	r3, [r7, #28]
 800a944:	e038      	b.n	800a9b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a946:	2300      	movs	r3, #0
 800a948:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a94a:	f107 0210 	add.w	r2, r7, #16
 800a94e:	2300      	movs	r3, #0
 800a950:	68b9      	ldr	r1, [r7, #8]
 800a952:	69b8      	ldr	r0, [r7, #24]
 800a954:	f000 fbba 	bl	800b0cc <xQueueGenericSendFromISR>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d003      	beq.n	800a966 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a95e:	f06f 0302 	mvn.w	r3, #2
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	e028      	b.n	800a9b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d025      	beq.n	800a9b8 <osMessageQueuePut+0xb0>
 800a96c:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <osMessageQueuePut+0xbc>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	e01c      	b.n	800a9b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <osMessageQueuePut+0x82>
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d103      	bne.n	800a992 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a98a:	f06f 0303 	mvn.w	r3, #3
 800a98e:	61fb      	str	r3, [r7, #28]
 800a990:	e012      	b.n	800a9b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a992:	2300      	movs	r3, #0
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	69b8      	ldr	r0, [r7, #24]
 800a99a:	f000 fa99 	bl	800aed0 <xQueueGenericSend>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d009      	beq.n	800a9b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a9aa:	f06f 0301 	mvn.w	r3, #1
 800a9ae:	61fb      	str	r3, [r7, #28]
 800a9b0:	e002      	b.n	800a9b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a9b2:	f06f 0302 	mvn.w	r3, #2
 800a9b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a9b8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	e000ed04 	.word	0xe000ed04

0800a9c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9de:	f3ef 8305 	mrs	r3, IPSR
 800a9e2:	617b      	str	r3, [r7, #20]
  return(result);
 800a9e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d028      	beq.n	800aa3c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d005      	beq.n	800a9fc <osMessageQueueGet+0x34>
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d002      	beq.n	800a9fc <osMessageQueueGet+0x34>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a9fc:	f06f 0303 	mvn.w	r3, #3
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	e037      	b.n	800aa74 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800aa04:	2300      	movs	r3, #0
 800aa06:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aa08:	f107 0310 	add.w	r3, r7, #16
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	68b9      	ldr	r1, [r7, #8]
 800aa10:	69b8      	ldr	r0, [r7, #24]
 800aa12:	f000 fcd7 	bl	800b3c4 <xQueueReceiveFromISR>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d003      	beq.n	800aa24 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800aa1c:	f06f 0302 	mvn.w	r3, #2
 800aa20:	61fb      	str	r3, [r7, #28]
 800aa22:	e027      	b.n	800aa74 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d024      	beq.n	800aa74 <osMessageQueueGet+0xac>
 800aa2a:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <osMessageQueueGet+0xb8>)
 800aa2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	e01b      	b.n	800aa74 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d002      	beq.n	800aa48 <osMessageQueueGet+0x80>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d103      	bne.n	800aa50 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aa48:	f06f 0303 	mvn.w	r3, #3
 800aa4c:	61fb      	str	r3, [r7, #28]
 800aa4e:	e011      	b.n	800aa74 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	69b8      	ldr	r0, [r7, #24]
 800aa56:	f000 fbd5 	bl	800b204 <xQueueReceive>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d009      	beq.n	800aa74 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d003      	beq.n	800aa6e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aa66:	f06f 0301 	mvn.w	r3, #1
 800aa6a:	61fb      	str	r3, [r7, #28]
 800aa6c:	e002      	b.n	800aa74 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aa6e:	f06f 0302 	mvn.w	r3, #2
 800aa72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aa74:	69fb      	ldr	r3, [r7, #28]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3720      	adds	r7, #32
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	e000ed04 	.word	0xe000ed04

0800aa84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4a07      	ldr	r2, [pc, #28]	; (800aab0 <vApplicationGetIdleTaskMemory+0x2c>)
 800aa94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	4a06      	ldr	r2, [pc, #24]	; (800aab4 <vApplicationGetIdleTaskMemory+0x30>)
 800aa9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2280      	movs	r2, #128	; 0x80
 800aaa0:	601a      	str	r2, [r3, #0]
}
 800aaa2:	bf00      	nop
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20000418 	.word	0x20000418
 800aab4:	20000474 	.word	0x20000474

0800aab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4a07      	ldr	r2, [pc, #28]	; (800aae4 <vApplicationGetTimerTaskMemory+0x2c>)
 800aac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	4a06      	ldr	r2, [pc, #24]	; (800aae8 <vApplicationGetTimerTaskMemory+0x30>)
 800aace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aad6:	601a      	str	r2, [r3, #0]
}
 800aad8:	bf00      	nop
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	20000674 	.word	0x20000674
 800aae8:	200006d0 	.word	0x200006d0

0800aaec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f103 0208 	add.w	r2, r3, #8
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f103 0208 	add.w	r2, r3, #8
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f103 0208 	add.w	r2, r3, #8
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	689a      	ldr	r2, [r3, #8]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	601a      	str	r2, [r3, #0]
}
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aba4:	d103      	bne.n	800abae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	e00c      	b.n	800abc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	3308      	adds	r3, #8
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	e002      	b.n	800abbc <vListInsert+0x2e>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d2f6      	bcs.n	800abb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	601a      	str	r2, [r3, #0]
}
 800abf4:	bf00      	nop
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	6892      	ldr	r2, [r2, #8]
 800ac16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	6852      	ldr	r2, [r2, #4]
 800ac20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d103      	bne.n	800ac34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	1e5a      	subs	r2, r3, #1
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac7e:	f002 f909 	bl	800ce94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8a:	68f9      	ldr	r1, [r7, #12]
 800ac8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac8e:	fb01 f303 	mul.w	r3, r1, r3
 800ac92:	441a      	add	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acae:	3b01      	subs	r3, #1
 800acb0:	68f9      	ldr	r1, [r7, #12]
 800acb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800acb4:	fb01 f303 	mul.w	r3, r1, r3
 800acb8:	441a      	add	r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	22ff      	movs	r2, #255	; 0xff
 800acc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	22ff      	movs	r2, #255	; 0xff
 800acca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d114      	bne.n	800acfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01a      	beq.n	800ad12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3310      	adds	r3, #16
 800ace0:	4618      	mov	r0, r3
 800ace2:	f001 f9bd 	bl	800c060 <xTaskRemoveFromEventList>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d012      	beq.n	800ad12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acec:	4b0c      	ldr	r3, [pc, #48]	; (800ad20 <xQueueGenericReset+0xcc>)
 800acee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	e009      	b.n	800ad12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3310      	adds	r3, #16
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff fef2 	bl	800aaec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	3324      	adds	r3, #36	; 0x24
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7ff feed 	bl	800aaec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad12:	f002 f8ef 	bl	800cef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad16:	2301      	movs	r3, #1
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08e      	sub	sp, #56	; 0x38
 800ad28:	af02      	add	r7, sp, #8
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad4a:	bf00      	nop
 800ad4c:	e7fe      	b.n	800ad4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <xQueueGenericCreateStatic+0x52>
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <xQueueGenericCreateStatic+0x56>
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <xQueueGenericCreateStatic+0x58>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	623b      	str	r3, [r7, #32]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d102      	bne.n	800ada2 <xQueueGenericCreateStatic+0x7e>
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <xQueueGenericCreateStatic+0x82>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <xQueueGenericCreateStatic+0x84>
 800ada6:	2300      	movs	r3, #0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	61fb      	str	r3, [r7, #28]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800adc2:	2350      	movs	r3, #80	; 0x50
 800adc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b50      	cmp	r3, #80	; 0x50
 800adca:	d00a      	beq.n	800ade2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	61bb      	str	r3, [r7, #24]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ade2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00d      	beq.n	800ae0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	4613      	mov	r3, r2
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f83f 	bl	800ae88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3730      	adds	r7, #48	; 0x30
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	; 0x28
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10a      	bne.n	800ae3e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	613b      	str	r3, [r7, #16]
}
 800ae3a:	bf00      	nop
 800ae3c:	e7fe      	b.n	800ae3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	fb02 f303 	mul.w	r3, r2, r3
 800ae46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	3350      	adds	r3, #80	; 0x50
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f002 f943 	bl	800d0d8 <pvPortMalloc>
 800ae52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d011      	beq.n	800ae7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	3350      	adds	r3, #80	; 0x50
 800ae62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae6c:	79fa      	ldrb	r2, [r7, #7]
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	4613      	mov	r3, r2
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	68b9      	ldr	r1, [r7, #8]
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 f805 	bl	800ae88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae7e:	69bb      	ldr	r3, [r7, #24]
	}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3720      	adds	r7, #32
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	69ba      	ldr	r2, [r7, #24]
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	e002      	b.n	800aeaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	69b8      	ldr	r0, [r7, #24]
 800aeba:	f7ff fecb 	bl	800ac54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	78fa      	ldrb	r2, [r7, #3]
 800aec2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aec6:	bf00      	nop
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
	...

0800aed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08e      	sub	sp, #56	; 0x38
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aede:	2300      	movs	r3, #0
 800aee0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10a      	bne.n	800af02 <xQueueGenericSend+0x32>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aefe:	bf00      	nop
 800af00:	e7fe      	b.n	800af00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d103      	bne.n	800af10 <xQueueGenericSend+0x40>
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <xQueueGenericSend+0x44>
 800af10:	2301      	movs	r3, #1
 800af12:	e000      	b.n	800af16 <xQueueGenericSend+0x46>
 800af14:	2300      	movs	r3, #0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10a      	bne.n	800af30 <xQueueGenericSend+0x60>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b02      	cmp	r3, #2
 800af34:	d103      	bne.n	800af3e <xQueueGenericSend+0x6e>
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d101      	bne.n	800af42 <xQueueGenericSend+0x72>
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <xQueueGenericSend+0x74>
 800af42:	2300      	movs	r3, #0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <xQueueGenericSend+0x8e>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	623b      	str	r3, [r7, #32]
}
 800af5a:	bf00      	nop
 800af5c:	e7fe      	b.n	800af5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af5e:	f001 fa3d 	bl	800c3dc <xTaskGetSchedulerState>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <xQueueGenericSend+0x9e>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <xQueueGenericSend+0xa2>
 800af6e:	2301      	movs	r3, #1
 800af70:	e000      	b.n	800af74 <xQueueGenericSend+0xa4>
 800af72:	2300      	movs	r3, #0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <xQueueGenericSend+0xbe>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	61fb      	str	r3, [r7, #28]
}
 800af8a:	bf00      	nop
 800af8c:	e7fe      	b.n	800af8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af8e:	f001 ff81 	bl	800ce94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d302      	bcc.n	800afa4 <xQueueGenericSend+0xd4>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d129      	bne.n	800aff8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afaa:	f000 fa8b 	bl	800b4c4 <prvCopyDataToQueue>
 800afae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d010      	beq.n	800afda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	3324      	adds	r3, #36	; 0x24
 800afbc:	4618      	mov	r0, r3
 800afbe:	f001 f84f 	bl	800c060 <xTaskRemoveFromEventList>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d013      	beq.n	800aff0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800afc8:	4b3f      	ldr	r3, [pc, #252]	; (800b0c8 <xQueueGenericSend+0x1f8>)
 800afca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	e00a      	b.n	800aff0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d007      	beq.n	800aff0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800afe0:	4b39      	ldr	r3, [pc, #228]	; (800b0c8 <xQueueGenericSend+0x1f8>)
 800afe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aff0:	f001 ff80 	bl	800cef4 <vPortExitCritical>
				return pdPASS;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e063      	b.n	800b0c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d103      	bne.n	800b006 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800affe:	f001 ff79 	bl	800cef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b002:	2300      	movs	r3, #0
 800b004:	e05c      	b.n	800b0c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d106      	bne.n	800b01a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b00c:	f107 0314 	add.w	r3, r7, #20
 800b010:	4618      	mov	r0, r3
 800b012:	f001 f889 	bl	800c128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b016:	2301      	movs	r3, #1
 800b018:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b01a:	f001 ff6b 	bl	800cef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b01e:	f000 fdfb 	bl	800bc18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b022:	f001 ff37 	bl	800ce94 <vPortEnterCritical>
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b032:	d103      	bne.n	800b03c <xQueueGenericSend+0x16c>
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b042:	b25b      	sxtb	r3, r3
 800b044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b048:	d103      	bne.n	800b052 <xQueueGenericSend+0x182>
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b052:	f001 ff4f 	bl	800cef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b056:	1d3a      	adds	r2, r7, #4
 800b058:	f107 0314 	add.w	r3, r7, #20
 800b05c:	4611      	mov	r1, r2
 800b05e:	4618      	mov	r0, r3
 800b060:	f001 f878 	bl	800c154 <xTaskCheckForTimeOut>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d124      	bne.n	800b0b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b06a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b06c:	f000 fb22 	bl	800b6b4 <prvIsQueueFull>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d018      	beq.n	800b0a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	3310      	adds	r3, #16
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	4611      	mov	r1, r2
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 ff9e 	bl	800bfc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b086:	f000 faad 	bl	800b5e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b08a:	f000 fdd3 	bl	800bc34 <xTaskResumeAll>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	f47f af7c 	bne.w	800af8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <xQueueGenericSend+0x1f8>)
 800b098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	e772      	b.n	800af8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b0a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0aa:	f000 fa9b 	bl	800b5e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0ae:	f000 fdc1 	bl	800bc34 <xTaskResumeAll>
 800b0b2:	e76c      	b.n	800af8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0b6:	f000 fa95 	bl	800b5e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0ba:	f000 fdbb 	bl	800bc34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b0be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3738      	adds	r7, #56	; 0x38
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b090      	sub	sp, #64	; 0x40
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d103      	bne.n	800b108 <xQueueGenericSendFromISR+0x3c>
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <xQueueGenericSendFromISR+0x40>
 800b108:	2301      	movs	r3, #1
 800b10a:	e000      	b.n	800b10e <xQueueGenericSendFromISR+0x42>
 800b10c:	2300      	movs	r3, #0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d103      	bne.n	800b136 <xQueueGenericSendFromISR+0x6a>
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b132:	2b01      	cmp	r3, #1
 800b134:	d101      	bne.n	800b13a <xQueueGenericSendFromISR+0x6e>
 800b136:	2301      	movs	r3, #1
 800b138:	e000      	b.n	800b13c <xQueueGenericSendFromISR+0x70>
 800b13a:	2300      	movs	r3, #0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10a      	bne.n	800b156 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	623b      	str	r3, [r7, #32]
}
 800b152:	bf00      	nop
 800b154:	e7fe      	b.n	800b154 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b156:	f001 ff7f 	bl	800d058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b15a:	f3ef 8211 	mrs	r2, BASEPRI
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	61fa      	str	r2, [r7, #28]
 800b170:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b172:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b174:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b17e:	429a      	cmp	r2, r3
 800b180:	d302      	bcc.n	800b188 <xQueueGenericSendFromISR+0xbc>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b02      	cmp	r3, #2
 800b186:	d12f      	bne.n	800b1e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b19e:	f000 f991 	bl	800b4c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b1a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1aa:	d112      	bne.n	800b1d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d016      	beq.n	800b1e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b6:	3324      	adds	r3, #36	; 0x24
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 ff51 	bl	800c060 <xTaskRemoveFromEventList>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00e      	beq.n	800b1e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00b      	beq.n	800b1e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]
 800b1d0:	e007      	b.n	800b1e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	b25a      	sxtb	r2, r3
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b1e6:	e001      	b.n	800b1ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b1f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3740      	adds	r7, #64	; 0x40
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
	...

0800b204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08c      	sub	sp, #48	; 0x30
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b210:	2300      	movs	r3, #0
 800b212:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10a      	bne.n	800b234 <xQueueReceive+0x30>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	623b      	str	r3, [r7, #32]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d103      	bne.n	800b242 <xQueueReceive+0x3e>
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <xQueueReceive+0x42>
 800b242:	2301      	movs	r3, #1
 800b244:	e000      	b.n	800b248 <xQueueReceive+0x44>
 800b246:	2300      	movs	r3, #0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10a      	bne.n	800b262 <xQueueReceive+0x5e>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	61fb      	str	r3, [r7, #28]
}
 800b25e:	bf00      	nop
 800b260:	e7fe      	b.n	800b260 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b262:	f001 f8bb 	bl	800c3dc <xTaskGetSchedulerState>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <xQueueReceive+0x6e>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <xQueueReceive+0x72>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <xQueueReceive+0x74>
 800b276:	2300      	movs	r3, #0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <xQueueReceive+0x8e>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	61bb      	str	r3, [r7, #24]
}
 800b28e:	bf00      	nop
 800b290:	e7fe      	b.n	800b290 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b292:	f001 fdff 	bl	800ce94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d01f      	beq.n	800b2e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a6:	f000 f977 	bl	800b598 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	1e5a      	subs	r2, r3, #1
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00f      	beq.n	800b2da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	3310      	adds	r3, #16
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 fece 	bl	800c060 <xTaskRemoveFromEventList>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d007      	beq.n	800b2da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2ca:	4b3d      	ldr	r3, [pc, #244]	; (800b3c0 <xQueueReceive+0x1bc>)
 800b2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2da:	f001 fe0b 	bl	800cef4 <vPortExitCritical>
				return pdPASS;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e069      	b.n	800b3b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d103      	bne.n	800b2f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2e8:	f001 fe04 	bl	800cef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	e062      	b.n	800b3b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2f6:	f107 0310 	add.w	r3, r7, #16
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 ff14 	bl	800c128 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b300:	2301      	movs	r3, #1
 800b302:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b304:	f001 fdf6 	bl	800cef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b308:	f000 fc86 	bl	800bc18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b30c:	f001 fdc2 	bl	800ce94 <vPortEnterCritical>
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b316:	b25b      	sxtb	r3, r3
 800b318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b31c:	d103      	bne.n	800b326 <xQueueReceive+0x122>
 800b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b32c:	b25b      	sxtb	r3, r3
 800b32e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b332:	d103      	bne.n	800b33c <xQueueReceive+0x138>
 800b334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b336:	2200      	movs	r2, #0
 800b338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b33c:	f001 fdda 	bl	800cef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b340:	1d3a      	adds	r2, r7, #4
 800b342:	f107 0310 	add.w	r3, r7, #16
 800b346:	4611      	mov	r1, r2
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 ff03 	bl	800c154 <xTaskCheckForTimeOut>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d123      	bne.n	800b39c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b356:	f000 f997 	bl	800b688 <prvIsQueueEmpty>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d017      	beq.n	800b390 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	3324      	adds	r3, #36	; 0x24
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	4611      	mov	r1, r2
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fe29 	bl	800bfc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b36e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b370:	f000 f938 	bl	800b5e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b374:	f000 fc5e 	bl	800bc34 <xTaskResumeAll>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d189      	bne.n	800b292 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b37e:	4b10      	ldr	r3, [pc, #64]	; (800b3c0 <xQueueReceive+0x1bc>)
 800b380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	e780      	b.n	800b292 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b392:	f000 f927 	bl	800b5e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b396:	f000 fc4d 	bl	800bc34 <xTaskResumeAll>
 800b39a:	e77a      	b.n	800b292 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b39e:	f000 f921 	bl	800b5e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3a2:	f000 fc47 	bl	800bc34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3a8:	f000 f96e 	bl	800b688 <prvIsQueueEmpty>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f43f af6f 	beq.w	800b292 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3730      	adds	r7, #48	; 0x30
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	e000ed04 	.word	0xe000ed04

0800b3c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08e      	sub	sp, #56	; 0x38
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10a      	bne.n	800b3f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	623b      	str	r3, [r7, #32]
}
 800b3ec:	bf00      	nop
 800b3ee:	e7fe      	b.n	800b3ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d103      	bne.n	800b3fe <xQueueReceiveFromISR+0x3a>
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <xQueueReceiveFromISR+0x3e>
 800b3fe:	2301      	movs	r3, #1
 800b400:	e000      	b.n	800b404 <xQueueReceiveFromISR+0x40>
 800b402:	2300      	movs	r3, #0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10a      	bne.n	800b41e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	61fb      	str	r3, [r7, #28]
}
 800b41a:	bf00      	nop
 800b41c:	e7fe      	b.n	800b41c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b41e:	f001 fe1b 	bl	800d058 <vPortValidateInterruptPriority>
	__asm volatile
 800b422:	f3ef 8211 	mrs	r2, BASEPRI
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	61ba      	str	r2, [r7, #24]
 800b438:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b43a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b43c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b442:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b446:	2b00      	cmp	r3, #0
 800b448:	d02f      	beq.n	800b4aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b454:	68b9      	ldr	r1, [r7, #8]
 800b456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b458:	f000 f89e 	bl	800b598 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45e:	1e5a      	subs	r2, r3, #1
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b46c:	d112      	bne.n	800b494 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d016      	beq.n	800b4a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	3310      	adds	r3, #16
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 fdf0 	bl	800c060 <xTaskRemoveFromEventList>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00e      	beq.n	800b4a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	e007      	b.n	800b4a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b498:	3301      	adds	r3, #1
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	b25a      	sxtb	r2, r3
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a8:	e001      	b.n	800b4ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f383 8811 	msr	BASEPRI, r3
}
 800b4b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3738      	adds	r7, #56	; 0x38
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10d      	bne.n	800b4fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d14d      	bne.n	800b586 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 ff92 	bl	800c418 <xTaskPriorityDisinherit>
 800b4f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	609a      	str	r2, [r3, #8]
 800b4fc:	e043      	b.n	800b586 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d119      	bne.n	800b538 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6858      	ldr	r0, [r3, #4]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50c:	461a      	mov	r2, r3
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	f002 fb2a 	bl	800db68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51c:	441a      	add	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d32b      	bcc.n	800b586 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	605a      	str	r2, [r3, #4]
 800b536:	e026      	b.n	800b586 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68d8      	ldr	r0, [r3, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b540:	461a      	mov	r2, r3
 800b542:	68b9      	ldr	r1, [r7, #8]
 800b544:	f002 fb10 	bl	800db68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	68da      	ldr	r2, [r3, #12]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b550:	425b      	negs	r3, r3
 800b552:	441a      	add	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	68da      	ldr	r2, [r3, #12]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	429a      	cmp	r2, r3
 800b562:	d207      	bcs.n	800b574 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	425b      	negs	r3, r3
 800b56e:	441a      	add	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b02      	cmp	r3, #2
 800b578:	d105      	bne.n	800b586 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	3b01      	subs	r3, #1
 800b584:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b58e:	697b      	ldr	r3, [r7, #20]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d018      	beq.n	800b5dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68da      	ldr	r2, [r3, #12]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b2:	441a      	add	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	68da      	ldr	r2, [r3, #12]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d303      	bcc.n	800b5cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	68d9      	ldr	r1, [r3, #12]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	6838      	ldr	r0, [r7, #0]
 800b5d8:	f002 fac6 	bl	800db68 <memcpy>
	}
}
 800b5dc:	bf00      	nop
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5ec:	f001 fc52 	bl	800ce94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5f8:	e011      	b.n	800b61e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d012      	beq.n	800b628 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	3324      	adds	r3, #36	; 0x24
 800b606:	4618      	mov	r0, r3
 800b608:	f000 fd2a 	bl	800c060 <xTaskRemoveFromEventList>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b612:	f000 fe01 	bl	800c218 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	3b01      	subs	r3, #1
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b61e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b622:	2b00      	cmp	r3, #0
 800b624:	dce9      	bgt.n	800b5fa <prvUnlockQueue+0x16>
 800b626:	e000      	b.n	800b62a <prvUnlockQueue+0x46>
					break;
 800b628:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	22ff      	movs	r2, #255	; 0xff
 800b62e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b632:	f001 fc5f 	bl	800cef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b636:	f001 fc2d 	bl	800ce94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b640:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b642:	e011      	b.n	800b668 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d012      	beq.n	800b672 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3310      	adds	r3, #16
 800b650:	4618      	mov	r0, r3
 800b652:	f000 fd05 	bl	800c060 <xTaskRemoveFromEventList>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b65c:	f000 fddc 	bl	800c218 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	3b01      	subs	r3, #1
 800b664:	b2db      	uxtb	r3, r3
 800b666:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dce9      	bgt.n	800b644 <prvUnlockQueue+0x60>
 800b670:	e000      	b.n	800b674 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b672:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	22ff      	movs	r2, #255	; 0xff
 800b678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b67c:	f001 fc3a 	bl	800cef4 <vPortExitCritical>
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b690:	f001 fc00 	bl	800ce94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d102      	bne.n	800b6a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b69c:	2301      	movs	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	e001      	b.n	800b6a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6a6:	f001 fc25 	bl	800cef4 <vPortExitCritical>

	return xReturn;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6bc:	f001 fbea 	bl	800ce94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d102      	bne.n	800b6d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	60fb      	str	r3, [r7, #12]
 800b6d0:	e001      	b.n	800b6d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6d6:	f001 fc0d 	bl	800cef4 <vPortExitCritical>

	return xReturn;
 800b6da:	68fb      	ldr	r3, [r7, #12]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	e014      	b.n	800b71e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b6f4:	4a0f      	ldr	r2, [pc, #60]	; (800b734 <vQueueAddToRegistry+0x50>)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10b      	bne.n	800b718 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b700:	490c      	ldr	r1, [pc, #48]	; (800b734 <vQueueAddToRegistry+0x50>)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b70a:	4a0a      	ldr	r2, [pc, #40]	; (800b734 <vQueueAddToRegistry+0x50>)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4413      	add	r3, r2
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b716:	e006      	b.n	800b726 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	3301      	adds	r3, #1
 800b71c:	60fb      	str	r3, [r7, #12]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b07      	cmp	r3, #7
 800b722:	d9e7      	bls.n	800b6f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b724:	bf00      	nop
 800b726:	bf00      	nop
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	20004da4 	.word	0x20004da4

0800b738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b748:	f001 fba4 	bl	800ce94 <vPortEnterCritical>
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b752:	b25b      	sxtb	r3, r3
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b758:	d103      	bne.n	800b762 <vQueueWaitForMessageRestricted+0x2a>
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b76e:	d103      	bne.n	800b778 <vQueueWaitForMessageRestricted+0x40>
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b778:	f001 fbbc 	bl	800cef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b780:	2b00      	cmp	r3, #0
 800b782:	d106      	bne.n	800b792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	3324      	adds	r3, #36	; 0x24
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f000 fc3b 	bl	800c008 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b792:	6978      	ldr	r0, [r7, #20]
 800b794:	f7ff ff26 	bl	800b5e4 <prvUnlockQueue>
	}
 800b798:	bf00      	nop
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08e      	sub	sp, #56	; 0x38
 800b7a4:	af04      	add	r7, sp, #16
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	623b      	str	r3, [r7, #32]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	61fb      	str	r3, [r7, #28]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7e6:	235c      	movs	r3, #92	; 0x5c
 800b7e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	2b5c      	cmp	r3, #92	; 0x5c
 800b7ee:	d00a      	beq.n	800b806 <xTaskCreateStatic+0x66>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	61bb      	str	r3, [r7, #24]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b806:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d01e      	beq.n	800b84c <xTaskCreateStatic+0xac>
 800b80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01b      	beq.n	800b84c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b81c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	2202      	movs	r2, #2
 800b822:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b826:	2300      	movs	r3, #0
 800b828:	9303      	str	r3, [sp, #12]
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	9302      	str	r3, [sp, #8]
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	68b9      	ldr	r1, [r7, #8]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 f850 	bl	800b8e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b846:	f000 f8dd 	bl	800ba04 <prvAddNewTaskToReadyList>
 800b84a:	e001      	b.n	800b850 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b84c:	2300      	movs	r3, #0
 800b84e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b850:	697b      	ldr	r3, [r7, #20]
	}
 800b852:	4618      	mov	r0, r3
 800b854:	3728      	adds	r7, #40	; 0x28
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b08c      	sub	sp, #48	; 0x30
 800b85e:	af04      	add	r7, sp, #16
 800b860:	60f8      	str	r0, [r7, #12]
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	603b      	str	r3, [r7, #0]
 800b866:	4613      	mov	r3, r2
 800b868:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b86a:	88fb      	ldrh	r3, [r7, #6]
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fc32 	bl	800d0d8 <pvPortMalloc>
 800b874:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00e      	beq.n	800b89a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b87c:	205c      	movs	r0, #92	; 0x5c
 800b87e:	f001 fc2b 	bl	800d0d8 <pvPortMalloc>
 800b882:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d003      	beq.n	800b892 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	631a      	str	r2, [r3, #48]	; 0x30
 800b890:	e005      	b.n	800b89e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b892:	6978      	ldr	r0, [r7, #20]
 800b894:	f001 fcec 	bl	800d270 <vPortFree>
 800b898:	e001      	b.n	800b89e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b89a:	2300      	movs	r3, #0
 800b89c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d017      	beq.n	800b8d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8ac:	88fa      	ldrh	r2, [r7, #6]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	9303      	str	r3, [sp, #12]
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	9302      	str	r3, [sp, #8]
 800b8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	68b9      	ldr	r1, [r7, #8]
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f000 f80e 	bl	800b8e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c8:	69f8      	ldr	r0, [r7, #28]
 800b8ca:	f000 f89b 	bl	800ba04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	61bb      	str	r3, [r7, #24]
 800b8d2:	e002      	b.n	800b8da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8da:	69bb      	ldr	r3, [r7, #24]
	}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3720      	adds	r7, #32
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	21a5      	movs	r1, #165	; 0xa5
 800b8fe:	f002 f941 	bl	800db84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b90c:	3b01      	subs	r3, #1
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4413      	add	r3, r2
 800b912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	f023 0307 	bic.w	r3, r3, #7
 800b91a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	f003 0307 	and.w	r3, r3, #7
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00a      	beq.n	800b93c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	617b      	str	r3, [r7, #20]
}
 800b938:	bf00      	nop
 800b93a:	e7fe      	b.n	800b93a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d01f      	beq.n	800b982 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b942:	2300      	movs	r3, #0
 800b944:	61fb      	str	r3, [r7, #28]
 800b946:	e012      	b.n	800b96e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	4413      	add	r3, r2
 800b94e:	7819      	ldrb	r1, [r3, #0]
 800b950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	4413      	add	r3, r2
 800b956:	3334      	adds	r3, #52	; 0x34
 800b958:	460a      	mov	r2, r1
 800b95a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	4413      	add	r3, r2
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d006      	beq.n	800b976 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	3301      	adds	r3, #1
 800b96c:	61fb      	str	r3, [r7, #28]
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	2b0f      	cmp	r3, #15
 800b972:	d9e9      	bls.n	800b948 <prvInitialiseNewTask+0x64>
 800b974:	e000      	b.n	800b978 <prvInitialiseNewTask+0x94>
			{
				break;
 800b976:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b980:	e003      	b.n	800b98a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98c:	2b37      	cmp	r3, #55	; 0x37
 800b98e:	d901      	bls.n	800b994 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b990:	2337      	movs	r3, #55	; 0x37
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b998:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b99e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff f8be 	bl	800ab2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	3318      	adds	r3, #24
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff f8b9 	bl	800ab2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	68f9      	ldr	r1, [r7, #12]
 800b9e2:	69b8      	ldr	r0, [r7, #24]
 800b9e4:	f001 f928 	bl	800cc38 <pxPortInitialiseStack>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9fa:	bf00      	nop
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
	...

0800ba04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba0c:	f001 fa42 	bl	800ce94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba10:	4b2d      	ldr	r3, [pc, #180]	; (800bac8 <prvAddNewTaskToReadyList+0xc4>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3301      	adds	r3, #1
 800ba16:	4a2c      	ldr	r2, [pc, #176]	; (800bac8 <prvAddNewTaskToReadyList+0xc4>)
 800ba18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba1a:	4b2c      	ldr	r3, [pc, #176]	; (800bacc <prvAddNewTaskToReadyList+0xc8>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d109      	bne.n	800ba36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba22:	4a2a      	ldr	r2, [pc, #168]	; (800bacc <prvAddNewTaskToReadyList+0xc8>)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba28:	4b27      	ldr	r3, [pc, #156]	; (800bac8 <prvAddNewTaskToReadyList+0xc4>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d110      	bne.n	800ba52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba30:	f000 fc16 	bl	800c260 <prvInitialiseTaskLists>
 800ba34:	e00d      	b.n	800ba52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba36:	4b26      	ldr	r3, [pc, #152]	; (800bad0 <prvAddNewTaskToReadyList+0xcc>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d109      	bne.n	800ba52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba3e:	4b23      	ldr	r3, [pc, #140]	; (800bacc <prvAddNewTaskToReadyList+0xc8>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d802      	bhi.n	800ba52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba4c:	4a1f      	ldr	r2, [pc, #124]	; (800bacc <prvAddNewTaskToReadyList+0xc8>)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba52:	4b20      	ldr	r3, [pc, #128]	; (800bad4 <prvAddNewTaskToReadyList+0xd0>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3301      	adds	r3, #1
 800ba58:	4a1e      	ldr	r2, [pc, #120]	; (800bad4 <prvAddNewTaskToReadyList+0xd0>)
 800ba5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba5c:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <prvAddNewTaskToReadyList+0xd0>)
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba68:	4b1b      	ldr	r3, [pc, #108]	; (800bad8 <prvAddNewTaskToReadyList+0xd4>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d903      	bls.n	800ba78 <prvAddNewTaskToReadyList+0x74>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba74:	4a18      	ldr	r2, [pc, #96]	; (800bad8 <prvAddNewTaskToReadyList+0xd4>)
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4a15      	ldr	r2, [pc, #84]	; (800badc <prvAddNewTaskToReadyList+0xd8>)
 800ba86:	441a      	add	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4610      	mov	r0, r2
 800ba90:	f7ff f859 	bl	800ab46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba94:	f001 fa2e 	bl	800cef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba98:	4b0d      	ldr	r3, [pc, #52]	; (800bad0 <prvAddNewTaskToReadyList+0xcc>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00e      	beq.n	800babe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800baa0:	4b0a      	ldr	r3, [pc, #40]	; (800bacc <prvAddNewTaskToReadyList+0xc8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baaa:	429a      	cmp	r2, r3
 800baac:	d207      	bcs.n	800babe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800baae:	4b0c      	ldr	r3, [pc, #48]	; (800bae0 <prvAddNewTaskToReadyList+0xdc>)
 800bab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800babe:	bf00      	nop
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20000fa4 	.word	0x20000fa4
 800bacc:	20000ad0 	.word	0x20000ad0
 800bad0:	20000fb0 	.word	0x20000fb0
 800bad4:	20000fc0 	.word	0x20000fc0
 800bad8:	20000fac 	.word	0x20000fac
 800badc:	20000ad4 	.word	0x20000ad4
 800bae0:	e000ed04 	.word	0xe000ed04

0800bae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d017      	beq.n	800bb26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800baf6:	4b13      	ldr	r3, [pc, #76]	; (800bb44 <vTaskDelay+0x60>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <vTaskDelay+0x30>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	60bb      	str	r3, [r7, #8]
}
 800bb10:	bf00      	nop
 800bb12:	e7fe      	b.n	800bb12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb14:	f000 f880 	bl	800bc18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb18:	2100      	movs	r1, #0
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fcea 	bl	800c4f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb20:	f000 f888 	bl	800bc34 <xTaskResumeAll>
 800bb24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d107      	bne.n	800bb3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bb2c:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <vTaskDelay+0x64>)
 800bb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	20000fcc 	.word	0x20000fcc
 800bb48:	e000ed04 	.word	0xe000ed04

0800bb4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08a      	sub	sp, #40	; 0x28
 800bb50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb5a:	463a      	mov	r2, r7
 800bb5c:	1d39      	adds	r1, r7, #4
 800bb5e:	f107 0308 	add.w	r3, r7, #8
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe ff8e 	bl	800aa84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	9202      	str	r2, [sp, #8]
 800bb70:	9301      	str	r3, [sp, #4]
 800bb72:	2300      	movs	r3, #0
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	2300      	movs	r3, #0
 800bb78:	460a      	mov	r2, r1
 800bb7a:	4921      	ldr	r1, [pc, #132]	; (800bc00 <vTaskStartScheduler+0xb4>)
 800bb7c:	4821      	ldr	r0, [pc, #132]	; (800bc04 <vTaskStartScheduler+0xb8>)
 800bb7e:	f7ff fe0f 	bl	800b7a0 <xTaskCreateStatic>
 800bb82:	4603      	mov	r3, r0
 800bb84:	4a20      	ldr	r2, [pc, #128]	; (800bc08 <vTaskStartScheduler+0xbc>)
 800bb86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb88:	4b1f      	ldr	r3, [pc, #124]	; (800bc08 <vTaskStartScheduler+0xbc>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb90:	2301      	movs	r3, #1
 800bb92:	617b      	str	r3, [r7, #20]
 800bb94:	e001      	b.n	800bb9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d102      	bne.n	800bba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bba0:	f000 fcfc 	bl	800c59c <xTimerCreateTimerTask>
 800bba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d116      	bne.n	800bbda <vTaskStartScheduler+0x8e>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	613b      	str	r3, [r7, #16]
}
 800bbbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbc0:	4b12      	ldr	r3, [pc, #72]	; (800bc0c <vTaskStartScheduler+0xc0>)
 800bbc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbc8:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <vTaskStartScheduler+0xc4>)
 800bbca:	2201      	movs	r2, #1
 800bbcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbce:	4b11      	ldr	r3, [pc, #68]	; (800bc14 <vTaskStartScheduler+0xc8>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbd4:	f001 f8bc 	bl	800cd50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbd8:	e00e      	b.n	800bbf8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbe0:	d10a      	bne.n	800bbf8 <vTaskStartScheduler+0xac>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	60fb      	str	r3, [r7, #12]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <vTaskStartScheduler+0xaa>
}
 800bbf8:	bf00      	nop
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	0800ddec 	.word	0x0800ddec
 800bc04:	0800c231 	.word	0x0800c231
 800bc08:	20000fc8 	.word	0x20000fc8
 800bc0c:	20000fc4 	.word	0x20000fc4
 800bc10:	20000fb0 	.word	0x20000fb0
 800bc14:	20000fa8 	.word	0x20000fa8

0800bc18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc1c:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <vTaskSuspendAll+0x18>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3301      	adds	r3, #1
 800bc22:	4a03      	ldr	r2, [pc, #12]	; (800bc30 <vTaskSuspendAll+0x18>)
 800bc24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc26:	bf00      	nop
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	20000fcc 	.word	0x20000fcc

0800bc34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc42:	4b42      	ldr	r3, [pc, #264]	; (800bd4c <xTaskResumeAll+0x118>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <xTaskResumeAll+0x2c>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	603b      	str	r3, [r7, #0]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc60:	f001 f918 	bl	800ce94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc64:	4b39      	ldr	r3, [pc, #228]	; (800bd4c <xTaskResumeAll+0x118>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	4a38      	ldr	r2, [pc, #224]	; (800bd4c <xTaskResumeAll+0x118>)
 800bc6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc6e:	4b37      	ldr	r3, [pc, #220]	; (800bd4c <xTaskResumeAll+0x118>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d162      	bne.n	800bd3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc76:	4b36      	ldr	r3, [pc, #216]	; (800bd50 <xTaskResumeAll+0x11c>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d05e      	beq.n	800bd3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc7e:	e02f      	b.n	800bce0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc80:	4b34      	ldr	r3, [pc, #208]	; (800bd54 <xTaskResumeAll+0x120>)
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3318      	adds	r3, #24
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fe ffb7 	bl	800ac00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3304      	adds	r3, #4
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fe ffb2 	bl	800ac00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca0:	4b2d      	ldr	r3, [pc, #180]	; (800bd58 <xTaskResumeAll+0x124>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d903      	bls.n	800bcb0 <xTaskResumeAll+0x7c>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	4a2a      	ldr	r2, [pc, #168]	; (800bd58 <xTaskResumeAll+0x124>)
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4a27      	ldr	r2, [pc, #156]	; (800bd5c <xTaskResumeAll+0x128>)
 800bcbe:	441a      	add	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	f7fe ff3d 	bl	800ab46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd0:	4b23      	ldr	r3, [pc, #140]	; (800bd60 <xTaskResumeAll+0x12c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d302      	bcc.n	800bce0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bcda:	4b22      	ldr	r3, [pc, #136]	; (800bd64 <xTaskResumeAll+0x130>)
 800bcdc:	2201      	movs	r2, #1
 800bcde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bce0:	4b1c      	ldr	r3, [pc, #112]	; (800bd54 <xTaskResumeAll+0x120>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1cb      	bne.n	800bc80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bcee:	f000 fb55 	bl	800c39c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bcf2:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <xTaskResumeAll+0x134>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d010      	beq.n	800bd20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcfe:	f000 f847 	bl	800bd90 <xTaskIncrementTick>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d002      	beq.n	800bd0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd08:	4b16      	ldr	r3, [pc, #88]	; (800bd64 <xTaskResumeAll+0x130>)
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1f1      	bne.n	800bcfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd1a:	4b13      	ldr	r3, [pc, #76]	; (800bd68 <xTaskResumeAll+0x134>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd20:	4b10      	ldr	r3, [pc, #64]	; (800bd64 <xTaskResumeAll+0x130>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d009      	beq.n	800bd3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd2c:	4b0f      	ldr	r3, [pc, #60]	; (800bd6c <xTaskResumeAll+0x138>)
 800bd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd3c:	f001 f8da 	bl	800cef4 <vPortExitCritical>

	return xAlreadyYielded;
 800bd40:	68bb      	ldr	r3, [r7, #8]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000fcc 	.word	0x20000fcc
 800bd50:	20000fa4 	.word	0x20000fa4
 800bd54:	20000f64 	.word	0x20000f64
 800bd58:	20000fac 	.word	0x20000fac
 800bd5c:	20000ad4 	.word	0x20000ad4
 800bd60:	20000ad0 	.word	0x20000ad0
 800bd64:	20000fb8 	.word	0x20000fb8
 800bd68:	20000fb4 	.word	0x20000fb4
 800bd6c:	e000ed04 	.word	0xe000ed04

0800bd70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd76:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <xTaskGetTickCount+0x1c>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd7c:	687b      	ldr	r3, [r7, #4]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	20000fa8 	.word	0x20000fa8

0800bd90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd9a:	4b4f      	ldr	r3, [pc, #316]	; (800bed8 <xTaskIncrementTick+0x148>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f040 808f 	bne.w	800bec2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bda4:	4b4d      	ldr	r3, [pc, #308]	; (800bedc <xTaskIncrementTick+0x14c>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bdac:	4a4b      	ldr	r2, [pc, #300]	; (800bedc <xTaskIncrementTick+0x14c>)
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d120      	bne.n	800bdfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bdb8:	4b49      	ldr	r3, [pc, #292]	; (800bee0 <xTaskIncrementTick+0x150>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	603b      	str	r3, [r7, #0]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <xTaskIncrementTick+0x46>
 800bdd8:	4b41      	ldr	r3, [pc, #260]	; (800bee0 <xTaskIncrementTick+0x150>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60fb      	str	r3, [r7, #12]
 800bdde:	4b41      	ldr	r3, [pc, #260]	; (800bee4 <xTaskIncrementTick+0x154>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a3f      	ldr	r2, [pc, #252]	; (800bee0 <xTaskIncrementTick+0x150>)
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	4a3f      	ldr	r2, [pc, #252]	; (800bee4 <xTaskIncrementTick+0x154>)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6013      	str	r3, [r2, #0]
 800bdec:	4b3e      	ldr	r3, [pc, #248]	; (800bee8 <xTaskIncrementTick+0x158>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	4a3d      	ldr	r2, [pc, #244]	; (800bee8 <xTaskIncrementTick+0x158>)
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	f000 fad1 	bl	800c39c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdfa:	4b3c      	ldr	r3, [pc, #240]	; (800beec <xTaskIncrementTick+0x15c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	429a      	cmp	r2, r3
 800be02:	d349      	bcc.n	800be98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be04:	4b36      	ldr	r3, [pc, #216]	; (800bee0 <xTaskIncrementTick+0x150>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d104      	bne.n	800be18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be0e:	4b37      	ldr	r3, [pc, #220]	; (800beec <xTaskIncrementTick+0x15c>)
 800be10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be14:	601a      	str	r2, [r3, #0]
					break;
 800be16:	e03f      	b.n	800be98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be18:	4b31      	ldr	r3, [pc, #196]	; (800bee0 <xTaskIncrementTick+0x150>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d203      	bcs.n	800be38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be30:	4a2e      	ldr	r2, [pc, #184]	; (800beec <xTaskIncrementTick+0x15c>)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be36:	e02f      	b.n	800be98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	3304      	adds	r3, #4
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fe fedf 	bl	800ac00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be46:	2b00      	cmp	r3, #0
 800be48:	d004      	beq.n	800be54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	3318      	adds	r3, #24
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe fed6 	bl	800ac00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be58:	4b25      	ldr	r3, [pc, #148]	; (800bef0 <xTaskIncrementTick+0x160>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d903      	bls.n	800be68 <xTaskIncrementTick+0xd8>
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be64:	4a22      	ldr	r2, [pc, #136]	; (800bef0 <xTaskIncrementTick+0x160>)
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6c:	4613      	mov	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4413      	add	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4a1f      	ldr	r2, [pc, #124]	; (800bef4 <xTaskIncrementTick+0x164>)
 800be76:	441a      	add	r2, r3
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	3304      	adds	r3, #4
 800be7c:	4619      	mov	r1, r3
 800be7e:	4610      	mov	r0, r2
 800be80:	f7fe fe61 	bl	800ab46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be88:	4b1b      	ldr	r3, [pc, #108]	; (800bef8 <xTaskIncrementTick+0x168>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8e:	429a      	cmp	r2, r3
 800be90:	d3b8      	bcc.n	800be04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800be92:	2301      	movs	r3, #1
 800be94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be96:	e7b5      	b.n	800be04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be98:	4b17      	ldr	r3, [pc, #92]	; (800bef8 <xTaskIncrementTick+0x168>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9e:	4915      	ldr	r1, [pc, #84]	; (800bef4 <xTaskIncrementTick+0x164>)
 800bea0:	4613      	mov	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	440b      	add	r3, r1
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d901      	bls.n	800beb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800beb0:	2301      	movs	r3, #1
 800beb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800beb4:	4b11      	ldr	r3, [pc, #68]	; (800befc <xTaskIncrementTick+0x16c>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d007      	beq.n	800becc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bebc:	2301      	movs	r3, #1
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	e004      	b.n	800becc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bec2:	4b0f      	ldr	r3, [pc, #60]	; (800bf00 <xTaskIncrementTick+0x170>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3301      	adds	r3, #1
 800bec8:	4a0d      	ldr	r2, [pc, #52]	; (800bf00 <xTaskIncrementTick+0x170>)
 800beca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800becc:	697b      	ldr	r3, [r7, #20]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3718      	adds	r7, #24
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	20000fcc 	.word	0x20000fcc
 800bedc:	20000fa8 	.word	0x20000fa8
 800bee0:	20000f5c 	.word	0x20000f5c
 800bee4:	20000f60 	.word	0x20000f60
 800bee8:	20000fbc 	.word	0x20000fbc
 800beec:	20000fc4 	.word	0x20000fc4
 800bef0:	20000fac 	.word	0x20000fac
 800bef4:	20000ad4 	.word	0x20000ad4
 800bef8:	20000ad0 	.word	0x20000ad0
 800befc:	20000fb8 	.word	0x20000fb8
 800bf00:	20000fb4 	.word	0x20000fb4

0800bf04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf0a:	4b28      	ldr	r3, [pc, #160]	; (800bfac <vTaskSwitchContext+0xa8>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf12:	4b27      	ldr	r3, [pc, #156]	; (800bfb0 <vTaskSwitchContext+0xac>)
 800bf14:	2201      	movs	r2, #1
 800bf16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf18:	e041      	b.n	800bf9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bf1a:	4b25      	ldr	r3, [pc, #148]	; (800bfb0 <vTaskSwitchContext+0xac>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf20:	4b24      	ldr	r3, [pc, #144]	; (800bfb4 <vTaskSwitchContext+0xb0>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	e010      	b.n	800bf4a <vTaskSwitchContext+0x46>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <vTaskSwitchContext+0x40>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	607b      	str	r3, [r7, #4]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <vTaskSwitchContext+0x3e>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	60fb      	str	r3, [r7, #12]
 800bf4a:	491b      	ldr	r1, [pc, #108]	; (800bfb8 <vTaskSwitchContext+0xb4>)
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d0e4      	beq.n	800bf28 <vTaskSwitchContext+0x24>
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4a13      	ldr	r2, [pc, #76]	; (800bfb8 <vTaskSwitchContext+0xb4>)
 800bf6a:	4413      	add	r3, r2
 800bf6c:	60bb      	str	r3, [r7, #8]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	605a      	str	r2, [r3, #4]
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d104      	bne.n	800bf8e <vTaskSwitchContext+0x8a>
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	605a      	str	r2, [r3, #4]
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	4a09      	ldr	r2, [pc, #36]	; (800bfbc <vTaskSwitchContext+0xb8>)
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	4a06      	ldr	r2, [pc, #24]	; (800bfb4 <vTaskSwitchContext+0xb0>)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6013      	str	r3, [r2, #0]
}
 800bf9e:	bf00      	nop
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	20000fcc 	.word	0x20000fcc
 800bfb0:	20000fb8 	.word	0x20000fb8
 800bfb4:	20000fac 	.word	0x20000fac
 800bfb8:	20000ad4 	.word	0x20000ad4
 800bfbc:	20000ad0 	.word	0x20000ad0

0800bfc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	60fb      	str	r3, [r7, #12]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfe6:	4b07      	ldr	r3, [pc, #28]	; (800c004 <vTaskPlaceOnEventList+0x44>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3318      	adds	r3, #24
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7fe fdcd 	bl	800ab8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bff4:	2101      	movs	r1, #1
 800bff6:	6838      	ldr	r0, [r7, #0]
 800bff8:	f000 fa7c 	bl	800c4f4 <prvAddCurrentTaskToDelayedList>
}
 800bffc:	bf00      	nop
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20000ad0 	.word	0x20000ad0

0800c008 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10a      	bne.n	800c030 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	617b      	str	r3, [r7, #20]
}
 800c02c:	bf00      	nop
 800c02e:	e7fe      	b.n	800c02e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c030:	4b0a      	ldr	r3, [pc, #40]	; (800c05c <vTaskPlaceOnEventListRestricted+0x54>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3318      	adds	r3, #24
 800c036:	4619      	mov	r1, r3
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7fe fd84 	bl	800ab46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c048:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c04a:	6879      	ldr	r1, [r7, #4]
 800c04c:	68b8      	ldr	r0, [r7, #8]
 800c04e:	f000 fa51 	bl	800c4f4 <prvAddCurrentTaskToDelayedList>
	}
 800c052:	bf00      	nop
 800c054:	3718      	adds	r7, #24
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	20000ad0 	.word	0x20000ad0

0800c060 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10a      	bne.n	800c08c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	60fb      	str	r3, [r7, #12]
}
 800c088:	bf00      	nop
 800c08a:	e7fe      	b.n	800c08a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	3318      	adds	r3, #24
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe fdb5 	bl	800ac00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c096:	4b1e      	ldr	r3, [pc, #120]	; (800c110 <xTaskRemoveFromEventList+0xb0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d11d      	bne.n	800c0da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe fdac 	bl	800ac00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ac:	4b19      	ldr	r3, [pc, #100]	; (800c114 <xTaskRemoveFromEventList+0xb4>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d903      	bls.n	800c0bc <xTaskRemoveFromEventList+0x5c>
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	4a16      	ldr	r2, [pc, #88]	; (800c114 <xTaskRemoveFromEventList+0xb4>)
 800c0ba:	6013      	str	r3, [r2, #0]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4a13      	ldr	r2, [pc, #76]	; (800c118 <xTaskRemoveFromEventList+0xb8>)
 800c0ca:	441a      	add	r2, r3
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	f7fe fd37 	bl	800ab46 <vListInsertEnd>
 800c0d8:	e005      	b.n	800c0e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	3318      	adds	r3, #24
 800c0de:	4619      	mov	r1, r3
 800c0e0:	480e      	ldr	r0, [pc, #56]	; (800c11c <xTaskRemoveFromEventList+0xbc>)
 800c0e2:	f7fe fd30 	bl	800ab46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ea:	4b0d      	ldr	r3, [pc, #52]	; (800c120 <xTaskRemoveFromEventList+0xc0>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d905      	bls.n	800c100 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c0f8:	4b0a      	ldr	r3, [pc, #40]	; (800c124 <xTaskRemoveFromEventList+0xc4>)
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	e001      	b.n	800c104 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c100:	2300      	movs	r3, #0
 800c102:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c104:	697b      	ldr	r3, [r7, #20]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000fcc 	.word	0x20000fcc
 800c114:	20000fac 	.word	0x20000fac
 800c118:	20000ad4 	.word	0x20000ad4
 800c11c:	20000f64 	.word	0x20000f64
 800c120:	20000ad0 	.word	0x20000ad0
 800c124:	20000fb8 	.word	0x20000fb8

0800c128 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c130:	4b06      	ldr	r3, [pc, #24]	; (800c14c <vTaskInternalSetTimeOutState+0x24>)
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c138:	4b05      	ldr	r3, [pc, #20]	; (800c150 <vTaskInternalSetTimeOutState+0x28>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	605a      	str	r2, [r3, #4]
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	20000fbc 	.word	0x20000fbc
 800c150:	20000fa8 	.word	0x20000fa8

0800c154 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b088      	sub	sp, #32
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	613b      	str	r3, [r7, #16]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	60fb      	str	r3, [r7, #12]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c196:	f000 fe7d 	bl	800ce94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c19a:	4b1d      	ldr	r3, [pc, #116]	; (800c210 <xTaskCheckForTimeOut+0xbc>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b2:	d102      	bne.n	800c1ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	61fb      	str	r3, [r7, #28]
 800c1b8:	e023      	b.n	800c202 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	4b15      	ldr	r3, [pc, #84]	; (800c214 <xTaskCheckForTimeOut+0xc0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d007      	beq.n	800c1d6 <xTaskCheckForTimeOut+0x82>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d302      	bcc.n	800c1d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	61fb      	str	r3, [r7, #28]
 800c1d4:	e015      	b.n	800c202 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d20b      	bcs.n	800c1f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	1ad2      	subs	r2, r2, r3
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff ff9b 	bl	800c128 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	61fb      	str	r3, [r7, #28]
 800c1f6:	e004      	b.n	800c202 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1fe:	2301      	movs	r3, #1
 800c200:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c202:	f000 fe77 	bl	800cef4 <vPortExitCritical>

	return xReturn;
 800c206:	69fb      	ldr	r3, [r7, #28]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3720      	adds	r7, #32
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	20000fa8 	.word	0x20000fa8
 800c214:	20000fbc 	.word	0x20000fbc

0800c218 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c218:	b480      	push	{r7}
 800c21a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c21c:	4b03      	ldr	r3, [pc, #12]	; (800c22c <vTaskMissedYield+0x14>)
 800c21e:	2201      	movs	r2, #1
 800c220:	601a      	str	r2, [r3, #0]
}
 800c222:	bf00      	nop
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	20000fb8 	.word	0x20000fb8

0800c230 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c238:	f000 f852 	bl	800c2e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c23c:	4b06      	ldr	r3, [pc, #24]	; (800c258 <prvIdleTask+0x28>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d9f9      	bls.n	800c238 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c244:	4b05      	ldr	r3, [pc, #20]	; (800c25c <prvIdleTask+0x2c>)
 800c246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c254:	e7f0      	b.n	800c238 <prvIdleTask+0x8>
 800c256:	bf00      	nop
 800c258:	20000ad4 	.word	0x20000ad4
 800c25c:	e000ed04 	.word	0xe000ed04

0800c260 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c266:	2300      	movs	r3, #0
 800c268:	607b      	str	r3, [r7, #4]
 800c26a:	e00c      	b.n	800c286 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	4613      	mov	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	4a12      	ldr	r2, [pc, #72]	; (800c2c0 <prvInitialiseTaskLists+0x60>)
 800c278:	4413      	add	r3, r2
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fc36 	bl	800aaec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3301      	adds	r3, #1
 800c284:	607b      	str	r3, [r7, #4]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b37      	cmp	r3, #55	; 0x37
 800c28a:	d9ef      	bls.n	800c26c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c28c:	480d      	ldr	r0, [pc, #52]	; (800c2c4 <prvInitialiseTaskLists+0x64>)
 800c28e:	f7fe fc2d 	bl	800aaec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c292:	480d      	ldr	r0, [pc, #52]	; (800c2c8 <prvInitialiseTaskLists+0x68>)
 800c294:	f7fe fc2a 	bl	800aaec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c298:	480c      	ldr	r0, [pc, #48]	; (800c2cc <prvInitialiseTaskLists+0x6c>)
 800c29a:	f7fe fc27 	bl	800aaec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c29e:	480c      	ldr	r0, [pc, #48]	; (800c2d0 <prvInitialiseTaskLists+0x70>)
 800c2a0:	f7fe fc24 	bl	800aaec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2a4:	480b      	ldr	r0, [pc, #44]	; (800c2d4 <prvInitialiseTaskLists+0x74>)
 800c2a6:	f7fe fc21 	bl	800aaec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c2aa:	4b0b      	ldr	r3, [pc, #44]	; (800c2d8 <prvInitialiseTaskLists+0x78>)
 800c2ac:	4a05      	ldr	r2, [pc, #20]	; (800c2c4 <prvInitialiseTaskLists+0x64>)
 800c2ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2b0:	4b0a      	ldr	r3, [pc, #40]	; (800c2dc <prvInitialiseTaskLists+0x7c>)
 800c2b2:	4a05      	ldr	r2, [pc, #20]	; (800c2c8 <prvInitialiseTaskLists+0x68>)
 800c2b4:	601a      	str	r2, [r3, #0]
}
 800c2b6:	bf00      	nop
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20000ad4 	.word	0x20000ad4
 800c2c4:	20000f34 	.word	0x20000f34
 800c2c8:	20000f48 	.word	0x20000f48
 800c2cc:	20000f64 	.word	0x20000f64
 800c2d0:	20000f78 	.word	0x20000f78
 800c2d4:	20000f90 	.word	0x20000f90
 800c2d8:	20000f5c 	.word	0x20000f5c
 800c2dc:	20000f60 	.word	0x20000f60

0800c2e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2e6:	e019      	b.n	800c31c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2e8:	f000 fdd4 	bl	800ce94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ec:	4b10      	ldr	r3, [pc, #64]	; (800c330 <prvCheckTasksWaitingTermination+0x50>)
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fe fc81 	bl	800ac00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2fe:	4b0d      	ldr	r3, [pc, #52]	; (800c334 <prvCheckTasksWaitingTermination+0x54>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3b01      	subs	r3, #1
 800c304:	4a0b      	ldr	r2, [pc, #44]	; (800c334 <prvCheckTasksWaitingTermination+0x54>)
 800c306:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c308:	4b0b      	ldr	r3, [pc, #44]	; (800c338 <prvCheckTasksWaitingTermination+0x58>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	4a0a      	ldr	r2, [pc, #40]	; (800c338 <prvCheckTasksWaitingTermination+0x58>)
 800c310:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c312:	f000 fdef 	bl	800cef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f810 	bl	800c33c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c31c:	4b06      	ldr	r3, [pc, #24]	; (800c338 <prvCheckTasksWaitingTermination+0x58>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1e1      	bne.n	800c2e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c324:	bf00      	nop
 800c326:	bf00      	nop
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20000f78 	.word	0x20000f78
 800c334:	20000fa4 	.word	0x20000fa4
 800c338:	20000f8c 	.word	0x20000f8c

0800c33c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d108      	bne.n	800c360 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c352:	4618      	mov	r0, r3
 800c354:	f000 ff8c 	bl	800d270 <vPortFree>
				vPortFree( pxTCB );
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 ff89 	bl	800d270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c35e:	e018      	b.n	800c392 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c366:	2b01      	cmp	r3, #1
 800c368:	d103      	bne.n	800c372 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 ff80 	bl	800d270 <vPortFree>
	}
 800c370:	e00f      	b.n	800c392 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d00a      	beq.n	800c392 <prvDeleteTCB+0x56>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	60fb      	str	r3, [r7, #12]
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <prvDeleteTCB+0x54>
	}
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3a2:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <prvResetNextTaskUnblockTime+0x38>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d104      	bne.n	800c3b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3ac:	4b0a      	ldr	r3, [pc, #40]	; (800c3d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3b4:	e008      	b.n	800c3c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b6:	4b07      	ldr	r3, [pc, #28]	; (800c3d4 <prvResetNextTaskUnblockTime+0x38>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	4a04      	ldr	r2, [pc, #16]	; (800c3d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3c6:	6013      	str	r3, [r2, #0]
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr
 800c3d4:	20000f5c 	.word	0x20000f5c
 800c3d8:	20000fc4 	.word	0x20000fc4

0800c3dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3e2:	4b0b      	ldr	r3, [pc, #44]	; (800c410 <xTaskGetSchedulerState+0x34>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d102      	bne.n	800c3f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	607b      	str	r3, [r7, #4]
 800c3ee:	e008      	b.n	800c402 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3f0:	4b08      	ldr	r3, [pc, #32]	; (800c414 <xTaskGetSchedulerState+0x38>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d102      	bne.n	800c3fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	607b      	str	r3, [r7, #4]
 800c3fc:	e001      	b.n	800c402 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3fe:	2300      	movs	r3, #0
 800c400:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c402:	687b      	ldr	r3, [r7, #4]
	}
 800c404:	4618      	mov	r0, r3
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	20000fb0 	.word	0x20000fb0
 800c414:	20000fcc 	.word	0x20000fcc

0800c418 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c424:	2300      	movs	r3, #0
 800c426:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d056      	beq.n	800c4dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c42e:	4b2e      	ldr	r3, [pc, #184]	; (800c4e8 <xTaskPriorityDisinherit+0xd0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	429a      	cmp	r2, r3
 800c436:	d00a      	beq.n	800c44e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	60fb      	str	r3, [r7, #12]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	60bb      	str	r3, [r7, #8]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c470:	1e5a      	subs	r2, r3, #1
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c47e:	429a      	cmp	r2, r3
 800c480:	d02c      	beq.n	800c4dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c486:	2b00      	cmp	r3, #0
 800c488:	d128      	bne.n	800c4dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	3304      	adds	r3, #4
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe fbb6 	bl	800ac00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ac:	4b0f      	ldr	r3, [pc, #60]	; (800c4ec <xTaskPriorityDisinherit+0xd4>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d903      	bls.n	800c4bc <xTaskPriorityDisinherit+0xa4>
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b8:	4a0c      	ldr	r2, [pc, #48]	; (800c4ec <xTaskPriorityDisinherit+0xd4>)
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	4a09      	ldr	r2, [pc, #36]	; (800c4f0 <xTaskPriorityDisinherit+0xd8>)
 800c4ca:	441a      	add	r2, r3
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	f7fe fb37 	bl	800ab46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4dc:	697b      	ldr	r3, [r7, #20]
	}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3718      	adds	r7, #24
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20000ad0 	.word	0x20000ad0
 800c4ec:	20000fac 	.word	0x20000fac
 800c4f0:	20000ad4 	.word	0x20000ad4

0800c4f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4fe:	4b21      	ldr	r3, [pc, #132]	; (800c584 <prvAddCurrentTaskToDelayedList+0x90>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c504:	4b20      	ldr	r3, [pc, #128]	; (800c588 <prvAddCurrentTaskToDelayedList+0x94>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	3304      	adds	r3, #4
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fe fb78 	bl	800ac00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c516:	d10a      	bne.n	800c52e <prvAddCurrentTaskToDelayedList+0x3a>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d007      	beq.n	800c52e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c51e:	4b1a      	ldr	r3, [pc, #104]	; (800c588 <prvAddCurrentTaskToDelayedList+0x94>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3304      	adds	r3, #4
 800c524:	4619      	mov	r1, r3
 800c526:	4819      	ldr	r0, [pc, #100]	; (800c58c <prvAddCurrentTaskToDelayedList+0x98>)
 800c528:	f7fe fb0d 	bl	800ab46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c52c:	e026      	b.n	800c57c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4413      	add	r3, r2
 800c534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c536:	4b14      	ldr	r3, [pc, #80]	; (800c588 <prvAddCurrentTaskToDelayedList+0x94>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68ba      	ldr	r2, [r7, #8]
 800c53c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	429a      	cmp	r2, r3
 800c544:	d209      	bcs.n	800c55a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c546:	4b12      	ldr	r3, [pc, #72]	; (800c590 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <prvAddCurrentTaskToDelayedList+0x94>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3304      	adds	r3, #4
 800c550:	4619      	mov	r1, r3
 800c552:	4610      	mov	r0, r2
 800c554:	f7fe fb1b 	bl	800ab8e <vListInsert>
}
 800c558:	e010      	b.n	800c57c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c55a:	4b0e      	ldr	r3, [pc, #56]	; (800c594 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b0a      	ldr	r3, [pc, #40]	; (800c588 <prvAddCurrentTaskToDelayedList+0x94>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3304      	adds	r3, #4
 800c564:	4619      	mov	r1, r3
 800c566:	4610      	mov	r0, r2
 800c568:	f7fe fb11 	bl	800ab8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c56c:	4b0a      	ldr	r3, [pc, #40]	; (800c598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	429a      	cmp	r2, r3
 800c574:	d202      	bcs.n	800c57c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c576:	4a08      	ldr	r2, [pc, #32]	; (800c598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	6013      	str	r3, [r2, #0]
}
 800c57c:	bf00      	nop
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	20000fa8 	.word	0x20000fa8
 800c588:	20000ad0 	.word	0x20000ad0
 800c58c:	20000f90 	.word	0x20000f90
 800c590:	20000f60 	.word	0x20000f60
 800c594:	20000f5c 	.word	0x20000f5c
 800c598:	20000fc4 	.word	0x20000fc4

0800c59c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c5a6:	f000 fb07 	bl	800cbb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c5aa:	4b1c      	ldr	r3, [pc, #112]	; (800c61c <xTimerCreateTimerTask+0x80>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d021      	beq.n	800c5f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5ba:	1d3a      	adds	r2, r7, #4
 800c5bc:	f107 0108 	add.w	r1, r7, #8
 800c5c0:	f107 030c 	add.w	r3, r7, #12
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fe fa77 	bl	800aab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c5ca:	6879      	ldr	r1, [r7, #4]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	9202      	str	r2, [sp, #8]
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	2300      	movs	r3, #0
 800c5da:	460a      	mov	r2, r1
 800c5dc:	4910      	ldr	r1, [pc, #64]	; (800c620 <xTimerCreateTimerTask+0x84>)
 800c5de:	4811      	ldr	r0, [pc, #68]	; (800c624 <xTimerCreateTimerTask+0x88>)
 800c5e0:	f7ff f8de 	bl	800b7a0 <xTaskCreateStatic>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	4a10      	ldr	r2, [pc, #64]	; (800c628 <xTimerCreateTimerTask+0x8c>)
 800c5e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c5ea:	4b0f      	ldr	r3, [pc, #60]	; (800c628 <xTimerCreateTimerTask+0x8c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d001      	beq.n	800c5f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10a      	bne.n	800c612 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	613b      	str	r3, [r7, #16]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c612:	697b      	ldr	r3, [r7, #20]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3718      	adds	r7, #24
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	20001000 	.word	0x20001000
 800c620:	0800ddf4 	.word	0x0800ddf4
 800c624:	0800c761 	.word	0x0800c761
 800c628:	20001004 	.word	0x20001004

0800c62c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08a      	sub	sp, #40	; 0x28
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
 800c638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c63a:	2300      	movs	r3, #0
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10a      	bne.n	800c65a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	623b      	str	r3, [r7, #32]
}
 800c656:	bf00      	nop
 800c658:	e7fe      	b.n	800c658 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c65a:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <xTimerGenericCommand+0x98>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d02a      	beq.n	800c6b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2b05      	cmp	r3, #5
 800c672:	dc18      	bgt.n	800c6a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c674:	f7ff feb2 	bl	800c3dc <xTaskGetSchedulerState>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d109      	bne.n	800c692 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c67e:	4b11      	ldr	r3, [pc, #68]	; (800c6c4 <xTimerGenericCommand+0x98>)
 800c680:	6818      	ldr	r0, [r3, #0]
 800c682:	f107 0110 	add.w	r1, r7, #16
 800c686:	2300      	movs	r3, #0
 800c688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c68a:	f7fe fc21 	bl	800aed0 <xQueueGenericSend>
 800c68e:	6278      	str	r0, [r7, #36]	; 0x24
 800c690:	e012      	b.n	800c6b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c692:	4b0c      	ldr	r3, [pc, #48]	; (800c6c4 <xTimerGenericCommand+0x98>)
 800c694:	6818      	ldr	r0, [r3, #0]
 800c696:	f107 0110 	add.w	r1, r7, #16
 800c69a:	2300      	movs	r3, #0
 800c69c:	2200      	movs	r2, #0
 800c69e:	f7fe fc17 	bl	800aed0 <xQueueGenericSend>
 800c6a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c6a4:	e008      	b.n	800c6b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6a6:	4b07      	ldr	r3, [pc, #28]	; (800c6c4 <xTimerGenericCommand+0x98>)
 800c6a8:	6818      	ldr	r0, [r3, #0]
 800c6aa:	f107 0110 	add.w	r1, r7, #16
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	f7fe fd0b 	bl	800b0cc <xQueueGenericSendFromISR>
 800c6b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3728      	adds	r7, #40	; 0x28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20001000 	.word	0x20001000

0800c6c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b088      	sub	sp, #32
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6d2:	4b22      	ldr	r3, [pc, #136]	; (800c75c <prvProcessExpiredTimer+0x94>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	3304      	adds	r3, #4
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fe fa8d 	bl	800ac00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d022      	beq.n	800c73a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	699a      	ldr	r2, [r3, #24]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	18d1      	adds	r1, r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	6978      	ldr	r0, [r7, #20]
 800c702:	f000 f8d1 	bl	800c8a8 <prvInsertTimerInActiveList>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d01f      	beq.n	800c74c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c70c:	2300      	movs	r3, #0
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	2300      	movs	r3, #0
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	2100      	movs	r1, #0
 800c716:	6978      	ldr	r0, [r7, #20]
 800c718:	f7ff ff88 	bl	800c62c <xTimerGenericCommand>
 800c71c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d113      	bne.n	800c74c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	60fb      	str	r3, [r7, #12]
}
 800c736:	bf00      	nop
 800c738:	e7fe      	b.n	800c738 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c740:	f023 0301 	bic.w	r3, r3, #1
 800c744:	b2da      	uxtb	r2, r3
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	6a1b      	ldr	r3, [r3, #32]
 800c750:	6978      	ldr	r0, [r7, #20]
 800c752:	4798      	blx	r3
}
 800c754:	bf00      	nop
 800c756:	3718      	adds	r7, #24
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	20000ff8 	.word	0x20000ff8

0800c760 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c768:	f107 0308 	add.w	r3, r7, #8
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 f857 	bl	800c820 <prvGetNextExpireTime>
 800c772:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	4619      	mov	r1, r3
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 f803 	bl	800c784 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c77e:	f000 f8d5 	bl	800c92c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c782:	e7f1      	b.n	800c768 <prvTimerTask+0x8>

0800c784 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c78e:	f7ff fa43 	bl	800bc18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c792:	f107 0308 	add.w	r3, r7, #8
 800c796:	4618      	mov	r0, r3
 800c798:	f000 f866 	bl	800c868 <prvSampleTimeNow>
 800c79c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d130      	bne.n	800c806 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10a      	bne.n	800c7c0 <prvProcessTimerOrBlockTask+0x3c>
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d806      	bhi.n	800c7c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7b2:	f7ff fa3f 	bl	800bc34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7b6:	68f9      	ldr	r1, [r7, #12]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ff85 	bl	800c6c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7be:	e024      	b.n	800c80a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d008      	beq.n	800c7d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7c6:	4b13      	ldr	r3, [pc, #76]	; (800c814 <prvProcessTimerOrBlockTask+0x90>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <prvProcessTimerOrBlockTask+0x50>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e000      	b.n	800c7d6 <prvProcessTimerOrBlockTask+0x52>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c7d8:	4b0f      	ldr	r3, [pc, #60]	; (800c818 <prvProcessTimerOrBlockTask+0x94>)
 800c7da:	6818      	ldr	r0, [r3, #0]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	f7fe ffa7 	bl	800b738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c7ea:	f7ff fa23 	bl	800bc34 <xTaskResumeAll>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10a      	bne.n	800c80a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c7f4:	4b09      	ldr	r3, [pc, #36]	; (800c81c <prvProcessTimerOrBlockTask+0x98>)
 800c7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7fa:	601a      	str	r2, [r3, #0]
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	f3bf 8f6f 	isb	sy
}
 800c804:	e001      	b.n	800c80a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c806:	f7ff fa15 	bl	800bc34 <xTaskResumeAll>
}
 800c80a:	bf00      	nop
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20000ffc 	.word	0x20000ffc
 800c818:	20001000 	.word	0x20001000
 800c81c:	e000ed04 	.word	0xe000ed04

0800c820 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c828:	4b0e      	ldr	r3, [pc, #56]	; (800c864 <prvGetNextExpireTime+0x44>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <prvGetNextExpireTime+0x16>
 800c832:	2201      	movs	r2, #1
 800c834:	e000      	b.n	800c838 <prvGetNextExpireTime+0x18>
 800c836:	2200      	movs	r2, #0
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d105      	bne.n	800c850 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c844:	4b07      	ldr	r3, [pc, #28]	; (800c864 <prvGetNextExpireTime+0x44>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	60fb      	str	r3, [r7, #12]
 800c84e:	e001      	b.n	800c854 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c850:	2300      	movs	r3, #0
 800c852:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c854:	68fb      	ldr	r3, [r7, #12]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	20000ff8 	.word	0x20000ff8

0800c868 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c870:	f7ff fa7e 	bl	800bd70 <xTaskGetTickCount>
 800c874:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c876:	4b0b      	ldr	r3, [pc, #44]	; (800c8a4 <prvSampleTimeNow+0x3c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d205      	bcs.n	800c88c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c880:	f000 f936 	bl	800caf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	e002      	b.n	800c892 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c892:	4a04      	ldr	r2, [pc, #16]	; (800c8a4 <prvSampleTimeNow+0x3c>)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c898:	68fb      	ldr	r3, [r7, #12]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20001008 	.word	0x20001008

0800c8a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d812      	bhi.n	800c8f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	1ad2      	subs	r2, r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d302      	bcc.n	800c8e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	617b      	str	r3, [r7, #20]
 800c8e0:	e01b      	b.n	800c91a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c8e2:	4b10      	ldr	r3, [pc, #64]	; (800c924 <prvInsertTimerInActiveList+0x7c>)
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	f7fe f94e 	bl	800ab8e <vListInsert>
 800c8f2:	e012      	b.n	800c91a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d206      	bcs.n	800c90a <prvInsertTimerInActiveList+0x62>
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	429a      	cmp	r2, r3
 800c902:	d302      	bcc.n	800c90a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c904:	2301      	movs	r3, #1
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	e007      	b.n	800c91a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c90a:	4b07      	ldr	r3, [pc, #28]	; (800c928 <prvInsertTimerInActiveList+0x80>)
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3304      	adds	r3, #4
 800c912:	4619      	mov	r1, r3
 800c914:	4610      	mov	r0, r2
 800c916:	f7fe f93a 	bl	800ab8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c91a:	697b      	ldr	r3, [r7, #20]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20000ffc 	.word	0x20000ffc
 800c928:	20000ff8 	.word	0x20000ff8

0800c92c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08e      	sub	sp, #56	; 0x38
 800c930:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c932:	e0ca      	b.n	800caca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	da18      	bge.n	800c96c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c93a:	1d3b      	adds	r3, r7, #4
 800c93c:	3304      	adds	r3, #4
 800c93e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10a      	bne.n	800c95c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	61fb      	str	r3, [r7, #28]
}
 800c958:	bf00      	nop
 800c95a:	e7fe      	b.n	800c95a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c962:	6850      	ldr	r0, [r2, #4]
 800c964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c966:	6892      	ldr	r2, [r2, #8]
 800c968:	4611      	mov	r1, r2
 800c96a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f2c0 80aa 	blt.w	800cac8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97a:	695b      	ldr	r3, [r3, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c982:	3304      	adds	r3, #4
 800c984:	4618      	mov	r0, r3
 800c986:	f7fe f93b 	bl	800ac00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c98a:	463b      	mov	r3, r7
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff ff6b 	bl	800c868 <prvSampleTimeNow>
 800c992:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b09      	cmp	r3, #9
 800c998:	f200 8097 	bhi.w	800caca <prvProcessReceivedCommands+0x19e>
 800c99c:	a201      	add	r2, pc, #4	; (adr r2, 800c9a4 <prvProcessReceivedCommands+0x78>)
 800c99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a2:	bf00      	nop
 800c9a4:	0800c9cd 	.word	0x0800c9cd
 800c9a8:	0800c9cd 	.word	0x0800c9cd
 800c9ac:	0800c9cd 	.word	0x0800c9cd
 800c9b0:	0800ca41 	.word	0x0800ca41
 800c9b4:	0800ca55 	.word	0x0800ca55
 800c9b8:	0800ca9f 	.word	0x0800ca9f
 800c9bc:	0800c9cd 	.word	0x0800c9cd
 800c9c0:	0800c9cd 	.word	0x0800c9cd
 800c9c4:	0800ca41 	.word	0x0800ca41
 800c9c8:	0800ca55 	.word	0x0800ca55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9d2:	f043 0301 	orr.w	r3, r3, #1
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	18d1      	adds	r1, r2, r3
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ec:	f7ff ff5c 	bl	800c8a8 <prvInsertTimerInActiveList>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d069      	beq.n	800caca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	6a1b      	ldr	r3, [r3, #32]
 800c9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca04:	f003 0304 	and.w	r3, r3, #4
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d05e      	beq.n	800caca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	441a      	add	r2, r3
 800ca14:	2300      	movs	r3, #0
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	2300      	movs	r3, #0
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca1e:	f7ff fe05 	bl	800c62c <xTimerGenericCommand>
 800ca22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca24:	6a3b      	ldr	r3, [r7, #32]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d14f      	bne.n	800caca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	61bb      	str	r3, [r7, #24]
}
 800ca3c:	bf00      	nop
 800ca3e:	e7fe      	b.n	800ca3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca46:	f023 0301 	bic.w	r3, r3, #1
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ca52:	e03a      	b.n	800caca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca5a:	f043 0301 	orr.w	r3, r3, #1
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10a      	bne.n	800ca8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	617b      	str	r3, [r7, #20]
}
 800ca86:	bf00      	nop
 800ca88:	e7fe      	b.n	800ca88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	699a      	ldr	r2, [r3, #24]
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca90:	18d1      	adds	r1, r2, r3
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca98:	f7ff ff06 	bl	800c8a8 <prvInsertTimerInActiveList>
					break;
 800ca9c:	e015      	b.n	800caca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caa4:	f003 0302 	and.w	r3, r3, #2
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d103      	bne.n	800cab4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800caac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caae:	f000 fbdf 	bl	800d270 <vPortFree>
 800cab2:	e00a      	b.n	800caca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caba:	f023 0301 	bic.w	r3, r3, #1
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cac6:	e000      	b.n	800caca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cac8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800caca:	4b08      	ldr	r3, [pc, #32]	; (800caec <prvProcessReceivedCommands+0x1c0>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	1d39      	adds	r1, r7, #4
 800cad0:	2200      	movs	r2, #0
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fe fb96 	bl	800b204 <xQueueReceive>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f47f af2a 	bne.w	800c934 <prvProcessReceivedCommands+0x8>
	}
}
 800cae0:	bf00      	nop
 800cae2:	bf00      	nop
 800cae4:	3730      	adds	r7, #48	; 0x30
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20001000 	.word	0x20001000

0800caf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b088      	sub	sp, #32
 800caf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800caf6:	e048      	b.n	800cb8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800caf8:	4b2d      	ldr	r3, [pc, #180]	; (800cbb0 <prvSwitchTimerLists+0xc0>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb02:	4b2b      	ldr	r3, [pc, #172]	; (800cbb0 <prvSwitchTimerLists+0xc0>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe f875 	bl	800ac00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6a1b      	ldr	r3, [r3, #32]
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb24:	f003 0304 	and.w	r3, r3, #4
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d02e      	beq.n	800cb8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	4413      	add	r3, r2
 800cb34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d90e      	bls.n	800cb5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb4a:	4b19      	ldr	r3, [pc, #100]	; (800cbb0 <prvSwitchTimerLists+0xc0>)
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3304      	adds	r3, #4
 800cb52:	4619      	mov	r1, r3
 800cb54:	4610      	mov	r0, r2
 800cb56:	f7fe f81a 	bl	800ab8e <vListInsert>
 800cb5a:	e016      	b.n	800cb8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	2300      	movs	r3, #0
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	2100      	movs	r1, #0
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f7ff fd60 	bl	800c62c <xTimerGenericCommand>
 800cb6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10a      	bne.n	800cb8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	603b      	str	r3, [r7, #0]
}
 800cb86:	bf00      	nop
 800cb88:	e7fe      	b.n	800cb88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb8a:	4b09      	ldr	r3, [pc, #36]	; (800cbb0 <prvSwitchTimerLists+0xc0>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1b1      	bne.n	800caf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb94:	4b06      	ldr	r3, [pc, #24]	; (800cbb0 <prvSwitchTimerLists+0xc0>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb9a:	4b06      	ldr	r3, [pc, #24]	; (800cbb4 <prvSwitchTimerLists+0xc4>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a04      	ldr	r2, [pc, #16]	; (800cbb0 <prvSwitchTimerLists+0xc0>)
 800cba0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cba2:	4a04      	ldr	r2, [pc, #16]	; (800cbb4 <prvSwitchTimerLists+0xc4>)
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	6013      	str	r3, [r2, #0]
}
 800cba8:	bf00      	nop
 800cbaa:	3718      	adds	r7, #24
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	20000ff8 	.word	0x20000ff8
 800cbb4:	20000ffc 	.word	0x20000ffc

0800cbb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cbbe:	f000 f969 	bl	800ce94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbc2:	4b15      	ldr	r3, [pc, #84]	; (800cc18 <prvCheckForValidListAndQueue+0x60>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d120      	bne.n	800cc0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cbca:	4814      	ldr	r0, [pc, #80]	; (800cc1c <prvCheckForValidListAndQueue+0x64>)
 800cbcc:	f7fd ff8e 	bl	800aaec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cbd0:	4813      	ldr	r0, [pc, #76]	; (800cc20 <prvCheckForValidListAndQueue+0x68>)
 800cbd2:	f7fd ff8b 	bl	800aaec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cbd6:	4b13      	ldr	r3, [pc, #76]	; (800cc24 <prvCheckForValidListAndQueue+0x6c>)
 800cbd8:	4a10      	ldr	r2, [pc, #64]	; (800cc1c <prvCheckForValidListAndQueue+0x64>)
 800cbda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cbdc:	4b12      	ldr	r3, [pc, #72]	; (800cc28 <prvCheckForValidListAndQueue+0x70>)
 800cbde:	4a10      	ldr	r2, [pc, #64]	; (800cc20 <prvCheckForValidListAndQueue+0x68>)
 800cbe0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	4b11      	ldr	r3, [pc, #68]	; (800cc2c <prvCheckForValidListAndQueue+0x74>)
 800cbe8:	4a11      	ldr	r2, [pc, #68]	; (800cc30 <prvCheckForValidListAndQueue+0x78>)
 800cbea:	2110      	movs	r1, #16
 800cbec:	200a      	movs	r0, #10
 800cbee:	f7fe f899 	bl	800ad24 <xQueueGenericCreateStatic>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	4a08      	ldr	r2, [pc, #32]	; (800cc18 <prvCheckForValidListAndQueue+0x60>)
 800cbf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cbf8:	4b07      	ldr	r3, [pc, #28]	; (800cc18 <prvCheckForValidListAndQueue+0x60>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc00:	4b05      	ldr	r3, [pc, #20]	; (800cc18 <prvCheckForValidListAndQueue+0x60>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	490b      	ldr	r1, [pc, #44]	; (800cc34 <prvCheckForValidListAndQueue+0x7c>)
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fe fd6c 	bl	800b6e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc0c:	f000 f972 	bl	800cef4 <vPortExitCritical>
}
 800cc10:	bf00      	nop
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20001000 	.word	0x20001000
 800cc1c:	20000fd0 	.word	0x20000fd0
 800cc20:	20000fe4 	.word	0x20000fe4
 800cc24:	20000ff8 	.word	0x20000ff8
 800cc28:	20000ffc 	.word	0x20000ffc
 800cc2c:	200010ac 	.word	0x200010ac
 800cc30:	2000100c 	.word	0x2000100c
 800cc34:	0800ddfc 	.word	0x0800ddfc

0800cc38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	3b04      	subs	r3, #4
 800cc48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3b04      	subs	r3, #4
 800cc56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	f023 0201 	bic.w	r2, r3, #1
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3b04      	subs	r3, #4
 800cc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc68:	4a0c      	ldr	r2, [pc, #48]	; (800cc9c <pxPortInitialiseStack+0x64>)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3b14      	subs	r3, #20
 800cc72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3b04      	subs	r3, #4
 800cc7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f06f 0202 	mvn.w	r2, #2
 800cc86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	3b20      	subs	r3, #32
 800cc8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	0800cca1 	.word	0x0800cca1

0800cca0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccaa:	4b12      	ldr	r3, [pc, #72]	; (800ccf4 <prvTaskExitError+0x54>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccb2:	d00a      	beq.n	800ccca <prvTaskExitError+0x2a>
	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	60fb      	str	r3, [r7, #12]
}
 800ccc6:	bf00      	nop
 800ccc8:	e7fe      	b.n	800ccc8 <prvTaskExitError+0x28>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	60bb      	str	r3, [r7, #8]
}
 800ccdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccde:	bf00      	nop
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d0fc      	beq.n	800cce0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cce6:	bf00      	nop
 800cce8:	bf00      	nop
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	2000002c 	.word	0x2000002c
	...

0800cd00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd00:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <pxCurrentTCBConst2>)
 800cd02:	6819      	ldr	r1, [r3, #0]
 800cd04:	6808      	ldr	r0, [r1, #0]
 800cd06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0a:	f380 8809 	msr	PSP, r0
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f04f 0000 	mov.w	r0, #0
 800cd16:	f380 8811 	msr	BASEPRI, r0
 800cd1a:	4770      	bx	lr
 800cd1c:	f3af 8000 	nop.w

0800cd20 <pxCurrentTCBConst2>:
 800cd20:	20000ad0 	.word	0x20000ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd24:	bf00      	nop
 800cd26:	bf00      	nop

0800cd28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd28:	4808      	ldr	r0, [pc, #32]	; (800cd4c <prvPortStartFirstTask+0x24>)
 800cd2a:	6800      	ldr	r0, [r0, #0]
 800cd2c:	6800      	ldr	r0, [r0, #0]
 800cd2e:	f380 8808 	msr	MSP, r0
 800cd32:	f04f 0000 	mov.w	r0, #0
 800cd36:	f380 8814 	msr	CONTROL, r0
 800cd3a:	b662      	cpsie	i
 800cd3c:	b661      	cpsie	f
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	df00      	svc	0
 800cd48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd4a:	bf00      	nop
 800cd4c:	e000ed08 	.word	0xe000ed08

0800cd50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd56:	4b46      	ldr	r3, [pc, #280]	; (800ce70 <xPortStartScheduler+0x120>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a46      	ldr	r2, [pc, #280]	; (800ce74 <xPortStartScheduler+0x124>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d10a      	bne.n	800cd76 <xPortStartScheduler+0x26>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	613b      	str	r3, [r7, #16]
}
 800cd72:	bf00      	nop
 800cd74:	e7fe      	b.n	800cd74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd76:	4b3e      	ldr	r3, [pc, #248]	; (800ce70 <xPortStartScheduler+0x120>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a3f      	ldr	r2, [pc, #252]	; (800ce78 <xPortStartScheduler+0x128>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d10a      	bne.n	800cd96 <xPortStartScheduler+0x46>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	60fb      	str	r3, [r7, #12]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd96:	4b39      	ldr	r3, [pc, #228]	; (800ce7c <xPortStartScheduler+0x12c>)
 800cd98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	22ff      	movs	r2, #255	; 0xff
 800cda6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdb0:	78fb      	ldrb	r3, [r7, #3]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	4b31      	ldr	r3, [pc, #196]	; (800ce80 <xPortStartScheduler+0x130>)
 800cdbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdbe:	4b31      	ldr	r3, [pc, #196]	; (800ce84 <xPortStartScheduler+0x134>)
 800cdc0:	2207      	movs	r2, #7
 800cdc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdc4:	e009      	b.n	800cdda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cdc6:	4b2f      	ldr	r3, [pc, #188]	; (800ce84 <xPortStartScheduler+0x134>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	4a2d      	ldr	r2, [pc, #180]	; (800ce84 <xPortStartScheduler+0x134>)
 800cdce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	005b      	lsls	r3, r3, #1
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdda:	78fb      	ldrb	r3, [r7, #3]
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cde2:	2b80      	cmp	r3, #128	; 0x80
 800cde4:	d0ef      	beq.n	800cdc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cde6:	4b27      	ldr	r3, [pc, #156]	; (800ce84 <xPortStartScheduler+0x134>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f1c3 0307 	rsb	r3, r3, #7
 800cdee:	2b04      	cmp	r3, #4
 800cdf0:	d00a      	beq.n	800ce08 <xPortStartScheduler+0xb8>
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	60bb      	str	r3, [r7, #8]
}
 800ce04:	bf00      	nop
 800ce06:	e7fe      	b.n	800ce06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce08:	4b1e      	ldr	r3, [pc, #120]	; (800ce84 <xPortStartScheduler+0x134>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	021b      	lsls	r3, r3, #8
 800ce0e:	4a1d      	ldr	r2, [pc, #116]	; (800ce84 <xPortStartScheduler+0x134>)
 800ce10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce12:	4b1c      	ldr	r3, [pc, #112]	; (800ce84 <xPortStartScheduler+0x134>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce1a:	4a1a      	ldr	r2, [pc, #104]	; (800ce84 <xPortStartScheduler+0x134>)
 800ce1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce26:	4b18      	ldr	r3, [pc, #96]	; (800ce88 <xPortStartScheduler+0x138>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a17      	ldr	r2, [pc, #92]	; (800ce88 <xPortStartScheduler+0x138>)
 800ce2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce32:	4b15      	ldr	r3, [pc, #84]	; (800ce88 <xPortStartScheduler+0x138>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a14      	ldr	r2, [pc, #80]	; (800ce88 <xPortStartScheduler+0x138>)
 800ce38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce3e:	f000 f8dd 	bl	800cffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce42:	4b12      	ldr	r3, [pc, #72]	; (800ce8c <xPortStartScheduler+0x13c>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce48:	f000 f8fc 	bl	800d044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce4c:	4b10      	ldr	r3, [pc, #64]	; (800ce90 <xPortStartScheduler+0x140>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a0f      	ldr	r2, [pc, #60]	; (800ce90 <xPortStartScheduler+0x140>)
 800ce52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce58:	f7ff ff66 	bl	800cd28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce5c:	f7ff f852 	bl	800bf04 <vTaskSwitchContext>
	prvTaskExitError();
 800ce60:	f7ff ff1e 	bl	800cca0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	e000ed00 	.word	0xe000ed00
 800ce74:	410fc271 	.word	0x410fc271
 800ce78:	410fc270 	.word	0x410fc270
 800ce7c:	e000e400 	.word	0xe000e400
 800ce80:	200010fc 	.word	0x200010fc
 800ce84:	20001100 	.word	0x20001100
 800ce88:	e000ed20 	.word	0xe000ed20
 800ce8c:	2000002c 	.word	0x2000002c
 800ce90:	e000ef34 	.word	0xe000ef34

0800ce94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
	__asm volatile
 800ce9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	607b      	str	r3, [r7, #4]
}
 800ceac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ceae:	4b0f      	ldr	r3, [pc, #60]	; (800ceec <vPortEnterCritical+0x58>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	4a0d      	ldr	r2, [pc, #52]	; (800ceec <vPortEnterCritical+0x58>)
 800ceb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ceb8:	4b0c      	ldr	r3, [pc, #48]	; (800ceec <vPortEnterCritical+0x58>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d10f      	bne.n	800cee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cec0:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <vPortEnterCritical+0x5c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	603b      	str	r3, [r7, #0]
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <vPortEnterCritical+0x4a>
	}
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr
 800ceec:	2000002c 	.word	0x2000002c
 800cef0:	e000ed04 	.word	0xe000ed04

0800cef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cefa:	4b12      	ldr	r3, [pc, #72]	; (800cf44 <vPortExitCritical+0x50>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10a      	bne.n	800cf18 <vPortExitCritical+0x24>
	__asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	607b      	str	r3, [r7, #4]
}
 800cf14:	bf00      	nop
 800cf16:	e7fe      	b.n	800cf16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf18:	4b0a      	ldr	r3, [pc, #40]	; (800cf44 <vPortExitCritical+0x50>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	4a09      	ldr	r2, [pc, #36]	; (800cf44 <vPortExitCritical+0x50>)
 800cf20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf22:	4b08      	ldr	r3, [pc, #32]	; (800cf44 <vPortExitCritical+0x50>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <vPortExitCritical+0x42>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	f383 8811 	msr	BASEPRI, r3
}
 800cf34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf36:	bf00      	nop
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	2000002c 	.word	0x2000002c
	...

0800cf50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf50:	f3ef 8009 	mrs	r0, PSP
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	4b15      	ldr	r3, [pc, #84]	; (800cfb0 <pxCurrentTCBConst>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	f01e 0f10 	tst.w	lr, #16
 800cf60:	bf08      	it	eq
 800cf62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6a:	6010      	str	r0, [r2, #0]
 800cf6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf74:	f380 8811 	msr	BASEPRI, r0
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f7fe ffc0 	bl	800bf04 <vTaskSwitchContext>
 800cf84:	f04f 0000 	mov.w	r0, #0
 800cf88:	f380 8811 	msr	BASEPRI, r0
 800cf8c:	bc09      	pop	{r0, r3}
 800cf8e:	6819      	ldr	r1, [r3, #0]
 800cf90:	6808      	ldr	r0, [r1, #0]
 800cf92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf96:	f01e 0f10 	tst.w	lr, #16
 800cf9a:	bf08      	it	eq
 800cf9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfa0:	f380 8809 	msr	PSP, r0
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	f3af 8000 	nop.w

0800cfb0 <pxCurrentTCBConst>:
 800cfb0:	20000ad0 	.word	0x20000ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfb4:	bf00      	nop
 800cfb6:	bf00      	nop

0800cfb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	607b      	str	r3, [r7, #4]
}
 800cfd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfd2:	f7fe fedd 	bl	800bd90 <xTaskIncrementTick>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d003      	beq.n	800cfe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfdc:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <xPortSysTickHandler+0x40>)
 800cfde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe2:	601a      	str	r2, [r3, #0]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	f383 8811 	msr	BASEPRI, r3
}
 800cfee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	e000ed04 	.word	0xe000ed04

0800cffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cffc:	b480      	push	{r7}
 800cffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d000:	4b0b      	ldr	r3, [pc, #44]	; (800d030 <vPortSetupTimerInterrupt+0x34>)
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d006:	4b0b      	ldr	r3, [pc, #44]	; (800d034 <vPortSetupTimerInterrupt+0x38>)
 800d008:	2200      	movs	r2, #0
 800d00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d00c:	4b0a      	ldr	r3, [pc, #40]	; (800d038 <vPortSetupTimerInterrupt+0x3c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a0a      	ldr	r2, [pc, #40]	; (800d03c <vPortSetupTimerInterrupt+0x40>)
 800d012:	fba2 2303 	umull	r2, r3, r2, r3
 800d016:	099b      	lsrs	r3, r3, #6
 800d018:	4a09      	ldr	r2, [pc, #36]	; (800d040 <vPortSetupTimerInterrupt+0x44>)
 800d01a:	3b01      	subs	r3, #1
 800d01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d01e:	4b04      	ldr	r3, [pc, #16]	; (800d030 <vPortSetupTimerInterrupt+0x34>)
 800d020:	2207      	movs	r2, #7
 800d022:	601a      	str	r2, [r3, #0]
}
 800d024:	bf00      	nop
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	e000e010 	.word	0xe000e010
 800d034:	e000e018 	.word	0xe000e018
 800d038:	20000000 	.word	0x20000000
 800d03c:	10624dd3 	.word	0x10624dd3
 800d040:	e000e014 	.word	0xe000e014

0800d044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d054 <vPortEnableVFP+0x10>
 800d048:	6801      	ldr	r1, [r0, #0]
 800d04a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d04e:	6001      	str	r1, [r0, #0]
 800d050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d052:	bf00      	nop
 800d054:	e000ed88 	.word	0xe000ed88

0800d058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d05e:	f3ef 8305 	mrs	r3, IPSR
 800d062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b0f      	cmp	r3, #15
 800d068:	d914      	bls.n	800d094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d06a:	4a17      	ldr	r2, [pc, #92]	; (800d0c8 <vPortValidateInterruptPriority+0x70>)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d074:	4b15      	ldr	r3, [pc, #84]	; (800d0cc <vPortValidateInterruptPriority+0x74>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	7afa      	ldrb	r2, [r7, #11]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d20a      	bcs.n	800d094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	607b      	str	r3, [r7, #4]
}
 800d090:	bf00      	nop
 800d092:	e7fe      	b.n	800d092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d094:	4b0e      	ldr	r3, [pc, #56]	; (800d0d0 <vPortValidateInterruptPriority+0x78>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d09c:	4b0d      	ldr	r3, [pc, #52]	; (800d0d4 <vPortValidateInterruptPriority+0x7c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d90a      	bls.n	800d0ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	603b      	str	r3, [r7, #0]
}
 800d0b6:	bf00      	nop
 800d0b8:	e7fe      	b.n	800d0b8 <vPortValidateInterruptPriority+0x60>
	}
 800d0ba:	bf00      	nop
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	e000e3f0 	.word	0xe000e3f0
 800d0cc:	200010fc 	.word	0x200010fc
 800d0d0:	e000ed0c 	.word	0xe000ed0c
 800d0d4:	20001100 	.word	0x20001100

0800d0d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08a      	sub	sp, #40	; 0x28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0e4:	f7fe fd98 	bl	800bc18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0e8:	4b5b      	ldr	r3, [pc, #364]	; (800d258 <pvPortMalloc+0x180>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0f0:	f000 f920 	bl	800d334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0f4:	4b59      	ldr	r3, [pc, #356]	; (800d25c <pvPortMalloc+0x184>)
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f040 8093 	bne.w	800d228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d01d      	beq.n	800d144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d108:	2208      	movs	r2, #8
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4413      	add	r3, r2
 800d10e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f003 0307 	and.w	r3, r3, #7
 800d116:	2b00      	cmp	r3, #0
 800d118:	d014      	beq.n	800d144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f023 0307 	bic.w	r3, r3, #7
 800d120:	3308      	adds	r3, #8
 800d122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f003 0307 	and.w	r3, r3, #7
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <pvPortMalloc+0x6c>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	617b      	str	r3, [r7, #20]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d06e      	beq.n	800d228 <pvPortMalloc+0x150>
 800d14a:	4b45      	ldr	r3, [pc, #276]	; (800d260 <pvPortMalloc+0x188>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	429a      	cmp	r2, r3
 800d152:	d869      	bhi.n	800d228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d154:	4b43      	ldr	r3, [pc, #268]	; (800d264 <pvPortMalloc+0x18c>)
 800d156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d158:	4b42      	ldr	r3, [pc, #264]	; (800d264 <pvPortMalloc+0x18c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d15e:	e004      	b.n	800d16a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	429a      	cmp	r2, r3
 800d172:	d903      	bls.n	800d17c <pvPortMalloc+0xa4>
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1f1      	bne.n	800d160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d17c:	4b36      	ldr	r3, [pc, #216]	; (800d258 <pvPortMalloc+0x180>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d182:	429a      	cmp	r2, r3
 800d184:	d050      	beq.n	800d228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2208      	movs	r2, #8
 800d18c:	4413      	add	r3, r2
 800d18e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	1ad2      	subs	r2, r2, r3
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d91f      	bls.n	800d1e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	f003 0307 	and.w	r3, r3, #7
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00a      	beq.n	800d1d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	613b      	str	r3, [r7, #16]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	1ad2      	subs	r2, r2, r3
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1e2:	69b8      	ldr	r0, [r7, #24]
 800d1e4:	f000 f908 	bl	800d3f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1e8:	4b1d      	ldr	r3, [pc, #116]	; (800d260 <pvPortMalloc+0x188>)
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	4a1b      	ldr	r2, [pc, #108]	; (800d260 <pvPortMalloc+0x188>)
 800d1f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1f6:	4b1a      	ldr	r3, [pc, #104]	; (800d260 <pvPortMalloc+0x188>)
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	4b1b      	ldr	r3, [pc, #108]	; (800d268 <pvPortMalloc+0x190>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d203      	bcs.n	800d20a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d202:	4b17      	ldr	r3, [pc, #92]	; (800d260 <pvPortMalloc+0x188>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a18      	ldr	r2, [pc, #96]	; (800d268 <pvPortMalloc+0x190>)
 800d208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	685a      	ldr	r2, [r3, #4]
 800d20e:	4b13      	ldr	r3, [pc, #76]	; (800d25c <pvPortMalloc+0x184>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	431a      	orrs	r2, r3
 800d214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d21e:	4b13      	ldr	r3, [pc, #76]	; (800d26c <pvPortMalloc+0x194>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3301      	adds	r3, #1
 800d224:	4a11      	ldr	r2, [pc, #68]	; (800d26c <pvPortMalloc+0x194>)
 800d226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d228:	f7fe fd04 	bl	800bc34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	f003 0307 	and.w	r3, r3, #7
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00a      	beq.n	800d24c <pvPortMalloc+0x174>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	60fb      	str	r3, [r7, #12]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <pvPortMalloc+0x172>
	return pvReturn;
 800d24c:	69fb      	ldr	r3, [r7, #28]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3728      	adds	r7, #40	; 0x28
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	20004d0c 	.word	0x20004d0c
 800d25c:	20004d20 	.word	0x20004d20
 800d260:	20004d10 	.word	0x20004d10
 800d264:	20004d04 	.word	0x20004d04
 800d268:	20004d14 	.word	0x20004d14
 800d26c:	20004d18 	.word	0x20004d18

0800d270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d04d      	beq.n	800d31e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d282:	2308      	movs	r3, #8
 800d284:	425b      	negs	r3, r3
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	4413      	add	r3, r2
 800d28a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	4b24      	ldr	r3, [pc, #144]	; (800d328 <vPortFree+0xb8>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4013      	ands	r3, r2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10a      	bne.n	800d2b4 <vPortFree+0x44>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	60fb      	str	r3, [r7, #12]
}
 800d2b0:	bf00      	nop
 800d2b2:	e7fe      	b.n	800d2b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00a      	beq.n	800d2d2 <vPortFree+0x62>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	60bb      	str	r3, [r7, #8]
}
 800d2ce:	bf00      	nop
 800d2d0:	e7fe      	b.n	800d2d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	685a      	ldr	r2, [r3, #4]
 800d2d6:	4b14      	ldr	r3, [pc, #80]	; (800d328 <vPortFree+0xb8>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4013      	ands	r3, r2
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d01e      	beq.n	800d31e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d11a      	bne.n	800d31e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	4b0e      	ldr	r3, [pc, #56]	; (800d328 <vPortFree+0xb8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	43db      	mvns	r3, r3
 800d2f2:	401a      	ands	r2, r3
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2f8:	f7fe fc8e 	bl	800bc18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	685a      	ldr	r2, [r3, #4]
 800d300:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <vPortFree+0xbc>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4413      	add	r3, r2
 800d306:	4a09      	ldr	r2, [pc, #36]	; (800d32c <vPortFree+0xbc>)
 800d308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d30a:	6938      	ldr	r0, [r7, #16]
 800d30c:	f000 f874 	bl	800d3f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d310:	4b07      	ldr	r3, [pc, #28]	; (800d330 <vPortFree+0xc0>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3301      	adds	r3, #1
 800d316:	4a06      	ldr	r2, [pc, #24]	; (800d330 <vPortFree+0xc0>)
 800d318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d31a:	f7fe fc8b 	bl	800bc34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d31e:	bf00      	nop
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	20004d20 	.word	0x20004d20
 800d32c:	20004d10 	.word	0x20004d10
 800d330:	20004d1c 	.word	0x20004d1c

0800d334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d33a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d33e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d340:	4b27      	ldr	r3, [pc, #156]	; (800d3e0 <prvHeapInit+0xac>)
 800d342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f003 0307 	and.w	r3, r3, #7
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00c      	beq.n	800d368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3307      	adds	r3, #7
 800d352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f023 0307 	bic.w	r3, r3, #7
 800d35a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	4a1f      	ldr	r2, [pc, #124]	; (800d3e0 <prvHeapInit+0xac>)
 800d364:	4413      	add	r3, r2
 800d366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d36c:	4a1d      	ldr	r2, [pc, #116]	; (800d3e4 <prvHeapInit+0xb0>)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d372:	4b1c      	ldr	r3, [pc, #112]	; (800d3e4 <prvHeapInit+0xb0>)
 800d374:	2200      	movs	r2, #0
 800d376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	4413      	add	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d380:	2208      	movs	r2, #8
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	1a9b      	subs	r3, r3, r2
 800d386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f023 0307 	bic.w	r3, r3, #7
 800d38e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	4a15      	ldr	r2, [pc, #84]	; (800d3e8 <prvHeapInit+0xb4>)
 800d394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d396:	4b14      	ldr	r3, [pc, #80]	; (800d3e8 <prvHeapInit+0xb4>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2200      	movs	r2, #0
 800d39c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d39e:	4b12      	ldr	r3, [pc, #72]	; (800d3e8 <prvHeapInit+0xb4>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	1ad2      	subs	r2, r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3b4:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <prvHeapInit+0xb4>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	4a0a      	ldr	r2, [pc, #40]	; (800d3ec <prvHeapInit+0xb8>)
 800d3c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	4a09      	ldr	r2, [pc, #36]	; (800d3f0 <prvHeapInit+0xbc>)
 800d3ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3cc:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <prvHeapInit+0xc0>)
 800d3ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d3d2:	601a      	str	r2, [r3, #0]
}
 800d3d4:	bf00      	nop
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	20001104 	.word	0x20001104
 800d3e4:	20004d04 	.word	0x20004d04
 800d3e8:	20004d0c 	.word	0x20004d0c
 800d3ec:	20004d14 	.word	0x20004d14
 800d3f0:	20004d10 	.word	0x20004d10
 800d3f4:	20004d20 	.word	0x20004d20

0800d3f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d400:	4b28      	ldr	r3, [pc, #160]	; (800d4a4 <prvInsertBlockIntoFreeList+0xac>)
 800d402:	60fb      	str	r3, [r7, #12]
 800d404:	e002      	b.n	800d40c <prvInsertBlockIntoFreeList+0x14>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	60fb      	str	r3, [r7, #12]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	429a      	cmp	r2, r3
 800d414:	d8f7      	bhi.n	800d406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	4413      	add	r3, r2
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	429a      	cmp	r2, r3
 800d426:	d108      	bne.n	800d43a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	441a      	add	r2, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	441a      	add	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d118      	bne.n	800d480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	4b15      	ldr	r3, [pc, #84]	; (800d4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	429a      	cmp	r2, r3
 800d458:	d00d      	beq.n	800d476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	685a      	ldr	r2, [r3, #4]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	441a      	add	r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	e008      	b.n	800d488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d476:	4b0c      	ldr	r3, [pc, #48]	; (800d4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	e003      	b.n	800d488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d002      	beq.n	800d496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d496:	bf00      	nop
 800d498:	3714      	adds	r7, #20
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	20004d04 	.word	0x20004d04
 800d4a8:	20004d0c 	.word	0x20004d0c

0800d4ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	490e      	ldr	r1, [pc, #56]	; (800d4ec <MX_USB_HOST_Init+0x40>)
 800d4b4:	480e      	ldr	r0, [pc, #56]	; (800d4f0 <MX_USB_HOST_Init+0x44>)
 800d4b6:	f7fb faf1 	bl	8008a9c <USBH_Init>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d4c0:	f7f3 ff3e 	bl	8001340 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d4c4:	490b      	ldr	r1, [pc, #44]	; (800d4f4 <MX_USB_HOST_Init+0x48>)
 800d4c6:	480a      	ldr	r0, [pc, #40]	; (800d4f0 <MX_USB_HOST_Init+0x44>)
 800d4c8:	f7fb fb98 	bl	8008bfc <USBH_RegisterClass>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d001      	beq.n	800d4d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d4d2:	f7f3 ff35 	bl	8001340 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d4d6:	4806      	ldr	r0, [pc, #24]	; (800d4f0 <MX_USB_HOST_Init+0x44>)
 800d4d8:	f7fb fc1c 	bl	8008d14 <USBH_Start>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d001      	beq.n	800d4e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d4e2:	f7f3 ff2d 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d4e6:	bf00      	nop
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	0800d4f9 	.word	0x0800d4f9
 800d4f0:	20004de4 	.word	0x20004de4
 800d4f4:	2000000c 	.word	0x2000000c

0800d4f8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	460b      	mov	r3, r1
 800d502:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d504:	78fb      	ldrb	r3, [r7, #3]
 800d506:	3b01      	subs	r3, #1
 800d508:	2b04      	cmp	r3, #4
 800d50a:	d819      	bhi.n	800d540 <USBH_UserProcess+0x48>
 800d50c:	a201      	add	r2, pc, #4	; (adr r2, 800d514 <USBH_UserProcess+0x1c>)
 800d50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d512:	bf00      	nop
 800d514:	0800d541 	.word	0x0800d541
 800d518:	0800d531 	.word	0x0800d531
 800d51c:	0800d541 	.word	0x0800d541
 800d520:	0800d539 	.word	0x0800d539
 800d524:	0800d529 	.word	0x0800d529
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d528:	4b09      	ldr	r3, [pc, #36]	; (800d550 <USBH_UserProcess+0x58>)
 800d52a:	2203      	movs	r2, #3
 800d52c:	701a      	strb	r2, [r3, #0]
  break;
 800d52e:	e008      	b.n	800d542 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d530:	4b07      	ldr	r3, [pc, #28]	; (800d550 <USBH_UserProcess+0x58>)
 800d532:	2202      	movs	r2, #2
 800d534:	701a      	strb	r2, [r3, #0]
  break;
 800d536:	e004      	b.n	800d542 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d538:	4b05      	ldr	r3, [pc, #20]	; (800d550 <USBH_UserProcess+0x58>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	701a      	strb	r2, [r3, #0]
  break;
 800d53e:	e000      	b.n	800d542 <USBH_UserProcess+0x4a>

  default:
  break;
 800d540:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d542:	bf00      	nop
 800d544:	370c      	adds	r7, #12
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	20004d24 	.word	0x20004d24

0800d554 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08a      	sub	sp, #40	; 0x28
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d55c:	f107 0314 	add.w	r3, r7, #20
 800d560:	2200      	movs	r2, #0
 800d562:	601a      	str	r2, [r3, #0]
 800d564:	605a      	str	r2, [r3, #4]
 800d566:	609a      	str	r2, [r3, #8]
 800d568:	60da      	str	r2, [r3, #12]
 800d56a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d574:	d147      	bne.n	800d606 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d576:	2300      	movs	r3, #0
 800d578:	613b      	str	r3, [r7, #16]
 800d57a:	4b25      	ldr	r3, [pc, #148]	; (800d610 <HAL_HCD_MspInit+0xbc>)
 800d57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57e:	4a24      	ldr	r2, [pc, #144]	; (800d610 <HAL_HCD_MspInit+0xbc>)
 800d580:	f043 0301 	orr.w	r3, r3, #1
 800d584:	6313      	str	r3, [r2, #48]	; 0x30
 800d586:	4b22      	ldr	r3, [pc, #136]	; (800d610 <HAL_HCD_MspInit+0xbc>)
 800d588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	613b      	str	r3, [r7, #16]
 800d590:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800d592:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d598:	2300      	movs	r3, #0
 800d59a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d59c:	2300      	movs	r3, #0
 800d59e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d5a0:	f107 0314 	add.w	r3, r7, #20
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	481b      	ldr	r0, [pc, #108]	; (800d614 <HAL_HCD_MspInit+0xc0>)
 800d5a8:	f7f5 fbe8 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800d5ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d5b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5b2:	2302      	movs	r3, #2
 800d5b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d5be:	230a      	movs	r3, #10
 800d5c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5c2:	f107 0314 	add.w	r3, r7, #20
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	4812      	ldr	r0, [pc, #72]	; (800d614 <HAL_HCD_MspInit+0xc0>)
 800d5ca:	f7f5 fbd7 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d5ce:	4b10      	ldr	r3, [pc, #64]	; (800d610 <HAL_HCD_MspInit+0xbc>)
 800d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d2:	4a0f      	ldr	r2, [pc, #60]	; (800d610 <HAL_HCD_MspInit+0xbc>)
 800d5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5d8:	6353      	str	r3, [r2, #52]	; 0x34
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60fb      	str	r3, [r7, #12]
 800d5de:	4b0c      	ldr	r3, [pc, #48]	; (800d610 <HAL_HCD_MspInit+0xbc>)
 800d5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5e2:	4a0b      	ldr	r2, [pc, #44]	; (800d610 <HAL_HCD_MspInit+0xbc>)
 800d5e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5e8:	6453      	str	r3, [r2, #68]	; 0x44
 800d5ea:	4b09      	ldr	r3, [pc, #36]	; (800d610 <HAL_HCD_MspInit+0xbc>)
 800d5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5f2:	60fb      	str	r3, [r7, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2105      	movs	r1, #5
 800d5fa:	2043      	movs	r0, #67	; 0x43
 800d5fc:	f7f5 f886 	bl	800270c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d600:	2043      	movs	r0, #67	; 0x43
 800d602:	f7f5 f89f 	bl	8002744 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d606:	bf00      	nop
 800d608:	3728      	adds	r7, #40	; 0x28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	40023800 	.word	0x40023800
 800d614:	40020000 	.word	0x40020000

0800d618 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d626:	4618      	mov	r0, r3
 800d628:	f7fc f821 	bl	800966e <USBH_LL_IncTimer>
}
 800d62c:	bf00      	nop
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d642:	4618      	mov	r0, r3
 800d644:	f7fc f865 	bl	8009712 <USBH_LL_Connect>
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fc f87a 	bl	8009758 <USBH_LL_Disconnect>
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	460b      	mov	r3, r1
 800d676:	70fb      	strb	r3, [r7, #3]
 800d678:	4613      	mov	r3, r2
 800d67a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d682:	4618      	mov	r0, r3
 800d684:	f7fc f8b1 	bl	80097ea <USBH_LL_NotifyURBChange>
#endif
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fc f80f 	bl	80096c2 <USBH_LL_PortEnabled>
}
 800d6a4:	bf00      	nop
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fc f81b 	bl	80096f6 <USBH_LL_PortDisabled>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d12a      	bne.n	800d730 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d6da:	4a18      	ldr	r2, [pc, #96]	; (800d73c <USBH_LL_Init+0x74>)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a15      	ldr	r2, [pc, #84]	; (800d73c <USBH_LL_Init+0x74>)
 800d6e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d6ea:	4b14      	ldr	r3, [pc, #80]	; (800d73c <USBH_LL_Init+0x74>)
 800d6ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d6f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800d6f2:	4b12      	ldr	r3, [pc, #72]	; (800d73c <USBH_LL_Init+0x74>)
 800d6f4:	220c      	movs	r2, #12
 800d6f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d6f8:	4b10      	ldr	r3, [pc, #64]	; (800d73c <USBH_LL_Init+0x74>)
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d6fe:	4b0f      	ldr	r3, [pc, #60]	; (800d73c <USBH_LL_Init+0x74>)
 800d700:	2200      	movs	r2, #0
 800d702:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d704:	4b0d      	ldr	r3, [pc, #52]	; (800d73c <USBH_LL_Init+0x74>)
 800d706:	2202      	movs	r2, #2
 800d708:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d70a:	4b0c      	ldr	r3, [pc, #48]	; (800d73c <USBH_LL_Init+0x74>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d710:	480a      	ldr	r0, [pc, #40]	; (800d73c <USBH_LL_Init+0x74>)
 800d712:	f7f5 fd1c 	bl	800314e <HAL_HCD_Init>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d001      	beq.n	800d720 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d71c:	f7f3 fe10 	bl	8001340 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d720:	4806      	ldr	r0, [pc, #24]	; (800d73c <USBH_LL_Init+0x74>)
 800d722:	f7f6 f8f9 	bl	8003918 <HAL_HCD_GetCurrentFrame>
 800d726:	4603      	mov	r3, r0
 800d728:	4619      	mov	r1, r3
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7fb ff90 	bl	8009650 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	200051c8 	.word	0x200051c8

0800d740 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d74c:	2300      	movs	r3, #0
 800d74e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d756:	4618      	mov	r0, r3
 800d758:	f7f6 f868 	bl	800382c <HAL_HCD_Start>
 800d75c:	4603      	mov	r3, r0
 800d75e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	4618      	mov	r0, r3
 800d764:	f000 f95c 	bl	800da20 <USBH_Get_USB_Status>
 800d768:	4603      	mov	r3, r0
 800d76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d782:	2300      	movs	r3, #0
 800d784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7f6 f870 	bl	8003872 <HAL_HCD_Stop>
 800d792:	4603      	mov	r3, r0
 800d794:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d796:	7bfb      	ldrb	r3, [r7, #15]
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 f941 	bl	800da20 <USBH_Get_USB_Status>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7f6 f8b8 	bl	8003934 <HAL_HCD_GetCurrentSpeed>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	d00c      	beq.n	800d7e4 <USBH_LL_GetSpeed+0x38>
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d80d      	bhi.n	800d7ea <USBH_LL_GetSpeed+0x3e>
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <USBH_LL_GetSpeed+0x2c>
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d003      	beq.n	800d7de <USBH_LL_GetSpeed+0x32>
 800d7d6:	e008      	b.n	800d7ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]
    break;
 800d7dc:	e008      	b.n	800d7f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e2:	e005      	b.n	800d7f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e8:	e002      	b.n	800d7f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ee:	bf00      	nop
  }
  return  speed;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b084      	sub	sp, #16
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d810:	4618      	mov	r0, r3
 800d812:	f7f6 f84b 	bl	80038ac <HAL_HCD_ResetPort>
 800d816:	4603      	mov	r3, r0
 800d818:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 f8ff 	bl	800da20 <USBH_Get_USB_Status>
 800d822:	4603      	mov	r3, r0
 800d824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d826:	7bbb      	ldrb	r3, [r7, #14]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	460b      	mov	r3, r1
 800d83a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d842:	78fa      	ldrb	r2, [r7, #3]
 800d844:	4611      	mov	r1, r2
 800d846:	4618      	mov	r0, r3
 800d848:	f7f6 f852 	bl	80038f0 <HAL_HCD_HC_GetXferCount>
 800d84c:	4603      	mov	r3, r0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d856:	b590      	push	{r4, r7, lr}
 800d858:	b089      	sub	sp, #36	; 0x24
 800d85a:	af04      	add	r7, sp, #16
 800d85c:	6078      	str	r0, [r7, #4]
 800d85e:	4608      	mov	r0, r1
 800d860:	4611      	mov	r1, r2
 800d862:	461a      	mov	r2, r3
 800d864:	4603      	mov	r3, r0
 800d866:	70fb      	strb	r3, [r7, #3]
 800d868:	460b      	mov	r3, r1
 800d86a:	70bb      	strb	r3, [r7, #2]
 800d86c:	4613      	mov	r3, r2
 800d86e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d874:	2300      	movs	r3, #0
 800d876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d87e:	787c      	ldrb	r4, [r7, #1]
 800d880:	78ba      	ldrb	r2, [r7, #2]
 800d882:	78f9      	ldrb	r1, [r7, #3]
 800d884:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d886:	9302      	str	r3, [sp, #8]
 800d888:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	4623      	mov	r3, r4
 800d896:	f7f5 fcbc 	bl	8003212 <HAL_HCD_HC_Init>
 800d89a:	4603      	mov	r3, r0
 800d89c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f000 f8bd 	bl	800da20 <USBH_Get_USB_Status>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd90      	pop	{r4, r7, pc}

0800d8b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8ce:	78fa      	ldrb	r2, [r7, #3]
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7f5 fd2c 	bl	8003330 <HAL_HCD_HC_Halt>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 f89e 	bl	800da20 <USBH_Get_USB_Status>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d8f2:	b590      	push	{r4, r7, lr}
 800d8f4:	b089      	sub	sp, #36	; 0x24
 800d8f6:	af04      	add	r7, sp, #16
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	4608      	mov	r0, r1
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	461a      	mov	r2, r3
 800d900:	4603      	mov	r3, r0
 800d902:	70fb      	strb	r3, [r7, #3]
 800d904:	460b      	mov	r3, r1
 800d906:	70bb      	strb	r3, [r7, #2]
 800d908:	4613      	mov	r3, r2
 800d90a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d910:	2300      	movs	r3, #0
 800d912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d91a:	787c      	ldrb	r4, [r7, #1]
 800d91c:	78ba      	ldrb	r2, [r7, #2]
 800d91e:	78f9      	ldrb	r1, [r7, #3]
 800d920:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d924:	9303      	str	r3, [sp, #12]
 800d926:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d928:	9302      	str	r3, [sp, #8]
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	4623      	mov	r3, r4
 800d936:	f7f5 fd1f 	bl	8003378 <HAL_HCD_HC_SubmitRequest>
 800d93a:	4603      	mov	r3, r0
 800d93c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
 800d940:	4618      	mov	r0, r3
 800d942:	f000 f86d 	bl	800da20 <USBH_Get_USB_Status>
 800d946:	4603      	mov	r3, r0
 800d948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d94a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	bd90      	pop	{r4, r7, pc}

0800d954 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	460b      	mov	r3, r1
 800d95e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d966:	78fa      	ldrb	r2, [r7, #3]
 800d968:	4611      	mov	r1, r2
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7f5 ffac 	bl	80038c8 <HAL_HCD_HC_GetURBState>
 800d970:	4603      	mov	r3, r0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b082      	sub	sp, #8
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	460b      	mov	r3, r1
 800d984:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d103      	bne.n	800d998 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d990:	78fb      	ldrb	r3, [r7, #3]
 800d992:	4618      	mov	r0, r3
 800d994:	f000 f870 	bl	800da78 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d998:	20c8      	movs	r0, #200	; 0xc8
 800d99a:	f7f4 fb69 	bl	8002070 <HAL_Delay>
  return USBH_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d9be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	212c      	movs	r1, #44	; 0x2c
 800d9c6:	fb01 f303 	mul.w	r3, r1, r3
 800d9ca:	4413      	add	r3, r2
 800d9cc:	333b      	adds	r3, #59	; 0x3b
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d009      	beq.n	800d9e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d9d4:	78fb      	ldrb	r3, [r7, #3]
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	212c      	movs	r1, #44	; 0x2c
 800d9da:	fb01 f303 	mul.w	r3, r1, r3
 800d9de:	4413      	add	r3, r2
 800d9e0:	3354      	adds	r3, #84	; 0x54
 800d9e2:	78ba      	ldrb	r2, [r7, #2]
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	e008      	b.n	800d9fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d9e8:	78fb      	ldrb	r3, [r7, #3]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	212c      	movs	r1, #44	; 0x2c
 800d9ee:	fb01 f303 	mul.w	r3, r1, r3
 800d9f2:	4413      	add	r3, r2
 800d9f4:	3355      	adds	r3, #85	; 0x55
 800d9f6:	78ba      	ldrb	r2, [r7, #2]
 800d9f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d9fa:	2300      	movs	r3, #0
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3714      	adds	r7, #20
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7f4 fb2d 	bl	8002070 <HAL_Delay>
}
 800da16:	bf00      	nop
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
	...

0800da20 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	4603      	mov	r3, r0
 800da28:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	2b03      	cmp	r3, #3
 800da32:	d817      	bhi.n	800da64 <USBH_Get_USB_Status+0x44>
 800da34:	a201      	add	r2, pc, #4	; (adr r2, 800da3c <USBH_Get_USB_Status+0x1c>)
 800da36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3a:	bf00      	nop
 800da3c:	0800da4d 	.word	0x0800da4d
 800da40:	0800da53 	.word	0x0800da53
 800da44:	0800da59 	.word	0x0800da59
 800da48:	0800da5f 	.word	0x0800da5f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	73fb      	strb	r3, [r7, #15]
    break;
 800da50:	e00b      	b.n	800da6a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800da52:	2302      	movs	r3, #2
 800da54:	73fb      	strb	r3, [r7, #15]
    break;
 800da56:	e008      	b.n	800da6a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800da58:	2301      	movs	r3, #1
 800da5a:	73fb      	strb	r3, [r7, #15]
    break;
 800da5c:	e005      	b.n	800da6a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800da5e:	2302      	movs	r3, #2
 800da60:	73fb      	strb	r3, [r7, #15]
    break;
 800da62:	e002      	b.n	800da6a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800da64:	2302      	movs	r3, #2
 800da66:	73fb      	strb	r3, [r7, #15]
    break;
 800da68:	bf00      	nop
  }
  return usb_status;
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3714      	adds	r7, #20
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	4603      	mov	r3, r0
 800da80:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800da82:	79fb      	ldrb	r3, [r7, #7]
 800da84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800da86:	79fb      	ldrb	r3, [r7, #7]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d102      	bne.n	800da92 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800da8c:	2301      	movs	r3, #1
 800da8e:	73fb      	strb	r3, [r7, #15]
 800da90:	e001      	b.n	800da96 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800da92:	2300      	movs	r3, #0
 800da94:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	461a      	mov	r2, r3
 800da9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da9e:	4803      	ldr	r0, [pc, #12]	; (800daac <MX_DriverVbusFS+0x34>)
 800daa0:	f7f5 fb18 	bl	80030d4 <HAL_GPIO_WritePin>
}
 800daa4:	bf00      	nop
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	40021800 	.word	0x40021800

0800dab0 <_Znwj>:
 800dab0:	2801      	cmp	r0, #1
 800dab2:	bf38      	it	cc
 800dab4:	2001      	movcc	r0, #1
 800dab6:	b510      	push	{r4, lr}
 800dab8:	4604      	mov	r4, r0
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 f844 	bl	800db48 <malloc>
 800dac0:	b930      	cbnz	r0, 800dad0 <_Znwj+0x20>
 800dac2:	f000 f807 	bl	800dad4 <_ZSt15get_new_handlerv>
 800dac6:	b908      	cbnz	r0, 800dacc <_Znwj+0x1c>
 800dac8:	f000 f80c 	bl	800dae4 <abort>
 800dacc:	4780      	blx	r0
 800dace:	e7f4      	b.n	800daba <_Znwj+0xa>
 800dad0:	bd10      	pop	{r4, pc}
	...

0800dad4 <_ZSt15get_new_handlerv>:
 800dad4:	4b02      	ldr	r3, [pc, #8]	; (800dae0 <_ZSt15get_new_handlerv+0xc>)
 800dad6:	6818      	ldr	r0, [r3, #0]
 800dad8:	f3bf 8f5b 	dmb	ish
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop
 800dae0:	20004d28 	.word	0x20004d28

0800dae4 <abort>:
 800dae4:	b508      	push	{r3, lr}
 800dae6:	2006      	movs	r0, #6
 800dae8:	f000 f936 	bl	800dd58 <raise>
 800daec:	2001      	movs	r0, #1
 800daee:	f7f4 fa01 	bl	8001ef4 <_exit>
	...

0800daf4 <__errno>:
 800daf4:	4b01      	ldr	r3, [pc, #4]	; (800dafc <__errno+0x8>)
 800daf6:	6818      	ldr	r0, [r3, #0]
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	20000030 	.word	0x20000030

0800db00 <__libc_init_array>:
 800db00:	b570      	push	{r4, r5, r6, lr}
 800db02:	4d0d      	ldr	r5, [pc, #52]	; (800db38 <__libc_init_array+0x38>)
 800db04:	4c0d      	ldr	r4, [pc, #52]	; (800db3c <__libc_init_array+0x3c>)
 800db06:	1b64      	subs	r4, r4, r5
 800db08:	10a4      	asrs	r4, r4, #2
 800db0a:	2600      	movs	r6, #0
 800db0c:	42a6      	cmp	r6, r4
 800db0e:	d109      	bne.n	800db24 <__libc_init_array+0x24>
 800db10:	4d0b      	ldr	r5, [pc, #44]	; (800db40 <__libc_init_array+0x40>)
 800db12:	4c0c      	ldr	r4, [pc, #48]	; (800db44 <__libc_init_array+0x44>)
 800db14:	f000 f94a 	bl	800ddac <_init>
 800db18:	1b64      	subs	r4, r4, r5
 800db1a:	10a4      	asrs	r4, r4, #2
 800db1c:	2600      	movs	r6, #0
 800db1e:	42a6      	cmp	r6, r4
 800db20:	d105      	bne.n	800db2e <__libc_init_array+0x2e>
 800db22:	bd70      	pop	{r4, r5, r6, pc}
 800db24:	f855 3b04 	ldr.w	r3, [r5], #4
 800db28:	4798      	blx	r3
 800db2a:	3601      	adds	r6, #1
 800db2c:	e7ee      	b.n	800db0c <__libc_init_array+0xc>
 800db2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db32:	4798      	blx	r3
 800db34:	3601      	adds	r6, #1
 800db36:	e7f2      	b.n	800db1e <__libc_init_array+0x1e>
 800db38:	0800de6c 	.word	0x0800de6c
 800db3c:	0800de6c 	.word	0x0800de6c
 800db40:	0800de6c 	.word	0x0800de6c
 800db44:	0800de74 	.word	0x0800de74

0800db48 <malloc>:
 800db48:	4b02      	ldr	r3, [pc, #8]	; (800db54 <malloc+0xc>)
 800db4a:	4601      	mov	r1, r0
 800db4c:	6818      	ldr	r0, [r3, #0]
 800db4e:	f000 b871 	b.w	800dc34 <_malloc_r>
 800db52:	bf00      	nop
 800db54:	20000030 	.word	0x20000030

0800db58 <free>:
 800db58:	4b02      	ldr	r3, [pc, #8]	; (800db64 <free+0xc>)
 800db5a:	4601      	mov	r1, r0
 800db5c:	6818      	ldr	r0, [r3, #0]
 800db5e:	f000 b819 	b.w	800db94 <_free_r>
 800db62:	bf00      	nop
 800db64:	20000030 	.word	0x20000030

0800db68 <memcpy>:
 800db68:	440a      	add	r2, r1
 800db6a:	4291      	cmp	r1, r2
 800db6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800db70:	d100      	bne.n	800db74 <memcpy+0xc>
 800db72:	4770      	bx	lr
 800db74:	b510      	push	{r4, lr}
 800db76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db7e:	4291      	cmp	r1, r2
 800db80:	d1f9      	bne.n	800db76 <memcpy+0xe>
 800db82:	bd10      	pop	{r4, pc}

0800db84 <memset>:
 800db84:	4402      	add	r2, r0
 800db86:	4603      	mov	r3, r0
 800db88:	4293      	cmp	r3, r2
 800db8a:	d100      	bne.n	800db8e <memset+0xa>
 800db8c:	4770      	bx	lr
 800db8e:	f803 1b01 	strb.w	r1, [r3], #1
 800db92:	e7f9      	b.n	800db88 <memset+0x4>

0800db94 <_free_r>:
 800db94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db96:	2900      	cmp	r1, #0
 800db98:	d048      	beq.n	800dc2c <_free_r+0x98>
 800db9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db9e:	9001      	str	r0, [sp, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f1a1 0404 	sub.w	r4, r1, #4
 800dba6:	bfb8      	it	lt
 800dba8:	18e4      	addlt	r4, r4, r3
 800dbaa:	f000 f8f1 	bl	800dd90 <__malloc_lock>
 800dbae:	4a20      	ldr	r2, [pc, #128]	; (800dc30 <_free_r+0x9c>)
 800dbb0:	9801      	ldr	r0, [sp, #4]
 800dbb2:	6813      	ldr	r3, [r2, #0]
 800dbb4:	4615      	mov	r5, r2
 800dbb6:	b933      	cbnz	r3, 800dbc6 <_free_r+0x32>
 800dbb8:	6063      	str	r3, [r4, #4]
 800dbba:	6014      	str	r4, [r2, #0]
 800dbbc:	b003      	add	sp, #12
 800dbbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbc2:	f000 b8eb 	b.w	800dd9c <__malloc_unlock>
 800dbc6:	42a3      	cmp	r3, r4
 800dbc8:	d90b      	bls.n	800dbe2 <_free_r+0x4e>
 800dbca:	6821      	ldr	r1, [r4, #0]
 800dbcc:	1862      	adds	r2, r4, r1
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	bf04      	itt	eq
 800dbd2:	681a      	ldreq	r2, [r3, #0]
 800dbd4:	685b      	ldreq	r3, [r3, #4]
 800dbd6:	6063      	str	r3, [r4, #4]
 800dbd8:	bf04      	itt	eq
 800dbda:	1852      	addeq	r2, r2, r1
 800dbdc:	6022      	streq	r2, [r4, #0]
 800dbde:	602c      	str	r4, [r5, #0]
 800dbe0:	e7ec      	b.n	800dbbc <_free_r+0x28>
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	b10b      	cbz	r3, 800dbec <_free_r+0x58>
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	d9fa      	bls.n	800dbe2 <_free_r+0x4e>
 800dbec:	6811      	ldr	r1, [r2, #0]
 800dbee:	1855      	adds	r5, r2, r1
 800dbf0:	42a5      	cmp	r5, r4
 800dbf2:	d10b      	bne.n	800dc0c <_free_r+0x78>
 800dbf4:	6824      	ldr	r4, [r4, #0]
 800dbf6:	4421      	add	r1, r4
 800dbf8:	1854      	adds	r4, r2, r1
 800dbfa:	42a3      	cmp	r3, r4
 800dbfc:	6011      	str	r1, [r2, #0]
 800dbfe:	d1dd      	bne.n	800dbbc <_free_r+0x28>
 800dc00:	681c      	ldr	r4, [r3, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	6053      	str	r3, [r2, #4]
 800dc06:	4421      	add	r1, r4
 800dc08:	6011      	str	r1, [r2, #0]
 800dc0a:	e7d7      	b.n	800dbbc <_free_r+0x28>
 800dc0c:	d902      	bls.n	800dc14 <_free_r+0x80>
 800dc0e:	230c      	movs	r3, #12
 800dc10:	6003      	str	r3, [r0, #0]
 800dc12:	e7d3      	b.n	800dbbc <_free_r+0x28>
 800dc14:	6825      	ldr	r5, [r4, #0]
 800dc16:	1961      	adds	r1, r4, r5
 800dc18:	428b      	cmp	r3, r1
 800dc1a:	bf04      	itt	eq
 800dc1c:	6819      	ldreq	r1, [r3, #0]
 800dc1e:	685b      	ldreq	r3, [r3, #4]
 800dc20:	6063      	str	r3, [r4, #4]
 800dc22:	bf04      	itt	eq
 800dc24:	1949      	addeq	r1, r1, r5
 800dc26:	6021      	streq	r1, [r4, #0]
 800dc28:	6054      	str	r4, [r2, #4]
 800dc2a:	e7c7      	b.n	800dbbc <_free_r+0x28>
 800dc2c:	b003      	add	sp, #12
 800dc2e:	bd30      	pop	{r4, r5, pc}
 800dc30:	20004d2c 	.word	0x20004d2c

0800dc34 <_malloc_r>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	1ccd      	adds	r5, r1, #3
 800dc38:	f025 0503 	bic.w	r5, r5, #3
 800dc3c:	3508      	adds	r5, #8
 800dc3e:	2d0c      	cmp	r5, #12
 800dc40:	bf38      	it	cc
 800dc42:	250c      	movcc	r5, #12
 800dc44:	2d00      	cmp	r5, #0
 800dc46:	4606      	mov	r6, r0
 800dc48:	db01      	blt.n	800dc4e <_malloc_r+0x1a>
 800dc4a:	42a9      	cmp	r1, r5
 800dc4c:	d903      	bls.n	800dc56 <_malloc_r+0x22>
 800dc4e:	230c      	movs	r3, #12
 800dc50:	6033      	str	r3, [r6, #0]
 800dc52:	2000      	movs	r0, #0
 800dc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc56:	f000 f89b 	bl	800dd90 <__malloc_lock>
 800dc5a:	4921      	ldr	r1, [pc, #132]	; (800dce0 <_malloc_r+0xac>)
 800dc5c:	680a      	ldr	r2, [r1, #0]
 800dc5e:	4614      	mov	r4, r2
 800dc60:	b99c      	cbnz	r4, 800dc8a <_malloc_r+0x56>
 800dc62:	4f20      	ldr	r7, [pc, #128]	; (800dce4 <_malloc_r+0xb0>)
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	b923      	cbnz	r3, 800dc72 <_malloc_r+0x3e>
 800dc68:	4621      	mov	r1, r4
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f000 f83c 	bl	800dce8 <_sbrk_r>
 800dc70:	6038      	str	r0, [r7, #0]
 800dc72:	4629      	mov	r1, r5
 800dc74:	4630      	mov	r0, r6
 800dc76:	f000 f837 	bl	800dce8 <_sbrk_r>
 800dc7a:	1c43      	adds	r3, r0, #1
 800dc7c:	d123      	bne.n	800dcc6 <_malloc_r+0x92>
 800dc7e:	230c      	movs	r3, #12
 800dc80:	6033      	str	r3, [r6, #0]
 800dc82:	4630      	mov	r0, r6
 800dc84:	f000 f88a 	bl	800dd9c <__malloc_unlock>
 800dc88:	e7e3      	b.n	800dc52 <_malloc_r+0x1e>
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	1b5b      	subs	r3, r3, r5
 800dc8e:	d417      	bmi.n	800dcc0 <_malloc_r+0x8c>
 800dc90:	2b0b      	cmp	r3, #11
 800dc92:	d903      	bls.n	800dc9c <_malloc_r+0x68>
 800dc94:	6023      	str	r3, [r4, #0]
 800dc96:	441c      	add	r4, r3
 800dc98:	6025      	str	r5, [r4, #0]
 800dc9a:	e004      	b.n	800dca6 <_malloc_r+0x72>
 800dc9c:	6863      	ldr	r3, [r4, #4]
 800dc9e:	42a2      	cmp	r2, r4
 800dca0:	bf0c      	ite	eq
 800dca2:	600b      	streq	r3, [r1, #0]
 800dca4:	6053      	strne	r3, [r2, #4]
 800dca6:	4630      	mov	r0, r6
 800dca8:	f000 f878 	bl	800dd9c <__malloc_unlock>
 800dcac:	f104 000b 	add.w	r0, r4, #11
 800dcb0:	1d23      	adds	r3, r4, #4
 800dcb2:	f020 0007 	bic.w	r0, r0, #7
 800dcb6:	1ac2      	subs	r2, r0, r3
 800dcb8:	d0cc      	beq.n	800dc54 <_malloc_r+0x20>
 800dcba:	1a1b      	subs	r3, r3, r0
 800dcbc:	50a3      	str	r3, [r4, r2]
 800dcbe:	e7c9      	b.n	800dc54 <_malloc_r+0x20>
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	6864      	ldr	r4, [r4, #4]
 800dcc4:	e7cc      	b.n	800dc60 <_malloc_r+0x2c>
 800dcc6:	1cc4      	adds	r4, r0, #3
 800dcc8:	f024 0403 	bic.w	r4, r4, #3
 800dccc:	42a0      	cmp	r0, r4
 800dcce:	d0e3      	beq.n	800dc98 <_malloc_r+0x64>
 800dcd0:	1a21      	subs	r1, r4, r0
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f000 f808 	bl	800dce8 <_sbrk_r>
 800dcd8:	3001      	adds	r0, #1
 800dcda:	d1dd      	bne.n	800dc98 <_malloc_r+0x64>
 800dcdc:	e7cf      	b.n	800dc7e <_malloc_r+0x4a>
 800dcde:	bf00      	nop
 800dce0:	20004d2c 	.word	0x20004d2c
 800dce4:	20004d30 	.word	0x20004d30

0800dce8 <_sbrk_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d06      	ldr	r5, [pc, #24]	; (800dd04 <_sbrk_r+0x1c>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	f7f4 f908 	bl	8001f08 <_sbrk>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_sbrk_r+0x1a>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_sbrk_r+0x1a>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	200054cc 	.word	0x200054cc

0800dd08 <_raise_r>:
 800dd08:	291f      	cmp	r1, #31
 800dd0a:	b538      	push	{r3, r4, r5, lr}
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	460d      	mov	r5, r1
 800dd10:	d904      	bls.n	800dd1c <_raise_r+0x14>
 800dd12:	2316      	movs	r3, #22
 800dd14:	6003      	str	r3, [r0, #0]
 800dd16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd1a:	bd38      	pop	{r3, r4, r5, pc}
 800dd1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd1e:	b112      	cbz	r2, 800dd26 <_raise_r+0x1e>
 800dd20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd24:	b94b      	cbnz	r3, 800dd3a <_raise_r+0x32>
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 f830 	bl	800dd8c <_getpid_r>
 800dd2c:	462a      	mov	r2, r5
 800dd2e:	4601      	mov	r1, r0
 800dd30:	4620      	mov	r0, r4
 800dd32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd36:	f000 b817 	b.w	800dd68 <_kill_r>
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d00a      	beq.n	800dd54 <_raise_r+0x4c>
 800dd3e:	1c59      	adds	r1, r3, #1
 800dd40:	d103      	bne.n	800dd4a <_raise_r+0x42>
 800dd42:	2316      	movs	r3, #22
 800dd44:	6003      	str	r3, [r0, #0]
 800dd46:	2001      	movs	r0, #1
 800dd48:	e7e7      	b.n	800dd1a <_raise_r+0x12>
 800dd4a:	2400      	movs	r4, #0
 800dd4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd50:	4628      	mov	r0, r5
 800dd52:	4798      	blx	r3
 800dd54:	2000      	movs	r0, #0
 800dd56:	e7e0      	b.n	800dd1a <_raise_r+0x12>

0800dd58 <raise>:
 800dd58:	4b02      	ldr	r3, [pc, #8]	; (800dd64 <raise+0xc>)
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	6818      	ldr	r0, [r3, #0]
 800dd5e:	f7ff bfd3 	b.w	800dd08 <_raise_r>
 800dd62:	bf00      	nop
 800dd64:	20000030 	.word	0x20000030

0800dd68 <_kill_r>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	4d07      	ldr	r5, [pc, #28]	; (800dd88 <_kill_r+0x20>)
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4604      	mov	r4, r0
 800dd70:	4608      	mov	r0, r1
 800dd72:	4611      	mov	r1, r2
 800dd74:	602b      	str	r3, [r5, #0]
 800dd76:	f7f4 f8ad 	bl	8001ed4 <_kill>
 800dd7a:	1c43      	adds	r3, r0, #1
 800dd7c:	d102      	bne.n	800dd84 <_kill_r+0x1c>
 800dd7e:	682b      	ldr	r3, [r5, #0]
 800dd80:	b103      	cbz	r3, 800dd84 <_kill_r+0x1c>
 800dd82:	6023      	str	r3, [r4, #0]
 800dd84:	bd38      	pop	{r3, r4, r5, pc}
 800dd86:	bf00      	nop
 800dd88:	200054cc 	.word	0x200054cc

0800dd8c <_getpid_r>:
 800dd8c:	f7f4 b89a 	b.w	8001ec4 <_getpid>

0800dd90 <__malloc_lock>:
 800dd90:	4801      	ldr	r0, [pc, #4]	; (800dd98 <__malloc_lock+0x8>)
 800dd92:	f000 b809 	b.w	800dda8 <__retarget_lock_acquire_recursive>
 800dd96:	bf00      	nop
 800dd98:	200054d4 	.word	0x200054d4

0800dd9c <__malloc_unlock>:
 800dd9c:	4801      	ldr	r0, [pc, #4]	; (800dda4 <__malloc_unlock+0x8>)
 800dd9e:	f000 b804 	b.w	800ddaa <__retarget_lock_release_recursive>
 800dda2:	bf00      	nop
 800dda4:	200054d4 	.word	0x200054d4

0800dda8 <__retarget_lock_acquire_recursive>:
 800dda8:	4770      	bx	lr

0800ddaa <__retarget_lock_release_recursive>:
 800ddaa:	4770      	bx	lr

0800ddac <_init>:
 800ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddae:	bf00      	nop
 800ddb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddb2:	bc08      	pop	{r3}
 800ddb4:	469e      	mov	lr, r3
 800ddb6:	4770      	bx	lr

0800ddb8 <_fini>:
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddba:	bf00      	nop
 800ddbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddbe:	bc08      	pop	{r3}
 800ddc0:	469e      	mov	lr, r3
 800ddc2:	4770      	bx	lr
