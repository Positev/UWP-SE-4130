
SERTOSProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800f198  0800f198  0001f198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f334  0800f334  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800f334  0800f334  0001f334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f33c  0800f33c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f33c  0800f33c  0001f33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f340  0800f340  0001f340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800f344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054c8  20000094  0800f3d8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000555c  0800f3d8  0002555c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003967f  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e2c  00000000  00000000  00059743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002968  00000000  00000000  00060570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026d0  00000000  00000000  00062ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009c7d  00000000  00000000  000655a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032695  00000000  00000000  0006f225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdbe0  00000000  00000000  000a18ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019f49a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b330  00000000  00000000  0019f4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f180 	.word	0x0800f180

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000098 	.word	0x20000098
 800021c:	0800f180 	.word	0x0800f180

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN17DCMotorControllerC1EP12GPIO_TypeDeftS1_tS1_t>:
#include "DCMotorController.h"
#include  "main.h"

DCMotorController::DCMotorController(GPIO_TypeDef* port, uint16_t pin, GPIO_TypeDef* dir1Port, uint16_t dir1Pin, GPIO_TypeDef* dir2Port, uint16_t dir2Pin){
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	4613      	mov	r3, r2
 8000526:	80fb      	strh	r3, [r7, #6]
  this->pwmPort = port;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	601a      	str	r2, [r3, #0]
  this->pwmPin = pin;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	88fa      	ldrh	r2, [r7, #6]
 8000532:	809a      	strh	r2, [r3, #4]
  this->dir1Port = dir1Port;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	683a      	ldr	r2, [r7, #0]
 8000538:	609a      	str	r2, [r3, #8]
  this->dir1Pin = dir1Pin;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	8b3a      	ldrh	r2, [r7, #24]
 800053e:	80da      	strh	r2, [r3, #6]
  this->dir2Port = dir2Port;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	611a      	str	r2, [r3, #16]
  this->dir2Pin = dir2Pin;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	8c3a      	ldrh	r2, [r7, #32]
 800054a:	819a      	strh	r2, [r3, #12]

  this->frequency = 20;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2214      	movs	r2, #20
 8000550:	615a      	str	r2, [r3, #20]
  this->power = 0;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	f04f 0200 	mov.w	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  this->direction = DCMotorController::Clockwise;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	2200      	movs	r2, #0
 800055e:	771a      	strb	r2, [r3, #28]
} 
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	4618      	mov	r0, r3
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <_ZN17DCMotorController8setPowerEf>:

void DCMotorController::setPower(float power){
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	ed87 0a00 	vstr	s0, [r7]
  if (power > 1){
 800057a:	edd7 7a00 	vldr	s15, [r7]
 800057e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	dd04      	ble.n	8000596 <_ZN17DCMotorController8setPowerEf+0x28>
    this->power = 1;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000592:	619a      	str	r2, [r3, #24]
  }
  else{
    this->power = power;
  }
  
}
 8000594:	e00e      	b.n	80005b4 <_ZN17DCMotorController8setPowerEf+0x46>
  else if (power < 0){
 8000596:	edd7 7a00 	vldr	s15, [r7]
 800059a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800059e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a2:	d504      	bpl.n	80005ae <_ZN17DCMotorController8setPowerEf+0x40>
    this->power = 0;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f04f 0200 	mov.w	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
}
 80005ac:	e002      	b.n	80005b4 <_ZN17DCMotorController8setPowerEf+0x46>
    this->power = power;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	619a      	str	r2, [r3, #24]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <_ZN17DCMotorController8pwmPulseEv>:

void DCMotorController::pwmPulse(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  float power = this->power;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(this->dir1Port, this->dir1Pin, GPIO_PIN_SET) ;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6898      	ldr	r0, [r3, #8]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	88db      	ldrh	r3, [r3, #6]
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	f002 fbcb 	bl	8002d74 <HAL_GPIO_WritePin>
  osDelay(this->frequency * power);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	ee07 3a90 	vmov	s15, r3
 80005e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005f6:	ee17 0a90 	vmov	r0, s15
 80005fa:	f00b f969 	bl	800b8d0 <osDelay>
  
  HAL_GPIO_WritePin(this->dir1Port, this->dir1Pin, GPIO_PIN_RESET) ;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6898      	ldr	r0, [r3, #8]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	88db      	ldrh	r3, [r3, #6]
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	f002 fbb3 	bl	8002d74 <HAL_GPIO_WritePin>
  osDelay(this->frequency * (1 - power));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	ee07 3a90 	vmov	s15, r3
 8000616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800061a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800061e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000622:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800062a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800062e:	ee17 0a90 	vmov	r0, s15
 8000632:	f00b f94d 	bl	800b8d0 <osDelay>
  }
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE>:

void DCMotorController::setDirection(MotorDirection direction){
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
  if (direction == DCMotorController::Clockwise){
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d110      	bne.n	8000672 <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE+0x34>
      HAL_GPIO_WritePin(this->dir1Port, this->dir1Pin, GPIO_PIN_SET) ;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6898      	ldr	r0, [r3, #8]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	88db      	ldrh	r3, [r3, #6]
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	f002 fb8a 	bl	8002d74 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(this->dir2Port, this->dir2Pin, GPIO_PIN_RESET) ;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6918      	ldr	r0, [r3, #16]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	899b      	ldrh	r3, [r3, #12]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f002 fb82 	bl	8002d74 <HAL_GPIO_WritePin>
  }else if (direction == DCMotorController::CounterClockwise){

      HAL_GPIO_WritePin(this->dir1Port, this->dir1Pin,GPIO_PIN_RESET ) ;
      HAL_GPIO_WritePin(this->dir2Port, this->dir2Pin, GPIO_PIN_SET) ;
  }
}
 8000670:	e012      	b.n	8000698 <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE+0x5a>
  }else if (direction == DCMotorController::CounterClockwise){
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d10f      	bne.n	8000698 <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE+0x5a>
      HAL_GPIO_WritePin(this->dir1Port, this->dir1Pin,GPIO_PIN_RESET ) ;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6898      	ldr	r0, [r3, #8]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	88db      	ldrh	r3, [r3, #6]
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	f002 fb76 	bl	8002d74 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(this->dir2Port, this->dir2Pin, GPIO_PIN_SET) ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6918      	ldr	r0, [r3, #16]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	899b      	ldrh	r3, [r3, #12]
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	f002 fb6e 	bl	8002d74 <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f001 fbea 	bl	8001e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f89a 	bl	80007e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 fb8e 	bl	8000dcc <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80006b0:	f000 f944 	bl	800093c <_ZL12MX_ADC1_Initv>
  MX_DFSDM1_Init();
 80006b4:	f000 f99e 	bl	80009f4 <_ZL14MX_DFSDM1_Initv>
  MX_DFSDM2_Init();
 80006b8:	f000 f9d8 	bl	8000a6c <_ZL14MX_DFSDM2_Initv>
  MX_FMPI2C1_Init();
 80006bc:	f000 fa4a 	bl	8000b54 <_ZL15MX_FMPI2C1_Initv>
  MX_FSMC_Init();
 80006c0:	f000 fcc2 	bl	8001048 <_ZL12MX_FSMC_Initv>
  MX_I2S2_Init();
 80006c4:	f000 fa86 	bl	8000bd4 <_ZL12MX_I2S2_Initv>
  MX_QUADSPI_Init();
 80006c8:	f000 fab8 	bl	8000c3c <_ZL15MX_QUADSPI_Initv>
  MX_SDIO_SD_Init();
 80006cc:	f000 fae8 	bl	8000ca0 <_ZL15MX_SDIO_SD_Initv>
  MX_UART10_Init();
 80006d0:	f000 fb20 	bl	8000d14 <_ZL14MX_UART10_Initv>
  MX_USART6_UART_Init();
 80006d4:	f000 fb4c 	bl	8000d70 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d8:	f00b f81e 	bl	800b718 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Motor1PIDUpdate */
  Motor1PIDUpdateHandle = osTimerNew(RunMotor1PIDUpdate, osTimerPeriodic, NULL, &Motor1PIDUpdate_attributes);
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <main+0xd8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	2101      	movs	r1, #1
 80006e2:	4826      	ldr	r0, [pc, #152]	; (800077c <main+0xdc>)
 80006e4:	f00b f924 	bl	800b930 <osTimerNew>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a25      	ldr	r2, [pc, #148]	; (8000780 <main+0xe0>)
 80006ec:	6013      	str	r3, [r2, #0]

  /* creation of Motor2PIDUpdate */
  Motor2PIDUpdateHandle = osTimerNew(RunMotor2PIDUpdate, osTimerPeriodic, NULL, &Motor2PIDUpdate_attributes);
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <main+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	4824      	ldr	r0, [pc, #144]	; (8000788 <main+0xe8>)
 80006f6:	f00b f91b 	bl	800b930 <osTimerNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a23      	ldr	r2, [pc, #140]	; (800078c <main+0xec>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* creation of Motor3PIDUpdate */
  Motor3PIDUpdateHandle = osTimerNew(RunMotor3PIDUpdate, osTimerPeriodic, NULL, &Motor3PIDUpdate_attributes);
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <main+0xf0>)
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	4823      	ldr	r0, [pc, #140]	; (8000794 <main+0xf4>)
 8000708:	f00b f912 	bl	800b930 <osTimerNew>
 800070c:	4603      	mov	r3, r0
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <main+0xf8>)
 8000710:	6013      	str	r3, [r2, #0]

  /* creation of DriveTrainPID */
  DriveTrainPIDHandle = osTimerNew(RunDriveTrainPID, osTimerPeriodic, NULL, &DriveTrainPID_attributes);
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0xfc>)
 8000714:	2200      	movs	r2, #0
 8000716:	2101      	movs	r1, #1
 8000718:	4821      	ldr	r0, [pc, #132]	; (80007a0 <main+0x100>)
 800071a:	f00b f909 	bl	800b930 <osTimerNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <main+0x104>)
 8000722:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <main+0x108>)
 8000726:	2100      	movs	r1, #0
 8000728:	4820      	ldr	r0, [pc, #128]	; (80007ac <main+0x10c>)
 800072a:	f00b f83f 	bl	800b7ac <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <main+0x110>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of Motor1PWM */
  Motor1PWMHandle = osThreadNew(StartMotor1PWM, NULL, &Motor1PWM_attributes);
 8000734:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <main+0x114>)
 8000736:	2100      	movs	r1, #0
 8000738:	481f      	ldr	r0, [pc, #124]	; (80007b8 <main+0x118>)
 800073a:	f00b f837 	bl	800b7ac <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <main+0x11c>)
 8000742:	6013      	str	r3, [r2, #0]

  /* creation of Motor2PWM */
  Motor2PWMHandle = osThreadNew(StartMotor2PWM, NULL, &Motor2PWM_attributes);
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <main+0x120>)
 8000746:	2100      	movs	r1, #0
 8000748:	481e      	ldr	r0, [pc, #120]	; (80007c4 <main+0x124>)
 800074a:	f00b f82f 	bl	800b7ac <osThreadNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a1d      	ldr	r2, [pc, #116]	; (80007c8 <main+0x128>)
 8000752:	6013      	str	r3, [r2, #0]

  /* creation of Motor3PWM */
  Motor3PWMHandle = osThreadNew(StartMotor3PWM, NULL, &Motor3PWM_attributes);
 8000754:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <main+0x12c>)
 8000756:	2100      	movs	r1, #0
 8000758:	481d      	ldr	r0, [pc, #116]	; (80007d0 <main+0x130>)
 800075a:	f00b f827 	bl	800b7ac <osThreadNew>
 800075e:	4603      	mov	r3, r0
 8000760:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <main+0x134>)
 8000762:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 8000764:	481c      	ldr	r0, [pc, #112]	; (80007d8 <main+0x138>)
 8000766:	f00b f95f 	bl	800ba28 <osEventFlagsNew>
 800076a:	4603      	mov	r3, r0
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <main+0x13c>)
 800076e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000770:	f00a fff6 	bl	800b760 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0xd4>
 8000776:	bf00      	nop
 8000778:	0800f2cc 	.word	0x0800f2cc
 800077c:	08001249 	.word	0x08001249
 8000780:	2000043c 	.word	0x2000043c
 8000784:	0800f2dc 	.word	0x0800f2dc
 8000788:	0800125d 	.word	0x0800125d
 800078c:	20000440 	.word	0x20000440
 8000790:	0800f2ec 	.word	0x0800f2ec
 8000794:	08001271 	.word	0x08001271
 8000798:	20000444 	.word	0x20000444
 800079c:	0800f2fc 	.word	0x0800f2fc
 80007a0:	08001285 	.word	0x08001285
 80007a4:	20000448 	.word	0x20000448
 80007a8:	0800f23c 	.word	0x0800f23c
 80007ac:	080011c1 	.word	0x080011c1
 80007b0:	2000042c 	.word	0x2000042c
 80007b4:	0800f260 	.word	0x0800f260
 80007b8:	080011d5 	.word	0x080011d5
 80007bc:	20000430 	.word	0x20000430
 80007c0:	0800f284 	.word	0x0800f284
 80007c4:	08001229 	.word	0x08001229
 80007c8:	20000434 	.word	0x20000434
 80007cc:	0800f2a8 	.word	0x0800f2a8
 80007d0:	08001239 	.word	0x08001239
 80007d4:	20000438 	.word	0x20000438
 80007d8:	0800f30c 	.word	0x0800f30c
 80007dc:	2000044c 	.word	0x2000044c

080007e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0aa      	sub	sp, #168	; 0xa8
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007ea:	2234      	movs	r2, #52	; 0x34
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f00e fbf6 	bl	800efe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2258      	movs	r2, #88	; 0x58
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00e fbe7 	bl	800efe0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <_Z18SystemClock_Configv+0x154>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a46      	ldr	r2, [pc, #280]	; (8000934 <_Z18SystemClock_Configv+0x154>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b44      	ldr	r3, [pc, #272]	; (8000934 <_Z18SystemClock_Configv+0x154>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b41      	ldr	r3, [pc, #260]	; (8000938 <_Z18SystemClock_Configv+0x158>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a40      	ldr	r2, [pc, #256]	; (8000938 <_Z18SystemClock_Configv+0x158>)
 8000838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <_Z18SystemClock_Configv+0x158>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800084a:	2303      	movs	r3, #3
 800084c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800084e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000852:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085a:	2310      	movs	r3, #16
 800085c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800086e:	230f      	movs	r3, #15
 8000870:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000874:	2390      	movs	r3, #144	; 0x90
 8000876:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000880:	2305      	movs	r3, #5
 8000882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000890:	4618      	mov	r0, r3
 8000892:	f005 fb63 	bl	8005f5c <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf14      	ite	ne
 800089c:	2301      	movne	r3, #1
 800089e:	2300      	moveq	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80008a6:	f000 fd09 	bl	80012bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	230f      	movs	r3, #15
 80008ac:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ae:	2300      	movs	r3, #0
 80008b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f004 fd57 	bl	8005378 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf14      	ite	ne
 80008d0:	2301      	movne	r3, #1
 80008d2:	2300      	moveq	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 80008da:	f000 fcef 	bl	80012bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80008de:	f240 1371 	movw	r3, #369	; 0x171
 80008e2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80008e4:	2332      	movs	r3, #50	; 0x32
 80008e6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80008e8:	230c      	movs	r3, #12
 80008ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80008fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000902:	2300      	movs	r3, #0
 8000904:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800090a:	2300      	movs	r3, #0
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4618      	mov	r0, r3
 8000914:	f004 ff32 	bl	800577c <HAL_RCCEx_PeriphCLKConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_Z18SystemClock_Configv+0x14c>
  {
    Error_Handler();
 8000928:	f000 fcc8 	bl	80012bc <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	37a8      	adds	r7, #168	; 0xa8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <_ZL12MX_ADC1_Initv+0xb0>)
 8000952:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 8000968:	2200      	movs	r2, #0
 800096a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 8000976:	2200      	movs	r2, #0
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <_ZL12MX_ADC1_Initv+0xb4>)
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 8000988:	2201      	movs	r2, #1
 800098a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 8000996:	2201      	movs	r2, #1
 8000998:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099a:	4813      	ldr	r0, [pc, #76]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 800099c:	f001 fad4 	bl	8001f48 <HAL_ADC_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80009b0:	f000 fc84 	bl	80012bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009b4:	230a      	movs	r3, #10
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <_ZL12MX_ADC1_Initv+0xac>)
 80009c6:	f001 fb03 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf14      	ite	ne
 80009d0:	2301      	movne	r3, #1
 80009d2:	2300      	moveq	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80009da:	f000 fc6f 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000b0 	.word	0x200000b0
 80009ec:	40012000 	.word	0x40012000
 80009f0:	0f000001 	.word	0x0f000001

080009f4 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 80009fa:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <_ZL14MX_DFSDM1_Initv+0x74>)
 80009fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <_ZL14MX_DFSDM1_Initv+0x70>)
 8000a48:	f001 fdd2 	bl	80025f0 <HAL_DFSDM_ChannelInit>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf14      	ite	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	2300      	moveq	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <_ZL14MX_DFSDM1_Initv+0x6c>
  {
    Error_Handler();
 8000a5c:	f000 fc2e 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000f8 	.word	0x200000f8
 8000a68:	40016020 	.word	0x40016020

08000a6c <_ZL14MX_DFSDM2_Initv>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000a70:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000a72:	4a35      	ldr	r2, [pc, #212]	; (8000b48 <_ZL14MX_DFSDM2_Initv+0xdc>)
 8000a74:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a7c:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000abe:	4821      	ldr	r0, [pc, #132]	; (8000b44 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8000ac0:	f001 fd96 	bl	80025f0 <HAL_DFSDM_ChannelInit>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_ZL14MX_DFSDM2_Initv+0x6c>
  {
    Error_Handler();
 8000ad4:	f000 fbf2 	bl	80012bc <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000ada:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <_ZL14MX_DFSDM2_Initv+0xe4>)
 8000adc:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8000b28:	f001 fd62 	bl	80025f0 <HAL_DFSDM_ChannelInit>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bf14      	ite	ne
 8000b32:	2301      	movne	r3, #1
 8000b34:	2300      	moveq	r3, #0
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <_ZL14MX_DFSDM2_Initv+0xd4>
  {
    Error_Handler();
 8000b3c:	f000 fbbe 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000130 	.word	0x20000130
 8000b48:	40016420 	.word	0x40016420
 8000b4c:	20000168 	.word	0x20000168
 8000b50:	400164e0 	.word	0x400164e0

08000b54 <_ZL15MX_FMPI2C1_Initv>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <_ZL15MX_FMPI2C1_Initv+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <_ZL15MX_FMPI2C1_Initv+0x7c>)
 8000b62:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000b90:	f001 fe82 	bl	8002898 <HAL_FMPI2C_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	2300      	moveq	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <_ZL15MX_FMPI2C1_Initv+0x54>
  {
    Error_Handler();
 8000ba4:	f000 fb8a 	bl	80012bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8000bac:	f001 ff03 	bl	80029b6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <_ZL15MX_FMPI2C1_Initv+0x70>
  {
    Error_Handler();
 8000bc0:	f000 fb7c 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200001a0 	.word	0x200001a0
 8000bcc:	40006000 	.word	0x40006000
 8000bd0:	00303d5b 	.word	0x00303d5b

08000bd4 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <_ZL12MX_I2S2_Initv+0x64>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000bfc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c00:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <_ZL12MX_I2S2_Initv+0x60>)
 8000c16:	f003 fe2b 	bl	8004870 <HAL_I2S_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf14      	ite	ne
 8000c20:	2301      	movne	r3, #1
 8000c22:	2300      	moveq	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <_ZL12MX_I2S2_Initv+0x5a>
  {
    Error_Handler();
 8000c2a:	f000 fb47 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001ec 	.word	0x200001ec
 8000c38:	40003800 	.word	0x40003800

08000c3c <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c42:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <_ZL15MX_QUADSPI_Initv+0x60>)
 8000c44:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c54:	2210      	movs	r2, #16
 8000c56:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c5a:	2218      	movs	r2, #24
 8000c5c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c64:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000c7a:	f004 fabb 	bl	80051f4 <HAL_QSPI_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf14      	ite	ne
 8000c84:	2301      	movne	r3, #1
 8000c86:	2300      	moveq	r3, #0
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <_ZL15MX_QUADSPI_Initv+0x56>
  {
    Error_Handler();
 8000c8e:	f000 fb15 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000234 	.word	0x20000234
 8000c9c:	a0001000 	.word	0xa0001000

08000ca0 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000ca6:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <_ZL15MX_SDIO_SD_Initv+0x70>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000cce:	480f      	ldr	r0, [pc, #60]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000cd0:	f005 fbc8 	bl	8006464 <HAL_SD_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	2301      	movne	r3, #1
 8000cdc:	2300      	moveq	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 8000ce4:	f000 faea 	bl	80012bc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cec:	4807      	ldr	r0, [pc, #28]	; (8000d0c <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8000cee:	f005 fe0b 	bl	8006908 <HAL_SD_ConfigWideBusOperation>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	bf14      	ite	ne
 8000cf8:	2301      	movne	r3, #1
 8000cfa:	2300      	moveq	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 8000d02:	f000 fadb 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000280 	.word	0x20000280
 8000d10:	40012c00 	.word	0x40012c00

08000d14 <_ZL14MX_UART10_Initv>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_ZL14MX_UART10_Initv+0x58>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <_ZL14MX_UART10_Initv+0x54>)
 8000d4c:	f006 fc2a 	bl	80075a4 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <_ZL14MX_UART10_Initv+0x50>
  {
    Error_Handler();
 8000d60:	f000 faac 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000304 	.word	0x20000304
 8000d6c:	40011c00 	.word	0x40011c00

08000d70 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_ZL19MX_USART6_UART_Initv+0x58>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000da8:	f006 fbfc 	bl	80075a4 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2301      	movne	r3, #1
 8000db4:	2300      	moveq	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8000dbc:	f000 fa7e 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000348 	.word	0x20000348
 8000dc8:	40011400 	.word	0x40011400

08000dcc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
 8000de6:	4b90      	ldr	r3, [pc, #576]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a8f      	ldr	r2, [pc, #572]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000dec:	f043 0310 	orr.w	r3, r3, #16
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b8d      	ldr	r3, [pc, #564]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	4b89      	ldr	r3, [pc, #548]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a88      	ldr	r2, [pc, #544]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b86      	ldr	r3, [pc, #536]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b82      	ldr	r3, [pc, #520]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a81      	ldr	r2, [pc, #516]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e24:	f043 0320 	orr.w	r3, r3, #32
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b7f      	ldr	r3, [pc, #508]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a7a      	ldr	r2, [pc, #488]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b74      	ldr	r3, [pc, #464]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a73      	ldr	r2, [pc, #460]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b71      	ldr	r3, [pc, #452]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b6d      	ldr	r3, [pc, #436]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a6c      	ldr	r2, [pc, #432]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b6a      	ldr	r3, [pc, #424]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b66      	ldr	r3, [pc, #408]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a65      	ldr	r2, [pc, #404]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b63      	ldr	r3, [pc, #396]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b5f      	ldr	r3, [pc, #380]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a5e      	ldr	r2, [pc, #376]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b5c      	ldr	r3, [pc, #368]	; (8001028 <_ZL12MX_GPIO_Initv+0x25c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|Motor2Dir2_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2178      	movs	r1, #120	; 0x78
 8000ec6:	4859      	ldr	r0, [pc, #356]	; (800102c <_ZL12MX_GPIO_Initv+0x260>)
 8000ec8:	f001 ff54 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor3Dir1_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f242 0120 	movw	r1, #8224	; 0x2020
 8000ed2:	4857      	ldr	r0, [pc, #348]	; (8001030 <_ZL12MX_GPIO_Initv+0x264>)
 8000ed4:	f001 ff4e 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Motor1PWM_Pin|Motor2PWM_Pin|Motor1Dir2_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000ede:	4855      	ldr	r0, [pc, #340]	; (8001034 <_ZL12MX_GPIO_Initv+0x268>)
 8000ee0:	f001 ff48 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor3Dir2_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f242 0110 	movw	r1, #8208	; 0x2010
 8000eea:	4853      	ldr	r0, [pc, #332]	; (8001038 <_ZL12MX_GPIO_Initv+0x26c>)
 8000eec:	f001 ff42 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor3PWM_Pin|D15_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f24e 4141 	movw	r1, #58433	; 0xe441
 8000ef6:	4851      	ldr	r0, [pc, #324]	; (800103c <_ZL12MX_GPIO_Initv+0x270>)
 8000ef8:	f001 ff3c 	bl	8002d74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|Motor2Dir1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|Motor1Dir1_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000f02:	484f      	ldr	r0, [pc, #316]	; (8001040 <_ZL12MX_GPIO_Initv+0x274>)
 8000f04:	f001 ff36 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 Motor2Dir2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|Motor2Dir2_Pin;
 8000f08:	2378      	movs	r3, #120	; 0x78
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4843      	ldr	r0, [pc, #268]	; (800102c <_ZL12MX_GPIO_Initv+0x260>)
 8000f20:	f001 fd94 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3Dir1_Pin PC5 */
  GPIO_InitStruct.Pin = Motor3Dir1_Pin|GPIO_PIN_5;
 8000f24:	f242 0320 	movw	r3, #8224	; 0x2020
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	483c      	ldr	r0, [pc, #240]	; (8001030 <_ZL12MX_GPIO_Initv+0x264>)
 8000f3e:	f001 fd85 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1PWM_Pin Motor2PWM_Pin Motor1Dir2_Pin */
  GPIO_InitStruct.Pin = Motor1PWM_Pin|Motor2PWM_Pin|Motor1Dir2_Pin;
 8000f42:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4836      	ldr	r0, [pc, #216]	; (8001034 <_ZL12MX_GPIO_Initv+0x268>)
 8000f5c:	f001 fd76 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f60:	2302      	movs	r3, #2
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <_ZL12MX_GPIO_Initv+0x278>)
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	482f      	ldr	r0, [pc, #188]	; (8001030 <_ZL12MX_GPIO_Initv+0x264>)
 8000f74:	f001 fd6a 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Motor1Enc2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Motor1Enc2_Pin;
 8000f78:	f248 0301 	movw	r3, #32769	; 0x8001
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <_ZL12MX_GPIO_Initv+0x278>)
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482a      	ldr	r0, [pc, #168]	; (8001038 <_ZL12MX_GPIO_Initv+0x26c>)
 8000f8e:	f001 fd5d 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3Dir2_Pin PA13 */
  GPIO_InitStruct.Pin = Motor3Dir2_Pin|GPIO_PIN_13;
 8000f92:	f242 0310 	movw	r3, #8208	; 0x2010
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4823      	ldr	r0, [pc, #140]	; (8001038 <_ZL12MX_GPIO_Initv+0x26c>)
 8000fac:	f001 fd4e 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3PWM_Pin D15_Pin PB13 PB14
                           PB15 Motor2Dir1_Pin */
  GPIO_InitStruct.Pin = Motor3PWM_Pin|D15_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000fb0:	f24e 4341 	movw	r3, #58433	; 0xe441
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|Motor2Dir1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481c      	ldr	r0, [pc, #112]	; (800103c <_ZL12MX_GPIO_Initv+0x270>)
 8000fca:	f001 fd3f 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3Enc2_Pin Motor3Enc1_Pin Motor2Enc2_Pin Motor2Enc1_Pin
                           Motor1Enc1_Pin */
  GPIO_InitStruct.Pin = Motor3Enc2_Pin|Motor3Enc1_Pin|Motor2Enc2_Pin|Motor2Enc1_Pin
 8000fce:	f641 1330 	movw	r3, #6448	; 0x1930
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
                          |Motor1Enc1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <_ZL12MX_GPIO_Initv+0x278>)
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <_ZL12MX_GPIO_Initv+0x270>)
 8000fe4:	f001 fd32 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_ZL12MX_GPIO_Initv+0x278>)
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <_ZL12MX_GPIO_Initv+0x274>)
 8000ffc:	f001 fd26 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG8 Motor1Dir1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|Motor1Dir1_Pin;
 8001000:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <_ZL12MX_GPIO_Initv+0x274>)
 800101a:	f001 fd17 	bl	8002a4c <HAL_GPIO_Init>

}
 800101e:	bf00      	nop
 8001020:	3738      	adds	r7, #56	; 0x38
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40021000 	.word	0x40021000
 8001030:	40020800 	.word	0x40020800
 8001034:	40021400 	.word	0x40021400
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40021800 	.word	0x40021800
 8001044:	10110000 	.word	0x10110000

08001048 <_ZL12MX_FSMC_Initv>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 8001062:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001066:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 800106a:	4a53      	ldr	r2, [pc, #332]	; (80011b8 <_ZL12MX_FSMC_Initv+0x170>)
 800106c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001074:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 8001082:	2210      	movs	r2, #16
 8001084:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800108c:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001098:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010b0:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80010bc:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010c8:	230f      	movs	r3, #15
 80010ca:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80010cc:	230f      	movs	r3, #15
 80010ce:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80010d0:	23ff      	movs	r3, #255	; 0xff
 80010d2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80010d4:	230f      	movs	r3, #15
 80010d6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010d8:	2310      	movs	r3, #16
 80010da:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010dc:	2311      	movs	r3, #17
 80010de:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	4832      	ldr	r0, [pc, #200]	; (80011b4 <_ZL12MX_FSMC_Initv+0x16c>)
 80010ec:	f005 ff69 	bl	8006fc2 <HAL_SRAM_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <_ZL12MX_FSMC_Initv+0xbc>
  {
    Error_Handler( );
 8001100:	f000 f8dc 	bl	80012bc <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001106:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800110a:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 800110e:	4a2a      	ldr	r2, [pc, #168]	; (80011b8 <_ZL12MX_FSMC_Initv+0x170>)
 8001110:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001114:	2204      	movs	r2, #4
 8001116:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001126:	2210      	movs	r2, #16
 8001128:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 800113e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001146:	2200      	movs	r2, #0
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 800114c:	2200      	movs	r2, #0
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001152:	2200      	movs	r2, #0
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001158:	2200      	movs	r2, #0
 800115a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 800115e:	2200      	movs	r2, #0
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001164:	2200      	movs	r2, #0
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 800116a:	2200      	movs	r2, #0
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800116e:	230f      	movs	r3, #15
 8001170:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001172:	230f      	movs	r3, #15
 8001174:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001176:	23ff      	movs	r3, #255	; 0xff
 8001178:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800117a:	230f      	movs	r3, #15
 800117c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800117e:	2310      	movs	r3, #16
 8001180:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001182:	2311      	movs	r3, #17
 8001184:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	480a      	ldr	r0, [pc, #40]	; (80011bc <_ZL12MX_FSMC_Initv+0x174>)
 8001192:	f005 ff16 	bl	8006fc2 <HAL_SRAM_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <_ZL12MX_FSMC_Initv+0x162>
  {
    Error_Handler( );
 80011a6:	f000 f889 	bl	80012bc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000038c 	.word	0x2000038c
 80011b8:	a0000104 	.word	0xa0000104
 80011bc:	200003dc 	.word	0x200003dc

080011c0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80011c8:	f00d fbc0 	bl	800e94c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f00a fb7f 	bl	800b8d0 <osDelay>
 80011d2:	e7fb      	b.n	80011cc <_Z16StartDefaultTaskPv+0xc>

080011d4 <_Z14StartMotor1PWMPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor1PWM */
void StartMotor1PWM(void *argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	; 0x38
 80011d8:	af04      	add	r7, sp, #16
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor1PWM */
	DCMotorController m1(Motor1PWM_GPIO_Port, Motor1PWM_Pin, Motor1Dir1_GPIO_Port, Motor1Dir1_Pin,Motor1Dir2_GPIO_Port, Motor1Dir2_Pin);
 80011dc:	f107 0008 	add.w	r0, r7, #8
 80011e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <_Z14StartMotor1PWMPv+0x4c>)
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <_Z14StartMotor1PWMPv+0x50>)
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	490a      	ldr	r1, [pc, #40]	; (8001220 <_Z14StartMotor1PWMPv+0x4c>)
 80011f6:	f7ff f98f 	bl	8000518 <_ZN17DCMotorControllerC1EP12GPIO_TypeDeftS1_tS1_t>
		m1.setDirection(DCMotorController::Clockwise);
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fa1c 	bl	800063e <_ZN17DCMotorController12setDirectionENS_14MotorDirectionE>
		m1.setPower(.5);
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9ad 	bl	800056e <_ZN17DCMotorController8setPowerEf>
	  /* Infinite loop */
	  for(;;)
	  {
		  m1.pwmPulse();
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f9d1 	bl	80005c0 <_ZN17DCMotorController8pwmPulseEv>
 800121e:	e7f9      	b.n	8001214 <_Z14StartMotor1PWMPv+0x40>
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800

08001228 <_Z14StartMotor2PWMPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor2PWM */
void StartMotor2PWM(void *argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor2PWM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f00a fb4d 	bl	800b8d0 <osDelay>
 8001236:	e7fb      	b.n	8001230 <_Z14StartMotor2PWMPv+0x8>

08001238 <_Z14StartMotor3PWMPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor3PWM */
void StartMotor3PWM(void *argument)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor3PWM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f00a fb45 	bl	800b8d0 <osDelay>
 8001246:	e7fb      	b.n	8001240 <_Z14StartMotor3PWMPv+0x8>

08001248 <_Z18RunMotor1PIDUpdatePv>:
  /* USER CODE END StartMotor3PWM */
}

/* RunMotor1PIDUpdate function */
void RunMotor1PIDUpdate(void *argument)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunMotor1PIDUpdate */

  /* USER CODE END RunMotor1PIDUpdate */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_Z18RunMotor2PIDUpdatePv>:

/* RunMotor2PIDUpdate function */
void RunMotor2PIDUpdate(void *argument)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunMotor2PIDUpdate */

  /* USER CODE END RunMotor2PIDUpdate */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_Z18RunMotor3PIDUpdatePv>:

/* RunMotor3PIDUpdate function */
void RunMotor3PIDUpdate(void *argument)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunMotor3PIDUpdate */

  /* USER CODE END RunMotor3PIDUpdate */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_Z16RunDriveTrainPIDPv>:

/* RunDriveTrainPID function */
void RunDriveTrainPID(void *argument)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RunDriveTrainPID */

  /* USER CODE END RunDriveTrainPID */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012aa:	f000 fe09 	bl	8001ec0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40001000 	.word	0x40001000

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>
	...

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_MspInit+0x54>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_MspInit+0x54>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_MspInit+0x54>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_MspInit+0x54>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_MspInit+0x54>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_MspInit+0x54>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	210f      	movs	r1, #15
 800130a:	f06f 0001 	mvn.w	r0, #1
 800130e:	f001 f945 	bl	800259c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a31      	ldr	r2, [pc, #196]	; (8001404 <HAL_ADC_MspInit+0xe4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d15b      	bne.n	80013fa <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a28      	ldr	r2, [pc, #160]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a21      	ldr	r2, [pc, #132]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_ADC_MspInit+0xe8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80013b2:	2311      	movs	r3, #17
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <HAL_ADC_MspInit+0xec>)
 80013c6:	f001 fb41 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80013ca:	2326      	movs	r3, #38	; 0x26
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <HAL_ADC_MspInit+0xf0>)
 80013de:	f001 fb35 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <HAL_ADC_MspInit+0xf4>)
 80013f6:	f001 fb29 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012000 	.word	0x40012000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020800 	.word	0x40020800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400

08001418 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a77      	ldr	r2, [pc, #476]	; (8001614 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00e      	beq.n	8001458 <HAL_DFSDM_ChannelMspInit+0x40>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a76      	ldr	r2, [pc, #472]	; (8001618 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d009      	beq.n	8001458 <HAL_DFSDM_ChannelMspInit+0x40>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a74      	ldr	r2, [pc, #464]	; (800161c <HAL_DFSDM_ChannelMspInit+0x204>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d004      	beq.n	8001458 <HAL_DFSDM_ChannelMspInit+0x40>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a73      	ldr	r2, [pc, #460]	; (8001620 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d154      	bne.n	8001502 <HAL_DFSDM_ChannelMspInit+0xea>
 8001458:	4b72      	ldr	r3, [pc, #456]	; (8001624 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d150      	bne.n	8001502 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
 8001464:	4b70      	ldr	r3, [pc, #448]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	4a6f      	ldr	r2, [pc, #444]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 800146a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146e:	6453      	str	r3, [r2, #68]	; 0x44
 8001470:	4b6d      	ldr	r3, [pc, #436]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001478:	623b      	str	r3, [r7, #32]
 800147a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	4b69      	ldr	r3, [pc, #420]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a68      	ldr	r2, [pc, #416]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
 800148c:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	4b62      	ldr	r3, [pc, #392]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a61      	ldr	r2, [pc, #388]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80014b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014c6:	2306      	movs	r3, #6
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	4856      	ldr	r0, [pc, #344]	; (800162c <HAL_DFSDM_ChannelMspInit+0x214>)
 80014d2:	f001 fabb 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80014d6:	2340      	movs	r3, #64	; 0x40
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014e6:	2306      	movs	r3, #6
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	484f      	ldr	r0, [pc, #316]	; (8001630 <HAL_DFSDM_ChannelMspInit+0x218>)
 80014f2:	f001 faab 	bl	8002a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014f6:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a49      	ldr	r2, [pc, #292]	; (8001624 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80014fe:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001500:	e084      	b.n	800160c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a43      	ldr	r2, [pc, #268]	; (8001614 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d07f      	beq.n	800160c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a41      	ldr	r2, [pc, #260]	; (8001618 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d07a      	beq.n	800160c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a40      	ldr	r2, [pc, #256]	; (800161c <HAL_DFSDM_ChannelMspInit+0x204>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d075      	beq.n	800160c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a3e      	ldr	r2, [pc, #248]	; (8001620 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d070      	beq.n	800160c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800152a:	4b42      	ldr	r3, [pc, #264]	; (8001634 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d16c      	bne.n	800160c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 800153c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b35      	ldr	r3, [pc, #212]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a26      	ldr	r2, [pc, #152]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80015b2:	2307      	movs	r3, #7
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	481b      	ldr	r0, [pc, #108]	; (800162c <HAL_DFSDM_ChannelMspInit+0x214>)
 80015be:	f001 fa45 	bl	8002a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80015c2:	2304      	movs	r3, #4
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80015d2:	2303      	movs	r3, #3
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4814      	ldr	r0, [pc, #80]	; (8001630 <HAL_DFSDM_ChannelMspInit+0x218>)
 80015de:	f001 fa35 	bl	8002a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80015f2:	2306      	movs	r3, #6
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <HAL_DFSDM_ChannelMspInit+0x220>)
 80015fe:	f001 fa25 	bl	8002a4c <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	3738      	adds	r7, #56	; 0x38
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40016000 	.word	0x40016000
 8001618:	40016020 	.word	0x40016020
 800161c:	40016040 	.word	0x40016040
 8001620:	40016060 	.word	0x40016060
 8001624:	20000450 	.word	0x20000450
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020c00 	.word	0x40020c00
 8001634:	20000454 	.word	0x20000454
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_FMPI2C_MspInit+0x84>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12b      	bne.n	80016b6 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_FMPI2C_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_FMPI2C_MspInit+0x88>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_FMPI2C_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800167a:	23c0      	movs	r3, #192	; 0xc0
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167e:	2312      	movs	r3, #18
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001682:	2301      	movs	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800168a:	2304      	movs	r3, #4
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <HAL_FMPI2C_MspInit+0x8c>)
 8001696:	f001 f9d9 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_FMPI2C_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_FMPI2C_MspInit+0x88>)
 80016a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_FMPI2C_MspInit+0x88>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40006000 	.word	0x40006000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020800 	.word	0x40020800

080016cc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a4f      	ldr	r2, [pc, #316]	; (8001828 <HAL_I2S_MspInit+0x15c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	f040 8097 	bne.w	800181e <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	4b4d      	ldr	r3, [pc, #308]	; (800182c <HAL_I2S_MspInit+0x160>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_I2S_MspInit+0x160>)
 80016fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_I2S_MspInit+0x160>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_I2S_MspInit+0x160>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a45      	ldr	r2, [pc, #276]	; (800182c <HAL_I2S_MspInit+0x160>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_I2S_MspInit+0x160>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_I2S_MspInit+0x160>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a3e      	ldr	r2, [pc, #248]	; (800182c <HAL_I2S_MspInit+0x160>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <HAL_I2S_MspInit+0x160>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_I2S_MspInit+0x160>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4a37      	ldr	r2, [pc, #220]	; (800182c <HAL_I2S_MspInit+0x160>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6313      	str	r3, [r2, #48]	; 0x30
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_I2S_MspInit+0x160>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_I2S_MspInit+0x160>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4a30      	ldr	r2, [pc, #192]	; (800182c <HAL_I2S_MspInit+0x160>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	6313      	str	r3, [r2, #48]	; 0x30
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_I2S_MspInit+0x160>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 800177c:	2304      	movs	r3, #4
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800178c:	2306      	movs	r3, #6
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4826      	ldr	r0, [pc, #152]	; (8001830 <HAL_I2S_MspInit+0x164>)
 8001798:	f001 f958 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 800179c:	2308      	movs	r3, #8
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ac:	2305      	movs	r3, #5
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	481e      	ldr	r0, [pc, #120]	; (8001830 <HAL_I2S_MspInit+0x164>)
 80017b8:	f001 f948 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 80017bc:	2308      	movs	r3, #8
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017cc:	2305      	movs	r3, #5
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4817      	ldr	r0, [pc, #92]	; (8001834 <HAL_I2S_MspInit+0x168>)
 80017d8:	f001 f938 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80017dc:	2308      	movs	r3, #8
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ec:	2305      	movs	r3, #5
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4810      	ldr	r0, [pc, #64]	; (8001838 <HAL_I2S_MspInit+0x16c>)
 80017f8:	f001 f928 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80017fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180e:	2305      	movs	r3, #5
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4808      	ldr	r0, [pc, #32]	; (800183c <HAL_I2S_MspInit+0x170>)
 800181a:	f001 f917 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40003800 	.word	0x40003800
 800182c:	40023800 	.word	0x40023800
 8001830:	40020800 	.word	0x40020800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40020400 	.word	0x40020400

08001840 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	; 0x38
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <HAL_QSPI_MspInit+0x178>)
 800185e:	4293      	cmp	r3, r2
 8001860:	f040 80a6 	bne.w	80019b0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
 8001868:	4b54      	ldr	r3, [pc, #336]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	4a53      	ldr	r2, [pc, #332]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	6393      	str	r3, [r2, #56]	; 0x38
 8001874:	4b51      	ldr	r3, [pc, #324]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	4b46      	ldr	r3, [pc, #280]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	4a45      	ldr	r2, [pc, #276]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018a6:	f043 0320 	orr.w	r3, r3, #32
 80018aa:	6313      	str	r3, [r2, #48]	; 0x30
 80018ac:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	4a3e      	ldr	r2, [pc, #248]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a37      	ldr	r2, [pc, #220]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a30      	ldr	r2, [pc, #192]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 80018fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <HAL_QSPI_MspInit+0x17c>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 800190c:	2304      	movs	r3, #4
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800191c:	2309      	movs	r3, #9
 800191e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	4826      	ldr	r0, [pc, #152]	; (80019c0 <HAL_QSPI_MspInit+0x180>)
 8001928:	f001 f890 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800192c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800193e:	230a      	movs	r3, #10
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	481e      	ldr	r0, [pc, #120]	; (80019c4 <HAL_QSPI_MspInit+0x184>)
 800194a:	f001 f87f 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800194e:	2304      	movs	r3, #4
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800195e:	2309      	movs	r3, #9
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	4817      	ldr	r0, [pc, #92]	; (80019c8 <HAL_QSPI_MspInit+0x188>)
 800196a:	f001 f86f 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800196e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001980:	2309      	movs	r3, #9
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4810      	ldr	r0, [pc, #64]	; (80019cc <HAL_QSPI_MspInit+0x18c>)
 800198c:	f001 f85e 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001990:	2340      	movs	r3, #64	; 0x40
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019a0:	230a      	movs	r3, #10
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	4809      	ldr	r0, [pc, #36]	; (80019d0 <HAL_QSPI_MspInit+0x190>)
 80019ac:	f001 f84e 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80019b0:	bf00      	nop
 80019b2:	3738      	adds	r7, #56	; 0x38
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	a0001000 	.word	0xa0001000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40021400 	.word	0x40021400
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40021800 	.word	0x40021800

080019d4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <HAL_SD_MspInit+0xc0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d14a      	bne.n	8001a8c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 8001a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_SD_MspInit+0xc4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <HAL_SD_MspInit+0xc8>)
 8001a66:	f000 fff1 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001a6a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a6e:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <HAL_SD_MspInit+0xcc>)
 8001a88:	f000 ffe0 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40012c00 	.word	0x40012c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020800 	.word	0x40020800

08001aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <HAL_UART_MspInit+0xec>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12d      	bne.n	8001b22 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a31      	ldr	r2, [pc, #196]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001afe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001b10:	230b      	movs	r3, #11
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481f      	ldr	r0, [pc, #124]	; (8001b98 <HAL_UART_MspInit+0xf4>)
 8001b1c:	f000 ff96 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b20:	e031      	b.n	8001b86 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_UART_MspInit+0xf8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d12c      	bne.n	8001b86 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001b36:	f043 0320 	orr.w	r3, r3, #32
 8001b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_UART_MspInit+0xf0>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001b64:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b76:	2308      	movs	r3, #8
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_UART_MspInit+0xf4>)
 8001b82:	f000 ff63 	bl	8002a4c <HAL_GPIO_Init>
}
 8001b86:	bf00      	nop
 8001b88:	3730      	adds	r7, #48	; 0x30
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40011c00 	.word	0x40011c00
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40011400 	.word	0x40011400

08001ba0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_FSMC_MspInit+0xc8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d151      	bne.n	8001c60 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_FSMC_MspInit+0xc8>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <HAL_FSMC_MspInit+0xcc>)
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	4a28      	ldr	r2, [pc, #160]	; (8001c6c <HAL_FSMC_MspInit+0xcc>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6393      	str	r3, [r2, #56]	; 0x38
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_FSMC_MspInit+0xcc>)
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001bde:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001be2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481d      	ldr	r0, [pc, #116]	; (8001c70 <HAL_FSMC_MspInit+0xd0>)
 8001bfa:	f000 ff27 	bl	8002a4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001bfe:	f240 433f 	movw	r3, #1087	; 0x43f
 8001c02:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c10:	230c      	movs	r3, #12
 8001c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4816      	ldr	r0, [pc, #88]	; (8001c74 <HAL_FSMC_MspInit+0xd4>)
 8001c1a:	f000 ff17 	bl	8002a4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001c1e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c22:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c30:	230c      	movs	r3, #12
 8001c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	480f      	ldr	r0, [pc, #60]	; (8001c78 <HAL_FSMC_MspInit+0xd8>)
 8001c3a:	f000 ff07 	bl	8002a4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001c3e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001c42:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c50:	230c      	movs	r3, #12
 8001c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4808      	ldr	r0, [pc, #32]	; (8001c7c <HAL_FSMC_MspInit+0xdc>)
 8001c5a:	f000 fef7 	bl	8002a4c <HAL_GPIO_Init>
 8001c5e:	e000      	b.n	8001c62 <HAL_FSMC_MspInit+0xc2>
    return;
 8001c60:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000458 	.word	0x20000458
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40021800 	.word	0x40021800
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40020c00 	.word	0x40020c00

08001c80 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001c88:	f7ff ff8a 	bl	8001ba0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	2036      	movs	r0, #54	; 0x36
 8001caa:	f000 fc77 	bl	800259c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cae:	2036      	movs	r0, #54	; 0x36
 8001cb0:	f000 fc90 	bl	80025d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_InitTick+0xa0>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	4a1d      	ldr	r2, [pc, #116]	; (8001d34 <HAL_InitTick+0xa0>)
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_InitTick+0xa0>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd0:	f107 0210 	add.w	r2, r7, #16
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fd1c 	bl	8005718 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ce0:	f003 fcf2 	bl	80056c8 <HAL_RCC_GetPCLK1Freq>
 8001ce4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce8:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_InitTick+0xa4>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_InitTick+0xa8>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_InitTick+0xac>)
 8001cf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_InitTick+0xa8>)
 8001cfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_InitTick+0xa8>)
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_InitTick+0xa8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_InitTick+0xa8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d14:	4809      	ldr	r0, [pc, #36]	; (8001d3c <HAL_InitTick+0xa8>)
 8001d16:	f005 f998 	bl	800704a <HAL_TIM_Base_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d104      	bne.n	8001d2a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d20:	4806      	ldr	r0, [pc, #24]	; (8001d3c <HAL_InitTick+0xa8>)
 8001d22:	f005 f9eb 	bl	80070fc <HAL_TIM_Base_Start_IT>
 8001d26:	4603      	mov	r3, r0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	431bde83 	.word	0x431bde83
 8001d3c:	20004db4 	.word	0x20004db4
 8001d40:	40001000 	.word	0x40001000

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <NMI_Handler+0x4>

08001d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <MemManage_Handler+0x4>

08001d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <TIM6_DAC_IRQHandler+0x10>)
 8001d76:	f005 fa31 	bl	80071dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20004db4 	.word	0x20004db4

08001d84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <OTG_FS_IRQHandler+0x10>)
 8001d8a:	f001 fa77 	bl	800327c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20005248 	.word	0x20005248

08001d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da0:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <_sbrk+0x5c>)
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <_sbrk+0x60>)
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <_sbrk+0x64>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <_sbrk+0x68>)
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d207      	bcs.n	8001dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc8:	f00d f8c2 	bl	800ef50 <__errno>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	220c      	movs	r2, #12
 8001dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e009      	b.n	8001dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <_sbrk+0x64>)
 8001de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20050000 	.word	0x20050000
 8001df8:	00000400 	.word	0x00000400
 8001dfc:	2000045c 	.word	0x2000045c
 8001e00:	20005560 	.word	0x20005560

08001e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <SystemInit+0x20>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <SystemInit+0x20>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e2e:	490e      	ldr	r1, [pc, #56]	; (8001e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e44:	4c0b      	ldr	r4, [pc, #44]	; (8001e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e52:	f7ff ffd7 	bl	8001e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e56:	f00d f881 	bl	800ef5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5a:	f7fe fc21 	bl	80006a0 <main>
  bx  lr    
 8001e5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001e6c:	0800f344 	.word	0x0800f344
  ldr r2, =_sbss
 8001e70:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001e74:	2000555c 	.word	0x2000555c

08001e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC_IRQHandler>
	...

08001e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <HAL_Init+0x40>)
 8001e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_Init+0x40>)
 8001e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_Init+0x40>)
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 fb6e 	bl	8002586 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff fef2 	bl	8001c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb0:	f7ff fa0a 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x20>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20004dfc 	.word	0x20004dfc

08001ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return uwTick;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_GetTick+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20004dfc 	.word	0x20004dfc

08001f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff ffee 	bl	8001ee8 <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000008 	.word	0x20000008

08001f48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e033      	b.n	8001fc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff f9da 	bl	8001320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d118      	bne.n	8001fb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f8e:	f023 0302 	bic.w	r3, r3, #2
 8001f92:	f043 0202 	orr.w	r2, r3, #2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f94a 	bl	8002234 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f023 0303 	bic.w	r3, r3, #3
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb6:	e001      	b.n	8001fbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e113      	b.n	8002214 <HAL_ADC_ConfigChannel+0x244>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	d925      	bls.n	8002048 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68d9      	ldr	r1, [r3, #12]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	3b1e      	subs	r3, #30
 8002012:	2207      	movs	r2, #7
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43da      	mvns	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	400a      	ands	r2, r1
 8002020:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68d9      	ldr	r1, [r3, #12]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	4603      	mov	r3, r0
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4403      	add	r3, r0
 800203a:	3b1e      	subs	r3, #30
 800203c:	409a      	lsls	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	e022      	b.n	800208e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6919      	ldr	r1, [r3, #16]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	2207      	movs	r2, #7
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	400a      	ands	r2, r1
 800206a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6919      	ldr	r1, [r3, #16]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	4603      	mov	r3, r0
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4403      	add	r3, r0
 8002084:	409a      	lsls	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d824      	bhi.n	80020e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b05      	subs	r3, #5
 80020a8:	221f      	movs	r2, #31
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3b05      	subs	r3, #5
 80020d2:	fa00 f203 	lsl.w	r2, r0, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
 80020de:	e04c      	b.n	800217a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d824      	bhi.n	8002132 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b23      	subs	r3, #35	; 0x23
 80020fa:	221f      	movs	r2, #31
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43da      	mvns	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	400a      	ands	r2, r1
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4618      	mov	r0, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	3b23      	subs	r3, #35	; 0x23
 8002124:	fa00 f203 	lsl.w	r2, r0, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
 8002130:	e023      	b.n	800217a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	3b41      	subs	r3, #65	; 0x41
 8002144:	221f      	movs	r2, #31
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	400a      	ands	r2, r1
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	4618      	mov	r0, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b41      	subs	r3, #65	; 0x41
 800216e:	fa00 f203 	lsl.w	r2, r0, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_ADC_ConfigChannel+0x250>)
 800217c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_ADC_ConfigChannel+0x254>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d10f      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b12      	cmp	r3, #18
 800218e:	d10b      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_ADC_ConfigChannel+0x254>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d12b      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_ADC_ConfigChannel+0x258>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x1f4>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b11      	cmp	r3, #17
 80021c2:	d122      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_ADC_ConfigChannel+0x258>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d111      	bne.n	800220a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x25c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a11      	ldr	r2, [pc, #68]	; (8002230 <HAL_ADC_ConfigChannel+0x260>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	0c9a      	lsrs	r2, r3, #18
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021fc:	e002      	b.n	8002204 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3b01      	subs	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40012300 	.word	0x40012300
 8002224:	40012000 	.word	0x40012000
 8002228:	10000012 	.word	0x10000012
 800222c:	20000000 	.word	0x20000000
 8002230:	431bde83 	.word	0x431bde83

08002234 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223c:	4b79      	ldr	r3, [pc, #484]	; (8002424 <ADC_Init+0x1f0>)
 800223e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800228c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	4a58      	ldr	r2, [pc, #352]	; (8002428 <ADC_Init+0x1f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e00f      	b.n	8002332 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002330:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0202 	bic.w	r2, r2, #2
 8002340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e1b      	ldrb	r3, [r3, #24]
 800234c:	005a      	lsls	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800237e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	3b01      	subs	r3, #1
 800238c:	035a      	lsls	r2, r3, #13
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	e007      	b.n	80023a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	051a      	lsls	r2, r3, #20
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ea:	025a      	lsls	r2, r3, #9
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	029a      	lsls	r2, r3, #10
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40012300 	.word	0x40012300
 8002428:	0f000001 	.word	0x0f000001

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff4c 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ae:	f7ff ff61 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	6978      	ldr	r0, [r7, #20]
 80025ba:	f7ff ffb1 	bl	8002520 <NVIC_EncodePriority>
 80025be:	4602      	mov	r2, r0
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff80 	bl	80024cc <__NVIC_SetPriority>
}
 80025cc:	bf00      	nop
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff54 	bl	8002490 <__NVIC_EnableIRQ>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0cf      	b.n	80027a2 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a69      	ldr	r2, [pc, #420]	; (80027ac <HAL_DFSDM_ChannelInit+0x1bc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_DFSDM_ChannelInit+0x3a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a67      	ldr	r2, [pc, #412]	; (80027b0 <HAL_DFSDM_ChannelInit+0x1c0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_DFSDM_ChannelInit+0x3a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a66      	ldr	r2, [pc, #408]	; (80027b4 <HAL_DFSDM_ChannelInit+0x1c4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_DFSDM_ChannelInit+0x3a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a64      	ldr	r2, [pc, #400]	; (80027b8 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d106      	bne.n	8002638 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800262a:	4b64      	ldr	r3, [pc, #400]	; (80027bc <HAL_DFSDM_ChannelInit+0x1cc>)
 800262c:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002630:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002632:	4b5e      	ldr	r3, [pc, #376]	; (80027ac <HAL_DFSDM_ChannelInit+0x1bc>)
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e005      	b.n	8002644 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002638:	4b62      	ldr	r3, [pc, #392]	; (80027c4 <HAL_DFSDM_ChannelInit+0x1d4>)
 800263a:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 800263c:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <HAL_DFSDM_ChannelInit+0x1d8>)
 800263e:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002640:	4b62      	ldr	r3, [pc, #392]	; (80027cc <HAL_DFSDM_ChannelInit+0x1dc>)
 8002642:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f8c1 	bl	80027d0 <DFSDM_GetChannelFromInstance>
 800264e:	4603      	mov	r3, r0
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0a0      	b.n	80027a2 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fed9 	bl	8001418 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d125      	bne.n	80026c4 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	431a      	orrs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d108      	bne.n	80026b8 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80026d2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80026e2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80026e8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 020f 	bic.w	r2, r2, #15
 8002700:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002728:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	3b01      	subs	r3, #1
 800273a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f002 0207 	and.w	r2, r2, #7
 8002754:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002780:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f81e 	bl	80027d0 <DFSDM_GetChannelFromInstance>
 8002794:	4603      	mov	r3, r0
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40016000 	.word	0x40016000
 80027b0:	40016020 	.word	0x40016020
 80027b4:	40016040 	.word	0x40016040
 80027b8:	40016060 	.word	0x40016060
 80027bc:	20000460 	.word	0x20000460
 80027c0:	20000464 	.word	0x20000464
 80027c4:	20000474 	.word	0x20000474
 80027c8:	20000478 	.word	0x20000478
 80027cc:	40016400 	.word	0x40016400

080027d0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a24      	ldr	r2, [pc, #144]	; (800286c <DFSDM_GetChannelFromInstance+0x9c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <DFSDM_GetChannelFromInstance+0x18>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a23      	ldr	r2, [pc, #140]	; (8002870 <DFSDM_GetChannelFromInstance+0xa0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d102      	bne.n	80027ee <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e037      	b.n	800285e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <DFSDM_GetChannelFromInstance+0xa4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <DFSDM_GetChannelFromInstance+0x2e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <DFSDM_GetChannelFromInstance+0xa8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d102      	bne.n	8002804 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80027fe:	2301      	movs	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e02c      	b.n	800285e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <DFSDM_GetChannelFromInstance+0xac>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d003      	beq.n	8002814 <DFSDM_GetChannelFromInstance+0x44>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <DFSDM_GetChannelFromInstance+0xb0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8002814:	2302      	movs	r3, #2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e021      	b.n	800285e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a19      	ldr	r2, [pc, #100]	; (8002884 <DFSDM_GetChannelFromInstance+0xb4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <DFSDM_GetChannelFromInstance+0x5a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a18      	ldr	r2, [pc, #96]	; (8002888 <DFSDM_GetChannelFromInstance+0xb8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d102      	bne.n	8002830 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800282a:	2303      	movs	r3, #3
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e016      	b.n	800285e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a16      	ldr	r2, [pc, #88]	; (800288c <DFSDM_GetChannelFromInstance+0xbc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d102      	bne.n	800283e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002838:	2304      	movs	r3, #4
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e00f      	b.n	800285e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <DFSDM_GetChannelFromInstance+0xc0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d102      	bne.n	800284c <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8002846:	2305      	movs	r3, #5
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e008      	b.n	800285e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <DFSDM_GetChannelFromInstance+0xc4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d102      	bne.n	800285a <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8002854:	2306      	movs	r3, #6
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e001      	b.n	800285e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800285a:	2307      	movs	r3, #7
 800285c:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40016000 	.word	0x40016000
 8002870:	40016400 	.word	0x40016400
 8002874:	40016020 	.word	0x40016020
 8002878:	40016420 	.word	0x40016420
 800287c:	40016040 	.word	0x40016040
 8002880:	40016440 	.word	0x40016440
 8002884:	40016060 	.word	0x40016060
 8002888:	40016460 	.word	0x40016460
 800288c:	40016480 	.word	0x40016480
 8002890:	400164a0 	.word	0x400164a0
 8002894:	400164c0 	.word	0x400164c0

08002898 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e081      	b.n	80029ae <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe febc 	bl	800163c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f8:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	e006      	b.n	8002920 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800291e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d104      	bne.n	8002932 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002944:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002954:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	ea42 0103 	orr.w	r1, r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	021a      	lsls	r2, r3, #8
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69d9      	ldr	r1, [r3, #28]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d138      	bne.n	8002a3e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e032      	b.n	8002a40 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2224      	movs	r2, #36	; 0x24
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a08:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
  }
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e165      	b.n	8002d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a68:	2201      	movs	r2, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 8154 	bne.w	8002d2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d005      	beq.n	8002a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d130      	bne.n	8002b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 0201 	and.w	r2, r3, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d017      	beq.n	8002b3c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d123      	bne.n	8002b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	08da      	lsrs	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	69b9      	ldr	r1, [r7, #24]
 8002b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80ae 	beq.w	8002d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	4b5d      	ldr	r3, [pc, #372]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a5c      	ldr	r2, [pc, #368]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b5a      	ldr	r3, [pc, #360]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bee:	4a58      	ldr	r2, [pc, #352]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4f      	ldr	r2, [pc, #316]	; (8002d54 <HAL_GPIO_Init+0x308>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d025      	beq.n	8002c66 <HAL_GPIO_Init+0x21a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4e      	ldr	r2, [pc, #312]	; (8002d58 <HAL_GPIO_Init+0x30c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_GPIO_Init+0x216>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4d      	ldr	r2, [pc, #308]	; (8002d5c <HAL_GPIO_Init+0x310>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x212>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4c      	ldr	r2, [pc, #304]	; (8002d60 <HAL_GPIO_Init+0x314>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x20e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_GPIO_Init+0x318>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x20a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <HAL_GPIO_Init+0x31c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x206>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a49      	ldr	r2, [pc, #292]	; (8002d6c <HAL_GPIO_Init+0x320>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x202>
 8002c4a:	2306      	movs	r3, #6
 8002c4c:	e00c      	b.n	8002c68 <HAL_GPIO_Init+0x21c>
 8002c4e:	2307      	movs	r3, #7
 8002c50:	e00a      	b.n	8002c68 <HAL_GPIO_Init+0x21c>
 8002c52:	2305      	movs	r3, #5
 8002c54:	e008      	b.n	8002c68 <HAL_GPIO_Init+0x21c>
 8002c56:	2304      	movs	r3, #4
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x21c>
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e004      	b.n	8002c68 <HAL_GPIO_Init+0x21c>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_Init+0x21c>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_GPIO_Init+0x21c>
 8002c66:	2300      	movs	r3, #0
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	f002 0203 	and.w	r2, r2, #3
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	4093      	lsls	r3, r2
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c78:	4935      	ldr	r1, [pc, #212]	; (8002d50 <HAL_GPIO_Init+0x304>)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c86:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002caa:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd4:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cda:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d28:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <HAL_GPIO_Init+0x324>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3301      	adds	r3, #1
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b0f      	cmp	r3, #15
 8002d38:	f67f ae96 	bls.w	8002a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40020000 	.word	0x40020000
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	40020800 	.word	0x40020800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40021400 	.word	0x40021400
 8002d6c:	40021800 	.word	0x40021800
 8002d70:	40013c00 	.word	0x40013c00

08002d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d84:	787b      	ldrb	r3, [r7, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d90:	e003      	b.n	8002d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d92:	887b      	ldrh	r3, [r7, #2]
 8002d94:	041a      	lsls	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	619a      	str	r2, [r3, #24]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da8:	b08f      	sub	sp, #60	; 0x3c
 8002daa:	af0a      	add	r7, sp, #40	; 0x28
 8002dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e054      	b.n	8002e62 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f00b fe0e 	bl	800e9f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2203      	movs	r2, #3
 8002ddc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f005 fc08 	bl	800860c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	687e      	ldr	r6, [r7, #4]
 8002e04:	466d      	mov	r5, sp
 8002e06:	f106 0410 	add.w	r4, r6, #16
 8002e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e1a:	1d33      	adds	r3, r6, #4
 8002e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e1e:	6838      	ldr	r0, [r7, #0]
 8002e20:	f005 fb82 	bl	8008528 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f005 fbff 	bl	800862e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	687e      	ldr	r6, [r7, #4]
 8002e38:	466d      	mov	r5, sp
 8002e3a:	f106 0410 	add.w	r4, r6, #16
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e4e:	1d33      	adds	r3, r6, #4
 8002e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f005 fd12 	bl	800887c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e6a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002e6a:	b590      	push	{r4, r7, lr}
 8002e6c:	b089      	sub	sp, #36	; 0x24
 8002e6e:	af04      	add	r7, sp, #16
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	4608      	mov	r0, r1
 8002e74:	4611      	mov	r1, r2
 8002e76:	461a      	mov	r2, r3
 8002e78:	4603      	mov	r3, r0
 8002e7a:	70fb      	strb	r3, [r7, #3]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70bb      	strb	r3, [r7, #2]
 8002e80:	4613      	mov	r3, r2
 8002e82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_HCD_HC_Init+0x28>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e076      	b.n	8002f80 <HAL_HCD_HC_Init+0x116>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	333d      	adds	r3, #61	; 0x3d
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3338      	adds	r3, #56	; 0x38
 8002eba:	787a      	ldrb	r2, [r7, #1]
 8002ebc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3340      	adds	r3, #64	; 0x40
 8002ecc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ece:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3339      	adds	r3, #57	; 0x39
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	333f      	adds	r3, #63	; 0x3f
 8002ef0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ef4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	78ba      	ldrb	r2, [r7, #2]
 8002efa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002efe:	b2d0      	uxtb	r0, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	333a      	adds	r3, #58	; 0x3a
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	da09      	bge.n	8002f2c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	333b      	adds	r3, #59	; 0x3b
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e008      	b.n	8002f3e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	333b      	adds	r3, #59	; 0x3b
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	333c      	adds	r3, #60	; 0x3c
 8002f4c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f50:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	787c      	ldrb	r4, [r7, #1]
 8002f58:	78ba      	ldrb	r2, [r7, #2]
 8002f5a:	78f9      	ldrb	r1, [r7, #3]
 8002f5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f5e:	9302      	str	r3, [sp, #8]
 8002f60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4623      	mov	r3, r4
 8002f6e:	f005 fe01 	bl	8008b74 <USB_HC_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd90      	pop	{r4, r7, pc}

08002f88 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_HCD_HC_Halt+0x1e>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e00f      	b.n	8002fc6 <HAL_HCD_HC_Halt+0x3e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f006 f83d 	bl	8009036 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	70fb      	strb	r3, [r7, #3]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	70bb      	strb	r3, [r7, #2]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	333b      	adds	r3, #59	; 0x3b
 8002ff8:	78ba      	ldrb	r2, [r7, #2]
 8002ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	333f      	adds	r3, #63	; 0x3f
 800300a:	787a      	ldrb	r2, [r7, #1]
 800300c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800300e:	7c3b      	ldrb	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d112      	bne.n	800303a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3342      	adds	r3, #66	; 0x42
 8003022:	2203      	movs	r2, #3
 8003024:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	333d      	adds	r3, #61	; 0x3d
 8003034:	7f3a      	ldrb	r2, [r7, #28]
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e008      	b.n	800304c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3342      	adds	r3, #66	; 0x42
 8003048:	2202      	movs	r2, #2
 800304a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800304c:	787b      	ldrb	r3, [r7, #1]
 800304e:	2b03      	cmp	r3, #3
 8003050:	f200 80c6 	bhi.w	80031e0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003054:	a201      	add	r2, pc, #4	; (adr r2, 800305c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305a:	bf00      	nop
 800305c:	0800306d 	.word	0x0800306d
 8003060:	080031cd 	.word	0x080031cd
 8003064:	080030d1 	.word	0x080030d1
 8003068:	0800314f 	.word	0x0800314f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800306c:	7c3b      	ldrb	r3, [r7, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	f040 80b8 	bne.w	80031e4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003074:	78bb      	ldrb	r3, [r7, #2]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 80b4 	bne.w	80031e4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800307c:	8b3b      	ldrh	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3355      	adds	r3, #85	; 0x55
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	3355      	adds	r3, #85	; 0x55
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3342      	adds	r3, #66	; 0x42
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030ba:	e093      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3342      	adds	r3, #66	; 0x42
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
      break;
 80030ce:	e089      	b.n	80031e4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80030d0:	78bb      	ldrb	r3, [r7, #2]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11d      	bne.n	8003112 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	3355      	adds	r3, #85	; 0x55
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3342      	adds	r3, #66	; 0x42
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80030fc:	e073      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	3342      	adds	r3, #66	; 0x42
 800310c:	2202      	movs	r2, #2
 800310e:	701a      	strb	r2, [r3, #0]
      break;
 8003110:	e069      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3354      	adds	r3, #84	; 0x54
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	3342      	adds	r3, #66	; 0x42
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
      break;
 8003138:	e055      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3342      	adds	r3, #66	; 0x42
 8003148:	2202      	movs	r2, #2
 800314a:	701a      	strb	r2, [r3, #0]
      break;
 800314c:	e04b      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800314e:	78bb      	ldrb	r3, [r7, #2]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11d      	bne.n	8003190 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3355      	adds	r3, #85	; 0x55
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3342      	adds	r3, #66	; 0x42
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800317a:	e034      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3342      	adds	r3, #66	; 0x42
 800318a:	2202      	movs	r2, #2
 800318c:	701a      	strb	r2, [r3, #0]
      break;
 800318e:	e02a      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	3354      	adds	r3, #84	; 0x54
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3342      	adds	r3, #66	; 0x42
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
      break;
 80031b6:	e016      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3342      	adds	r3, #66	; 0x42
 80031c6:	2202      	movs	r2, #2
 80031c8:	701a      	strb	r2, [r3, #0]
      break;
 80031ca:	e00c      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3342      	adds	r3, #66	; 0x42
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80031e0:	bf00      	nop
 80031e2:	e000      	b.n	80031e6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80031e4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3344      	adds	r3, #68	; 0x44
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	8b3a      	ldrh	r2, [r7, #24]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	202c      	movs	r0, #44	; 0x2c
 8003200:	fb00 f303 	mul.w	r3, r0, r3
 8003204:	440b      	add	r3, r1
 8003206:	334c      	adds	r3, #76	; 0x4c
 8003208:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3360      	adds	r3, #96	; 0x60
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3350      	adds	r3, #80	; 0x50
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	3339      	adds	r3, #57	; 0x39
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3361      	adds	r3, #97	; 0x61
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	222c      	movs	r2, #44	; 0x2c
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	3338      	adds	r3, #56	; 0x38
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	18d1      	adds	r1, r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	f005 fd90 	bl	8008d90 <USB_HC_StartXfer>
 8003270:	4603      	mov	r3, r0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop

0800327c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f005 faaf 	bl	80087f6 <USB_GetMode>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	f040 80ef 	bne.w	800347e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f005 fa93 	bl	80087d0 <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80e5 	beq.w	800347c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f005 fa8a 	bl	80087d0 <USB_ReadInterrupts>
 80032bc:	4603      	mov	r3, r0
 80032be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032c6:	d104      	bne.n	80032d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f005 fa7a 	bl	80087d0 <USB_ReadInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e6:	d104      	bne.n	80032f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f005 fa6a 	bl	80087d0 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003306:	d104      	bne.n	8003312 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003310:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f005 fa5a 	bl	80087d0 <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d103      	bne.n	800332e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2202      	movs	r2, #2
 800332c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f005 fa4c 	bl	80087d0 <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003342:	d115      	bne.n	8003370 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800334c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f00b fbc6 	bl	800eaf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f005 fb3c 	bl	80089e8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f005 fa2b 	bl	80087d0 <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d102      	bne.n	800338c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f001 f9ff 	bl	800478a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f005 fa1d 	bl	80087d0 <USB_ReadInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d106      	bne.n	80033ae <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f00b fb89 	bl	800eab8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2208      	movs	r2, #8
 80033ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f005 fa0c 	bl	80087d0 <USB_ReadInterrupts>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d101      	bne.n	80033c6 <HAL_HCD_IRQHandler+0x14a>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_HCD_IRQHandler+0x14c>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d012      	beq.n	80033f2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0210 	bic.w	r2, r2, #16
 80033da:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f001 f902 	bl	80045e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699a      	ldr	r2, [r3, #24]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0210 	orr.w	r2, r2, #16
 80033f0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f005 f9ea 	bl	80087d0 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003406:	d13a      	bne.n	800347e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f005 fe01 	bl	8009014 <USB_HC_ReadInterrupt>
 8003412:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e025      	b.n	8003466 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d106      	bne.n	8003454 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8ab 	bl	80035a8 <HCD_HC_IN_IRQHandler>
 8003452:	e005      	b.n	8003460 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	4619      	mov	r1, r3
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fcc6 	bl	8003dec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	429a      	cmp	r2, r3
 800346e:	d3d4      	bcc.n	800341a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003478:	615a      	str	r2, [r3, #20]
 800347a:	e000      	b.n	800347e <HAL_HCD_IRQHandler+0x202>
      return;
 800347c:	bf00      	nop
    }
  }
}
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_HCD_Start+0x16>
 8003496:	2302      	movs	r3, #2
 8003498:	e013      	b.n	80034c2 <HAL_HCD_Start+0x3e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f005 f89f 	bl	80085ea <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f005 fafc 	bl	8008ab0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_HCD_Stop+0x16>
 80034dc:	2302      	movs	r3, #2
 80034de:	e00d      	b.n	80034fc <HAL_HCD_Stop+0x32>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f005 fefb 	bl	80092e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f005 faa3 	bl	8008a5c <USB_ResetPort>
 8003516:	4603      	mov	r3, r0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3360      	adds	r3, #96	; 0x60
 800353a:	781b      	ldrb	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3350      	adds	r3, #80	; 0x50
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f005 fae7 	bl	8008b50 <USB_GetCurrentFrame>
 8003582:	4603      	mov	r3, r0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f005 fac2 	bl	8008b22 <USB_GetHostSpeed>
 800359e:	4603      	mov	r3, r0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d119      	bne.n	800360c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	2304      	movs	r3, #4
 80035e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	60d3      	str	r3, [r2, #12]
 800360a:	e101      	b.n	8003810 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003622:	d12b      	bne.n	800367c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	461a      	mov	r2, r3
 8003632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003636:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3361      	adds	r3, #97	; 0x61
 8003646:	2207      	movs	r2, #7
 8003648:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4413      	add	r3, r2
 8003652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	0151      	lsls	r1, r2, #5
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	440a      	add	r2, r1
 8003660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f005 fcde 	bl	8009036 <USB_HC_Halt>
 800367a:	e0c9      	b.n	8003810 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b20      	cmp	r3, #32
 8003690:	d109      	bne.n	80036a6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369e:	461a      	mov	r2, r3
 80036a0:	2320      	movs	r3, #32
 80036a2:	6093      	str	r3, [r2, #8]
 80036a4:	e0b4      	b.n	8003810 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d133      	bne.n	8003724 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	212c      	movs	r1, #44	; 0x2c
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	3361      	adds	r3, #97	; 0x61
 80036ea:	2205      	movs	r2, #5
 80036ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	461a      	mov	r2, r3
 80036fc:	2310      	movs	r3, #16
 80036fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	2308      	movs	r3, #8
 8003710:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f005 fc8a 	bl	8009036 <USB_HC_Halt>
 8003722:	e075      	b.n	8003810 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d134      	bne.n	80037a6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	0151      	lsls	r1, r2, #5
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	440a      	add	r2, r1
 8003752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3361      	adds	r3, #97	; 0x61
 800376a:	2208      	movs	r2, #8
 800376c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	461a      	mov	r2, r3
 800377c:	2310      	movs	r3, #16
 800377e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003792:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f005 fc49 	bl	8009036 <USB_HC_Halt>
 80037a4:	e034      	b.n	8003810 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d129      	bne.n	8003810 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	0151      	lsls	r1, r2, #5
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	440a      	add	r2, r1
 80037d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3361      	adds	r3, #97	; 0x61
 80037ea:	2206      	movs	r2, #6
 80037ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f005 fc1c 	bl	8009036 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	461a      	mov	r2, r3
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003826:	d122      	bne.n	800386e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	440a      	add	r2, r1
 800383e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f005 fbef 	bl	8009036 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	461a      	mov	r2, r3
 8003866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800386c:	e2ba      	b.n	8003de4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 811b 	bne.w	8003abc <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d019      	beq.n	80038c2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	3348      	adds	r3, #72	; 0x48
 800389c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	0159      	lsls	r1, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038b0:	1ad2      	subs	r2, r2, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	202c      	movs	r0, #44	; 0x2c
 80038b8:	fb00 f303 	mul.w	r3, r0, r3
 80038bc:	440b      	add	r3, r1
 80038be:	3350      	adds	r3, #80	; 0x50
 80038c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	3361      	adds	r3, #97	; 0x61
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	335c      	adds	r3, #92	; 0x5c
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	461a      	mov	r2, r3
 80038f4:	2301      	movs	r3, #1
 80038f6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	212c      	movs	r1, #44	; 0x2c
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	333f      	adds	r3, #63	; 0x3f
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	333f      	adds	r3, #63	; 0x3f
 800391a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800391c:	2b02      	cmp	r3, #2
 800391e:	d121      	bne.n	8003964 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	440a      	add	r2, r1
 8003936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800393a:	f043 0302 	orr.w	r3, r3, #2
 800393e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f005 fb73 	bl	8009036 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	461a      	mov	r2, r3
 800395e:	2310      	movs	r3, #16
 8003960:	6093      	str	r3, [r2, #8]
 8003962:	e066      	b.n	8003a32 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	212c      	movs	r1, #44	; 0x2c
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	333f      	adds	r3, #63	; 0x3f
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d127      	bne.n	80039c8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	440a      	add	r2, r1
 800398e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003992:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003996:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	212c      	movs	r1, #44	; 0x2c
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	3360      	adds	r3, #96	; 0x60
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	b2d9      	uxtb	r1, r3
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	202c      	movs	r0, #44	; 0x2c
 80039b4:	fb00 f303 	mul.w	r3, r0, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	3360      	adds	r3, #96	; 0x60
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f00b f8a3 	bl	800eb0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80039c6:	e034      	b.n	8003a32 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	333f      	adds	r3, #63	; 0x3f
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d12a      	bne.n	8003a32 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3360      	adds	r3, #96	; 0x60
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	3354      	adds	r3, #84	; 0x54
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	f083 0301 	eor.w	r3, r3, #1
 8003a02:	b2d8      	uxtb	r0, r3
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	3354      	adds	r3, #84	; 0x54
 8003a12:	4602      	mov	r2, r0
 8003a14:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	b2d9      	uxtb	r1, r3
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	202c      	movs	r0, #44	; 0x2c
 8003a20:	fb00 f303 	mul.w	r3, r0, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3360      	adds	r3, #96	; 0x60
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f00b f86d 	bl	800eb0c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d12b      	bne.n	8003a92 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	3348      	adds	r3, #72	; 0x48
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	202c      	movs	r0, #44	; 0x2c
 8003a50:	fb00 f202 	mul.w	r2, r0, r2
 8003a54:	440a      	add	r2, r1
 8003a56:	3240      	adds	r2, #64	; 0x40
 8003a58:	8812      	ldrh	r2, [r2, #0]
 8003a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 81be 	beq.w	8003de4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3354      	adds	r3, #84	; 0x54
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	f083 0301 	eor.w	r3, r3, #1
 8003a7c:	b2d8      	uxtb	r0, r3
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3354      	adds	r3, #84	; 0x54
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	701a      	strb	r2, [r3, #0]
}
 8003a90:	e1a8      	b.n	8003de4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3354      	adds	r3, #84	; 0x54
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	f083 0301 	eor.w	r3, r3, #1
 8003aa6:	b2d8      	uxtb	r0, r3
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3354      	adds	r3, #84	; 0x54
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	701a      	strb	r2, [r3, #0]
}
 8003aba:	e193      	b.n	8003de4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	f040 8106 	bne.w	8003ce0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	0151      	lsls	r1, r2, #5
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	440a      	add	r2, r1
 8003aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aee:	f023 0302 	bic.w	r3, r3, #2
 8003af2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	212c      	movs	r1, #44	; 0x2c
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3361      	adds	r3, #97	; 0x61
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d109      	bne.n	8003b1c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	212c      	movs	r1, #44	; 0x2c
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3360      	adds	r3, #96	; 0x60
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e0c9      	b.n	8003cb0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3361      	adds	r3, #97	; 0x61
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d109      	bne.n	8003b44 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3360      	adds	r3, #96	; 0x60
 8003b3e:	2205      	movs	r2, #5
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e0b5      	b.n	8003cb0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3361      	adds	r3, #97	; 0x61
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b06      	cmp	r3, #6
 8003b56:	d009      	beq.n	8003b6c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	212c      	movs	r1, #44	; 0x2c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3361      	adds	r3, #97	; 0x61
 8003b66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d150      	bne.n	8003c0e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	335c      	adds	r3, #92	; 0x5c
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	202c      	movs	r0, #44	; 0x2c
 8003b84:	fb00 f303 	mul.w	r3, r0, r3
 8003b88:	440b      	add	r3, r1
 8003b8a:	335c      	adds	r3, #92	; 0x5c
 8003b8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	335c      	adds	r3, #92	; 0x5c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d912      	bls.n	8003bc8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	212c      	movs	r1, #44	; 0x2c
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	335c      	adds	r3, #92	; 0x5c
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3360      	adds	r3, #96	; 0x60
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bc6:	e073      	b.n	8003cb0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3360      	adds	r3, #96	; 0x60
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bf0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bf8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c0c:	e050      	b.n	8003cb0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3361      	adds	r3, #97	; 0x61
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d122      	bne.n	8003c68 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3360      	adds	r3, #96	; 0x60
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c4a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c52:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e023      	b.n	8003cb0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3361      	adds	r3, #97	; 0x61
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	d119      	bne.n	8003cb0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	335c      	adds	r3, #92	; 0x5c
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	202c      	movs	r0, #44	; 0x2c
 8003c94:	fb00 f303 	mul.w	r3, r0, r3
 8003c98:	440b      	add	r3, r1
 8003c9a:	335c      	adds	r3, #92	; 0x5c
 8003c9c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	212c      	movs	r1, #44	; 0x2c
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	3360      	adds	r3, #96	; 0x60
 8003cac:	2204      	movs	r2, #4
 8003cae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	b2d9      	uxtb	r1, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	202c      	movs	r0, #44	; 0x2c
 8003ccc:	fb00 f303 	mul.w	r3, r0, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3360      	adds	r3, #96	; 0x60
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f00a ff17 	bl	800eb0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cde:	e081      	b.n	8003de4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d176      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	333f      	adds	r3, #63	; 0x3f
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d121      	bne.n	8003d4e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	335c      	adds	r3, #92	; 0x5c
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d36:	f043 0302 	orr.w	r3, r3, #2
 8003d3a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f005 f975 	bl	8009036 <USB_HC_Halt>
 8003d4c:	e041      	b.n	8003dd2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	333f      	adds	r3, #63	; 0x3f
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	333f      	adds	r3, #63	; 0x3f
 8003d70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d12d      	bne.n	8003dd2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	335c      	adds	r3, #92	; 0x5c
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d120      	bne.n	8003dd2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3361      	adds	r3, #97	; 0x61
 8003d9e:	2203      	movs	r2, #3
 8003da0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dbc:	f043 0302 	orr.w	r3, r3, #2
 8003dc0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f005 f932 	bl	8009036 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	461a      	mov	r2, r3
 8003de0:	2310      	movs	r3, #16
 8003de2:	6093      	str	r3, [r2, #8]
}
 8003de4:	bf00      	nop
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d119      	bne.n	8003e50 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e4e:	e3c6      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d13e      	bne.n	8003ee4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e72:	461a      	mov	r2, r3
 8003e74:	2320      	movs	r3, #32
 8003e76:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	212c      	movs	r1, #44	; 0x2c
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	333d      	adds	r3, #61	; 0x3d
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	f040 83a8 	bne.w	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	333d      	adds	r3, #61	; 0x3d
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3360      	adds	r3, #96	; 0x60
 8003eae:	2202      	movs	r2, #2
 8003eb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f005 f8aa 	bl	8009036 <USB_HC_Halt>
}
 8003ee2:	e37c      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d122      	bne.n	8003f42 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f005 f885 	bl	8009036 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f3e:	6093      	str	r3, [r2, #8]
}
 8003f40:	e34d      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d150      	bne.n	8003ffa <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	335c      	adds	r3, #92	; 0x5c
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d111      	bne.n	8003fa4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	212c      	movs	r1, #44	; 0x2c
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	333d      	adds	r3, #61	; 0x3d
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2340      	movs	r3, #64	; 0x40
 8003fa2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f005 f831 	bl	8009036 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	212c      	movs	r1, #44	; 0x2c
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3361      	adds	r3, #97	; 0x61
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
}
 8003ff8:	e2f1      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d13c      	bne.n	800408a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3361      	adds	r3, #97	; 0x61
 800401e:	2204      	movs	r2, #4
 8004020:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	333d      	adds	r3, #61	; 0x3d
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	212c      	movs	r1, #44	; 0x2c
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	335c      	adds	r3, #92	; 0x5c
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	440a      	add	r2, r1
 800405c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f004 ffe0 	bl	8009036 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4413      	add	r3, r2
 800407e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004082:	461a      	mov	r2, r3
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	6093      	str	r3, [r2, #8]
}
 8004088:	e2a9      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d12a      	bne.n	80040f6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	461a      	mov	r2, r3
 80040ae:	2308      	movs	r3, #8
 80040b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f004 ffaa 	bl	8009036 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	3361      	adds	r3, #97	; 0x61
 80040f0:	2205      	movs	r2, #5
 80040f2:	701a      	strb	r2, [r3, #0]
}
 80040f4:	e273      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b10      	cmp	r3, #16
 800410a:	d150      	bne.n	80041ae <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	335c      	adds	r3, #92	; 0x5c
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	212c      	movs	r1, #44	; 0x2c
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	3361      	adds	r3, #97	; 0x61
 800412c:	2203      	movs	r2, #3
 800412e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	212c      	movs	r1, #44	; 0x2c
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	4413      	add	r3, r2
 800413c:	333d      	adds	r3, #61	; 0x3d
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d112      	bne.n	800416a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	333c      	adds	r3, #60	; 0x3c
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d108      	bne.n	800416a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	333d      	adds	r3, #61	; 0x3d
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	440a      	add	r2, r1
 8004180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f004 ff4e 	bl	8009036 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	461a      	mov	r2, r3
 80041a8:	2310      	movs	r3, #16
 80041aa:	6093      	str	r3, [r2, #8]
}
 80041ac:	e217      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d174      	bne.n	80042ae <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d121      	bne.n	8004210 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3361      	adds	r3, #97	; 0x61
 80041da:	2206      	movs	r2, #6
 80041dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f004 ff14 	bl	8009036 <USB_HC_Halt>
 800420e:	e044      	b.n	800429a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	335c      	adds	r3, #92	; 0x5c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	202c      	movs	r0, #44	; 0x2c
 8004228:	fb00 f303 	mul.w	r3, r0, r3
 800422c:	440b      	add	r3, r1
 800422e:	335c      	adds	r3, #92	; 0x5c
 8004230:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	335c      	adds	r3, #92	; 0x5c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d920      	bls.n	8004288 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	335c      	adds	r3, #92	; 0x5c
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3360      	adds	r3, #96	; 0x60
 8004266:	2204      	movs	r2, #4
 8004268:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	b2d9      	uxtb	r1, r3
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	202c      	movs	r0, #44	; 0x2c
 8004274:	fb00 f303 	mul.w	r3, r0, r3
 8004278:	4413      	add	r3, r2
 800427a:	3360      	adds	r3, #96	; 0x60
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f00a fc43 	bl	800eb0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004286:	e008      	b.n	800429a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	3360      	adds	r3, #96	; 0x60
 8004296:	2202      	movs	r2, #2
 8004298:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a6:	461a      	mov	r2, r3
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	6093      	str	r3, [r2, #8]
}
 80042ac:	e197      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c4:	d134      	bne.n	8004330 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f004 fea0 	bl	8009036 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	461a      	mov	r2, r3
 8004304:	2310      	movs	r3, #16
 8004306:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3361      	adds	r3, #97	; 0x61
 800432a:	2208      	movs	r2, #8
 800432c:	701a      	strb	r2, [r3, #0]
}
 800432e:	e156      	b.n	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	f040 814b 	bne.w	80045de <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	440a      	add	r2, r1
 800435e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004362:	f023 0302 	bic.w	r3, r3, #2
 8004366:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3361      	adds	r3, #97	; 0x61
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d179      	bne.n	8004470 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3360      	adds	r3, #96	; 0x60
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	333f      	adds	r3, #63	; 0x3f
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d00a      	beq.n	80043b8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	212c      	movs	r1, #44	; 0x2c
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	4413      	add	r3, r2
 80043ae:	333f      	adds	r3, #63	; 0x3f
 80043b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	f040 80fc 	bne.w	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d142      	bne.n	8004446 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	334c      	adds	r3, #76	; 0x4c
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80ed 	beq.w	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	212c      	movs	r1, #44	; 0x2c
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	334c      	adds	r3, #76	; 0x4c
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	202c      	movs	r0, #44	; 0x2c
 80043ec:	fb00 f202 	mul.w	r2, r0, r2
 80043f0:	440a      	add	r2, r1
 80043f2:	3240      	adds	r2, #64	; 0x40
 80043f4:	8812      	ldrh	r2, [r2, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	3b01      	subs	r3, #1
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	202c      	movs	r0, #44	; 0x2c
 8004400:	fb00 f202 	mul.w	r2, r0, r2
 8004404:	440a      	add	r2, r1
 8004406:	3240      	adds	r2, #64	; 0x40
 8004408:	8812      	ldrh	r2, [r2, #0]
 800440a:	fbb3 f3f2 	udiv	r3, r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80ca 	beq.w	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	212c      	movs	r1, #44	; 0x2c
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	3355      	adds	r3, #85	; 0x55
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	f083 0301 	eor.w	r3, r3, #1
 8004430:	b2d8      	uxtb	r0, r3
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	3355      	adds	r3, #85	; 0x55
 8004440:	4602      	mov	r2, r0
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	e0b4      	b.n	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	3355      	adds	r3, #85	; 0x55
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2d8      	uxtb	r0, r3
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3355      	adds	r3, #85	; 0x55
 800446a:	4602      	mov	r2, r0
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e09f      	b.n	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	4413      	add	r3, r2
 800447c:	3361      	adds	r3, #97	; 0x61
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d109      	bne.n	8004498 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3360      	adds	r3, #96	; 0x60
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e08b      	b.n	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	212c      	movs	r1, #44	; 0x2c
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	3361      	adds	r3, #97	; 0x61
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d109      	bne.n	80044c0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3360      	adds	r3, #96	; 0x60
 80044ba:	2202      	movs	r2, #2
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e077      	b.n	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3361      	adds	r3, #97	; 0x61
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d109      	bne.n	80044e8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3360      	adds	r3, #96	; 0x60
 80044e2:	2205      	movs	r2, #5
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e063      	b.n	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	212c      	movs	r1, #44	; 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	3361      	adds	r3, #97	; 0x61
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b06      	cmp	r3, #6
 80044fa:	d009      	beq.n	8004510 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	3361      	adds	r3, #97	; 0x61
 800450a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800450c:	2b08      	cmp	r3, #8
 800450e:	d14f      	bne.n	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	212c      	movs	r1, #44	; 0x2c
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4413      	add	r3, r2
 800451c:	335c      	adds	r3, #92	; 0x5c
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	202c      	movs	r0, #44	; 0x2c
 8004528:	fb00 f303 	mul.w	r3, r0, r3
 800452c:	440b      	add	r3, r1
 800452e:	335c      	adds	r3, #92	; 0x5c
 8004530:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	212c      	movs	r1, #44	; 0x2c
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	4413      	add	r3, r2
 800453e:	335c      	adds	r3, #92	; 0x5c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d912      	bls.n	800456c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	212c      	movs	r1, #44	; 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	335c      	adds	r3, #92	; 0x5c
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	212c      	movs	r1, #44	; 0x2c
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	3360      	adds	r3, #96	; 0x60
 8004566:	2204      	movs	r2, #4
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e021      	b.n	80045b0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3360      	adds	r3, #96	; 0x60
 800457a:	2202      	movs	r2, #2
 800457c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004594:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800459c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	461a      	mov	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	461a      	mov	r2, r3
 80045be:	2302      	movs	r3, #2
 80045c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	b2d9      	uxtb	r1, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	202c      	movs	r0, #44	; 0x2c
 80045cc:	fb00 f303 	mul.w	r3, r0, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3360      	adds	r3, #96	; 0x60
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f00a fa97 	bl	800eb0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045de:	bf00      	nop
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b08a      	sub	sp, #40	; 0x28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	0c5b      	lsrs	r3, r3, #17
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d004      	beq.n	800462c <HCD_RXQLVL_IRQHandler+0x46>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b05      	cmp	r3, #5
 8004626:	f000 80a9 	beq.w	800477c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800462a:	e0aa      	b.n	8004782 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80a6 	beq.w	8004780 <HCD_RXQLVL_IRQHandler+0x19a>
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	3344      	adds	r3, #68	; 0x44
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 809b 	beq.w	8004780 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3350      	adds	r3, #80	; 0x50
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	441a      	add	r2, r3
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	202c      	movs	r0, #44	; 0x2c
 8004664:	fb00 f303 	mul.w	r3, r0, r3
 8004668:	440b      	add	r3, r1
 800466a:	334c      	adds	r3, #76	; 0x4c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d87a      	bhi.n	8004768 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	3344      	adds	r3, #68	; 0x44
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	b292      	uxth	r2, r2
 800468a:	4619      	mov	r1, r3
 800468c:	f004 f877 	bl	800877e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	212c      	movs	r1, #44	; 0x2c
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	3344      	adds	r3, #68	; 0x44
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	441a      	add	r2, r3
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	202c      	movs	r0, #44	; 0x2c
 80046aa:	fb00 f303 	mul.w	r3, r0, r3
 80046ae:	440b      	add	r3, r1
 80046b0:	3344      	adds	r3, #68	; 0x44
 80046b2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	3350      	adds	r3, #80	; 0x50
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	441a      	add	r2, r3
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	202c      	movs	r0, #44	; 0x2c
 80046ce:	fb00 f303 	mul.w	r3, r0, r3
 80046d2:	440b      	add	r3, r1
 80046d4:	3350      	adds	r3, #80	; 0x50
 80046d6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	0cdb      	lsrs	r3, r3, #19
 80046e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	3340      	adds	r3, #64	; 0x40
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4293      	cmp	r3, r2
 8004704:	d13c      	bne.n	8004780 <HCD_RXQLVL_IRQHandler+0x19a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d039      	beq.n	8004780 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	4413      	add	r3, r2
 8004714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004722:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800472a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	212c      	movs	r1, #44	; 0x2c
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	4413      	add	r3, r2
 800474a:	3354      	adds	r3, #84	; 0x54
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f083 0301 	eor.w	r3, r3, #1
 8004752:	b2d8      	uxtb	r0, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	3354      	adds	r3, #84	; 0x54
 8004762:	4602      	mov	r2, r0
 8004764:	701a      	strb	r2, [r3, #0]
      break;
 8004766:	e00b      	b.n	8004780 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3360      	adds	r3, #96	; 0x60
 8004776:	2204      	movs	r2, #4
 8004778:	701a      	strb	r2, [r3, #0]
      break;
 800477a:	e001      	b.n	8004780 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800477c:	bf00      	nop
 800477e:	e000      	b.n	8004782 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004780:	bf00      	nop
  }
}
 8004782:	bf00      	nop
 8004784:	3728      	adds	r7, #40	; 0x28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047b6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d10b      	bne.n	80047da <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d102      	bne.n	80047d2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f00a f981 	bl	800ead4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d132      	bne.n	800484a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f043 0308 	orr.w	r3, r3, #8
 80047ea:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d126      	bne.n	8004844 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d113      	bne.n	8004826 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004808:	d106      	bne.n	8004818 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2102      	movs	r1, #2
 8004810:	4618      	mov	r0, r3
 8004812:	f004 f8e9 	bl	80089e8 <USB_InitFSLSPClkSel>
 8004816:	e011      	b.n	800483c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f004 f8e2 	bl	80089e8 <USB_InitFSLSPClkSel>
 8004824:	e00a      	b.n	800483c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d106      	bne.n	800483c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004834:	461a      	mov	r2, r3
 8004836:	f64e 2360 	movw	r3, #60000	; 0xea60
 800483a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f00a f977 	bl	800eb30 <HAL_HCD_PortEnabled_Callback>
 8004842:	e002      	b.n	800484a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f00a f981 	bl	800eb4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b20      	cmp	r3, #32
 8004852:	d103      	bne.n	800485c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f043 0320 	orr.w	r3, r3, #32
 800485a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004862:	461a      	mov	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	bf00      	nop
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e154      	b.n	8004b2c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a98      	ldr	r2, [pc, #608]	; (8004afc <HAL_I2S_Init+0x28c>)
 800489a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fc ff15 	bl	80016cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048b8:	f023 030f 	bic.w	r3, r3, #15
 80048bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2202      	movs	r2, #2
 80048c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d06f      	beq.n	80049ae <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80048d6:	2310      	movs	r3, #16
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e001      	b.n	80048e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80048dc:	2320      	movs	r3, #32
 80048de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d802      	bhi.n	80048ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a83      	ldr	r2, [pc, #524]	; (8004b00 <HAL_I2S_Init+0x290>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d004      	beq.n	8004902 <HAL_I2S_Init+0x92>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a81      	ldr	r2, [pc, #516]	; (8004b04 <HAL_I2S_Init+0x294>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d104      	bne.n	800490c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004902:	2001      	movs	r0, #1
 8004904:	f001 f9c6 	bl	8005c94 <HAL_RCCEx_GetPeriphCLKFreq>
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	e003      	b.n	8004914 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800490c:	2002      	movs	r0, #2
 800490e:	f001 f9c1 	bl	8005c94 <HAL_RCCEx_GetPeriphCLKFreq>
 8004912:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491c:	d125      	bne.n	800496a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d010      	beq.n	8004948 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	461a      	mov	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	3305      	adds	r3, #5
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	e01f      	b.n	8004988 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	461a      	mov	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	3305      	adds	r3, #5
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	e00e      	b.n	8004988 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	461a      	mov	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	3305      	adds	r3, #5
 8004986:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <HAL_I2S_Init+0x298>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	08db      	lsrs	r3, r3, #3
 8004992:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e003      	b.n	80049b6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80049ae:	2302      	movs	r3, #2
 80049b0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d902      	bls.n	80049c2 <HAL_I2S_Init+0x152>
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2bff      	cmp	r3, #255	; 0xff
 80049c0:	d907      	bls.n	80049d2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	f043 0210 	orr.w	r2, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e0ac      	b.n	8004b2c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	ea42 0103 	orr.w	r1, r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049f0:	f023 030f 	bic.w	r3, r3, #15
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6851      	ldr	r1, [r2, #4]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6892      	ldr	r2, [r2, #8]
 80049fc:	4311      	orrs	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68d2      	ldr	r2, [r2, #12]
 8004a02:	4311      	orrs	r1, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6992      	ldr	r2, [r2, #24]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a14:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b30      	cmp	r3, #48	; 0x30
 8004a1c:	d003      	beq.n	8004a26 <HAL_I2S_Init+0x1b6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2bb0      	cmp	r3, #176	; 0xb0
 8004a24:	d107      	bne.n	8004a36 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a34:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d16e      	bne.n	8004b1c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a32      	ldr	r2, [pc, #200]	; (8004b0c <HAL_I2S_Init+0x29c>)
 8004a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2d      	ldr	r2, [pc, #180]	; (8004b00 <HAL_I2S_Init+0x290>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2S_Init+0x1e2>
 8004a4e:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <HAL_I2S_Init+0x2a0>)
 8004a50:	e001      	b.n	8004a56 <HAL_I2S_Init+0x1e6>
 8004a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	4928      	ldr	r1, [pc, #160]	; (8004b00 <HAL_I2S_Init+0x290>)
 8004a5e:	428a      	cmp	r2, r1
 8004a60:	d101      	bne.n	8004a66 <HAL_I2S_Init+0x1f6>
 8004a62:	4a2b      	ldr	r2, [pc, #172]	; (8004b10 <HAL_I2S_Init+0x2a0>)
 8004a64:	e001      	b.n	8004a6a <HAL_I2S_Init+0x1fa>
 8004a66:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a6a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a6e:	f023 030f 	bic.w	r3, r3, #15
 8004a72:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <HAL_I2S_Init+0x290>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d101      	bne.n	8004a82 <HAL_I2S_Init+0x212>
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_I2S_Init+0x2a0>)
 8004a80:	e001      	b.n	8004a86 <HAL_I2S_Init+0x216>
 8004a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a86:	2202      	movs	r2, #2
 8004a88:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1c      	ldr	r2, [pc, #112]	; (8004b00 <HAL_I2S_Init+0x290>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d101      	bne.n	8004a98 <HAL_I2S_Init+0x228>
 8004a94:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <HAL_I2S_Init+0x2a0>)
 8004a96:	e001      	b.n	8004a9c <HAL_I2S_Init+0x22c>
 8004a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa8:	d003      	beq.n	8004ab2 <HAL_I2S_Init+0x242>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	e001      	b.n	8004abe <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	897b      	ldrh	r3, [r7, #10]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004aea:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a03      	ldr	r2, [pc, #12]	; (8004b00 <HAL_I2S_Init+0x290>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10e      	bne.n	8004b14 <HAL_I2S_Init+0x2a4>
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_I2S_Init+0x2a0>)
 8004af8:	e00e      	b.n	8004b18 <HAL_I2S_Init+0x2a8>
 8004afa:	bf00      	nop
 8004afc:	08004c2b 	.word	0x08004c2b
 8004b00:	40003800 	.word	0x40003800
 8004b04:	40003c00 	.word	0x40003c00
 8004b08:	cccccccd 	.word	0xcccccccd
 8004b0c:	08004d41 	.word	0x08004d41
 8004b10:	40003400 	.word	0x40003400
 8004b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b18:	897a      	ldrh	r2, [r7, #10]
 8004b1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10e      	bne.n	8004bc4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bb4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ffb8 	bl	8004b34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	b292      	uxth	r2, r2
 8004be0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	1c9a      	adds	r2, r3, #2
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10e      	bne.n	8004c22 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c12:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff93 	bl	8004b48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d13a      	bne.n	8004cbc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d109      	bne.n	8004c64 <I2S_IRQHandler+0x3a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d102      	bne.n	8004c64 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ffb4 	bl	8004bcc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	2b40      	cmp	r3, #64	; 0x40
 8004c6c:	d126      	bne.n	8004cbc <I2S_IRQHandler+0x92>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d11f      	bne.n	8004cbc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f043 0202 	orr.w	r2, r3, #2
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff ff50 	bl	8004b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d136      	bne.n	8004d36 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d109      	bne.n	8004ce6 <I2S_IRQHandler+0xbc>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d102      	bne.n	8004ce6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff ff45 	bl	8004b70 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d122      	bne.n	8004d36 <I2S_IRQHandler+0x10c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d11b      	bne.n	8004d36 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d0c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff13 	bl	8004b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4aa2      	ldr	r2, [pc, #648]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d101      	bne.n	8004d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d5a:	4ba2      	ldr	r3, [pc, #648]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d5c:	e001      	b.n	8004d62 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a9b      	ldr	r2, [pc, #620]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d78:	4b9a      	ldr	r3, [pc, #616]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d7a:	e001      	b.n	8004d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d004      	beq.n	8004d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 8099 	bne.w	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d107      	bne.n	8004db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f925 	bl	8004ffc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d107      	bne.n	8004dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9c8 	bl	800515c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d13a      	bne.n	8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d035      	beq.n	8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7e      	ldr	r2, [pc, #504]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d101      	bne.n	8004dee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004dea:	4b7e      	ldr	r3, [pc, #504]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dec:	e001      	b.n	8004df2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004dee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4979      	ldr	r1, [pc, #484]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dfa:	428b      	cmp	r3, r1
 8004dfc:	d101      	bne.n	8004e02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004dfe:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e00:	e001      	b.n	8004e06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f043 0202 	orr.w	r2, r3, #2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fe88 	bl	8004b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	f040 80be 	bne.w	8004fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80b8 	beq.w	8004fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a59      	ldr	r2, [pc, #356]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d101      	bne.n	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e80:	e001      	b.n	8004e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4954      	ldr	r1, [pc, #336]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e8e:	428b      	cmp	r3, r1
 8004e90:	d101      	bne.n	8004e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e92:	4b54      	ldr	r3, [pc, #336]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e94:	e001      	b.n	8004e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f043 0204 	orr.w	r2, r3, #4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fe4a 	bl	8004b5c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ec8:	e084      	b.n	8004fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d107      	bne.n	8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8be 	bl	8005060 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d107      	bne.n	8004efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f8fd 	bl	80050f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d12f      	bne.n	8004f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d02a      	beq.n	8004f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004f2c:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f2e:	e001      	b.n	8004f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004f30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4929      	ldr	r1, [pc, #164]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f3c:	428b      	cmp	r3, r1
 8004f3e:	d101      	bne.n	8004f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004f40:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f42:	e001      	b.n	8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f043 0202 	orr.w	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fdfa 	bl	8004b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d131      	bne.n	8004fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d02c      	beq.n	8004fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d101      	bne.n	8004f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f86:	4b17      	ldr	r3, [pc, #92]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f88:	e001      	b.n	8004f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4912      	ldr	r1, [pc, #72]	; (8004fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f96:	428b      	cmp	r3, r1
 8004f98:	d101      	bne.n	8004f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f9c:	e001      	b.n	8004fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004f9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fa2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fa6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fb6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fdc5 	bl	8004b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fd2:	e000      	b.n	8004fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fd4:	bf00      	nop
}
 8004fd6:	bf00      	nop
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40003800 	.word	0x40003800
 8004fe4:	40003400 	.word	0x40003400

08004fe8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	1c99      	adds	r1, r3, #2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6251      	str	r1, [r2, #36]	; 0x24
 800500e:	881a      	ldrh	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d113      	bne.n	8005056 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800503c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff ffc9 	bl	8004fe8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	1c99      	adds	r1, r3, #2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6251      	str	r1, [r2, #36]	; 0x24
 8005072:	8819      	ldrh	r1, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <I2SEx_TxISR_I2SExt+0x90>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d101      	bne.n	8005082 <I2SEx_TxISR_I2SExt+0x22>
 800507e:	4b1d      	ldr	r3, [pc, #116]	; (80050f4 <I2SEx_TxISR_I2SExt+0x94>)
 8005080:	e001      	b.n	8005086 <I2SEx_TxISR_I2SExt+0x26>
 8005082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005086:	460a      	mov	r2, r1
 8005088:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d121      	bne.n	80050e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <I2SEx_TxISR_I2SExt+0x90>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <I2SEx_TxISR_I2SExt+0x50>
 80050ac:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <I2SEx_TxISR_I2SExt+0x94>)
 80050ae:	e001      	b.n	80050b4 <I2SEx_TxISR_I2SExt+0x54>
 80050b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	490d      	ldr	r1, [pc, #52]	; (80050f0 <I2SEx_TxISR_I2SExt+0x90>)
 80050bc:	428b      	cmp	r3, r1
 80050be:	d101      	bne.n	80050c4 <I2SEx_TxISR_I2SExt+0x64>
 80050c0:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <I2SEx_TxISR_I2SExt+0x94>)
 80050c2:	e001      	b.n	80050c8 <I2SEx_TxISR_I2SExt+0x68>
 80050c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff81 	bl	8004fe8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40003800 	.word	0x40003800
 80050f4:	40003400 	.word	0x40003400

080050f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68d8      	ldr	r0, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	1c99      	adds	r1, r3, #2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005110:	b282      	uxth	r2, r0
 8005112:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d113      	bne.n	8005154 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800513a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ff4a 	bl	8004fe8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a20      	ldr	r2, [pc, #128]	; (80051ec <I2SEx_RxISR_I2SExt+0x90>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d101      	bne.n	8005172 <I2SEx_RxISR_I2SExt+0x16>
 800516e:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <I2SEx_RxISR_I2SExt+0x94>)
 8005170:	e001      	b.n	8005176 <I2SEx_RxISR_I2SExt+0x1a>
 8005172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005176:	68d8      	ldr	r0, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	1c99      	adds	r1, r3, #2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005182:	b282      	uxth	r2, r0
 8005184:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d121      	bne.n	80051e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a12      	ldr	r2, [pc, #72]	; (80051ec <I2SEx_RxISR_I2SExt+0x90>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d101      	bne.n	80051ac <I2SEx_RxISR_I2SExt+0x50>
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <I2SEx_RxISR_I2SExt+0x94>)
 80051aa:	e001      	b.n	80051b0 <I2SEx_RxISR_I2SExt+0x54>
 80051ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	490d      	ldr	r1, [pc, #52]	; (80051ec <I2SEx_RxISR_I2SExt+0x90>)
 80051b8:	428b      	cmp	r3, r1
 80051ba:	d101      	bne.n	80051c0 <I2SEx_RxISR_I2SExt+0x64>
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <I2SEx_RxISR_I2SExt+0x94>)
 80051be:	e001      	b.n	80051c4 <I2SEx_RxISR_I2SExt+0x68>
 80051c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d106      	bne.n	80051e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff03 	bl	8004fe8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40003800 	.word	0x40003800
 80051f0:	40003400 	.word	0x40003400

080051f4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80051fc:	f7fc fe74 	bl	8001ee8 <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e069      	b.n	80052e0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fc fb0d 	bl	8001840 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005226:	f241 3188 	movw	r1, #5000	; 0x1388
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f85e 	bl	80052ec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	3b01      	subs	r3, #1
 8005240:	021a      	lsls	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	2120      	movs	r1, #32
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f856 	bl	8005308 <QSPI_WaitFlagStateUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005260:	7afb      	ldrb	r3, [r7, #11]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d137      	bne.n	80052d6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005270:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6852      	ldr	r2, [r2, #4]
 8005278:	0611      	lsls	r1, r2, #24
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68d2      	ldr	r2, [r2, #12]
 800527e:	4311      	orrs	r1, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	69d2      	ldr	r2, [r2, #28]
 8005284:	4311      	orrs	r1, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6a12      	ldr	r2, [r2, #32]
 800528a:	4311      	orrs	r1, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	430b      	orrs	r3, r1
 8005292:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_QSPI_Init+0xf4>)
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6912      	ldr	r2, [r2, #16]
 80052a2:	0411      	lsls	r1, r2, #16
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6952      	ldr	r2, [r2, #20]
 80052a8:	4311      	orrs	r1, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6992      	ldr	r2, [r2, #24]
 80052ae:	4311      	orrs	r1, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80052de:	7afb      	ldrb	r3, [r7, #11]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	ffe0f8fe 	.word	0xffe0f8fe

080052ec <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005318:	e01a      	b.n	8005350 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d016      	beq.n	8005350 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005322:	f7fc fde1 	bl	8001ee8 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2204      	movs	r2, #4
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	f043 0201 	orr.w	r2, r3, #1
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e00e      	b.n	800536e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	429a      	cmp	r2, r3
 800536a:	d1d6      	bne.n	800531a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0cc      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b68      	ldr	r3, [pc, #416]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d90c      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b65      	ldr	r3, [pc, #404]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b63      	ldr	r3, [pc, #396]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0b8      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053cc:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a58      	ldr	r2, [pc, #352]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e4:	4b53      	ldr	r3, [pc, #332]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a52      	ldr	r2, [pc, #328]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f0:	4b50      	ldr	r3, [pc, #320]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	494d      	ldr	r1, [pc, #308]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d044      	beq.n	8005498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d119      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d003      	beq.n	8005436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005432:	2b03      	cmp	r3, #3
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005446:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e067      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4934      	ldr	r1, [pc, #208]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005468:	f7fc fd3e 	bl	8001ee8 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7fc fd3a 	bl	8001ee8 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e04f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 020c 	and.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	429a      	cmp	r2, r3
 8005496:	d1eb      	bne.n	8005470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b25      	ldr	r3, [pc, #148]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20c      	bcs.n	80054c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b20      	ldr	r3, [pc, #128]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e032      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054cc:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4916      	ldr	r1, [pc, #88]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ea:	4b12      	ldr	r3, [pc, #72]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	490e      	ldr	r1, [pc, #56]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fe:	f000 f821 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8005502:	4602      	mov	r2, r0
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	490a      	ldr	r1, [pc, #40]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	5ccb      	ldrb	r3, [r1, r3]
 8005512:	fa22 f303 	lsr.w	r3, r2, r3
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_RCC_ClockConfig+0x1c8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fc fbb8 	bl	8001c94 <HAL_InitTick>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40023c00 	.word	0x40023c00
 8005534:	40023800 	.word	0x40023800
 8005538:	0800f31c 	.word	0x0800f31c
 800553c:	20000000 	.word	0x20000000
 8005540:	20000004 	.word	0x20000004

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	b5b0      	push	{r4, r5, r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800554a:	2100      	movs	r1, #0
 800554c:	6079      	str	r1, [r7, #4]
 800554e:	2100      	movs	r1, #0
 8005550:	60f9      	str	r1, [r7, #12]
 8005552:	2100      	movs	r1, #0
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005556:	2100      	movs	r1, #0
 8005558:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800555a:	4952      	ldr	r1, [pc, #328]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800555c:	6889      	ldr	r1, [r1, #8]
 800555e:	f001 010c 	and.w	r1, r1, #12
 8005562:	2908      	cmp	r1, #8
 8005564:	d00d      	beq.n	8005582 <HAL_RCC_GetSysClockFreq+0x3e>
 8005566:	2908      	cmp	r1, #8
 8005568:	f200 8094 	bhi.w	8005694 <HAL_RCC_GetSysClockFreq+0x150>
 800556c:	2900      	cmp	r1, #0
 800556e:	d002      	beq.n	8005576 <HAL_RCC_GetSysClockFreq+0x32>
 8005570:	2904      	cmp	r1, #4
 8005572:	d003      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x38>
 8005574:	e08e      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005576:	4b4c      	ldr	r3, [pc, #304]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005578:	60bb      	str	r3, [r7, #8]
       break;
 800557a:	e08e      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557c:	4b4b      	ldr	r3, [pc, #300]	; (80056ac <HAL_RCC_GetSysClockFreq+0x168>)
 800557e:	60bb      	str	r3, [r7, #8]
      break;
 8005580:	e08b      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005582:	4948      	ldr	r1, [pc, #288]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005584:	6849      	ldr	r1, [r1, #4]
 8005586:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800558a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558c:	4945      	ldr	r1, [pc, #276]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800558e:	6849      	ldr	r1, [r1, #4]
 8005590:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005594:	2900      	cmp	r1, #0
 8005596:	d024      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005598:	4942      	ldr	r1, [pc, #264]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800559a:	6849      	ldr	r1, [r1, #4]
 800559c:	0989      	lsrs	r1, r1, #6
 800559e:	4608      	mov	r0, r1
 80055a0:	f04f 0100 	mov.w	r1, #0
 80055a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80055a8:	f04f 0500 	mov.w	r5, #0
 80055ac:	ea00 0204 	and.w	r2, r0, r4
 80055b0:	ea01 0305 	and.w	r3, r1, r5
 80055b4:	493d      	ldr	r1, [pc, #244]	; (80056ac <HAL_RCC_GetSysClockFreq+0x168>)
 80055b6:	fb01 f003 	mul.w	r0, r1, r3
 80055ba:	2100      	movs	r1, #0
 80055bc:	fb01 f102 	mul.w	r1, r1, r2
 80055c0:	1844      	adds	r4, r0, r1
 80055c2:	493a      	ldr	r1, [pc, #232]	; (80056ac <HAL_RCC_GetSysClockFreq+0x168>)
 80055c4:	fba2 0101 	umull	r0, r1, r2, r1
 80055c8:	1863      	adds	r3, r4, r1
 80055ca:	4619      	mov	r1, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	f7fa fe24 	bl	8000220 <__aeabi_uldivmod>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4613      	mov	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e04a      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e2:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	461a      	mov	r2, r3
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	ea02 0400 	and.w	r4, r2, r0
 80055fa:	ea03 0501 	and.w	r5, r3, r1
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	014b      	lsls	r3, r1, #5
 800560c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005610:	0142      	lsls	r2, r0, #5
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	1b00      	subs	r0, r0, r4
 8005618:	eb61 0105 	sbc.w	r1, r1, r5
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	018b      	lsls	r3, r1, #6
 8005626:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800562a:	0182      	lsls	r2, r0, #6
 800562c:	1a12      	subs	r2, r2, r0
 800562e:	eb63 0301 	sbc.w	r3, r3, r1
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f04f 0100 	mov.w	r1, #0
 800563a:	00d9      	lsls	r1, r3, #3
 800563c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005640:	00d0      	lsls	r0, r2, #3
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	1912      	adds	r2, r2, r4
 8005648:	eb45 0303 	adc.w	r3, r5, r3
 800564c:	f04f 0000 	mov.w	r0, #0
 8005650:	f04f 0100 	mov.w	r1, #0
 8005654:	0299      	lsls	r1, r3, #10
 8005656:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800565a:	0290      	lsls	r0, r2, #10
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	461a      	mov	r2, r3
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	f7fa fdd8 	bl	8000220 <__aeabi_uldivmod>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4613      	mov	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	3301      	adds	r3, #1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	60bb      	str	r3, [r7, #8]
      break;
 8005692:	e002      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005696:	60bb      	str	r3, [r7, #8]
      break;
 8005698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800569a:	68bb      	ldr	r3, [r7, #8]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bdb0      	pop	{r4, r5, r7, pc}
 80056a4:	40023800 	.word	0x40023800
 80056a8:	00f42400 	.word	0x00f42400
 80056ac:	017d7840 	.word	0x017d7840

080056b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000000 	.word	0x20000000

080056c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056cc:	f7ff fff0 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	0a9b      	lsrs	r3, r3, #10
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4903      	ldr	r1, [pc, #12]	; (80056ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80056de:	5ccb      	ldrb	r3, [r1, r3]
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40023800 	.word	0x40023800
 80056ec:	0800f32c 	.word	0x0800f32c

080056f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056f4:	f7ff ffdc 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	0b5b      	lsrs	r3, r3, #13
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	4903      	ldr	r1, [pc, #12]	; (8005714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005706:	5ccb      	ldrb	r3, [r1, r3]
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40023800 	.word	0x40023800
 8005714:	0800f32c 	.word	0x0800f32c

08005718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	220f      	movs	r2, #15
 8005726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005728:	4b12      	ldr	r3, [pc, #72]	; (8005774 <HAL_RCC_GetClockConfig+0x5c>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 0203 	and.w	r2, r3, #3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <HAL_RCC_GetClockConfig+0x5c>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <HAL_RCC_GetClockConfig+0x5c>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_GetClockConfig+0x5c>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <HAL_RCC_GetClockConfig+0x60>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0207 	and.w	r2, r3, #7
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	40023c00 	.word	0x40023c00

0800577c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80057a0:	4b7a      	ldr	r3, [pc, #488]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	4977      	ldr	r1, [pc, #476]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80057be:	2301      	movs	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d010      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80057ce:	4b6f      	ldr	r3, [pc, #444]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	496b      	ldr	r1, [pc, #428]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80057ec:	2301      	movs	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d022      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80057fc:	4b63      	ldr	r3, [pc, #396]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580a:	4960      	ldr	r1, [pc, #384]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800581a:	2301      	movs	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005826:	d10c      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005828:	4b58      	ldr	r3, [pc, #352]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800582a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	3b01      	subs	r3, #1
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	4954      	ldr	r1, [pc, #336]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d022      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800584e:	4b4f      	ldr	r3, [pc, #316]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005854:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	494b      	ldr	r1, [pc, #300]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800586c:	2301      	movs	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005878:	d10c      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800587a:	4b44      	ldr	r3, [pc, #272]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800587c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005880:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	3b01      	subs	r3, #1
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	493f      	ldr	r1, [pc, #252]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 808a 	beq.w	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	4b39      	ldr	r3, [pc, #228]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	4a38      	ldr	r2, [pc, #224]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b0:	6413      	str	r3, [r2, #64]	; 0x40
 80058b2:	4b36      	ldr	r3, [pc, #216]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058be:	4b34      	ldr	r3, [pc, #208]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a33      	ldr	r2, [pc, #204]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80058c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ca:	f7fc fb0d 	bl	8001ee8 <HAL_GetTick>
 80058ce:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058d0:	e008      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058d2:	f7fc fb09 	bl	8001ee8 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e1d1      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058e4:	4b2a      	ldr	r3, [pc, #168]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058f0:	4b26      	ldr	r3, [pc, #152]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f8:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d02f      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	429a      	cmp	r2, r3
 800590c:	d028      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800590e:	4b1f      	ldr	r3, [pc, #124]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d114      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005936:	f7fc fad7 	bl	8001ee8 <HAL_GetTick>
 800593a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593c:	e00a      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fc fad3 	bl	8001ee8 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e199      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005954:	4b0d      	ldr	r3, [pc, #52]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ee      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800596c:	d114      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800596e:	4b07      	ldr	r3, [pc, #28]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800597e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005982:	4902      	ldr	r1, [pc, #8]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005984:	4313      	orrs	r3, r2
 8005986:	608b      	str	r3, [r1, #8]
 8005988:	e00c      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800
 8005990:	40007000 	.word	0x40007000
 8005994:	42470e40 	.word	0x42470e40
 8005998:	4b89      	ldr	r3, [pc, #548]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4a88      	ldr	r2, [pc, #544]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800599e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059a2:	6093      	str	r3, [r2, #8]
 80059a4:	4b86      	ldr	r3, [pc, #536]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b0:	4983      	ldr	r1, [pc, #524]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80059c8:	4b7e      	ldr	r3, [pc, #504]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80059ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80059d8:	4b79      	ldr	r3, [pc, #484]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	4976      	ldr	r1, [pc, #472]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d011      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059fa:	4b71      	ldr	r3, [pc, #452]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	496d      	ldr	r1, [pc, #436]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a18:	d101      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005a2a:	4b65      	ldr	r3, [pc, #404]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a30:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	4961      	ldr	r1, [pc, #388]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d004      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	f040 80c6 	bne.w	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a50:	4b5d      	ldr	r3, [pc, #372]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a56:	f7fc fa47 	bl	8001ee8 <HAL_GetTick>
 8005a5a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a5e:	f7fc fa43 	bl	8001ee8 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e10b      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a70:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f0      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005a7c:	4a53      	ldr	r2, [pc, #332]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a82:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d023      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d019      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d019      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d115      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ade:	d110      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	019b      	lsls	r3, r3, #6
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	061b      	lsls	r3, r3, #24
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	071b      	lsls	r3, r3, #28
 8005afa:	4931      	ldr	r1, [pc, #196]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d026      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d122      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b2a:	4b25      	ldr	r3, [pc, #148]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b30:	0e1b      	lsrs	r3, r3, #24
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	019b      	lsls	r3, r3, #6
 8005b42:	431a      	orrs	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	071b      	lsls	r3, r3, #28
 8005b50:	491b      	ldr	r1, [pc, #108]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005b58:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5e:	f023 021f 	bic.w	r2, r3, #31
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4915      	ldr	r1, [pc, #84]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d010      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	019b      	lsls	r3, r3, #6
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	061b      	lsls	r3, r3, #24
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	071b      	lsls	r3, r3, #28
 8005b96:	490a      	ldr	r1, [pc, #40]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba4:	f7fc f9a0 	bl	8001ee8 <HAL_GetTick>
 8005ba8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005baa:	e011      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bac:	f7fc f99c 	bl	8001ee8 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d90a      	bls.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e064      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005bbe:	bf00      	nop
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	424711e0 	.word	0x424711e0
 8005bc8:	42470068 	.word	0x42470068
 8005bcc:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bd0:	4b2f      	ldr	r3, [pc, #188]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0e7      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005be8:	4b29      	ldr	r3, [pc, #164]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	4926      	ldr	r1, [pc, #152]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c0a:	4b21      	ldr	r3, [pc, #132]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c10:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	491d      	ldr	r1, [pc, #116]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005c2c:	4b18      	ldr	r3, [pc, #96]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	4915      	ldr	r1, [pc, #84]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c54:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	490c      	ldr	r1, [pc, #48]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c70:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	4904      	ldr	r1, [pc, #16]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3720      	adds	r7, #32
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40023800 	.word	0x40023800

08005c94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d004      	beq.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	f000 80a1 	beq.w	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005cba:	e13f      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005cbc:	4ba3      	ldr	r3, [pc, #652]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005cce:	f000 8084 	beq.w	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005cd8:	f200 808c 	bhi.w	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ce2:	d04f      	beq.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cea:	f200 8083 	bhi.w	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d006      	beq.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cfa:	d17b      	bne.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cfc:	4b94      	ldr	r3, [pc, #592]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cfe:	617b      	str	r3, [r7, #20]
          break;
 8005d00:	e07b      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005d02:	4b92      	ldr	r3, [pc, #584]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d10:	d109      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d12:	4b8e      	ldr	r3, [pc, #568]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d1c:	4a8c      	ldr	r2, [pc, #560]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	e019      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d26:	4b89      	ldr	r3, [pc, #548]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d32:	d109      	bne.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d34:	4b85      	ldr	r3, [pc, #532]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d3e:	4a85      	ldr	r2, [pc, #532]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	e008      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d48:	4b80      	ldr	r3, [pc, #512]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d52:	4a81      	ldr	r2, [pc, #516]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d5a:	4b7c      	ldr	r3, [pc, #496]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d60:	099b      	lsrs	r3, r3, #6
 8005d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	fb02 f303 	mul.w	r3, r2, r3
 8005d6c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d6e:	4b77      	ldr	r3, [pc, #476]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d74:	0f1b      	lsrs	r3, r3, #28
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]
          break;
 8005d82:	e03a      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d84:	4b71      	ldr	r3, [pc, #452]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d90:	d108      	bne.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d92:	4b6e      	ldr	r3, [pc, #440]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d9a:	4a6e      	ldr	r2, [pc, #440]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e007      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005da4:	4b69      	ldr	r3, [pc, #420]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dac:	4a6a      	ldr	r2, [pc, #424]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005db4:	4b65      	ldr	r3, [pc, #404]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	099b      	lsrs	r3, r3, #6
 8005dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005dc6:	4b61      	ldr	r3, [pc, #388]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	0f1b      	lsrs	r3, r3, #28
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	617b      	str	r3, [r7, #20]
          break;
 8005dd8:	e00f      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005dda:	4b5c      	ldr	r3, [pc, #368]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de6:	d102      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8005de8:	4b5a      	ldr	r3, [pc, #360]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dea:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005dec:	e005      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8005dee:	4b5a      	ldr	r3, [pc, #360]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005df0:	617b      	str	r3, [r7, #20]
          break;
 8005df2:	e002      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
          break;
 8005df8:	bf00      	nop
        }
      }
      break;
 8005dfa:	e09f      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005dfc:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e02:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005e0e:	f000 8084 	beq.w	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005e18:	f200 808c 	bhi.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e22:	d04f      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e2a:	f200 8083 	bhi.w	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e3a:	d17b      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e3c:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e3e:	617b      	str	r3, [r7, #20]
          break;
 8005e40:	e07b      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005e42:	4b42      	ldr	r3, [pc, #264]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e50:	d109      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e52:	4b3e      	ldr	r3, [pc, #248]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5c:	4a3c      	ldr	r2, [pc, #240]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e019      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e66:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e72:	d109      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e74:	4b35      	ldr	r3, [pc, #212]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e7e:	4a35      	ldr	r2, [pc, #212]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e008      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e88:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e92:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e9a:	4b2c      	ldr	r3, [pc, #176]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea0:	099b      	lsrs	r3, r3, #6
 8005ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	fb02 f303 	mul.w	r3, r2, r3
 8005eac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005eae:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb4:	0f1b      	lsrs	r3, r3, #28
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]
          break;
 8005ec2:	e03a      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed0:	d108      	bne.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ed2:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eda:	4a1e      	ldr	r2, [pc, #120]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	e007      	b.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eec:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005ef4:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	099b      	lsrs	r3, r3, #6
 8005efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	0f1b      	lsrs	r3, r3, #28
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	617b      	str	r3, [r7, #20]
          break;
 8005f18:	e00f      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f26:	d102      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f2a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005f2c:	e005      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005f30:	617b      	str	r3, [r7, #20]
          break;
 8005f32:	e002      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
          break;
 8005f38:	bf00      	nop
        }
      }
      break;
 8005f3a:	bf00      	nop
    }
  }
  return frequency;
 8005f3c:	697b      	ldr	r3, [r7, #20]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	00bb8000 	.word	0x00bb8000
 8005f54:	017d7840 	.word	0x017d7840
 8005f58:	00f42400 	.word	0x00f42400

08005f5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e270      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d075      	beq.n	8006066 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f7a:	4ba3      	ldr	r3, [pc, #652]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d00c      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f86:	4ba0      	ldr	r3, [pc, #640]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d112      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f92:	4b9d      	ldr	r3, [pc, #628]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f9e:	d10b      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa0:	4b99      	ldr	r3, [pc, #612]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05b      	beq.n	8006064 <HAL_RCC_OscConfig+0x108>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d157      	bne.n	8006064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e24b      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d106      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x74>
 8005fc2:	4b91      	ldr	r3, [pc, #580]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a90      	ldr	r2, [pc, #576]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e01d      	b.n	800600c <HAL_RCC_OscConfig+0xb0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x98>
 8005fda:	4b8b      	ldr	r3, [pc, #556]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a8a      	ldr	r2, [pc, #552]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b88      	ldr	r3, [pc, #544]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a87      	ldr	r2, [pc, #540]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e00b      	b.n	800600c <HAL_RCC_OscConfig+0xb0>
 8005ff4:	4b84      	ldr	r3, [pc, #528]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a83      	ldr	r2, [pc, #524]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	4b81      	ldr	r3, [pc, #516]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a80      	ldr	r2, [pc, #512]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800600a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d013      	beq.n	800603c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fb ff68 	bl	8001ee8 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800601c:	f7fb ff64 	bl	8001ee8 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b64      	cmp	r3, #100	; 0x64
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e210      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	4b76      	ldr	r3, [pc, #472]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0xc0>
 800603a:	e014      	b.n	8006066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fb ff54 	bl	8001ee8 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006044:	f7fb ff50 	bl	8001ee8 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b64      	cmp	r3, #100	; 0x64
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e1fc      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006056:	4b6c      	ldr	r3, [pc, #432]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0xe8>
 8006062:	e000      	b.n	8006066 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d063      	beq.n	800613a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006072:	4b65      	ldr	r3, [pc, #404]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 030c 	and.w	r3, r3, #12
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800607e:	4b62      	ldr	r3, [pc, #392]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006086:	2b08      	cmp	r3, #8
 8006088:	d11c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800608a:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d116      	bne.n	80060c4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006096:	4b5c      	ldr	r3, [pc, #368]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_RCC_OscConfig+0x152>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d001      	beq.n	80060ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e1d0      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ae:	4b56      	ldr	r3, [pc, #344]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4952      	ldr	r1, [pc, #328]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060c2:	e03a      	b.n	800613a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d020      	beq.n	800610e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060cc:	4b4f      	ldr	r3, [pc, #316]	; (800620c <HAL_RCC_OscConfig+0x2b0>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fb ff09 	bl	8001ee8 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060da:	f7fb ff05 	bl	8001ee8 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e1b1      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	4b46      	ldr	r3, [pc, #280]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f8:	4b43      	ldr	r3, [pc, #268]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	4940      	ldr	r1, [pc, #256]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006108:	4313      	orrs	r3, r2
 800610a:	600b      	str	r3, [r1, #0]
 800610c:	e015      	b.n	800613a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610e:	4b3f      	ldr	r3, [pc, #252]	; (800620c <HAL_RCC_OscConfig+0x2b0>)
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7fb fee8 	bl	8001ee8 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800611c:	f7fb fee4 	bl	8001ee8 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e190      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	4b36      	ldr	r3, [pc, #216]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d030      	beq.n	80061a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d016      	beq.n	800617c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800614e:	4b30      	ldr	r3, [pc, #192]	; (8006210 <HAL_RCC_OscConfig+0x2b4>)
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006154:	f7fb fec8 	bl	8001ee8 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800615c:	f7fb fec4 	bl	8001ee8 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e170      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616e:	4b26      	ldr	r3, [pc, #152]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 8006170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f0      	beq.n	800615c <HAL_RCC_OscConfig+0x200>
 800617a:	e015      	b.n	80061a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800617c:	4b24      	ldr	r3, [pc, #144]	; (8006210 <HAL_RCC_OscConfig+0x2b4>)
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006182:	f7fb feb1 	bl	8001ee8 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800618a:	f7fb fead 	bl	8001ee8 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e159      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619c:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 800619e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f0      	bne.n	800618a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80a0 	beq.w	80062f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ba:	4b13      	ldr	r3, [pc, #76]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10f      	bne.n	80061e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	4a0e      	ldr	r2, [pc, #56]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 80061d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d4:	6413      	str	r3, [r2, #64]	; 0x40
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <HAL_RCC_OscConfig+0x2ac>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061de:	60bb      	str	r3, [r7, #8]
 80061e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCC_OscConfig+0x2b8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d121      	bne.n	8006236 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <HAL_RCC_OscConfig+0x2b8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a07      	ldr	r2, [pc, #28]	; (8006214 <HAL_RCC_OscConfig+0x2b8>)
 80061f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061fe:	f7fb fe73 	bl	8001ee8 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006204:	e011      	b.n	800622a <HAL_RCC_OscConfig+0x2ce>
 8006206:	bf00      	nop
 8006208:	40023800 	.word	0x40023800
 800620c:	42470000 	.word	0x42470000
 8006210:	42470e80 	.word	0x42470e80
 8006214:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006218:	f7fb fe66 	bl	8001ee8 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e112      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622a:	4b8b      	ldr	r3, [pc, #556]	; (8006458 <HAL_RCC_OscConfig+0x4fc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f0      	beq.n	8006218 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d106      	bne.n	800624c <HAL_RCC_OscConfig+0x2f0>
 800623e:	4b87      	ldr	r3, [pc, #540]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	4a86      	ldr	r2, [pc, #536]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	6713      	str	r3, [r2, #112]	; 0x70
 800624a:	e01c      	b.n	8006286 <HAL_RCC_OscConfig+0x32a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b05      	cmp	r3, #5
 8006252:	d10c      	bne.n	800626e <HAL_RCC_OscConfig+0x312>
 8006254:	4b81      	ldr	r3, [pc, #516]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	4a80      	ldr	r2, [pc, #512]	; (800645c <HAL_RCC_OscConfig+0x500>)
 800625a:	f043 0304 	orr.w	r3, r3, #4
 800625e:	6713      	str	r3, [r2, #112]	; 0x70
 8006260:	4b7e      	ldr	r3, [pc, #504]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	4a7d      	ldr	r2, [pc, #500]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	6713      	str	r3, [r2, #112]	; 0x70
 800626c:	e00b      	b.n	8006286 <HAL_RCC_OscConfig+0x32a>
 800626e:	4b7b      	ldr	r3, [pc, #492]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a7a      	ldr	r2, [pc, #488]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	4b78      	ldr	r3, [pc, #480]	; (800645c <HAL_RCC_OscConfig+0x500>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	4a77      	ldr	r2, [pc, #476]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d015      	beq.n	80062ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628e:	f7fb fe2b 	bl	8001ee8 <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006294:	e00a      	b.n	80062ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006296:	f7fb fe27 	bl	8001ee8 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e0d1      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ac:	4b6b      	ldr	r3, [pc, #428]	; (800645c <HAL_RCC_OscConfig+0x500>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0ee      	beq.n	8006296 <HAL_RCC_OscConfig+0x33a>
 80062b8:	e014      	b.n	80062e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ba:	f7fb fe15 	bl	8001ee8 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c0:	e00a      	b.n	80062d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fb fe11 	bl	8001ee8 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0bb      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d8:	4b60      	ldr	r3, [pc, #384]	; (800645c <HAL_RCC_OscConfig+0x500>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1ee      	bne.n	80062c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d105      	bne.n	80062f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ea:	4b5c      	ldr	r3, [pc, #368]	; (800645c <HAL_RCC_OscConfig+0x500>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	4a5b      	ldr	r2, [pc, #364]	; (800645c <HAL_RCC_OscConfig+0x500>)
 80062f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80a7 	beq.w	800644e <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006300:	4b56      	ldr	r3, [pc, #344]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 030c 	and.w	r3, r3, #12
 8006308:	2b08      	cmp	r3, #8
 800630a:	d060      	beq.n	80063ce <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d145      	bne.n	80063a0 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006314:	4b52      	ldr	r3, [pc, #328]	; (8006460 <HAL_RCC_OscConfig+0x504>)
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631a:	f7fb fde5 	bl	8001ee8 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006322:	f7fb fde1 	bl	8001ee8 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e08d      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006334:	4b49      	ldr	r3, [pc, #292]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f0      	bne.n	8006322 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	019b      	lsls	r3, r3, #6
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	3b01      	subs	r3, #1
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	061b      	lsls	r3, r3, #24
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	071b      	lsls	r3, r3, #28
 800636c:	493b      	ldr	r1, [pc, #236]	; (800645c <HAL_RCC_OscConfig+0x500>)
 800636e:	4313      	orrs	r3, r2
 8006370:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006372:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <HAL_RCC_OscConfig+0x504>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fb fdb6 	bl	8001ee8 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006380:	f7fb fdb2 	bl	8001ee8 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e05e      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006392:	4b32      	ldr	r3, [pc, #200]	; (800645c <HAL_RCC_OscConfig+0x500>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x424>
 800639e:	e056      	b.n	800644e <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a0:	4b2f      	ldr	r3, [pc, #188]	; (8006460 <HAL_RCC_OscConfig+0x504>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a6:	f7fb fd9f 	bl	8001ee8 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ae:	f7fb fd9b 	bl	8001ee8 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e047      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c0:	4b26      	ldr	r3, [pc, #152]	; (800645c <HAL_RCC_OscConfig+0x500>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f0      	bne.n	80063ae <HAL_RCC_OscConfig+0x452>
 80063cc:	e03f      	b.n	800644e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e03a      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063da:	4b20      	ldr	r3, [pc, #128]	; (800645c <HAL_RCC_OscConfig+0x500>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d030      	beq.n	800644a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d129      	bne.n	800644a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d122      	bne.n	800644a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800640a:	4013      	ands	r3, r2
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006410:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006412:	4293      	cmp	r3, r2
 8006414:	d119      	bne.n	800644a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	3b01      	subs	r3, #1
 8006424:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d10f      	bne.n	800644a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006436:	429a      	cmp	r2, r3
 8006438:	d107      	bne.n	800644a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006446:	429a      	cmp	r2, r3
 8006448:	d001      	beq.n	800644e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40007000 	.word	0x40007000
 800645c:	40023800 	.word	0x40023800
 8006460:	42470060 	.word	0x42470060

08006464 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e022      	b.n	80064bc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d105      	bne.n	800648e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7fb faa3 	bl	80019d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2203      	movs	r2, #3
 8006492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f814 	bl	80064c4 <HAL_SD_InitCard>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e00a      	b.n	80064bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064c4:	b5b0      	push	{r4, r5, r7, lr}
 80064c6:	b08e      	sub	sp, #56	; 0x38
 80064c8:	af04      	add	r7, sp, #16
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80064dc:	2300      	movs	r3, #0
 80064de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80064e0:	2376      	movs	r3, #118	; 0x76
 80064e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681d      	ldr	r5, [r3, #0]
 80064e8:	466c      	mov	r4, sp
 80064ea:	f107 0314 	add.w	r3, r7, #20
 80064ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064f6:	f107 0308 	add.w	r3, r7, #8
 80064fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064fc:	4628      	mov	r0, r5
 80064fe:	f001 fb7b 	bl	8007bf8 <SDIO_Init>
 8006502:	4603      	mov	r3, r0
 8006504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e04c      	b.n	80065ae <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006514:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <HAL_SD_InitCard+0xf4>)
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f001 fba2 	bl	8007c68 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006524:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <HAL_SD_InitCard+0xf4>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fb52 	bl	8006bd4 <SD_PowerON>
 8006530:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e02e      	b.n	80065ae <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa73 	bl	8006a3c <SD_InitCard>
 8006556:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e01b      	b.n	80065ae <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800657e:	4618      	mov	r0, r3
 8006580:	f001 fc05 	bl	8007d8e <SDMMC_CmdBlockLength>
 8006584:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00f      	beq.n	80065ac <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <HAL_SD_InitCard+0xf8>)
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bdb0      	pop	{r4, r5, r7, pc}
 80065b6:	bf00      	nop
 80065b8:	422580a0 	.word	0x422580a0
 80065bc:	004005ff 	.word	0x004005ff

080065c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ce:	0f9b      	lsrs	r3, r3, #30
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065da:	0e9b      	lsrs	r3, r3, #26
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ec:	0e1b      	lsrs	r3, r3, #24
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	b2da      	uxtb	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800660a:	0a1b      	lsrs	r3, r3, #8
 800660c:	b2da      	uxtb	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006616:	b2da      	uxtb	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006620:	0d1b      	lsrs	r3, r3, #20
 8006622:	b29a      	uxth	r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662c:	0c1b      	lsrs	r3, r3, #16
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	b2da      	uxtb	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800663e:	0bdb      	lsrs	r3, r3, #15
 8006640:	b2db      	uxtb	r3, r3
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	b2da      	uxtb	r2, r3
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006650:	0b9b      	lsrs	r3, r3, #14
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	b2da      	uxtb	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006662:	0b5b      	lsrs	r3, r3, #13
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	b2da      	uxtb	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006674:	0b1b      	lsrs	r3, r3, #12
 8006676:	b2db      	uxtb	r3, r3
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	b2da      	uxtb	r2, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2200      	movs	r2, #0
 8006686:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	2b00      	cmp	r3, #0
 800668e:	d163      	bne.n	8006758 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006694:	009a      	lsls	r2, r3, #2
 8006696:	f640 73fc 	movw	r3, #4092	; 0xffc
 800669a:	4013      	ands	r3, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80066a0:	0f92      	lsrs	r2, r2, #30
 80066a2:	431a      	orrs	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ac:	0edb      	lsrs	r3, r3, #27
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066be:	0e1b      	lsrs	r3, r3, #24
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d0:	0d5b      	lsrs	r3, r3, #21
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e2:	0c9b      	lsrs	r3, r3, #18
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f4:	0bdb      	lsrs	r3, r3, #15
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	7e1b      	ldrb	r3, [r3, #24]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	3302      	adds	r3, #2
 8006718:	2201      	movs	r2, #1
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006722:	fb02 f203 	mul.w	r2, r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	7a1b      	ldrb	r3, [r3, #8]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	2201      	movs	r2, #1
 8006736:	409a      	lsls	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006744:	0a52      	lsrs	r2, r2, #9
 8006746:	fb02 f203 	mul.w	r2, r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006754:	661a      	str	r2, [r3, #96]	; 0x60
 8006756:	e031      	b.n	80067bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675c:	2b01      	cmp	r3, #1
 800675e:	d11d      	bne.n	800679c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006764:	041b      	lsls	r3, r3, #16
 8006766:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	431a      	orrs	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	3301      	adds	r3, #1
 800677c:	029a      	lsls	r2, r3, #10
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006790:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	661a      	str	r2, [r3, #96]	; 0x60
 800679a:	e00f      	b.n	80067bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a58      	ldr	r2, [pc, #352]	; (8006904 <HAL_SD_GetCardCSD+0x344>)
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e09d      	b.n	80068f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c0:	0b9b      	lsrs	r3, r3, #14
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d2:	09db      	lsrs	r3, r3, #7
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f4:	0fdb      	lsrs	r3, r3, #31
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006800:	0f5b      	lsrs	r3, r3, #29
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	b2da      	uxtb	r2, r3
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	0e9b      	lsrs	r3, r3, #26
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	b2da      	uxtb	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006824:	0d9b      	lsrs	r3, r3, #22
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	b2da      	uxtb	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	0d5b      	lsrs	r3, r3, #21
 8006838:	b2db      	uxtb	r3, r3
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	b2da      	uxtb	r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	0c1b      	lsrs	r3, r3, #16
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	b2da      	uxtb	r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	0bdb      	lsrs	r3, r3, #15
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	b2da      	uxtb	r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	0b9b      	lsrs	r3, r3, #14
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	b2da      	uxtb	r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	0b5b      	lsrs	r3, r3, #13
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	b2da      	uxtb	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	0b1b      	lsrs	r3, r3, #12
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b6:	0a9b      	lsrs	r3, r3, #10
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	0a1b      	lsrs	r3, r3, #8
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	004005ff 	.word	0x004005ff

08006908 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006908:	b5b0      	push	{r4, r5, r7, lr}
 800690a:	b08e      	sub	sp, #56	; 0x38
 800690c:	af04      	add	r7, sp, #16
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2203      	movs	r2, #3
 800691c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006924:	2b03      	cmp	r3, #3
 8006926:	d02e      	beq.n	8006986 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692e:	d106      	bne.n	800693e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	639a      	str	r2, [r3, #56]	; 0x38
 800693c:	e029      	b.n	8006992 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006944:	d10a      	bne.n	800695c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f9d2 	bl	8006cf0 <SD_WideBus_Enable>
 800694c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
 800695a:	e01a      	b.n	8006992 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa0f 	bl	8006d86 <SD_WideBus_Disable>
 8006968:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	639a      	str	r2, [r3, #56]	; 0x38
 8006976:	e00c      	b.n	8006992 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	639a      	str	r2, [r3, #56]	; 0x38
 8006984:	e005      	b.n	8006992 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00b      	beq.n	80069b2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <HAL_SD_ConfigWideBusOperation+0x130>)
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069b0:	e01f      	b.n	80069f2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681d      	ldr	r5, [r3, #0]
 80069d8:	466c      	mov	r4, sp
 80069da:	f107 0314 	add.w	r3, r7, #20
 80069de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80069e6:	f107 0308 	add.w	r3, r7, #8
 80069ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069ec:	4628      	mov	r0, r5
 80069ee:	f001 f903 	bl	8007bf8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 f9c7 	bl	8007d8e <SDMMC_CmdBlockLength>
 8006a00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00c      	beq.n	8006a22 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a0a      	ldr	r2, [pc, #40]	; (8006a38 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3728      	adds	r7, #40	; 0x28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bdb0      	pop	{r4, r5, r7, pc}
 8006a36:	bf00      	nop
 8006a38:	004005ff 	.word	0x004005ff

08006a3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a3c:	b5b0      	push	{r4, r5, r7, lr}
 8006a3e:	b094      	sub	sp, #80	; 0x50
 8006a40:	af04      	add	r7, sp, #16
 8006a42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006a44:	2301      	movs	r3, #1
 8006a46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f91a 	bl	8007c86 <SDIO_GetPowerState>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a5c:	e0b6      	b.n	8006bcc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d02f      	beq.n	8006ac6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 fa99 	bl	8007fa2 <SDMMC_CmdSendCID>
 8006a70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <SD_InitCard+0x40>
    {
      return errorstate;
 8006a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7a:	e0a7      	b.n	8006bcc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 f944 	bl	8007d10 <SDIO_GetResponse>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2104      	movs	r1, #4
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f93b 	bl	8007d10 <SDIO_GetResponse>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2108      	movs	r1, #8
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f932 	bl	8007d10 <SDIO_GetResponse>
 8006aac:	4602      	mov	r2, r0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	210c      	movs	r1, #12
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 f929 	bl	8007d10 <SDIO_GetResponse>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d00d      	beq.n	8006aea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f107 020e 	add.w	r2, r7, #14
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 fa9f 	bl	800801c <SDMMC_CmdSetRelAdd>
 8006ade:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <SD_InitCard+0xae>
    {
      return errorstate;
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae8:	e070      	b.n	8006bcc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d036      	beq.n	8006b60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006af2:	89fb      	ldrh	r3, [r7, #14]
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f001 fa69 	bl	8007fde <SDMMC_CmdSendCSD>
 8006b0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b16:	e059      	b.n	8006bcc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 f8f6 	bl	8007d10 <SDIO_GetResponse>
 8006b24:	4602      	mov	r2, r0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2104      	movs	r1, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 f8ed 	bl	8007d10 <SDIO_GetResponse>
 8006b36:	4602      	mov	r2, r0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2108      	movs	r1, #8
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 f8e4 	bl	8007d10 <SDIO_GetResponse>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	210c      	movs	r1, #12
 8006b54:	4618      	mov	r0, r3
 8006b56:	f001 f8db 	bl	8007d10 <SDIO_GetResponse>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2104      	movs	r1, #4
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 f8d2 	bl	8007d10 <SDIO_GetResponse>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	0d1a      	lsrs	r2, r3, #20
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006b74:	f107 0310 	add.w	r3, r7, #16
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff fd20 	bl	80065c0 <HAL_SD_GetCardCSD>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b8a:	e01f      	b.n	8006bcc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	461a      	mov	r2, r3
 8006b98:	f04f 0300 	mov.w	r3, #0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	f001 f918 	bl	8007dd2 <SDMMC_CmdSelDesel>
 8006ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <SD_InitCard+0x172>
  {
    return errorstate;
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	e00e      	b.n	8006bcc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681d      	ldr	r5, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	466c      	mov	r4, sp
 8006bb6:	f103 0210 	add.w	r2, r3, #16
 8006bba:	ca07      	ldmia	r2, {r0, r1, r2}
 8006bbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f001 f817 	bl	8007bf8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3740      	adds	r7, #64	; 0x40
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bdb0      	pop	{r4, r5, r7, pc}

08006bd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	2300      	movs	r3, #0
 8006be6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 f913 	bl	8007e18 <SDMMC_CmdGoIdleState>
 8006bf2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <SD_PowerON+0x2a>
  {
    return errorstate;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	e072      	b.n	8006ce4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 f926 	bl	8007e54 <SDMMC_CmdOperCond>
 8006c08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00d      	beq.n	8006c2c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 f8fc 	bl	8007e18 <SDMMC_CmdGoIdleState>
 8006c20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e05b      	b.n	8006ce4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d137      	bne.n	8006caa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 f926 	bl	8007e92 <SDMMC_CmdAppCommand>
 8006c46:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d02d      	beq.n	8006caa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c52:	e047      	b.n	8006ce4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 f919 	bl	8007e92 <SDMMC_CmdAppCommand>
 8006c60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <SD_PowerON+0x98>
    {
      return errorstate;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	e03b      	b.n	8006ce4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	491e      	ldr	r1, [pc, #120]	; (8006cec <SD_PowerON+0x118>)
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f92f 	bl	8007ed6 <SDMMC_CmdAppOperCommand>
 8006c78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c84:	e02e      	b.n	8006ce4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 f83f 	bl	8007d10 <SDIO_GetResponse>
 8006c92:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	0fdb      	lsrs	r3, r3, #31
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <SD_PowerON+0xcc>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <SD_PowerON+0xce>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	613b      	str	r3, [r7, #16]

    count++;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d802      	bhi.n	8006cba <SD_PowerON+0xe6>
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0cc      	beq.n	8006c54 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d902      	bls.n	8006cca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cc8:	e00c      	b.n	8006ce4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	645a      	str	r2, [r3, #68]	; 0x44
 8006cda:	e002      	b.n	8006ce2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	c1100000 	.word	0xc1100000

08006cf0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 f802 	bl	8007d10 <SDIO_GetResponse>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d16:	d102      	bne.n	8006d1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d1c:	e02f      	b.n	8006d7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d1e:	f107 030c 	add.w	r3, r7, #12
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f879 	bl	8006e1c <SD_FindSCR>
 8006d2a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	e023      	b.n	8006d7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01c      	beq.n	8006d7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f001 f8a0 	bl	8007e92 <SDMMC_CmdAppCommand>
 8006d52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	e00f      	b.n	8006d7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f8d9 	bl	8007f1c <SDMMC_CmdBusWidth>
 8006d6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	e003      	b.n	8006d7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e001      	b.n	8006d7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b086      	sub	sp, #24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 ffb7 	bl	8007d10 <SDIO_GetResponse>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dac:	d102      	bne.n	8006db4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006db2:	e02f      	b.n	8006e14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f82e 	bl	8006e1c <SD_FindSCR>
 8006dc0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	e023      	b.n	8006e14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01c      	beq.n	8006e10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f001 f855 	bl	8007e92 <SDMMC_CmdAppCommand>
 8006de8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	e00f      	b.n	8006e14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f88e 	bl	8007f1c <SDMMC_CmdBusWidth>
 8006e00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	e003      	b.n	8006e14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e001      	b.n	8006e14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b08f      	sub	sp, #60	; 0x3c
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e26:	f7fb f85f 	bl	8001ee8 <HAL_GetTick>
 8006e2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006e30:	2300      	movs	r3, #0
 8006e32:	60bb      	str	r3, [r7, #8]
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2108      	movs	r1, #8
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 ffa3 	bl	8007d8e <SDMMC_CmdBlockLength>
 8006e48:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	e0b2      	b.n	8006fba <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5c:	041b      	lsls	r3, r3, #16
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f001 f816 	bl	8007e92 <SDMMC_CmdAppCommand>
 8006e66:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	e0a3      	b.n	8006fba <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295
 8006e76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006e78:	2308      	movs	r3, #8
 8006e7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006e7c:	2330      	movs	r3, #48	; 0x30
 8006e7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006e80:	2302      	movs	r3, #2
 8006e82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f107 0210 	add.w	r2, r7, #16
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 ff4d 	bl	8007d36 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 f85d 	bl	8007f60 <SDMMC_CmdSendSCR>
 8006ea6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d02a      	beq.n	8006f04 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	e083      	b.n	8006fba <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00f      	beq.n	8006ee0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	f107 0208 	add.w	r2, r7, #8
 8006ecc:	18d4      	adds	r4, r2, r3
 8006ece:	4608      	mov	r0, r1
 8006ed0:	f000 febd 	bl	8007c4e <SDIO_ReadFIFO>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	6023      	str	r3, [r4, #0]
      index++;
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	3301      	adds	r3, #1
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ede:	e006      	b.n	8006eee <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d012      	beq.n	8006f14 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006eee:	f7fa fffb 	bl	8001ee8 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d102      	bne.n	8006f04 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006efe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f02:	e05a      	b.n	8006fba <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0cf      	beq.n	8006eb2 <SD_FindSCR+0x96>
 8006f12:	e000      	b.n	8006f16 <SD_FindSCR+0xfa>
      break;
 8006f14:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	e044      	b.n	8006fba <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d005      	beq.n	8006f4a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2202      	movs	r2, #2
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f46:	2302      	movs	r3, #2
 8006f48:	e037      	b.n	8006fba <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006f60:	2320      	movs	r3, #32
 8006f62:	e02a      	b.n	8006fba <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f6c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	061a      	lsls	r2, r3, #24
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f7a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	0e1b      	lsrs	r3, r3, #24
 8006f8a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	601a      	str	r2, [r3, #0]
    scr++;
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	3304      	adds	r3, #4
 8006f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	061a      	lsls	r2, r3, #24
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fa2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	0a1b      	lsrs	r3, r3, #8
 8006fa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006fac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	0e1b      	lsrs	r3, r3, #24
 8006fb2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	373c      	adds	r7, #60	; 0x3c
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd90      	pop	{r4, r7, pc}

08006fc2 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e034      	b.n	8007042 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7fa fe47 	bl	8001c80 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	f000 fcf7 	bl	80079f0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	461a      	mov	r2, r3
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	f000 fd5f 	bl	8007ad0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6858      	ldr	r0, [r3, #4]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	f000 fdaa 	bl	8007b78 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	6892      	ldr	r2, [r2, #8]
 800702c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	6892      	ldr	r2, [r2, #8]
 8007038:	f041 0101 	orr.w	r1, r1, #1
 800703c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e041      	b.n	80070e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f839 	bl	80070e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f000 f9d7 	bl	800743c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d001      	beq.n	8007114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e04e      	b.n	80071b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a23      	ldr	r2, [pc, #140]	; (80071c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d022      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x80>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713e:	d01d      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x80>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1f      	ldr	r2, [pc, #124]	; (80071c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d018      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x80>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1e      	ldr	r2, [pc, #120]	; (80071c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d013      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x80>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1c      	ldr	r2, [pc, #112]	; (80071cc <HAL_TIM_Base_Start_IT+0xd0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00e      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x80>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d009      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x80>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a19      	ldr	r2, [pc, #100]	; (80071d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <HAL_TIM_Base_Start_IT+0x80>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a18      	ldr	r2, [pc, #96]	; (80071d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d111      	bne.n	80071a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b06      	cmp	r3, #6
 800718c:	d010      	beq.n	80071b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0201 	orr.w	r2, r2, #1
 800719c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719e:	e007      	b.n	80071b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40010000 	.word	0x40010000
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40000c00 	.word	0x40000c00
 80071d0:	40010400 	.word	0x40010400
 80071d4:	40014000 	.word	0x40014000
 80071d8:	40001800 	.word	0x40001800

080071dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d122      	bne.n	8007238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d11b      	bne.n	8007238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0202 	mvn.w	r2, #2
 8007208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8ee 	bl	8007400 <HAL_TIM_IC_CaptureCallback>
 8007224:	e005      	b.n	8007232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8e0 	bl	80073ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f8f1 	bl	8007414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b04      	cmp	r3, #4
 8007244:	d122      	bne.n	800728c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b04      	cmp	r3, #4
 8007252:	d11b      	bne.n	800728c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0204 	mvn.w	r2, #4
 800725c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f8c4 	bl	8007400 <HAL_TIM_IC_CaptureCallback>
 8007278:	e005      	b.n	8007286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f8b6 	bl	80073ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f8c7 	bl	8007414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b08      	cmp	r3, #8
 8007298:	d122      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d11b      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0208 	mvn.w	r2, #8
 80072b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2204      	movs	r2, #4
 80072b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f89a 	bl	8007400 <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f88c 	bl	80073ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f89d 	bl	8007414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d122      	bne.n	8007334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d11b      	bne.n	8007334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0210 	mvn.w	r2, #16
 8007304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2208      	movs	r2, #8
 800730a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f870 	bl	8007400 <HAL_TIM_IC_CaptureCallback>
 8007320:	e005      	b.n	800732e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f862 	bl	80073ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f873 	bl	8007414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b01      	cmp	r3, #1
 8007340:	d10e      	bne.n	8007360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b01      	cmp	r3, #1
 800734e:	d107      	bne.n	8007360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0201 	mvn.w	r2, #1
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7f9 ff9c 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736a:	2b80      	cmp	r3, #128	; 0x80
 800736c:	d10e      	bne.n	800738c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007378:	2b80      	cmp	r3, #128	; 0x80
 800737a:	d107      	bne.n	800738c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f902 	bl	8007590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d10e      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a4:	2b40      	cmp	r3, #64	; 0x40
 80073a6:	d107      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f838 	bl	8007428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d10e      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d107      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0220 	mvn.w	r2, #32
 80073dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8cc 	bl	800757c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a40      	ldr	r2, [pc, #256]	; (8007550 <TIM_Base_SetConfig+0x114>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d013      	beq.n	800747c <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745a:	d00f      	beq.n	800747c <TIM_Base_SetConfig+0x40>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a3d      	ldr	r2, [pc, #244]	; (8007554 <TIM_Base_SetConfig+0x118>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00b      	beq.n	800747c <TIM_Base_SetConfig+0x40>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a3c      	ldr	r2, [pc, #240]	; (8007558 <TIM_Base_SetConfig+0x11c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d007      	beq.n	800747c <TIM_Base_SetConfig+0x40>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a3b      	ldr	r2, [pc, #236]	; (800755c <TIM_Base_SetConfig+0x120>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d003      	beq.n	800747c <TIM_Base_SetConfig+0x40>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a3a      	ldr	r2, [pc, #232]	; (8007560 <TIM_Base_SetConfig+0x124>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d108      	bne.n	800748e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a2f      	ldr	r2, [pc, #188]	; (8007550 <TIM_Base_SetConfig+0x114>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d02b      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749c:	d027      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2c      	ldr	r2, [pc, #176]	; (8007554 <TIM_Base_SetConfig+0x118>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d023      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2b      	ldr	r2, [pc, #172]	; (8007558 <TIM_Base_SetConfig+0x11c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01f      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2a      	ldr	r2, [pc, #168]	; (800755c <TIM_Base_SetConfig+0x120>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01b      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a29      	ldr	r2, [pc, #164]	; (8007560 <TIM_Base_SetConfig+0x124>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d017      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a28      	ldr	r2, [pc, #160]	; (8007564 <TIM_Base_SetConfig+0x128>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a27      	ldr	r2, [pc, #156]	; (8007568 <TIM_Base_SetConfig+0x12c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00f      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a26      	ldr	r2, [pc, #152]	; (800756c <TIM_Base_SetConfig+0x130>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00b      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a25      	ldr	r2, [pc, #148]	; (8007570 <TIM_Base_SetConfig+0x134>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a24      	ldr	r2, [pc, #144]	; (8007574 <TIM_Base_SetConfig+0x138>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a23      	ldr	r2, [pc, #140]	; (8007578 <TIM_Base_SetConfig+0x13c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d108      	bne.n	8007500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a0a      	ldr	r2, [pc, #40]	; (8007550 <TIM_Base_SetConfig+0x114>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d003      	beq.n	8007534 <TIM_Base_SetConfig+0xf8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <TIM_Base_SetConfig+0x124>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d103      	bne.n	800753c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	615a      	str	r2, [r3, #20]
}
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40010000 	.word	0x40010000
 8007554:	40000400 	.word	0x40000400
 8007558:	40000800 	.word	0x40000800
 800755c:	40000c00 	.word	0x40000c00
 8007560:	40010400 	.word	0x40010400
 8007564:	40014000 	.word	0x40014000
 8007568:	40014400 	.word	0x40014400
 800756c:	40014800 	.word	0x40014800
 8007570:	40001800 	.word	0x40001800
 8007574:	40001c00 	.word	0x40001c00
 8007578:	40002000 	.word	0x40002000

0800757c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e03f      	b.n	8007636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa fa6a 	bl	8001aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2224      	movs	r2, #36	; 0x24
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f829 	bl	8007640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695a      	ldr	r2, [r3, #20]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800760c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800761c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	b09f      	sub	sp, #124	; 0x7c
 8007646:	af00      	add	r7, sp, #0
 8007648:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800764a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007656:	68d9      	ldr	r1, [r3, #12]
 8007658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	ea40 0301 	orr.w	r3, r0, r1
 8007660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	431a      	orrs	r2, r3
 800766c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	431a      	orrs	r2, r3
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	4313      	orrs	r3, r2
 8007678:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800767a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007684:	f021 010c 	bic.w	r1, r1, #12
 8007688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800768e:	430b      	orrs	r3, r1
 8007690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800769c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769e:	6999      	ldr	r1, [r3, #24]
 80076a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	ea40 0301 	orr.w	r3, r0, r1
 80076a8:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80076aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b6a      	ldr	r3, [pc, #424]	; (8007858 <UART_SetConfig+0x218>)
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d00e      	beq.n	80076d2 <UART_SetConfig+0x92>
 80076b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	4b68      	ldr	r3, [pc, #416]	; (800785c <UART_SetConfig+0x21c>)
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d009      	beq.n	80076d2 <UART_SetConfig+0x92>
 80076be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4b67      	ldr	r3, [pc, #412]	; (8007860 <UART_SetConfig+0x220>)
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d004      	beq.n	80076d2 <UART_SetConfig+0x92>
 80076c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4b65      	ldr	r3, [pc, #404]	; (8007864 <UART_SetConfig+0x224>)
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d103      	bne.n	80076da <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076d2:	f7fe f80d 	bl	80056f0 <HAL_RCC_GetPCLK2Freq>
 80076d6:	6778      	str	r0, [r7, #116]	; 0x74
 80076d8:	e002      	b.n	80076e0 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076da:	f7fd fff5 	bl	80056c8 <HAL_RCC_GetPCLK1Freq>
 80076de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e8:	f040 80c0 	bne.w	800786c <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ee:	461c      	mov	r4, r3
 80076f0:	f04f 0500 	mov.w	r5, #0
 80076f4:	4622      	mov	r2, r4
 80076f6:	462b      	mov	r3, r5
 80076f8:	1891      	adds	r1, r2, r2
 80076fa:	6439      	str	r1, [r7, #64]	; 0x40
 80076fc:	415b      	adcs	r3, r3
 80076fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007700:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007704:	1912      	adds	r2, r2, r4
 8007706:	eb45 0303 	adc.w	r3, r5, r3
 800770a:	f04f 0000 	mov.w	r0, #0
 800770e:	f04f 0100 	mov.w	r1, #0
 8007712:	00d9      	lsls	r1, r3, #3
 8007714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007718:	00d0      	lsls	r0, r2, #3
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	1911      	adds	r1, r2, r4
 8007720:	6639      	str	r1, [r7, #96]	; 0x60
 8007722:	416b      	adcs	r3, r5
 8007724:	667b      	str	r3, [r7, #100]	; 0x64
 8007726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	461a      	mov	r2, r3
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	1891      	adds	r1, r2, r2
 8007732:	63b9      	str	r1, [r7, #56]	; 0x38
 8007734:	415b      	adcs	r3, r3
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800773c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007740:	f7f8 fd6e 	bl	8000220 <__aeabi_uldivmod>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4b47      	ldr	r3, [pc, #284]	; (8007868 <UART_SetConfig+0x228>)
 800774a:	fba3 2302 	umull	r2, r3, r3, r2
 800774e:	095b      	lsrs	r3, r3, #5
 8007750:	011e      	lsls	r6, r3, #4
 8007752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007754:	461c      	mov	r4, r3
 8007756:	f04f 0500 	mov.w	r5, #0
 800775a:	4622      	mov	r2, r4
 800775c:	462b      	mov	r3, r5
 800775e:	1891      	adds	r1, r2, r2
 8007760:	6339      	str	r1, [r7, #48]	; 0x30
 8007762:	415b      	adcs	r3, r3
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
 8007766:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800776a:	1912      	adds	r2, r2, r4
 800776c:	eb45 0303 	adc.w	r3, r5, r3
 8007770:	f04f 0000 	mov.w	r0, #0
 8007774:	f04f 0100 	mov.w	r1, #0
 8007778:	00d9      	lsls	r1, r3, #3
 800777a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800777e:	00d0      	lsls	r0, r2, #3
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	1911      	adds	r1, r2, r4
 8007786:	65b9      	str	r1, [r7, #88]	; 0x58
 8007788:	416b      	adcs	r3, r5
 800778a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800778c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	461a      	mov	r2, r3
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	1891      	adds	r1, r2, r2
 8007798:	62b9      	str	r1, [r7, #40]	; 0x28
 800779a:	415b      	adcs	r3, r3
 800779c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800779e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80077a6:	f7f8 fd3b 	bl	8000220 <__aeabi_uldivmod>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4b2e      	ldr	r3, [pc, #184]	; (8007868 <UART_SetConfig+0x228>)
 80077b0:	fba3 1302 	umull	r1, r3, r3, r2
 80077b4:	095b      	lsrs	r3, r3, #5
 80077b6:	2164      	movs	r1, #100	; 0x64
 80077b8:	fb01 f303 	mul.w	r3, r1, r3
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	3332      	adds	r3, #50	; 0x32
 80077c2:	4a29      	ldr	r2, [pc, #164]	; (8007868 <UART_SetConfig+0x228>)
 80077c4:	fba2 2303 	umull	r2, r3, r2, r3
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077d0:	441e      	add	r6, r3
 80077d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077d4:	4618      	mov	r0, r3
 80077d6:	f04f 0100 	mov.w	r1, #0
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	1894      	adds	r4, r2, r2
 80077e0:	623c      	str	r4, [r7, #32]
 80077e2:	415b      	adcs	r3, r3
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
 80077e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ea:	1812      	adds	r2, r2, r0
 80077ec:	eb41 0303 	adc.w	r3, r1, r3
 80077f0:	f04f 0400 	mov.w	r4, #0
 80077f4:	f04f 0500 	mov.w	r5, #0
 80077f8:	00dd      	lsls	r5, r3, #3
 80077fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077fe:	00d4      	lsls	r4, r2, #3
 8007800:	4622      	mov	r2, r4
 8007802:	462b      	mov	r3, r5
 8007804:	1814      	adds	r4, r2, r0
 8007806:	653c      	str	r4, [r7, #80]	; 0x50
 8007808:	414b      	adcs	r3, r1
 800780a:	657b      	str	r3, [r7, #84]	; 0x54
 800780c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	461a      	mov	r2, r3
 8007812:	f04f 0300 	mov.w	r3, #0
 8007816:	1891      	adds	r1, r2, r2
 8007818:	61b9      	str	r1, [r7, #24]
 800781a:	415b      	adcs	r3, r3
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007822:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007826:	f7f8 fcfb 	bl	8000220 <__aeabi_uldivmod>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <UART_SetConfig+0x228>)
 8007830:	fba3 1302 	umull	r1, r3, r3, r2
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	2164      	movs	r1, #100	; 0x64
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	3332      	adds	r3, #50	; 0x32
 8007842:	4a09      	ldr	r2, [pc, #36]	; (8007868 <UART_SetConfig+0x228>)
 8007844:	fba2 2303 	umull	r2, r3, r2, r3
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	f003 0207 	and.w	r2, r3, #7
 800784e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4432      	add	r2, r6
 8007854:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007856:	e0c3      	b.n	80079e0 <UART_SetConfig+0x3a0>
 8007858:	40011000 	.word	0x40011000
 800785c:	40011400 	.word	0x40011400
 8007860:	40011800 	.word	0x40011800
 8007864:	40011c00 	.word	0x40011c00
 8007868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800786c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786e:	461c      	mov	r4, r3
 8007870:	f04f 0500 	mov.w	r5, #0
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	1891      	adds	r1, r2, r2
 800787a:	6139      	str	r1, [r7, #16]
 800787c:	415b      	adcs	r3, r3
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007884:	1912      	adds	r2, r2, r4
 8007886:	eb45 0303 	adc.w	r3, r5, r3
 800788a:	f04f 0000 	mov.w	r0, #0
 800788e:	f04f 0100 	mov.w	r1, #0
 8007892:	00d9      	lsls	r1, r3, #3
 8007894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007898:	00d0      	lsls	r0, r2, #3
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	eb12 0804 	adds.w	r8, r2, r4
 80078a2:	eb43 0905 	adc.w	r9, r3, r5
 80078a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f04f 0100 	mov.w	r1, #0
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	008b      	lsls	r3, r1, #2
 80078ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078be:	0082      	lsls	r2, r0, #2
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f8 fcac 	bl	8000220 <__aeabi_uldivmod>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4b47      	ldr	r3, [pc, #284]	; (80079ec <UART_SetConfig+0x3ac>)
 80078ce:	fba3 2302 	umull	r2, r3, r3, r2
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	011e      	lsls	r6, r3, #4
 80078d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d8:	4618      	mov	r0, r3
 80078da:	f04f 0100 	mov.w	r1, #0
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	1894      	adds	r4, r2, r2
 80078e4:	60bc      	str	r4, [r7, #8]
 80078e6:	415b      	adcs	r3, r3
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ee:	1812      	adds	r2, r2, r0
 80078f0:	eb41 0303 	adc.w	r3, r1, r3
 80078f4:	f04f 0400 	mov.w	r4, #0
 80078f8:	f04f 0500 	mov.w	r5, #0
 80078fc:	00dd      	lsls	r5, r3, #3
 80078fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007902:	00d4      	lsls	r4, r2, #3
 8007904:	4622      	mov	r2, r4
 8007906:	462b      	mov	r3, r5
 8007908:	1814      	adds	r4, r2, r0
 800790a:	64bc      	str	r4, [r7, #72]	; 0x48
 800790c:	414b      	adcs	r3, r1
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4618      	mov	r0, r3
 8007916:	f04f 0100 	mov.w	r1, #0
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	008b      	lsls	r3, r1, #2
 8007924:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007928:	0082      	lsls	r2, r0, #2
 800792a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800792e:	f7f8 fc77 	bl	8000220 <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4b2d      	ldr	r3, [pc, #180]	; (80079ec <UART_SetConfig+0x3ac>)
 8007938:	fba3 1302 	umull	r1, r3, r3, r2
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	2164      	movs	r1, #100	; 0x64
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	3332      	adds	r3, #50	; 0x32
 800794a:	4a28      	ldr	r2, [pc, #160]	; (80079ec <UART_SetConfig+0x3ac>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007956:	441e      	add	r6, r3
 8007958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800795a:	4618      	mov	r0, r3
 800795c:	f04f 0100 	mov.w	r1, #0
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	1894      	adds	r4, r2, r2
 8007966:	603c      	str	r4, [r7, #0]
 8007968:	415b      	adcs	r3, r3
 800796a:	607b      	str	r3, [r7, #4]
 800796c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007970:	1812      	adds	r2, r2, r0
 8007972:	eb41 0303 	adc.w	r3, r1, r3
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	f04f 0500 	mov.w	r5, #0
 800797e:	00dd      	lsls	r5, r3, #3
 8007980:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007984:	00d4      	lsls	r4, r2, #3
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	eb12 0a00 	adds.w	sl, r2, r0
 800798e:	eb43 0b01 	adc.w	fp, r3, r1
 8007992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	4618      	mov	r0, r3
 8007998:	f04f 0100 	mov.w	r1, #0
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	008b      	lsls	r3, r1, #2
 80079a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079aa:	0082      	lsls	r2, r0, #2
 80079ac:	4650      	mov	r0, sl
 80079ae:	4659      	mov	r1, fp
 80079b0:	f7f8 fc36 	bl	8000220 <__aeabi_uldivmod>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <UART_SetConfig+0x3ac>)
 80079ba:	fba3 1302 	umull	r1, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2164      	movs	r1, #100	; 0x64
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	3332      	adds	r3, #50	; 0x32
 80079cc:	4a07      	ldr	r2, [pc, #28]	; (80079ec <UART_SetConfig+0x3ac>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	f003 020f 	and.w	r2, r3, #15
 80079d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4432      	add	r2, r6
 80079de:	609a      	str	r2, [r3, #8]
}
 80079e0:	bf00      	nop
 80079e2:	377c      	adds	r7, #124	; 0x7c
 80079e4:	46bd      	mov	sp, r7
 80079e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ea:	bf00      	nop
 80079ec:	51eb851f 	.word	0x51eb851f

080079f0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a08:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4b2f      	ldr	r3, [pc, #188]	; (8007acc <FSMC_NORSRAM_Init+0xdc>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007a1a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007a20:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007a26:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007a2c:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8007a32:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007a38:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007a3e:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007a44:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007a4a:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8007a50:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8007a56:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007a5c:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8007a62:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b08      	cmp	r3, #8
 8007a70:	d103      	bne.n	8007a7a <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a78:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68f9      	ldr	r1, [r7, #12]
 8007a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a8e:	d10a      	bne.n	8007aa6 <FSMC_NORSRAM_Init+0xb6>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d006      	beq.n	8007aa6 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d006      	beq.n	8007abc <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	ffc00480 	.word	0xffc00480

08007ad0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007af2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007afe:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007b06:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007b0e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007b18:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	3b02      	subs	r3, #2
 8007b20:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007b22:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6979      	ldr	r1, [r7, #20]
 8007b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b48:	d10e      	bne.n	8007b68 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b52:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	051b      	lsls	r3, r3, #20
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
	...

08007b78 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b90:	d122      	bne.n	8007bd8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007bae:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007bb6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007bbe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007bc4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6979      	ldr	r1, [r7, #20]
 8007bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007bd6:	e005      	b.n	8007be4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	cff00000 	.word	0xcff00000

08007bf8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	f107 001c 	add.w	r0, r7, #28
 8007c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007c0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007c10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007c12:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007c16:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007c1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007c1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007c22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007c32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	b004      	add	sp, #16
 8007c4c:	4770      	bx	lr

08007c4e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2203      	movs	r2, #3
 8007c74:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007c76:	2002      	movs	r0, #2
 8007c78:	f7fa f942 	bl	8001f00 <HAL_Delay>
  
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0303 	and.w	r3, r3, #3
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007cc0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007cc6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007ccc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007cdc:	f023 030f 	bic.w	r3, r3, #15
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	b2db      	uxtb	r3, r3
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3314      	adds	r3, #20
 8007d1e:	461a      	mov	r2, r3
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	4413      	add	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
}  
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d5c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007d62:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007d68:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0

}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b088      	sub	sp, #32
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007da0:	2340      	movs	r3, #64	; 0x40
 8007da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007da4:	2300      	movs	r3, #0
 8007da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dae:	f107 0308 	add.w	r3, r7, #8
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff ff74 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbe:	2110      	movs	r1, #16
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f979 	bl	80080b8 <SDMMC_GetCmdResp1>
 8007dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dc8:	69fb      	ldr	r3, [r7, #28]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b08a      	sub	sp, #40	; 0x28
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007de2:	2307      	movs	r3, #7
 8007de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007de6:	2340      	movs	r3, #64	; 0x40
 8007de8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df2:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	4619      	mov	r1, r3
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff ff51 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e04:	2107      	movs	r1, #7
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f956 	bl	80080b8 <SDMMC_GetCmdResp1>
 8007e0c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3728      	adds	r7, #40	; 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e36:	f107 0308 	add.w	r3, r7, #8
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff ff30 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f90c 	bl	8008060 <SDMMC_GetCmdError>
 8007e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007e5c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007e62:	2308      	movs	r3, #8
 8007e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e66:	2340      	movs	r3, #64	; 0x40
 8007e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e74:	f107 0308 	add.w	r3, r7, #8
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff ff11 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fb03 	bl	800848c <SDMMC_GetCmdResp7>
 8007e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e88:	69fb      	ldr	r3, [r7, #28]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b088      	sub	sp, #32
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007ea0:	2337      	movs	r3, #55	; 0x37
 8007ea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ea4:	2340      	movs	r3, #64	; 0x40
 8007ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff fef2 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec2:	2137      	movs	r1, #55	; 0x37
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f8f7 	bl	80080b8 <SDMMC_GetCmdResp1>
 8007eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ecc:	69fb      	ldr	r3, [r7, #28]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3720      	adds	r7, #32
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b088      	sub	sp, #32
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007eec:	2329      	movs	r3, #41	; 0x29
 8007eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ef0:	2340      	movs	r3, #64	; 0x40
 8007ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007efc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007efe:	f107 0308 	add.w	r3, r7, #8
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fecc 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa0a 	bl	8008324 <SDMMC_GetCmdResp3>
 8007f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f12:	69fb      	ldr	r3, [r7, #28]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007f2a:	2306      	movs	r3, #6
 8007f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f2e:	2340      	movs	r3, #64	; 0x40
 8007f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f3c:	f107 0308 	add.w	r3, r7, #8
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fead 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f4c:	2106      	movs	r1, #6
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8b2 	bl	80080b8 <SDMMC_GetCmdResp1>
 8007f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f56:	69fb      	ldr	r3, [r7, #28]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007f6c:	2333      	movs	r3, #51	; 0x33
 8007f6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f70:	2340      	movs	r3, #64	; 0x40
 8007f72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f7e:	f107 0308 	add.w	r3, r7, #8
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff fe8c 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8e:	2133      	movs	r1, #51	; 0x33
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f891 	bl	80080b8 <SDMMC_GetCmdResp1>
 8007f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f98:	69fb      	ldr	r3, [r7, #28]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b088      	sub	sp, #32
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007fae:	2302      	movs	r3, #2
 8007fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007fb2:	23c0      	movs	r3, #192	; 0xc0
 8007fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fc0:	f107 0308 	add.w	r3, r7, #8
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7ff fe6b 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f961 	bl	8008294 <SDMMC_GetCmdResp2>
 8007fd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b088      	sub	sp, #32
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007fec:	2309      	movs	r3, #9
 8007fee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ff0:	23c0      	movs	r3, #192	; 0xc0
 8007ff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ffc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ffe:	f107 0308 	add.w	r3, r7, #8
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fe4c 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f942 	bl	8008294 <SDMMC_GetCmdResp2>
 8008010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008012:	69fb      	ldr	r3, [r7, #28]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800802a:	2303      	movs	r3, #3
 800802c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800802e:	2340      	movs	r3, #64	; 0x40
 8008030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008032:	2300      	movs	r3, #0
 8008034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800803c:	f107 0308 	add.w	r3, r7, #8
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff fe2d 	bl	8007ca2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	2103      	movs	r1, #3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f9a7 	bl	80083a0 <SDMMC_GetCmdResp6>
 8008052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008054:	69fb      	ldr	r3, [r7, #28]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008068:	4b11      	ldr	r3, [pc, #68]	; (80080b0 <SDMMC_GetCmdError+0x50>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a11      	ldr	r2, [pc, #68]	; (80080b4 <SDMMC_GetCmdError+0x54>)
 800806e:	fba2 2303 	umull	r2, r3, r2, r3
 8008072:	0a5b      	lsrs	r3, r3, #9
 8008074:	f241 3288 	movw	r2, #5000	; 0x1388
 8008078:	fb02 f303 	mul.w	r3, r2, r3
 800807c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1e5a      	subs	r2, r3, #1
 8008082:	60fa      	str	r2, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008088:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800808c:	e009      	b.n	80080a2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0f1      	beq.n	800807e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	22c5      	movs	r2, #197	; 0xc5
 800809e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20000000 	.word	0x20000000
 80080b4:	10624dd3 	.word	0x10624dd3

080080b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	460b      	mov	r3, r1
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80080c6:	4b70      	ldr	r3, [pc, #448]	; (8008288 <SDMMC_GetCmdResp1+0x1d0>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a70      	ldr	r2, [pc, #448]	; (800828c <SDMMC_GetCmdResp1+0x1d4>)
 80080cc:	fba2 2303 	umull	r2, r3, r2, r3
 80080d0:	0a5a      	lsrs	r2, r3, #9
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
 80080d8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	1e5a      	subs	r2, r3, #1
 80080de:	61fa      	str	r2, [r7, #28]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080e8:	e0c9      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0ef      	beq.n	80080da <SDMMC_GetCmdResp1+0x22>
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1ea      	bne.n	80080da <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	2b00      	cmp	r3, #0
 800810e:	d004      	beq.n	800811a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2204      	movs	r2, #4
 8008114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008116:	2304      	movs	r3, #4
 8008118:	e0b1      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	d004      	beq.n	8008130 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800812c:	2301      	movs	r3, #1
 800812e:	e0a6      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	22c5      	movs	r2, #197	; 0xc5
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fddd 	bl	8007cf6 <SDIO_GetCommandResponse>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	4293      	cmp	r3, r2
 8008144:	d001      	beq.n	800814a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008146:	2301      	movs	r3, #1
 8008148:	e099      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800814a:	2100      	movs	r1, #0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7ff fddf 	bl	8007d10 <SDIO_GetResponse>
 8008152:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4b4e      	ldr	r3, [pc, #312]	; (8008290 <SDMMC_GetCmdResp1+0x1d8>)
 8008158:	4013      	ands	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800815e:	2300      	movs	r3, #0
 8008160:	e08d      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da02      	bge.n	800816e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800816c:	e087      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008178:	2340      	movs	r3, #64	; 0x40
 800817a:	e080      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008186:	2380      	movs	r3, #128	; 0x80
 8008188:	e079      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008198:	e071      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80081a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a8:	e069      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80081b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081b8:	e061      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80081c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081c8:	e059      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80081d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081d8:	e051      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80081e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081e8:	e049      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80081f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80081f8:	e041      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008208:	e039      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008218:	e031      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008224:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008228:	e029      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008234:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008238:	e021      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008244:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008248:	e019      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008258:	e011      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008264:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008268:	e009      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008274:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008278:	e001      	b.n	800827e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800827a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800827e:	4618      	mov	r0, r3
 8008280:	3720      	adds	r7, #32
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000000 	.word	0x20000000
 800828c:	10624dd3 	.word	0x10624dd3
 8008290:	fdffe008 	.word	0xfdffe008

08008294 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800829c:	4b1f      	ldr	r3, [pc, #124]	; (800831c <SDMMC_GetCmdResp2+0x88>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1f      	ldr	r2, [pc, #124]	; (8008320 <SDMMC_GetCmdResp2+0x8c>)
 80082a2:	fba2 2303 	umull	r2, r3, r2, r3
 80082a6:	0a5b      	lsrs	r3, r3, #9
 80082a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ac:	fb02 f303 	mul.w	r3, r2, r3
 80082b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	1e5a      	subs	r2, r3, #1
 80082b6:	60fa      	str	r2, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082c0:	e026      	b.n	8008310 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0ef      	beq.n	80082b2 <SDMMC_GetCmdResp2+0x1e>
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1ea      	bne.n	80082b2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2204      	movs	r2, #4
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082ee:	2304      	movs	r3, #4
 80082f0:	e00e      	b.n	8008310 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008304:	2301      	movs	r3, #1
 8008306:	e003      	b.n	8008310 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	22c5      	movs	r2, #197	; 0xc5
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	20000000 	.word	0x20000000
 8008320:	10624dd3 	.word	0x10624dd3

08008324 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800832c:	4b1a      	ldr	r3, [pc, #104]	; (8008398 <SDMMC_GetCmdResp3+0x74>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a1a      	ldr	r2, [pc, #104]	; (800839c <SDMMC_GetCmdResp3+0x78>)
 8008332:	fba2 2303 	umull	r2, r3, r2, r3
 8008336:	0a5b      	lsrs	r3, r3, #9
 8008338:	f241 3288 	movw	r2, #5000	; 0x1388
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	1e5a      	subs	r2, r3, #1
 8008346:	60fa      	str	r2, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800834c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008350:	e01b      	b.n	800838a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008356:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0ef      	beq.n	8008342 <SDMMC_GetCmdResp3+0x1e>
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1ea      	bne.n	8008342 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2204      	movs	r2, #4
 800837c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800837e:	2304      	movs	r3, #4
 8008380:	e003      	b.n	800838a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	22c5      	movs	r2, #197	; 0xc5
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000000 	.word	0x20000000
 800839c:	10624dd3 	.word	0x10624dd3

080083a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	460b      	mov	r3, r1
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083ae:	4b35      	ldr	r3, [pc, #212]	; (8008484 <SDMMC_GetCmdResp6+0xe4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a35      	ldr	r2, [pc, #212]	; (8008488 <SDMMC_GetCmdResp6+0xe8>)
 80083b4:	fba2 2303 	umull	r2, r3, r2, r3
 80083b8:	0a5b      	lsrs	r3, r3, #9
 80083ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80083be:	fb02 f303 	mul.w	r3, r2, r3
 80083c2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	1e5a      	subs	r2, r3, #1
 80083c8:	61fa      	str	r2, [r7, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083d2:	e052      	b.n	800847a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0ef      	beq.n	80083c4 <SDMMC_GetCmdResp6+0x24>
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1ea      	bne.n	80083c4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d004      	beq.n	8008404 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2204      	movs	r2, #4
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008400:	2304      	movs	r3, #4
 8008402:	e03a      	b.n	800847a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2201      	movs	r2, #1
 8008414:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008416:	2301      	movs	r3, #1
 8008418:	e02f      	b.n	800847a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f7ff fc6b 	bl	8007cf6 <SDIO_GetCommandResponse>
 8008420:	4603      	mov	r3, r0
 8008422:	461a      	mov	r2, r3
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	4293      	cmp	r3, r2
 8008428:	d001      	beq.n	800842e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800842a:	2301      	movs	r3, #1
 800842c:	e025      	b.n	800847a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	22c5      	movs	r2, #197	; 0xc5
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008434:	2100      	movs	r1, #0
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff fc6a 	bl	8007d10 <SDIO_GetResponse>
 800843c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	0c1b      	lsrs	r3, r3, #16
 800844c:	b29a      	uxth	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008452:	2300      	movs	r3, #0
 8008454:	e011      	b.n	800847a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008464:	e009      	b.n	800847a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008474:	e001      	b.n	800847a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800847a:	4618      	mov	r0, r3
 800847c:	3720      	adds	r7, #32
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000000 	.word	0x20000000
 8008488:	10624dd3 	.word	0x10624dd3

0800848c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008494:	4b22      	ldr	r3, [pc, #136]	; (8008520 <SDMMC_GetCmdResp7+0x94>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a22      	ldr	r2, [pc, #136]	; (8008524 <SDMMC_GetCmdResp7+0x98>)
 800849a:	fba2 2303 	umull	r2, r3, r2, r3
 800849e:	0a5b      	lsrs	r3, r3, #9
 80084a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a4:	fb02 f303 	mul.w	r3, r2, r3
 80084a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	1e5a      	subs	r2, r3, #1
 80084ae:	60fa      	str	r2, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084b8:	e02c      	b.n	8008514 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0ef      	beq.n	80084aa <SDMMC_GetCmdResp7+0x1e>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1ea      	bne.n	80084aa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2204      	movs	r2, #4
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084e6:	2304      	movs	r3, #4
 80084e8:	e014      	b.n	8008514 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e009      	b.n	8008514 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2240      	movs	r2, #64	; 0x40
 8008510:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008512:	2300      	movs	r3, #0
  
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	20000000 	.word	0x20000000
 8008524:	10624dd3 	.word	0x10624dd3

08008528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008528:	b084      	sub	sp, #16
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	f107 001c 	add.w	r0, r7, #28
 8008536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	2b01      	cmp	r3, #1
 800853e:	d122      	bne.n	8008586 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856a:	2b01      	cmp	r3, #1
 800856c:	d105      	bne.n	800857a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f94a 	bl	8008814 <USB_CoreReset>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]
 8008584:	e01a      	b.n	80085bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f93e 	bl	8008814 <USB_CoreReset>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800859c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	639a      	str	r2, [r3, #56]	; 0x38
 80085ae:	e005      	b.n	80085bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d10b      	bne.n	80085da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f043 0206 	orr.w	r2, r3, #6
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f043 0220 	orr.w	r2, r3, #32
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085e6:	b004      	add	sp, #16
 80085e8:	4770      	bx	lr

080085ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f043 0201 	orr.w	r2, r3, #1
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f023 0201 	bic.w	r2, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d106      	bne.n	800865a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60da      	str	r2, [r3, #12]
 8008658:	e00b      	b.n	8008672 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d106      	bne.n	800866e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	60da      	str	r2, [r3, #12]
 800866c:	e001      	b.n	8008672 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e003      	b.n	800867a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008672:	2032      	movs	r0, #50	; 0x32
 8008674:	f7f9 fc44 	bl	8001f00 <HAL_Delay>

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	019b      	lsls	r3, r3, #6
 8008696:	f043 0220 	orr.w	r2, r3, #32
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3301      	adds	r3, #1
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4a09      	ldr	r2, [pc, #36]	; (80086cc <USB_FlushTxFifo+0x48>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d901      	bls.n	80086b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e006      	b.n	80086be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b20      	cmp	r3, #32
 80086ba:	d0f0      	beq.n	800869e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	00030d40 	.word	0x00030d40

080086d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2210      	movs	r2, #16
 80086e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3301      	adds	r3, #1
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4a09      	ldr	r2, [pc, #36]	; (8008710 <USB_FlushRxFifo+0x40>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d901      	bls.n	80086f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e006      	b.n	8008702 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	f003 0310 	and.w	r3, r3, #16
 80086fc:	2b10      	cmp	r3, #16
 80086fe:	d0f0      	beq.n	80086e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	00030d40 	.word	0x00030d40

08008714 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008714:	b480      	push	{r7}
 8008716:	b089      	sub	sp, #36	; 0x24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4611      	mov	r1, r2
 8008720:	461a      	mov	r2, r3
 8008722:	460b      	mov	r3, r1
 8008724:	71fb      	strb	r3, [r7, #7]
 8008726:	4613      	mov	r3, r2
 8008728:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008732:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008736:	2b00      	cmp	r3, #0
 8008738:	d11a      	bne.n	8008770 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800873a:	88bb      	ldrh	r3, [r7, #4]
 800873c:	3303      	adds	r3, #3
 800873e:	089b      	lsrs	r3, r3, #2
 8008740:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008742:	2300      	movs	r3, #0
 8008744:	61bb      	str	r3, [r7, #24]
 8008746:	e00f      	b.n	8008768 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	031a      	lsls	r2, r3, #12
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	4413      	add	r3, r2
 8008750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008754:	461a      	mov	r2, r3
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	3304      	adds	r3, #4
 8008760:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	3301      	adds	r3, #1
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	429a      	cmp	r2, r3
 800876e:	d3eb      	bcc.n	8008748 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3724      	adds	r7, #36	; 0x24
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800877e:	b480      	push	{r7}
 8008780:	b089      	sub	sp, #36	; 0x24
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	4613      	mov	r3, r2
 800878a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	3303      	adds	r3, #3
 8008798:	089b      	lsrs	r3, r3, #2
 800879a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800879c:	2300      	movs	r3, #0
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	e00b      	b.n	80087ba <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	3304      	adds	r3, #4
 80087b2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	3301      	adds	r3, #1
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d3ef      	bcc.n	80087a2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80087c2:	69fb      	ldr	r3, [r7, #28]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3724      	adds	r7, #36	; 0x24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4013      	ands	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087e8:	68fb      	ldr	r3, [r7, #12]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f003 0301 	and.w	r3, r3, #1
}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
	...

08008814 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3301      	adds	r3, #1
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	4a13      	ldr	r2, [pc, #76]	; (8008878 <USB_CoreReset+0x64>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d901      	bls.n	8008832 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e01b      	b.n	800886a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	daf2      	bge.n	8008820 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f043 0201 	orr.w	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a09      	ldr	r2, [pc, #36]	; (8008878 <USB_CoreReset+0x64>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d901      	bls.n	800885c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e006      	b.n	800886a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b01      	cmp	r3, #1
 8008866:	d0f0      	beq.n	800884a <USB_CoreReset+0x36>

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	00030d40 	.word	0x00030d40

0800887c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800887c:	b084      	sub	sp, #16
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	f107 001c 	add.w	r0, r7, #28
 800888a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008898:	461a      	mov	r2, r3
 800889a:	2300      	movs	r3, #0
 800889c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d018      	beq.n	80088f4 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d10a      	bne.n	80088de <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088d6:	f043 0304 	orr.w	r3, r3, #4
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	e014      	b.n	8008908 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088ec:	f023 0304 	bic.w	r3, r3, #4
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	e009      	b.n	8008908 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008902:	f023 0304 	bic.w	r3, r3, #4
 8008906:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008908:	2110      	movs	r1, #16
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff feba 	bl	8008684 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff fedd 	bl	80086d0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	e015      	b.n	8008948 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4413      	add	r3, r2
 8008924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008928:	461a      	mov	r2, r3
 800892a:	f04f 33ff 	mov.w	r3, #4294967295
 800892e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4413      	add	r3, r2
 8008938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893c:	461a      	mov	r2, r3
 800893e:	2300      	movs	r3, #0
 8008940:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3301      	adds	r3, #1
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	429a      	cmp	r2, r3
 800894e:	d3e5      	bcc.n	800891c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008950:	2101      	movs	r1, #1
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f8ac 	bl	8008ab0 <USB_DriveVbus>

  HAL_Delay(200U);
 8008958:	20c8      	movs	r0, #200	; 0xc8
 800895a:	f7f9 fad1 	bl	8001f00 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800897e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a14      	ldr	r2, [pc, #80]	; (80089d4 <USB_HostInit+0x158>)
 8008984:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a13      	ldr	r2, [pc, #76]	; (80089d8 <USB_HostInit+0x15c>)
 800898a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800898e:	e009      	b.n	80089a4 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2280      	movs	r2, #128	; 0x80
 8008994:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a10      	ldr	r2, [pc, #64]	; (80089dc <USB_HostInit+0x160>)
 800899a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a10      	ldr	r2, [pc, #64]	; (80089e0 <USB_HostInit+0x164>)
 80089a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d105      	bne.n	80089b6 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	f043 0210 	orr.w	r2, r3, #16
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <USB_HostInit+0x168>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089ce:	b004      	add	sp, #16
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	01000200 	.word	0x01000200
 80089d8:	00e00300 	.word	0x00e00300
 80089dc:	00600080 	.word	0x00600080
 80089e0:	004000e0 	.word	0x004000e0
 80089e4:	a3200008 	.word	0xa3200008

080089e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	f003 0303 	and.w	r3, r3, #3
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008a20:	4313      	orrs	r3, r2
 8008a22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d107      	bne.n	8008a3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a30:	461a      	mov	r2, r3
 8008a32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008a36:	6053      	str	r3, [r2, #4]
 8008a38:	e009      	b.n	8008a4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d106      	bne.n	8008a4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a46:	461a      	mov	r2, r3
 8008a48:	f241 7370 	movw	r3, #6000	; 0x1770
 8008a4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008a7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008a8c:	2064      	movs	r0, #100	; 0x64
 8008a8e:	f7f9 fa37 	bl	8001f00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008aa0:	200a      	movs	r0, #10
 8008aa2:	f7f9 fa2d 	bl	8001f00 <HAL_Delay>

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ad4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <USB_DriveVbus+0x44>
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d106      	bne.n	8008af4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008aee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008af2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008afe:	d109      	bne.n	8008b14 <USB_DriveVbus+0x64>
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b085      	sub	sp, #20
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	0c5b      	lsrs	r3, r3, #17
 8008b40:	f003 0303 	and.w	r3, r3, #3
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	b29b      	uxth	r3, r3
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	4611      	mov	r1, r2
 8008b80:	461a      	mov	r2, r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	70fb      	strb	r3, [r7, #3]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70bb      	strb	r3, [r7, #2]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d87e      	bhi.n	8008cb0 <USB_HC_Init+0x13c>
 8008bb2:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <USB_HC_Init+0x44>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008bc9 	.word	0x08008bc9
 8008bbc:	08008c73 	.word	0x08008c73
 8008bc0:	08008bc9 	.word	0x08008bc9
 8008bc4:	08008c35 	.word	0x08008c35
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f240 439d 	movw	r3, #1181	; 0x49d
 8008bda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008bdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da10      	bge.n	8008c06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	78fa      	ldrb	r2, [r7, #3]
 8008bf4:	0151      	lsls	r1, r2, #5
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c02:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008c04:	e057      	b.n	8008cb6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d051      	beq.n	8008cb6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	78fa      	ldrb	r2, [r7, #3]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c30:	60d3      	str	r3, [r2, #12]
      break;
 8008c32:	e040      	b.n	8008cb6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c40:	461a      	mov	r2, r3
 8008c42:	f240 639d 	movw	r3, #1693	; 0x69d
 8008c46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008c48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da34      	bge.n	8008cba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	0151      	lsls	r1, r2, #5
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	440a      	add	r2, r1
 8008c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c6e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008c70:	e023      	b.n	8008cba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	015a      	lsls	r2, r3, #5
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f240 2325 	movw	r3, #549	; 0x225
 8008c84:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008c86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	da17      	bge.n	8008cbe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ca8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008cac:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008cae:	e006      	b.n	8008cbe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	77fb      	strb	r3, [r7, #31]
      break;
 8008cb4:	e004      	b.n	8008cc0 <USB_HC_Init+0x14c>
      break;
 8008cb6:	bf00      	nop
 8008cb8:	e002      	b.n	8008cc0 <USB_HC_Init+0x14c>
      break;
 8008cba:	bf00      	nop
 8008cbc:	e000      	b.n	8008cc0 <USB_HC_Init+0x14c>
      break;
 8008cbe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	2101      	movs	r1, #1
 8008cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd4:	6939      	ldr	r1, [r7, #16]
 8008cd6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008cea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	da03      	bge.n	8008cfa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	e001      	b.n	8008cfe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff ff0f 	bl	8008b22 <USB_GetHostSpeed>
 8008d04:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d106      	bne.n	8008d1c <USB_HC_Init+0x1a8>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d003      	beq.n	8008d1c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d18:	617b      	str	r3, [r7, #20]
 8008d1a:	e001      	b.n	8008d20 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d20:	787b      	ldrb	r3, [r7, #1]
 8008d22:	059b      	lsls	r3, r3, #22
 8008d24:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d28:	78bb      	ldrb	r3, [r7, #2]
 8008d2a:	02db      	lsls	r3, r3, #11
 8008d2c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d30:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d36:	049b      	lsls	r3, r3, #18
 8008d38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d3c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	0159      	lsls	r1, r3, #5
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	440b      	add	r3, r1
 8008d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d56:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d5c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008d5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d10f      	bne.n	8008d86 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	78fa      	ldrb	r2, [r7, #3]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d84:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3720      	adds	r7, #32
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08c      	sub	sp, #48	; 0x30
 8008d94:	af02      	add	r7, sp, #8
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	785b      	ldrb	r3, [r3, #1]
 8008da6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d02d      	beq.n	8008e16 <USB_HC_StartXfer+0x86>
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	791b      	ldrb	r3, [r3, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d129      	bne.n	8008e16 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d117      	bne.n	8008df8 <USB_HC_StartXfer+0x68>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	79db      	ldrb	r3, [r3, #7]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <USB_HC_StartXfer+0x48>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	79db      	ldrb	r3, [r3, #7]
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d10f      	bne.n	8008df8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	6a3a      	ldr	r2, [r7, #32]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10b      	bne.n	8008e16 <USB_HC_StartXfer+0x86>
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	795b      	ldrb	r3, [r3, #5]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d107      	bne.n	8008e16 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 fa2f 	bl	8009270 <USB_DoPing>
      return HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e0f8      	b.n	8009008 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d018      	beq.n	8008e50 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	8912      	ldrh	r2, [r2, #8]
 8008e26:	4413      	add	r3, r2
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	8912      	ldrh	r2, [r2, #8]
 8008e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e32:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008e34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008e36:	8b7b      	ldrh	r3, [r7, #26]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d90b      	bls.n	8008e54 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008e3c:	8b7b      	ldrh	r3, [r7, #26]
 8008e3e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	8912      	ldrh	r2, [r2, #8]
 8008e46:	fb02 f203 	mul.w	r2, r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	611a      	str	r2, [r3, #16]
 8008e4e:	e001      	b.n	8008e54 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008e50:	2301      	movs	r3, #1
 8008e52:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	78db      	ldrb	r3, [r3, #3]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d007      	beq.n	8008e6c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	8912      	ldrh	r2, [r2, #8]
 8008e62:	fb02 f203 	mul.w	r2, r2, r3
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	611a      	str	r2, [r3, #16]
 8008e6a:	e003      	b.n	8008e74 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	695a      	ldr	r2, [r3, #20]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e7e:	04d9      	lsls	r1, r3, #19
 8008e80:	4b63      	ldr	r3, [pc, #396]	; (8009010 <USB_HC_StartXfer+0x280>)
 8008e82:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e84:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	7a9b      	ldrb	r3, [r3, #10]
 8008e8a:	075b      	lsls	r3, r3, #29
 8008e8c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e90:	69f9      	ldr	r1, [r7, #28]
 8008e92:	0148      	lsls	r0, r1, #5
 8008e94:	6a39      	ldr	r1, [r7, #32]
 8008e96:	4401      	add	r1, r0
 8008e98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e9c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e9e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d009      	beq.n	8008eba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	68d9      	ldr	r1, [r3, #12]
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb6:	460a      	mov	r2, r1
 8008eb8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bf0c      	ite	eq
 8008eca:	2301      	moveq	r3, #1
 8008ecc:	2300      	movne	r3, #0
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69fa      	ldr	r2, [r7, #28]
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	6a3a      	ldr	r2, [r7, #32]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ef0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	7e7b      	ldrb	r3, [r7, #25]
 8008f02:	075b      	lsls	r3, r3, #29
 8008f04:	69f9      	ldr	r1, [r7, #28]
 8008f06:	0148      	lsls	r0, r1, #5
 8008f08:	6a39      	ldr	r1, [r7, #32]
 8008f0a:	4401      	add	r1, r0
 8008f0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008f10:	4313      	orrs	r3, r2
 8008f12:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f2a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	78db      	ldrb	r3, [r3, #3]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3a:	613b      	str	r3, [r7, #16]
 8008f3c:	e003      	b.n	8008f46 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f44:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f4c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	e04e      	b.n	8009008 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	78db      	ldrb	r3, [r3, #3]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d149      	bne.n	8009006 <USB_HC_StartXfer+0x276>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d045      	beq.n	8009006 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	79db      	ldrb	r3, [r3, #7]
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d830      	bhi.n	8008fe4 <USB_HC_StartXfer+0x254>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <USB_HC_StartXfer+0x1f8>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008f99 	.word	0x08008f99
 8008f8c:	08008fbd 	.word	0x08008fbd
 8008f90:	08008f99 	.word	0x08008f99
 8008f94:	08008fbd 	.word	0x08008fbd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	3303      	adds	r3, #3
 8008f9e:	089b      	lsrs	r3, r3, #2
 8008fa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008fa2:	8afa      	ldrh	r2, [r7, #22]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d91c      	bls.n	8008fe8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	f043 0220 	orr.w	r2, r3, #32
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008fba:	e015      	b.n	8008fe8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	3303      	adds	r3, #3
 8008fc2:	089b      	lsrs	r3, r3, #2
 8008fc4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008fc6:	8afa      	ldrh	r2, [r7, #22]
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d90a      	bls.n	8008fec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008fe2:	e003      	b.n	8008fec <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008fe4:	bf00      	nop
 8008fe6:	e002      	b.n	8008fee <USB_HC_StartXfer+0x25e>
        break;
 8008fe8:	bf00      	nop
 8008fea:	e000      	b.n	8008fee <USB_HC_StartXfer+0x25e>
        break;
 8008fec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	68d9      	ldr	r1, [r3, #12]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	785a      	ldrb	r2, [r3, #1]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	9000      	str	r0, [sp, #0]
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff fb87 	bl	8008714 <USB_WritePacket>
  }

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3728      	adds	r7, #40	; 0x28
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	1ff80000 	.word	0x1ff80000

08009014 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	b29b      	uxth	r3, r3
}
 800902a:	4618      	mov	r0, r3
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009036:	b480      	push	{r7}
 8009038:	b089      	sub	sp, #36	; 0x24
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	4413      	add	r3, r2
 8009056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	0c9b      	lsrs	r3, r3, #18
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	4413      	add	r3, r2
 800906c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	0fdb      	lsrs	r3, r3, #31
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f003 0320 	and.w	r3, r3, #32
 8009082:	2b20      	cmp	r3, #32
 8009084:	d104      	bne.n	8009090 <USB_HC_Halt+0x5a>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	e0e8      	b.n	8009262 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d002      	beq.n	800909c <USB_HC_Halt+0x66>
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	2b02      	cmp	r3, #2
 800909a:	d173      	bne.n	8009184 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	0151      	lsls	r1, r2, #5
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	440a      	add	r2, r1
 80090b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 80cb 	bne.w	8009260 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d143      	bne.n	800915e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	0151      	lsls	r1, r2, #5
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	440a      	add	r2, r1
 80090ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	0151      	lsls	r1, r2, #5
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	440a      	add	r2, r1
 800910c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009114:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	4413      	add	r3, r2
 800911e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	440a      	add	r2, r1
 800912c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009130:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009134:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	3301      	adds	r3, #1
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009142:	d81d      	bhi.n	8009180 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	4413      	add	r3, r2
 800914c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800915a:	d0ec      	beq.n	8009136 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800915c:	e080      	b.n	8009260 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	4413      	add	r3, r2
 8009166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	0151      	lsls	r1, r2, #5
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	440a      	add	r2, r1
 8009174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800917c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800917e:	e06f      	b.n	8009260 <USB_HC_Halt+0x22a>
            break;
 8009180:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009182:	e06d      	b.n	8009260 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	4413      	add	r3, r2
 800918c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	0151      	lsls	r1, r2, #5
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	440a      	add	r2, r1
 800919a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800919e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d143      	bne.n	800923c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	0151      	lsls	r1, r2, #5
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	440a      	add	r2, r1
 800920a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800920e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009212:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	3301      	adds	r3, #1
 8009218:	61fb      	str	r3, [r7, #28]
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009220:	d81d      	bhi.n	800925e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	4413      	add	r3, r2
 800922a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009238:	d0ec      	beq.n	8009214 <USB_HC_Halt+0x1de>
 800923a:	e011      	b.n	8009260 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	4413      	add	r3, r2
 8009244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	0151      	lsls	r1, r2, #5
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	440a      	add	r2, r1
 8009252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	e000      	b.n	8009260 <USB_HC_Halt+0x22a>
          break;
 800925e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3724      	adds	r7, #36	; 0x24
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
	...

08009270 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009284:	2301      	movs	r3, #1
 8009286:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	04da      	lsls	r2, r3, #19
 800928c:	4b15      	ldr	r3, [pc, #84]	; (80092e4 <USB_DoPing+0x74>)
 800928e:	4013      	ands	r3, r2
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	440a      	add	r2, r1
 8009298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800929c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ce:	461a      	mov	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	1ff80000 	.word	0x1ff80000

080092e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80092f4:	2300      	movs	r3, #0
 80092f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff f987 	bl	800860c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80092fe:	2110      	movs	r1, #16
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff f9bf 	bl	8008684 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff f9e2 	bl	80086d0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800930c:	2300      	movs	r3, #0
 800930e:	613b      	str	r3, [r7, #16]
 8009310:	e01f      	b.n	8009352 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4413      	add	r3, r2
 800931a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009328:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009330:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009338:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009346:	461a      	mov	r2, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3301      	adds	r3, #1
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b0f      	cmp	r3, #15
 8009356:	d9dc      	bls.n	8009312 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009358:	2300      	movs	r3, #0
 800935a:	613b      	str	r3, [r7, #16]
 800935c:	e034      	b.n	80093c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4413      	add	r3, r2
 8009366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009374:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800937c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009384:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4413      	add	r3, r2
 800938e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009392:	461a      	mov	r2, r3
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	3301      	adds	r3, #1
 800939c:	617b      	str	r3, [r7, #20]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093a4:	d80c      	bhi.n	80093c0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093bc:	d0ec      	beq.n	8009398 <USB_StopHost+0xb0>
 80093be:	e000      	b.n	80093c2 <USB_StopHost+0xda>
        break;
 80093c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	3301      	adds	r3, #1
 80093c6:	613b      	str	r3, [r7, #16]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b0f      	cmp	r3, #15
 80093cc:	d9c7      	bls.n	800935e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093d4:	461a      	mov	r2, r3
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f04f 32ff 	mov.w	r2, #4294967295
 80093e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff f900 	bl	80085ea <USB_EnableGlobalInt>

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80093f4:	b590      	push	{r4, r7, lr}
 80093f6:	b089      	sub	sp, #36	; 0x24
 80093f8:	af04      	add	r7, sp, #16
 80093fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80093fc:	2301      	movs	r3, #1
 80093fe:	2202      	movs	r2, #2
 8009400:	2102      	movs	r1, #2
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fcb2 	bl	8009d6c <USBH_FindInterface>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	2bff      	cmp	r3, #255	; 0xff
 8009410:	d002      	beq.n	8009418 <USBH_CDC_InterfaceInit+0x24>
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d901      	bls.n	800941c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009418:	2302      	movs	r3, #2
 800941a:	e13d      	b.n	8009698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fc87 	bl	8009d34 <USBH_SelectInterface>
 8009426:	4603      	mov	r3, r0
 8009428:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009430:	2302      	movs	r3, #2
 8009432:	e131      	b.n	8009698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800943a:	2050      	movs	r0, #80	; 0x50
 800943c:	f005 fdb2 	bl	800efa4 <malloc>
 8009440:	4603      	mov	r3, r0
 8009442:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009454:	2302      	movs	r3, #2
 8009456:	e11f      	b.n	8009698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009458:	2250      	movs	r2, #80	; 0x50
 800945a:	2100      	movs	r1, #0
 800945c:	68b8      	ldr	r0, [r7, #8]
 800945e:	f005 fdbf 	bl	800efe0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	211a      	movs	r1, #26
 8009468:	fb01 f303 	mul.w	r3, r1, r3
 800946c:	4413      	add	r3, r2
 800946e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	b25b      	sxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	da15      	bge.n	80094a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	211a      	movs	r1, #26
 8009480:	fb01 f303 	mul.w	r3, r1, r3
 8009484:	4413      	add	r3, r2
 8009486:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	211a      	movs	r1, #26
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	4413      	add	r3, r2
 800949c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80094a0:	881a      	ldrh	r2, [r3, #0]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f002 f88c 	bl	800b5ca <USBH_AllocPipe>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	7819      	ldrb	r1, [r3, #0]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	7858      	ldrb	r0, [r3, #1]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	8952      	ldrh	r2, [r2, #10]
 80094d2:	9202      	str	r2, [sp, #8]
 80094d4:	2203      	movs	r2, #3
 80094d6:	9201      	str	r2, [sp, #4]
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4623      	mov	r3, r4
 80094dc:	4602      	mov	r2, r0
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f002 f844 	bl	800b56c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2200      	movs	r2, #0
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f005 fcab 	bl	800ee48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80094f2:	2300      	movs	r3, #0
 80094f4:	2200      	movs	r2, #0
 80094f6:	210a      	movs	r1, #10
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fc37 	bl	8009d6c <USBH_FindInterface>
 80094fe:	4603      	mov	r3, r0
 8009500:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	2bff      	cmp	r3, #255	; 0xff
 8009506:	d002      	beq.n	800950e <USBH_CDC_InterfaceInit+0x11a>
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d901      	bls.n	8009512 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800950e:	2302      	movs	r3, #2
 8009510:	e0c2      	b.n	8009698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	211a      	movs	r1, #26
 8009518:	fb01 f303 	mul.w	r3, r1, r3
 800951c:	4413      	add	r3, r2
 800951e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	b25b      	sxtb	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	da16      	bge.n	8009558 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	211a      	movs	r1, #26
 8009530:	fb01 f303 	mul.w	r3, r1, r3
 8009534:	4413      	add	r3, r2
 8009536:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	211a      	movs	r1, #26
 8009546:	fb01 f303 	mul.w	r3, r1, r3
 800954a:	4413      	add	r3, r2
 800954c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009550:	881a      	ldrh	r2, [r3, #0]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	835a      	strh	r2, [r3, #26]
 8009556:	e015      	b.n	8009584 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	211a      	movs	r1, #26
 800955e:	fb01 f303 	mul.w	r3, r1, r3
 8009562:	4413      	add	r3, r2
 8009564:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009568:	781a      	ldrb	r2, [r3, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	211a      	movs	r1, #26
 8009574:	fb01 f303 	mul.w	r3, r1, r3
 8009578:	4413      	add	r3, r2
 800957a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800957e:	881a      	ldrh	r2, [r3, #0]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	211a      	movs	r1, #26
 800958a:	fb01 f303 	mul.w	r3, r1, r3
 800958e:	4413      	add	r3, r2
 8009590:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	b25b      	sxtb	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	da16      	bge.n	80095ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	211a      	movs	r1, #26
 80095a2:	fb01 f303 	mul.w	r3, r1, r3
 80095a6:	4413      	add	r3, r2
 80095a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095ac:	781a      	ldrb	r2, [r3, #0]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	211a      	movs	r1, #26
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	4413      	add	r3, r2
 80095be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80095c2:	881a      	ldrh	r2, [r3, #0]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	835a      	strh	r2, [r3, #26]
 80095c8:	e015      	b.n	80095f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	211a      	movs	r1, #26
 80095d0:	fb01 f303 	mul.w	r3, r1, r3
 80095d4:	4413      	add	r3, r2
 80095d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	211a      	movs	r1, #26
 80095e6:	fb01 f303 	mul.w	r3, r1, r3
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80095f0:	881a      	ldrh	r2, [r3, #0]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	7b9b      	ldrb	r3, [r3, #14]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 ffe4 	bl	800b5ca <USBH_AllocPipe>
 8009602:	4603      	mov	r3, r0
 8009604:	461a      	mov	r2, r3
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	7bdb      	ldrb	r3, [r3, #15]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 ffda 	bl	800b5ca <USBH_AllocPipe>
 8009616:	4603      	mov	r3, r0
 8009618:	461a      	mov	r2, r3
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	7b59      	ldrb	r1, [r3, #13]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	7b98      	ldrb	r0, [r3, #14]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	8b12      	ldrh	r2, [r2, #24]
 8009636:	9202      	str	r2, [sp, #8]
 8009638:	2202      	movs	r2, #2
 800963a:	9201      	str	r2, [sp, #4]
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	4623      	mov	r3, r4
 8009640:	4602      	mov	r2, r0
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 ff92 	bl	800b56c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	7b19      	ldrb	r1, [r3, #12]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	7bd8      	ldrb	r0, [r3, #15]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	8b52      	ldrh	r2, [r2, #26]
 8009660:	9202      	str	r2, [sp, #8]
 8009662:	2202      	movs	r2, #2
 8009664:	9201      	str	r2, [sp, #4]
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	4623      	mov	r3, r4
 800966a:	4602      	mov	r2, r0
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 ff7d 	bl	800b56c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	7b5b      	ldrb	r3, [r3, #13]
 800967e:	2200      	movs	r2, #0
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f005 fbe0 	bl	800ee48 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	7b1b      	ldrb	r3, [r3, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f005 fbd9 	bl	800ee48 <USBH_LL_SetToggle>

  return USBH_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	bd90      	pop	{r4, r7, pc}

080096a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00e      	beq.n	80096d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 ff72 	bl	800b5aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 ff9d 	bl	800b60c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	7b1b      	ldrb	r3, [r3, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00e      	beq.n	80096fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	7b1b      	ldrb	r3, [r3, #12]
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 ff5f 	bl	800b5aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	7b1b      	ldrb	r3, [r3, #12]
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 ff8a 	bl	800b60c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	7b5b      	ldrb	r3, [r3, #13]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00e      	beq.n	8009724 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	7b5b      	ldrb	r3, [r3, #13]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 ff4c 	bl	800b5aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	7b5b      	ldrb	r3, [r3, #13]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 ff77 	bl	800b60c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	4618      	mov	r0, r3
 800973a:	f005 fc3b 	bl	800efb4 <free>
    phost->pActiveClass->pData = 0U;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009744:	2200      	movs	r2, #0
 8009746:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	3340      	adds	r3, #64	; 0x40
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f8b1 	bl	80098d2 <GetLineCoding>
 8009770:	4603      	mov	r3, r0
 8009772:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009780:	2102      	movs	r1, #2
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009786:	7afb      	ldrb	r3, [r7, #11]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009798:	2301      	movs	r3, #1
 800979a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d877      	bhi.n	80098a4 <USBH_CDC_Process+0x114>
 80097b4:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <USBH_CDC_Process+0x2c>)
 80097b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ba:	bf00      	nop
 80097bc:	080097d1 	.word	0x080097d1
 80097c0:	080097d7 	.word	0x080097d7
 80097c4:	08009807 	.word	0x08009807
 80097c8:	0800987b 	.word	0x0800987b
 80097cc:	08009889 	.word	0x08009889
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
      break;
 80097d4:	e06d      	b.n	80098b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f897 	bl	8009910 <SetLineCoding>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80097f4:	e058      	b.n	80098a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d055      	beq.n	80098a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2204      	movs	r2, #4
 8009800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009804:	e050      	b.n	80098a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	3340      	adds	r3, #64	; 0x40
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f860 	bl	80098d2 <GetLineCoding>
 8009812:	4603      	mov	r3, r0
 8009814:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d126      	bne.n	800986a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800982e:	791b      	ldrb	r3, [r3, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d13b      	bne.n	80098ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800983e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009840:	429a      	cmp	r2, r3
 8009842:	d133      	bne.n	80098ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800984e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009850:	429a      	cmp	r2, r3
 8009852:	d12b      	bne.n	80098ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800985c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800985e:	429a      	cmp	r2, r3
 8009860:	d124      	bne.n	80098ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f982 	bl	8009b6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009868:	e020      	b.n	80098ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d01d      	beq.n	80098ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2204      	movs	r2, #4
 8009874:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009878:	e018      	b.n	80098ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f867 	bl	800994e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f8f6 	bl	8009a72 <CDC_ProcessReception>
      break;
 8009886:	e014      	b.n	80098b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009888:	2100      	movs	r1, #0
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 f94d 	bl	800ab2a <USBH_ClrFeature>
 8009890:	4603      	mov	r3, r0
 8009892:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10a      	bne.n	80098b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80098a2:	e005      	b.n	80098b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80098a4:	bf00      	nop
 80098a6:	e004      	b.n	80098b2 <USBH_CDC_Process+0x122>
      break;
 80098a8:	bf00      	nop
 80098aa:	e002      	b.n	80098b2 <USBH_CDC_Process+0x122>
      break;
 80098ac:	bf00      	nop
 80098ae:	e000      	b.n	80098b2 <USBH_CDC_Process+0x122>
      break;
 80098b0:	bf00      	nop

  }

  return status;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	22a1      	movs	r2, #161	; 0xa1
 80098e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2221      	movs	r2, #33	; 0x21
 80098e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2207      	movs	r2, #7
 80098f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2207      	movs	r2, #7
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 faf2 	bl	800aeea <USBH_CtlReq>
 8009906:	4603      	mov	r3, r0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2221      	movs	r2, #33	; 0x21
 800991e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2220      	movs	r2, #32
 8009924:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2207      	movs	r2, #7
 8009936:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2207      	movs	r2, #7
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 fad3 	bl	800aeea <USBH_CtlReq>
 8009944:	4603      	mov	r3, r0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af02      	add	r7, sp, #8
 8009954:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009960:	2300      	movs	r3, #0
 8009962:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800996a:	2b01      	cmp	r3, #1
 800996c:	d002      	beq.n	8009974 <CDC_ProcessTransmission+0x26>
 800996e:	2b02      	cmp	r3, #2
 8009970:	d023      	beq.n	80099ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009972:	e07a      	b.n	8009a6a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	8b12      	ldrh	r2, [r2, #24]
 800997c:	4293      	cmp	r3, r2
 800997e:	d90b      	bls.n	8009998 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	69d9      	ldr	r1, [r3, #28]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8b1a      	ldrh	r2, [r3, #24]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	7b5b      	ldrb	r3, [r3, #13]
 800998c:	2001      	movs	r0, #1
 800998e:	9000      	str	r0, [sp, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 fda8 	bl	800b4e6 <USBH_BulkSendData>
 8009996:	e00b      	b.n	80099b0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	7b5b      	ldrb	r3, [r3, #13]
 80099a6:	2001      	movs	r0, #1
 80099a8:	9000      	str	r0, [sp, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f001 fd9b 	bl	800b4e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80099b8:	e057      	b.n	8009a6a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	7b5b      	ldrb	r3, [r3, #13]
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f005 fa17 	bl	800edf4 <USBH_LL_GetURBState>
 80099c6:	4603      	mov	r3, r0
 80099c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d136      	bne.n	8009a3e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	8b12      	ldrh	r2, [r2, #24]
 80099d8:	4293      	cmp	r3, r2
 80099da:	d90e      	bls.n	80099fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	8b12      	ldrh	r2, [r2, #24]
 80099e4:	1a9a      	subs	r2, r3, r2
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	8b12      	ldrh	r2, [r2, #24]
 80099f2:	441a      	add	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	61da      	str	r2, [r3, #28]
 80099f8:	e002      	b.n	8009a00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d004      	beq.n	8009a12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009a10:	e006      	b.n	8009a20 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f892 	bl	8009b44 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2204      	movs	r2, #4
 8009a24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a34:	2300      	movs	r3, #0
 8009a36:	2200      	movs	r2, #0
 8009a38:	f002 f8a8 	bl	800bb8c <osMessageQueuePut>
      break;
 8009a3c:	e014      	b.n	8009a68 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d111      	bne.n	8009a68 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2204      	movs	r2, #4
 8009a50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a60:	2300      	movs	r3, #0
 8009a62:	2200      	movs	r2, #0
 8009a64:	f002 f892 	bl	800bb8c <osMessageQueuePut>
      break;
 8009a68:	bf00      	nop
  }
}
 8009a6a:	bf00      	nop
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b086      	sub	sp, #24
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a84:	2300      	movs	r3, #0
 8009a86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d002      	beq.n	8009a98 <CDC_ProcessReception+0x26>
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d00e      	beq.n	8009ab4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009a96:	e051      	b.n	8009b3c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	6a19      	ldr	r1, [r3, #32]
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	8b5a      	ldrh	r2, [r3, #26]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	7b1b      	ldrb	r3, [r3, #12]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 fd43 	bl	800b530 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2204      	movs	r2, #4
 8009aae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009ab2:	e043      	b.n	8009b3c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	7b1b      	ldrb	r3, [r3, #12]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f005 f99a 	bl	800edf4 <USBH_LL_GetURBState>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009ac4:	7cfb      	ldrb	r3, [r7, #19]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d137      	bne.n	8009b3a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	7b1b      	ldrb	r3, [r3, #12]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f005 f8fd 	bl	800ecd0 <USBH_LL_GetLastXferSize>
 8009ad6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d016      	beq.n	8009b10 <CDC_ProcessReception+0x9e>
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	8b5b      	ldrh	r3, [r3, #26]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d910      	bls.n	8009b10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	1ad2      	subs	r2, r2, r3
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	6a1a      	ldr	r2, [r3, #32]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	441a      	add	r2, r3
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2203      	movs	r2, #3
 8009b0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009b0e:	e006      	b.n	8009b1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f81d 	bl	8009b58 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2204      	movs	r2, #4
 8009b22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009b32:	2300      	movs	r3, #0
 8009b34:	2200      	movs	r2, #0
 8009b36:	f002 f829 	bl	800bb8c <osMessageQueuePut>
      break;
 8009b3a:	bf00      	nop
  }
}
 8009b3c:	bf00      	nop
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b94:	2302      	movs	r3, #2
 8009b96:	e044      	b.n	8009c22 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	79fa      	ldrb	r2, [r7, #7]
 8009b9c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f841 	bl	8009c38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009be4:	2200      	movs	r2, #0
 8009be6:	2104      	movs	r1, #4
 8009be8:	2010      	movs	r0, #16
 8009bea:	f001 ff5c 	bl	800baa6 <osMessageQueueNew>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <USBH_Init+0xac>)
 8009bf8:	4a0d      	ldr	r2, [pc, #52]	; (8009c30 <USBH_Init+0xb0>)
 8009bfa:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009bfc:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <USBH_Init+0xac>)
 8009bfe:	2280      	movs	r2, #128	; 0x80
 8009c00:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009c02:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <USBH_Init+0xac>)
 8009c04:	2218      	movs	r2, #24
 8009c06:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009c08:	4a08      	ldr	r2, [pc, #32]	; (8009c2c <USBH_Init+0xac>)
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	4809      	ldr	r0, [pc, #36]	; (8009c34 <USBH_Init+0xb4>)
 8009c0e:	f001 fdcd 	bl	800b7ac <osThreadNew>
 8009c12:	4602      	mov	r2, r0
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f004 ffa4 	bl	800eb68 <USBH_LL_Init>

  return USBH_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20004e00 	.word	0x20004e00
 8009c30:	0800f218 	.word	0x0800f218
 8009c34:	0800a8a1 	.word	0x0800a8a1

08009c38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	e009      	b.n	8009c5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	33e0      	adds	r3, #224	; 0xe0
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	2200      	movs	r2, #0
 8009c56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2b0e      	cmp	r3, #14
 8009c62:	d9f2      	bls.n	8009c4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	e009      	b.n	8009c7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	60fb      	str	r3, [r7, #12]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c84:	d3f1      	bcc.n	8009c6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2240      	movs	r2, #64	; 0x40
 8009caa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d016      	beq.n	8009d22 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10e      	bne.n	8009d1c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d04:	1c59      	adds	r1, r3, #1
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	33de      	adds	r3, #222	; 0xde
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
 8009d1a:	e004      	b.n	8009d26 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	73fb      	strb	r3, [r7, #15]
 8009d20:	e001      	b.n	8009d26 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009d22:	2302      	movs	r3, #2
 8009d24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009d4a:	78fa      	ldrb	r2, [r7, #3]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d204      	bcs.n	8009d5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	78fa      	ldrb	r2, [r7, #3]
 8009d54:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009d58:	e001      	b.n	8009d5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	4608      	mov	r0, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	461a      	mov	r2, r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	70fb      	strb	r3, [r7, #3]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70bb      	strb	r3, [r7, #2]
 8009d82:	4613      	mov	r3, r2
 8009d84:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d94:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d96:	e025      	b.n	8009de4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
 8009d9a:	221a      	movs	r2, #26
 8009d9c:	fb02 f303 	mul.w	r3, r2, r3
 8009da0:	3308      	adds	r3, #8
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	4413      	add	r3, r2
 8009da6:	3302      	adds	r3, #2
 8009da8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	795b      	ldrb	r3, [r3, #5]
 8009dae:	78fa      	ldrb	r2, [r7, #3]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d002      	beq.n	8009dba <USBH_FindInterface+0x4e>
 8009db4:	78fb      	ldrb	r3, [r7, #3]
 8009db6:	2bff      	cmp	r3, #255	; 0xff
 8009db8:	d111      	bne.n	8009dde <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009dbe:	78ba      	ldrb	r2, [r7, #2]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d002      	beq.n	8009dca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dc4:	78bb      	ldrb	r3, [r7, #2]
 8009dc6:	2bff      	cmp	r3, #255	; 0xff
 8009dc8:	d109      	bne.n	8009dde <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dce:	787a      	ldrb	r2, [r7, #1]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d002      	beq.n	8009dda <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009dd4:	787b      	ldrb	r3, [r7, #1]
 8009dd6:	2bff      	cmp	r3, #255	; 0xff
 8009dd8:	d101      	bne.n	8009dde <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	e006      	b.n	8009dec <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
 8009de0:	3301      	adds	r3, #1
 8009de2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d9d6      	bls.n	8009d98 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009dea:	23ff      	movs	r3, #255	; 0xff
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	371c      	adds	r7, #28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f004 feed 	bl	800ebe0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009e06:	2101      	movs	r1, #1
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f005 f806 	bl	800ee1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af04      	add	r7, sp, #16
 8009e1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009e20:	2302      	movs	r3, #2
 8009e22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d102      	bne.n	8009e3a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2203      	movs	r2, #3
 8009e38:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	2b0b      	cmp	r3, #11
 8009e42:	f200 823c 	bhi.w	800a2be <USBH_Process+0x4a6>
 8009e46:	a201      	add	r2, pc, #4	; (adr r2, 8009e4c <USBH_Process+0x34>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	08009e7d 	.word	0x08009e7d
 8009e50:	08009ecb 	.word	0x08009ecb
 8009e54:	08009f4f 	.word	0x08009f4f
 8009e58:	0800a23d 	.word	0x0800a23d
 8009e5c:	0800a2bf 	.word	0x0800a2bf
 8009e60:	0800a00f 	.word	0x0800a00f
 8009e64:	0800a1c7 	.word	0x0800a1c7
 8009e68:	0800a061 	.word	0x0800a061
 8009e6c:	0800a09d 	.word	0x0800a09d
 8009e70:	0800a0d7 	.word	0x0800a0d7
 8009e74:	0800a11f 	.word	0x0800a11f
 8009e78:	0800a225 	.word	0x0800a225
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 821c 	beq.w	800a2c2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009e90:	20c8      	movs	r0, #200	; 0xc8
 8009e92:	f005 f809 	bl	800eea8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f004 feff 	bl	800ec9a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f001 fe62 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009ec8:	e1fb      	b.n	800a2c2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d107      	bne.n	8009ee4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	701a      	strb	r2, [r3, #0]
 8009ee2:	e025      	b.n	8009f30 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eee:	d914      	bls.n	8009f1a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d903      	bls.n	8009f12 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	220d      	movs	r2, #13
 8009f0e:	701a      	strb	r2, [r3, #0]
 8009f10:	e00e      	b.n	8009f30 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	e00a      	b.n	8009f30 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009f20:	f103 020a 	add.w	r2, r3, #10
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009f2a:	200a      	movs	r0, #10
 8009f2c:	f004 ffbc 	bl	800eea8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f44:	2300      	movs	r3, #0
 8009f46:	2200      	movs	r2, #0
 8009f48:	f001 fe20 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      break;
 8009f4c:	e1c0      	b.n	800a2d0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d005      	beq.n	8009f64 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f5e:	2104      	movs	r1, #4
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f64:	2064      	movs	r0, #100	; 0x64
 8009f66:	f004 ff9f 	bl	800eea8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f004 fe6e 	bl	800ec4c <USBH_LL_GetSpeed>
 8009f70:	4603      	mov	r3, r0
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2205      	movs	r2, #5
 8009f7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009f80:	2100      	movs	r1, #0
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 fb21 	bl	800b5ca <USBH_AllocPipe>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009f90:	2180      	movs	r1, #128	; 0x80
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f001 fb19 	bl	800b5ca <USBH_AllocPipe>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	7919      	ldrb	r1, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fb4:	b292      	uxth	r2, r2
 8009fb6:	9202      	str	r2, [sp, #8]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	9201      	str	r2, [sp, #4]
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2280      	movs	r2, #128	; 0x80
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 fad2 	bl	800b56c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7959      	ldrb	r1, [r3, #5]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fdc:	b292      	uxth	r2, r2
 8009fde:	9202      	str	r2, [sp, #8]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	9201      	str	r2, [sp, #4]
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2200      	movs	r2, #0
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 fabe 	bl	800b56c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a004:	2300      	movs	r3, #0
 800a006:	2200      	movs	r2, #0
 800a008:	f001 fdc0 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      break;
 800a00c:	e160      	b.n	800a2d0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f964 	bl	800a2dc <USBH_HandleEnum>
 800a014:	4603      	mov	r3, r0
 800a016:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f040 8152 	bne.w	800a2c6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a030:	2b01      	cmp	r3, #1
 800a032:	d103      	bne.n	800a03c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2208      	movs	r2, #8
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	e002      	b.n	800a042 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2207      	movs	r2, #7
 800a040:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2205      	movs	r2, #5
 800a046:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a056:	2300      	movs	r3, #0
 800a058:	2200      	movs	r2, #0
 800a05a:	f001 fd97 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a05e:	e132      	b.n	800a2c6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 812f 	beq.w	800a2ca <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a072:	2101      	movs	r1, #1
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2208      	movs	r2, #8
 800a07c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2205      	movs	r2, #5
 800a082:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a092:	2300      	movs	r3, #0
 800a094:	2200      	movs	r2, #0
 800a096:	f001 fd79 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a09a:	e116      	b.n	800a2ca <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fcf8 	bl	800aa9c <USBH_SetCfg>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2209      	movs	r2, #9
 800a0b6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f001 fd5c 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      break;
 800a0d4:	e0fc      	b.n	800a2d0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00a      	beq.n	800a0fa <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fcfb 	bl	800aae2 <USBH_SetFeature>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d106      	bne.n	800a100 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	701a      	strb	r2, [r3, #0]
 800a0f8:	e002      	b.n	800a100 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	220a      	movs	r2, #10
 800a0fe:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a114:	2300      	movs	r3, #0
 800a116:	2200      	movs	r2, #0
 800a118:	f001 fd38 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      break;
 800a11c:	e0d8      	b.n	800a2d0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a124:	2b00      	cmp	r3, #0
 800a126:	d03f      	beq.n	800a1a8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
 800a134:	e016      	b.n	800a164 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a136:	7bfa      	ldrb	r2, [r7, #15]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	32de      	adds	r2, #222	; 0xde
 800a13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a140:	791a      	ldrb	r2, [r3, #4]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a148:	429a      	cmp	r2, r3
 800a14a:	d108      	bne.n	800a15e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a14c:	7bfa      	ldrb	r2, [r7, #15]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	32de      	adds	r2, #222	; 0xde
 800a152:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a15c:	e005      	b.n	800a16a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
 800a160:	3301      	adds	r3, #1
 800a162:	73fb      	strb	r3, [r7, #15]
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0e5      	beq.n	800a136 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a170:	2b00      	cmp	r3, #0
 800a172:	d016      	beq.n	800a1a2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	4798      	blx	r3
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d109      	bne.n	800a19a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2206      	movs	r2, #6
 800a18a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a192:	2103      	movs	r1, #3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
 800a198:	e006      	b.n	800a1a8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	220d      	movs	r2, #13
 800a19e:	701a      	strb	r2, [r3, #0]
 800a1a0:	e002      	b.n	800a1a8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	220d      	movs	r2, #13
 800a1a6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2205      	movs	r2, #5
 800a1ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f001 fce4 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      break;
 800a1c4:	e084      	b.n	800a2d0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d017      	beq.n	800a200 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	4798      	blx	r3
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a1e0:	7bbb      	ldrb	r3, [r7, #14]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d103      	bne.n	800a1f0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	220b      	movs	r2, #11
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	e00a      	b.n	800a206 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d106      	bne.n	800a206 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	220d      	movs	r2, #13
 800a1fc:	701a      	strb	r2, [r3, #0]
 800a1fe:	e002      	b.n	800a206 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	220d      	movs	r2, #13
 800a204:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2205      	movs	r2, #5
 800a20a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a21a:	2300      	movs	r3, #0
 800a21c:	2200      	movs	r2, #0
 800a21e:	f001 fcb5 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      break;
 800a222:	e055      	b.n	800a2d0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d04f      	beq.n	800a2ce <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	4798      	blx	r3
      }
      break;
 800a23a:	e048      	b.n	800a2ce <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff fcf7 	bl	8009c38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d009      	beq.n	800a268 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d005      	beq.n	800a27e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a278:	2105      	movs	r1, #5
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b01      	cmp	r3, #1
 800a288:	d107      	bne.n	800a29a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff fdb0 	bl	8009df8 <USBH_Start>
 800a298:	e002      	b.n	800a2a0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f004 fca0 	bl	800ebe0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f001 fc68 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      break;
 800a2bc:	e008      	b.n	800a2d0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a2be:	bf00      	nop
 800a2c0:	e006      	b.n	800a2d0 <USBH_Process+0x4b8>
      break;
 800a2c2:	bf00      	nop
 800a2c4:	e004      	b.n	800a2d0 <USBH_Process+0x4b8>
      break;
 800a2c6:	bf00      	nop
 800a2c8:	e002      	b.n	800a2d0 <USBH_Process+0x4b8>
    break;
 800a2ca:	bf00      	nop
 800a2cc:	e000      	b.n	800a2d0 <USBH_Process+0x4b8>
      break;
 800a2ce:	bf00      	nop
  }
  return USBH_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop

0800a2dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af04      	add	r7, sp, #16
 800a2e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	785b      	ldrb	r3, [r3, #1]
 800a2f0:	2b07      	cmp	r3, #7
 800a2f2:	f200 8208 	bhi.w	800a706 <USBH_HandleEnum+0x42a>
 800a2f6:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <USBH_HandleEnum+0x20>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a31d 	.word	0x0800a31d
 800a300:	0800a3db 	.word	0x0800a3db
 800a304:	0800a445 	.word	0x0800a445
 800a308:	0800a4d3 	.word	0x0800a4d3
 800a30c:	0800a53d 	.word	0x0800a53d
 800a310:	0800a5ad 	.word	0x0800a5ad
 800a314:	0800a649 	.word	0x0800a649
 800a318:	0800a6c7 	.word	0x0800a6c7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a31c:	2108      	movs	r1, #8
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 faec 	bl	800a8fc <USBH_Get_DevDesc>
 800a324:	4603      	mov	r3, r0
 800a326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d130      	bne.n	800a390 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7919      	ldrb	r1, [r3, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a352:	b292      	uxth	r2, r2
 800a354:	9202      	str	r2, [sp, #8]
 800a356:	2200      	movs	r2, #0
 800a358:	9201      	str	r2, [sp, #4]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	4603      	mov	r3, r0
 800a35e:	2280      	movs	r2, #128	; 0x80
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 f903 	bl	800b56c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	7959      	ldrb	r1, [r3, #5]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a37a:	b292      	uxth	r2, r2
 800a37c:	9202      	str	r2, [sp, #8]
 800a37e:	2200      	movs	r2, #0
 800a380:	9201      	str	r2, [sp, #4]
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	4603      	mov	r3, r0
 800a386:	2200      	movs	r2, #0
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 f8ef 	bl	800b56c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a38e:	e1bc      	b.n	800a70a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a390:	7bbb      	ldrb	r3, [r7, #14]
 800a392:	2b03      	cmp	r3, #3
 800a394:	f040 81b9 	bne.w	800a70a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a39e:	3301      	adds	r3, #1
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d903      	bls.n	800a3ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	220d      	movs	r2, #13
 800a3b6:	701a      	strb	r2, [r3, #0]
      break;
 800a3b8:	e1a7      	b.n	800a70a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	795b      	ldrb	r3, [r3, #5]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f001 f923 	bl	800b60c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	791b      	ldrb	r3, [r3, #4]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 f91d 	bl	800b60c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	701a      	strb	r2, [r3, #0]
      break;
 800a3d8:	e197      	b.n	800a70a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a3da:	2112      	movs	r1, #18
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fa8d 	bl	800a8fc <USBH_Get_DevDesc>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d103      	bne.n	800a3f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3f2:	e18c      	b.n	800a70e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	2b03      	cmp	r3, #3
 800a3f8:	f040 8189 	bne.w	800a70e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a402:	3301      	adds	r3, #1
 800a404:	b2da      	uxtb	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a412:	2b03      	cmp	r3, #3
 800a414:	d903      	bls.n	800a41e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	220d      	movs	r2, #13
 800a41a:	701a      	strb	r2, [r3, #0]
      break;
 800a41c:	e177      	b.n	800a70e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	795b      	ldrb	r3, [r3, #5]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 f8f1 	bl	800b60c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	791b      	ldrb	r3, [r3, #4]
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f001 f8eb 	bl	800b60c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	701a      	strb	r2, [r3, #0]
      break;
 800a442:	e164      	b.n	800a70e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a444:	2101      	movs	r1, #1
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fb04 	bl	800aa54 <USBH_SetAddress>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d132      	bne.n	800a4bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a456:	2002      	movs	r0, #2
 800a458:	f004 fd26 	bl	800eea8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2203      	movs	r2, #3
 800a468:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7919      	ldrb	r1, [r3, #4]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a47e:	b292      	uxth	r2, r2
 800a480:	9202      	str	r2, [sp, #8]
 800a482:	2200      	movs	r2, #0
 800a484:	9201      	str	r2, [sp, #4]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	4603      	mov	r3, r0
 800a48a:	2280      	movs	r2, #128	; 0x80
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 f86d 	bl	800b56c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	7959      	ldrb	r1, [r3, #5]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4a6:	b292      	uxth	r2, r2
 800a4a8:	9202      	str	r2, [sp, #8]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	9201      	str	r2, [sp, #4]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 f859 	bl	800b56c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a4ba:	e12a      	b.n	800a712 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	f040 8127 	bne.w	800a712 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	220d      	movs	r2, #13
 800a4c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	705a      	strb	r2, [r3, #1]
      break;
 800a4d0:	e11f      	b.n	800a712 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a4d2:	2109      	movs	r1, #9
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fa39 	bl	800a94c <USBH_Get_CfgDesc>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d103      	bne.n	800a4ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2204      	movs	r2, #4
 800a4e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a4ea:	e114      	b.n	800a716 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	f040 8111 	bne.w	800a716 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d903      	bls.n	800a516 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	220d      	movs	r2, #13
 800a512:	701a      	strb	r2, [r3, #0]
      break;
 800a514:	e0ff      	b.n	800a716 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	795b      	ldrb	r3, [r3, #5]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 f875 	bl	800b60c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	791b      	ldrb	r3, [r3, #4]
 800a526:	4619      	mov	r1, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f001 f86f 	bl	800b60c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	701a      	strb	r2, [r3, #0]
      break;
 800a53a:	e0ec      	b.n	800a716 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fa01 	bl	800a94c <USBH_Get_CfgDesc>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d103      	bne.n	800a55c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2205      	movs	r2, #5
 800a558:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a55a:	e0de      	b.n	800a71a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	2b03      	cmp	r3, #3
 800a560:	f040 80db 	bne.w	800a71a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a56a:	3301      	adds	r3, #1
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d903      	bls.n	800a586 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	220d      	movs	r2, #13
 800a582:	701a      	strb	r2, [r3, #0]
      break;
 800a584:	e0c9      	b.n	800a71a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	795b      	ldrb	r3, [r3, #5]
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f001 f83d 	bl	800b60c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	791b      	ldrb	r3, [r3, #4]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 f837 	bl	800b60c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	701a      	strb	r2, [r3, #0]
      break;
 800a5aa:	e0b6      	b.n	800a71a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d036      	beq.n	800a624 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a5c2:	23ff      	movs	r3, #255	; 0xff
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f9e5 	bl	800a994 <USBH_Get_StringDesc>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d111      	bne.n	800a5f8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2206      	movs	r2, #6
 800a5d8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2205      	movs	r2, #5
 800a5de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f001 facb 	bl	800bb8c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a5f6:	e092      	b.n	800a71e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	f040 808f 	bne.w	800a71e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2206      	movs	r2, #6
 800a604:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2205      	movs	r2, #5
 800a60a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a61a:	2300      	movs	r3, #0
 800a61c:	2200      	movs	r2, #0
 800a61e:	f001 fab5 	bl	800bb8c <osMessageQueuePut>
      break;
 800a622:	e07c      	b.n	800a71e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2206      	movs	r2, #6
 800a628:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2205      	movs	r2, #5
 800a62e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a63e:	2300      	movs	r3, #0
 800a640:	2200      	movs	r2, #0
 800a642:	f001 faa3 	bl	800bb8c <osMessageQueuePut>
      break;
 800a646:	e06a      	b.n	800a71e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d027      	beq.n	800a6a2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a65e:	23ff      	movs	r3, #255	; 0xff
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f997 	bl	800a994 <USBH_Get_StringDesc>
 800a666:	4603      	mov	r3, r0
 800a668:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d103      	bne.n	800a678 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2207      	movs	r2, #7
 800a674:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a676:	e054      	b.n	800a722 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a678:	7bbb      	ldrb	r3, [r7, #14]
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d151      	bne.n	800a722 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2207      	movs	r2, #7
 800a682:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2205      	movs	r2, #5
 800a688:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a698:	2300      	movs	r3, #0
 800a69a:	2200      	movs	r2, #0
 800a69c:	f001 fa76 	bl	800bb8c <osMessageQueuePut>
      break;
 800a6a0:	e03f      	b.n	800a722 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2207      	movs	r2, #7
 800a6a6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2205      	movs	r2, #5
 800a6ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f001 fa64 	bl	800bb8c <osMessageQueuePut>
      break;
 800a6c4:	e02d      	b.n	800a722 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d017      	beq.n	800a700 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a6dc:	23ff      	movs	r3, #255	; 0xff
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f958 	bl	800a994 <USBH_Get_StringDesc>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a6f2:	e018      	b.n	800a726 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d115      	bne.n	800a726 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6fe:	e012      	b.n	800a726 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
      break;
 800a704:	e00f      	b.n	800a726 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a706:	bf00      	nop
 800a708:	e00e      	b.n	800a728 <USBH_HandleEnum+0x44c>
      break;
 800a70a:	bf00      	nop
 800a70c:	e00c      	b.n	800a728 <USBH_HandleEnum+0x44c>
      break;
 800a70e:	bf00      	nop
 800a710:	e00a      	b.n	800a728 <USBH_HandleEnum+0x44c>
      break;
 800a712:	bf00      	nop
 800a714:	e008      	b.n	800a728 <USBH_HandleEnum+0x44c>
      break;
 800a716:	bf00      	nop
 800a718:	e006      	b.n	800a728 <USBH_HandleEnum+0x44c>
      break;
 800a71a:	bf00      	nop
 800a71c:	e004      	b.n	800a728 <USBH_HandleEnum+0x44c>
      break;
 800a71e:	bf00      	nop
 800a720:	e002      	b.n	800a728 <USBH_HandleEnum+0x44c>
      break;
 800a722:	bf00      	nop
 800a724:	e000      	b.n	800a728 <USBH_HandleEnum+0x44c>
      break;
 800a726:	bf00      	nop
  }
  return Status;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop

0800a734 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f804 	bl	800a776 <USBH_HandleSof>
}
 800a76e:	bf00      	nop
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b0b      	cmp	r3, #11
 800a786:	d10a      	bne.n	800a79e <USBH_HandleSof+0x28>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
  }
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f001 f9dd 	bl	800bb8c <osMessageQueuePut>
#endif
#endif

  return;
 800a7d2:	bf00      	nop
}
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a7ea:	bf00      	nop
}
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2201      	movs	r2, #1
 800a81a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a82a:	2300      	movs	r3, #0
 800a82c:	2200      	movs	r2, #0
 800a82e:	f001 f9ad 	bl	800bb8c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f004 f9da 	bl	800ec16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	791b      	ldrb	r3, [r3, #4]
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fecf 	bl	800b60c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	795b      	ldrb	r3, [r3, #5]
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fec9 	bl	800b60c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a88e:	2300      	movs	r3, #0
 800a890:	2200      	movs	r2, #0
 800a892:	f001 f97b 	bl	800bb8c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f001 f9c7 	bl	800bc4c <osMessageQueueGet>
 800a8be:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1f0      	bne.n	800a8a8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff faa6 	bl	8009e18 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a8cc:	e7ec      	b.n	800a8a8 <USBH_Process_OS+0x8>

0800a8ce <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f001 f94d 	bl	800bb8c <osMessageQueuePut>
#endif

  return USBH_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af02      	add	r7, sp, #8
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a90e:	78fb      	ldrb	r3, [r7, #3]
 800a910:	b29b      	uxth	r3, r3
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	4613      	mov	r3, r2
 800a916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a91a:	2100      	movs	r1, #0
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f864 	bl	800a9ea <USBH_GetDescriptor>
 800a922:	4603      	mov	r3, r0
 800a924:	73fb      	strb	r3, [r7, #15]
 800a926:	7bfb      	ldrb	r3, [r7, #15]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a938:	78fa      	ldrb	r2, [r7, #3]
 800a93a:	b292      	uxth	r2, r2
 800a93c:	4619      	mov	r1, r3
 800a93e:	f000 f918 	bl	800ab72 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a942:	7bfb      	ldrb	r3, [r7, #15]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af02      	add	r7, sp, #8
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	331c      	adds	r3, #28
 800a95c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a95e:	887b      	ldrh	r3, [r7, #2]
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a968:	2100      	movs	r1, #0
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f83d 	bl	800a9ea <USBH_GetDescriptor>
 800a970:	4603      	mov	r3, r0
 800a972:	72fb      	strb	r3, [r7, #11]
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d107      	bne.n	800a98a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a980:	887a      	ldrh	r2, [r7, #2]
 800a982:	68f9      	ldr	r1, [r7, #12]
 800a984:	4618      	mov	r0, r3
 800a986:	f000 f964 	bl	800ac52 <USBH_ParseCfgDesc>
  }

  return status;
 800a98a:	7afb      	ldrb	r3, [r7, #11]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af02      	add	r7, sp, #8
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	607a      	str	r2, [r7, #4]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	72fb      	strb	r3, [r7, #11]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a9b0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a9b8:	893b      	ldrh	r3, [r7, #8]
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	2100      	movs	r1, #0
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f812 	bl	800a9ea <USBH_GetDescriptor>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	75fb      	strb	r3, [r7, #23]
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d107      	bne.n	800a9e0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9d6:	893a      	ldrh	r2, [r7, #8]
 800a9d8:	6879      	ldr	r1, [r7, #4]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fa37 	bl	800ae4e <USBH_ParseStringDesc>
  }

  return status;
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	607b      	str	r3, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	72fb      	strb	r3, [r7, #11]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	789b      	ldrb	r3, [r3, #2]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d11c      	bne.n	800aa3e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aa04:	7afb      	ldrb	r3, [r7, #11]
 800aa06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2206      	movs	r2, #6
 800aa14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	893a      	ldrh	r2, [r7, #8]
 800aa1a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aa1c:	893b      	ldrh	r3, [r7, #8]
 800aa1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa26:	d104      	bne.n	800aa32 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f240 4209 	movw	r2, #1033	; 0x409
 800aa2e:	829a      	strh	r2, [r3, #20]
 800aa30:	e002      	b.n	800aa38 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	8b3a      	ldrh	r2, [r7, #24]
 800aa3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aa3e:	8b3b      	ldrh	r3, [r7, #24]
 800aa40:	461a      	mov	r2, r3
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fa50 	bl	800aeea <USBH_CtlReq>
 800aa4a:	4603      	mov	r3, r0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	789b      	ldrb	r3, [r3, #2]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d10f      	bne.n	800aa88 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2205      	movs	r2, #5
 800aa72:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fa2c 	bl	800aeea <USBH_CtlReq>
 800aa92:	4603      	mov	r3, r0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	789b      	ldrb	r3, [r3, #2]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d10e      	bne.n	800aace <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2209      	movs	r2, #9
 800aaba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	887a      	ldrh	r2, [r7, #2]
 800aac0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aace:	2200      	movs	r2, #0
 800aad0:	2100      	movs	r1, #0
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fa09 	bl	800aeea <USBH_CtlReq>
 800aad8:	4603      	mov	r3, r0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	460b      	mov	r3, r1
 800aaec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	789b      	ldrb	r3, [r3, #2]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d10f      	bne.n	800ab16 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2203      	movs	r2, #3
 800ab00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ab02:	78fb      	ldrb	r3, [r7, #3]
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ab16:	2200      	movs	r2, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f9e5 	bl	800aeea <USBH_CtlReq>
 800ab20:	4603      	mov	r3, r0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	460b      	mov	r3, r1
 800ab34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	789b      	ldrb	r3, [r3, #2]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d10f      	bne.n	800ab5e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2202      	movs	r2, #2
 800ab42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ab50:	78fb      	ldrb	r3, [r7, #3]
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2100      	movs	r1, #0
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f9c1 	bl	800aeea <USBH_CtlReq>
 800ab68:	4603      	mov	r3, r0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b085      	sub	sp, #20
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	781a      	ldrb	r2, [r3, #0]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	785a      	ldrb	r2, [r3, #1]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	3302      	adds	r3, #2
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	3303      	adds	r3, #3
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	021b      	lsls	r3, r3, #8
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	4313      	orrs	r3, r2
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	791a      	ldrb	r2, [r3, #4]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	795a      	ldrb	r2, [r3, #5]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	799a      	ldrb	r2, [r3, #6]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	79da      	ldrb	r2, [r3, #7]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800abcc:	88fb      	ldrh	r3, [r7, #6]
 800abce:	2b08      	cmp	r3, #8
 800abd0:	d939      	bls.n	800ac46 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	3308      	adds	r3, #8
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	b29a      	uxth	r2, r3
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	3309      	adds	r3, #9
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	021b      	lsls	r3, r3, #8
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	4313      	orrs	r3, r2
 800abe8:	b29a      	uxth	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	330a      	adds	r3, #10
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	330b      	adds	r3, #11
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	021b      	lsls	r3, r3, #8
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	4313      	orrs	r3, r2
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	330c      	adds	r3, #12
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	330d      	adds	r3, #13
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	021b      	lsls	r3, r3, #8
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	7b9a      	ldrb	r2, [r3, #14]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	7bda      	ldrb	r2, [r3, #15]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	7c1a      	ldrb	r2, [r3, #16]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	7c5a      	ldrb	r2, [r3, #17]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	745a      	strb	r2, [r3, #17]
  }
}
 800ac46:	bf00      	nop
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b08a      	sub	sp, #40	; 0x28
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ac64:	2300      	movs	r3, #0
 800ac66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	781a      	ldrb	r2, [r3, #0]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	785a      	ldrb	r2, [r3, #1]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	3302      	adds	r3, #2
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	3303      	adds	r3, #3
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	021b      	lsls	r3, r3, #8
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	791a      	ldrb	r2, [r3, #4]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	795a      	ldrb	r2, [r3, #5]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	799a      	ldrb	r2, [r3, #6]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	79da      	ldrb	r2, [r3, #7]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	7a1a      	ldrb	r2, [r3, #8]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800acc8:	88fb      	ldrh	r3, [r7, #6]
 800acca:	2b09      	cmp	r3, #9
 800accc:	d95f      	bls.n	800ad8e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800acce:	2309      	movs	r3, #9
 800acd0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800acd6:	e051      	b.n	800ad7c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800acd8:	f107 0316 	add.w	r3, r7, #22
 800acdc:	4619      	mov	r1, r3
 800acde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ace0:	f000 f8e8 	bl	800aeb4 <USBH_GetNextDesc>
 800ace4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	785b      	ldrb	r3, [r3, #1]
 800acea:	2b04      	cmp	r3, #4
 800acec:	d146      	bne.n	800ad7c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800acee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acf2:	221a      	movs	r2, #26
 800acf4:	fb02 f303 	mul.w	r3, r2, r3
 800acf8:	3308      	adds	r3, #8
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	4413      	add	r3, r2
 800acfe:	3302      	adds	r3, #2
 800ad00:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ad02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad04:	69f8      	ldr	r0, [r7, #28]
 800ad06:	f000 f846 	bl	800ad96 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad14:	e022      	b.n	800ad5c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad16:	f107 0316 	add.w	r3, r7, #22
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad1e:	f000 f8c9 	bl	800aeb4 <USBH_GetNextDesc>
 800ad22:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	785b      	ldrb	r3, [r3, #1]
 800ad28:	2b05      	cmp	r3, #5
 800ad2a:	d117      	bne.n	800ad5c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ad2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad34:	3201      	adds	r2, #1
 800ad36:	00d2      	lsls	r2, r2, #3
 800ad38:	211a      	movs	r1, #26
 800ad3a:	fb01 f303 	mul.w	r3, r1, r3
 800ad3e:	4413      	add	r3, r2
 800ad40:	3308      	adds	r3, #8
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	3304      	adds	r3, #4
 800ad48:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ad4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad4c:	69b8      	ldr	r0, [r7, #24]
 800ad4e:	f000 f851 	bl	800adf4 <USBH_ParseEPDesc>
            ep_ix++;
 800ad52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ad56:	3301      	adds	r3, #1
 800ad58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	791b      	ldrb	r3, [r3, #4]
 800ad60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d204      	bcs.n	800ad72 <USBH_ParseCfgDesc+0x120>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	885a      	ldrh	r2, [r3, #2]
 800ad6c:	8afb      	ldrh	r3, [r7, #22]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d8d1      	bhi.n	800ad16 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ad72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad76:	3301      	adds	r3, #1
 800ad78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ad7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d804      	bhi.n	800ad8e <USBH_ParseCfgDesc+0x13c>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	885a      	ldrh	r2, [r3, #2]
 800ad88:	8afb      	ldrh	r3, [r7, #22]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d8a4      	bhi.n	800acd8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ad8e:	bf00      	nop
 800ad90:	3728      	adds	r7, #40	; 0x28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781a      	ldrb	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	785a      	ldrb	r2, [r3, #1]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	789a      	ldrb	r2, [r3, #2]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	78da      	ldrb	r2, [r3, #3]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	791a      	ldrb	r2, [r3, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	795a      	ldrb	r2, [r3, #5]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	799a      	ldrb	r2, [r3, #6]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	79da      	ldrb	r2, [r3, #7]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	7a1a      	ldrb	r2, [r3, #8]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	721a      	strb	r2, [r3, #8]
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781a      	ldrb	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	785a      	ldrb	r2, [r3, #1]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	789a      	ldrb	r2, [r3, #2]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	78da      	ldrb	r2, [r3, #3]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	3304      	adds	r3, #4
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	3305      	adds	r3, #5
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	021b      	lsls	r3, r3, #8
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	4313      	orrs	r3, r2
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	799a      	ldrb	r2, [r3, #6]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	719a      	strb	r2, [r3, #6]
}
 800ae42:	bf00      	nop
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b087      	sub	sp, #28
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d120      	bne.n	800aea8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	1e9a      	subs	r2, r3, #2
 800ae6c:	88fb      	ldrh	r3, [r7, #6]
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	bf28      	it	cs
 800ae72:	4613      	movcs	r3, r2
 800ae74:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	3302      	adds	r3, #2
 800ae7a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	82fb      	strh	r3, [r7, #22]
 800ae80:	e00b      	b.n	800ae9a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ae82:	8afb      	ldrh	r3, [r7, #22]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	4413      	add	r3, r2
 800ae88:	781a      	ldrb	r2, [r3, #0]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	3301      	adds	r3, #1
 800ae92:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ae94:	8afb      	ldrh	r3, [r7, #22]
 800ae96:	3302      	adds	r3, #2
 800ae98:	82fb      	strh	r3, [r7, #22]
 800ae9a:	8afa      	ldrh	r2, [r7, #22]
 800ae9c:	8abb      	ldrh	r3, [r7, #20]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d3ef      	bcc.n	800ae82 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
  }
}
 800aea8:	bf00      	nop
 800aeaa:	371c      	adds	r7, #28
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	881a      	ldrh	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	4413      	add	r3, r2
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4413      	add	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aedc:	68fb      	ldr	r3, [r7, #12]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b086      	sub	sp, #24
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	60f8      	str	r0, [r7, #12]
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	4613      	mov	r3, r2
 800aef6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aef8:	2301      	movs	r3, #1
 800aefa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	789b      	ldrb	r3, [r3, #2]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d002      	beq.n	800af0a <USBH_CtlReq+0x20>
 800af04:	2b02      	cmp	r3, #2
 800af06:	d01d      	beq.n	800af44 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800af08:	e043      	b.n	800af92 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	88fa      	ldrh	r2, [r7, #6]
 800af14:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2201      	movs	r2, #1
 800af1a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2202      	movs	r2, #2
 800af20:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800af22:	2301      	movs	r3, #1
 800af24:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2203      	movs	r2, #3
 800af2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af3a:	2300      	movs	r3, #0
 800af3c:	2200      	movs	r2, #0
 800af3e:	f000 fe25 	bl	800bb8c <osMessageQueuePut>
      break;
 800af42:	e026      	b.n	800af92 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f829 	bl	800af9c <USBH_HandleControl>
 800af4a:	4603      	mov	r3, r0
 800af4c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <USBH_CtlReq+0x70>
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	2b03      	cmp	r3, #3
 800af58:	d106      	bne.n	800af68 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2201      	movs	r2, #1
 800af5e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	761a      	strb	r2, [r3, #24]
 800af66:	e005      	b.n	800af74 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d102      	bne.n	800af74 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2203      	movs	r2, #3
 800af78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af88:	2300      	movs	r3, #0
 800af8a:	2200      	movs	r2, #0
 800af8c:	f000 fdfe 	bl	800bb8c <osMessageQueuePut>
      break;
 800af90:	bf00      	nop
  }
  return status;
 800af92:	7dfb      	ldrb	r3, [r7, #23]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af02      	add	r7, sp, #8
 800afa2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800afa4:	2301      	movs	r3, #1
 800afa6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7e1b      	ldrb	r3, [r3, #24]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	2b0a      	cmp	r3, #10
 800afb4:	f200 8229 	bhi.w	800b40a <USBH_HandleControl+0x46e>
 800afb8:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <USBH_HandleControl+0x24>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800afed 	.word	0x0800afed
 800afc4:	0800b007 	.word	0x0800b007
 800afc8:	0800b0a9 	.word	0x0800b0a9
 800afcc:	0800b0cf 	.word	0x0800b0cf
 800afd0:	0800b15b 	.word	0x0800b15b
 800afd4:	0800b185 	.word	0x0800b185
 800afd8:	0800b247 	.word	0x0800b247
 800afdc:	0800b269 	.word	0x0800b269
 800afe0:	0800b2fb 	.word	0x0800b2fb
 800afe4:	0800b321 	.word	0x0800b321
 800afe8:	0800b3b3 	.word	0x0800b3b3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f103 0110 	add.w	r1, r3, #16
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	795b      	ldrb	r3, [r3, #5]
 800aff6:	461a      	mov	r2, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa17 	bl	800b42c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2202      	movs	r2, #2
 800b002:	761a      	strb	r2, [r3, #24]
      break;
 800b004:	e20c      	b.n	800b420 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	795b      	ldrb	r3, [r3, #5]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f003 fef1 	bl	800edf4 <USBH_LL_GetURBState>
 800b012:	4603      	mov	r3, r0
 800b014:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b016:	7bbb      	ldrb	r3, [r7, #14]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d12c      	bne.n	800b076 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7c1b      	ldrb	r3, [r3, #16]
 800b020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b024:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	8adb      	ldrh	r3, [r3, #22]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b02e:	7b7b      	ldrb	r3, [r7, #13]
 800b030:	2b80      	cmp	r3, #128	; 0x80
 800b032:	d103      	bne.n	800b03c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2203      	movs	r2, #3
 800b038:	761a      	strb	r2, [r3, #24]
 800b03a:	e00d      	b.n	800b058 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2205      	movs	r2, #5
 800b040:	761a      	strb	r2, [r3, #24]
 800b042:	e009      	b.n	800b058 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b044:	7b7b      	ldrb	r3, [r7, #13]
 800b046:	2b80      	cmp	r3, #128	; 0x80
 800b048:	d103      	bne.n	800b052 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2209      	movs	r2, #9
 800b04e:	761a      	strb	r2, [r3, #24]
 800b050:	e002      	b.n	800b058 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2207      	movs	r2, #7
 800b056:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2203      	movs	r2, #3
 800b05c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b06c:	2300      	movs	r3, #0
 800b06e:	2200      	movs	r2, #0
 800b070:	f000 fd8c 	bl	800bb8c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b074:	e1cb      	b.n	800b40e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b076:	7bbb      	ldrb	r3, [r7, #14]
 800b078:	2b04      	cmp	r3, #4
 800b07a:	d003      	beq.n	800b084 <USBH_HandleControl+0xe8>
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	f040 81c5 	bne.w	800b40e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	220b      	movs	r2, #11
 800b088:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2203      	movs	r2, #3
 800b08e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b09e:	2300      	movs	r3, #0
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f000 fd73 	bl	800bb8c <osMessageQueuePut>
      break;
 800b0a6:	e1b2      	b.n	800b40e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6899      	ldr	r1, [r3, #8]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	899a      	ldrh	r2, [r3, #12]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	791b      	ldrb	r3, [r3, #4]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f9f2 	bl	800b4aa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2204      	movs	r2, #4
 800b0ca:	761a      	strb	r2, [r3, #24]
      break;
 800b0cc:	e1a8      	b.n	800b420 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	791b      	ldrb	r3, [r3, #4]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f003 fe8d 	bl	800edf4 <USBH_LL_GetURBState>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d110      	bne.n	800b106 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2209      	movs	r2, #9
 800b0e8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2203      	movs	r2, #3
 800b0ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b0fe:	2300      	movs	r3, #0
 800b100:	2200      	movs	r2, #0
 800b102:	f000 fd43 	bl	800bb8c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b106:	7bbb      	ldrb	r3, [r7, #14]
 800b108:	2b05      	cmp	r3, #5
 800b10a:	d110      	bne.n	800b12e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b10c:	2303      	movs	r3, #3
 800b10e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2203      	movs	r2, #3
 800b114:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b124:	2300      	movs	r3, #0
 800b126:	2200      	movs	r2, #0
 800b128:	f000 fd30 	bl	800bb8c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b12c:	e171      	b.n	800b412 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b04      	cmp	r3, #4
 800b132:	f040 816e 	bne.w	800b412 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	220b      	movs	r2, #11
 800b13a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2203      	movs	r2, #3
 800b140:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b150:	2300      	movs	r3, #0
 800b152:	2200      	movs	r2, #0
 800b154:	f000 fd1a 	bl	800bb8c <osMessageQueuePut>
      break;
 800b158:	e15b      	b.n	800b412 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6899      	ldr	r1, [r3, #8]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	899a      	ldrh	r2, [r3, #12]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	795b      	ldrb	r3, [r3, #5]
 800b166:	2001      	movs	r0, #1
 800b168:	9000      	str	r0, [sp, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f978 	bl	800b460 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b176:	b29a      	uxth	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2206      	movs	r2, #6
 800b180:	761a      	strb	r2, [r3, #24]
      break;
 800b182:	e14d      	b.n	800b420 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	795b      	ldrb	r3, [r3, #5]
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f003 fe32 	bl	800edf4 <USBH_LL_GetURBState>
 800b190:	4603      	mov	r3, r0
 800b192:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b194:	7bbb      	ldrb	r3, [r7, #14]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d111      	bne.n	800b1be <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2207      	movs	r2, #7
 800b19e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2203      	movs	r2, #3
 800b1a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f000 fce8 	bl	800bb8c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1bc:	e12b      	b.n	800b416 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	2b05      	cmp	r3, #5
 800b1c2:	d113      	bne.n	800b1ec <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	220c      	movs	r2, #12
 800b1c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b1ca:	2303      	movs	r3, #3
 800b1cc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2203      	movs	r2, #3
 800b1d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f000 fcd1 	bl	800bb8c <osMessageQueuePut>
      break;
 800b1ea:	e114      	b.n	800b416 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d111      	bne.n	800b216 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2205      	movs	r2, #5
 800b1f6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b20c:	2300      	movs	r3, #0
 800b20e:	2200      	movs	r2, #0
 800b210:	f000 fcbc 	bl	800bb8c <osMessageQueuePut>
      break;
 800b214:	e0ff      	b.n	800b416 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	2b04      	cmp	r3, #4
 800b21a:	f040 80fc 	bne.w	800b416 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	220b      	movs	r2, #11
 800b222:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b224:	2302      	movs	r3, #2
 800b226:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2203      	movs	r2, #3
 800b22c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b23c:	2300      	movs	r3, #0
 800b23e:	2200      	movs	r2, #0
 800b240:	f000 fca4 	bl	800bb8c <osMessageQueuePut>
      break;
 800b244:	e0e7      	b.n	800b416 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	791b      	ldrb	r3, [r3, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	2100      	movs	r1, #0
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f92b 	bl	800b4aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2208      	movs	r2, #8
 800b264:	761a      	strb	r2, [r3, #24]

      break;
 800b266:	e0db      	b.n	800b420 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	791b      	ldrb	r3, [r3, #4]
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f003 fdc0 	bl	800edf4 <USBH_LL_GetURBState>
 800b274:	4603      	mov	r3, r0
 800b276:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d113      	bne.n	800b2a6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	220d      	movs	r2, #13
 800b282:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2203      	movs	r2, #3
 800b28c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b29c:	2300      	movs	r3, #0
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f000 fc74 	bl	800bb8c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b2a4:	e0b9      	b.n	800b41a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
 800b2a8:	2b04      	cmp	r3, #4
 800b2aa:	d111      	bne.n	800b2d0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	220b      	movs	r2, #11
 800b2b0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2203      	movs	r2, #3
 800b2b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f000 fc5f 	bl	800bb8c <osMessageQueuePut>
      break;
 800b2ce:	e0a4      	b.n	800b41a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	2b05      	cmp	r3, #5
 800b2d4:	f040 80a1 	bne.w	800b41a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2203      	movs	r2, #3
 800b2e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f000 fc4a 	bl	800bb8c <osMessageQueuePut>
      break;
 800b2f8:	e08f      	b.n	800b41a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	795b      	ldrb	r3, [r3, #5]
 800b2fe:	2201      	movs	r2, #1
 800b300:	9200      	str	r2, [sp, #0]
 800b302:	2200      	movs	r2, #0
 800b304:	2100      	movs	r1, #0
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f8aa 	bl	800b460 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b312:	b29a      	uxth	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	220a      	movs	r2, #10
 800b31c:	761a      	strb	r2, [r3, #24]
      break;
 800b31e:	e07f      	b.n	800b420 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	795b      	ldrb	r3, [r3, #5]
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f003 fd64 	bl	800edf4 <USBH_LL_GetURBState>
 800b32c:	4603      	mov	r3, r0
 800b32e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d113      	bne.n	800b35e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	220d      	movs	r2, #13
 800b33e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2203      	movs	r2, #3
 800b344:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b354:	2300      	movs	r3, #0
 800b356:	2200      	movs	r2, #0
 800b358:	f000 fc18 	bl	800bb8c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b35c:	e05f      	b.n	800b41e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b35e:	7bbb      	ldrb	r3, [r7, #14]
 800b360:	2b02      	cmp	r3, #2
 800b362:	d111      	bne.n	800b388 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2209      	movs	r2, #9
 800b368:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2203      	movs	r2, #3
 800b36e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b37e:	2300      	movs	r3, #0
 800b380:	2200      	movs	r2, #0
 800b382:	f000 fc03 	bl	800bb8c <osMessageQueuePut>
      break;
 800b386:	e04a      	b.n	800b41e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d147      	bne.n	800b41e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	220b      	movs	r2, #11
 800b392:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2203      	movs	r2, #3
 800b398:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f000 fbee 	bl	800bb8c <osMessageQueuePut>
      break;
 800b3b0:	e035      	b.n	800b41e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	7e5b      	ldrb	r3, [r3, #25]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	765a      	strb	r2, [r3, #25]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7e5b      	ldrb	r3, [r3, #25]
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d806      	bhi.n	800b3d4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b3d2:	e025      	b.n	800b420 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3da:	2106      	movs	r1, #6
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	795b      	ldrb	r3, [r3, #5]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f90d 	bl	800b60c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	791b      	ldrb	r3, [r3, #4]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f907 	bl	800b60c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b404:	2302      	movs	r3, #2
 800b406:	73fb      	strb	r3, [r7, #15]
      break;
 800b408:	e00a      	b.n	800b420 <USBH_HandleControl+0x484>

    default:
      break;
 800b40a:	bf00      	nop
 800b40c:	e008      	b.n	800b420 <USBH_HandleControl+0x484>
      break;
 800b40e:	bf00      	nop
 800b410:	e006      	b.n	800b420 <USBH_HandleControl+0x484>
      break;
 800b412:	bf00      	nop
 800b414:	e004      	b.n	800b420 <USBH_HandleControl+0x484>
      break;
 800b416:	bf00      	nop
 800b418:	e002      	b.n	800b420 <USBH_HandleControl+0x484>
      break;
 800b41a:	bf00      	nop
 800b41c:	e000      	b.n	800b420 <USBH_HandleControl+0x484>
      break;
 800b41e:	bf00      	nop
  }

  return status;
 800b420:	7bfb      	ldrb	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop

0800b42c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af04      	add	r7, sp, #16
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b43a:	79f9      	ldrb	r1, [r7, #7]
 800b43c:	2300      	movs	r3, #0
 800b43e:	9303      	str	r3, [sp, #12]
 800b440:	2308      	movs	r3, #8
 800b442:	9302      	str	r3, [sp, #8]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	2300      	movs	r3, #0
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	2300      	movs	r3, #0
 800b44e:	2200      	movs	r2, #0
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f003 fc9e 	bl	800ed92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b088      	sub	sp, #32
 800b464:	af04      	add	r7, sp, #16
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	4611      	mov	r1, r2
 800b46c:	461a      	mov	r2, r3
 800b46e:	460b      	mov	r3, r1
 800b470:	80fb      	strh	r3, [r7, #6]
 800b472:	4613      	mov	r3, r2
 800b474:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b480:	2300      	movs	r3, #0
 800b482:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b484:	7979      	ldrb	r1, [r7, #5]
 800b486:	7e3b      	ldrb	r3, [r7, #24]
 800b488:	9303      	str	r3, [sp, #12]
 800b48a:	88fb      	ldrh	r3, [r7, #6]
 800b48c:	9302      	str	r3, [sp, #8]
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	2301      	movs	r3, #1
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	2300      	movs	r3, #0
 800b498:	2200      	movs	r2, #0
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f003 fc79 	bl	800ed92 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b088      	sub	sp, #32
 800b4ae:	af04      	add	r7, sp, #16
 800b4b0:	60f8      	str	r0, [r7, #12]
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	80fb      	strh	r3, [r7, #6]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b4c0:	7979      	ldrb	r1, [r7, #5]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9303      	str	r3, [sp, #12]
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	9302      	str	r3, [sp, #8]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f003 fc5b 	bl	800ed92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b4dc:	2300      	movs	r3, #0

}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b088      	sub	sp, #32
 800b4ea:	af04      	add	r7, sp, #16
 800b4ec:	60f8      	str	r0, [r7, #12]
 800b4ee:	60b9      	str	r1, [r7, #8]
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	80fb      	strh	r3, [r7, #6]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b506:	2300      	movs	r3, #0
 800b508:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b50a:	7979      	ldrb	r1, [r7, #5]
 800b50c:	7e3b      	ldrb	r3, [r7, #24]
 800b50e:	9303      	str	r3, [sp, #12]
 800b510:	88fb      	ldrh	r3, [r7, #6]
 800b512:	9302      	str	r3, [sp, #8]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	9301      	str	r3, [sp, #4]
 800b518:	2301      	movs	r3, #1
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	2302      	movs	r3, #2
 800b51e:	2200      	movs	r2, #0
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f003 fc36 	bl	800ed92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b088      	sub	sp, #32
 800b534:	af04      	add	r7, sp, #16
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	4611      	mov	r1, r2
 800b53c:	461a      	mov	r2, r3
 800b53e:	460b      	mov	r3, r1
 800b540:	80fb      	strh	r3, [r7, #6]
 800b542:	4613      	mov	r3, r2
 800b544:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b546:	7979      	ldrb	r1, [r7, #5]
 800b548:	2300      	movs	r3, #0
 800b54a:	9303      	str	r3, [sp, #12]
 800b54c:	88fb      	ldrh	r3, [r7, #6]
 800b54e:	9302      	str	r3, [sp, #8]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	9301      	str	r3, [sp, #4]
 800b554:	2301      	movs	r3, #1
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	2302      	movs	r3, #2
 800b55a:	2201      	movs	r2, #1
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f003 fc18 	bl	800ed92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af04      	add	r7, sp, #16
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	4608      	mov	r0, r1
 800b576:	4611      	mov	r1, r2
 800b578:	461a      	mov	r2, r3
 800b57a:	4603      	mov	r3, r0
 800b57c:	70fb      	strb	r3, [r7, #3]
 800b57e:	460b      	mov	r3, r1
 800b580:	70bb      	strb	r3, [r7, #2]
 800b582:	4613      	mov	r3, r2
 800b584:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b586:	7878      	ldrb	r0, [r7, #1]
 800b588:	78ba      	ldrb	r2, [r7, #2]
 800b58a:	78f9      	ldrb	r1, [r7, #3]
 800b58c:	8b3b      	ldrh	r3, [r7, #24]
 800b58e:	9302      	str	r3, [sp, #8]
 800b590:	7d3b      	ldrb	r3, [r7, #20]
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	7c3b      	ldrb	r3, [r7, #16]
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	4603      	mov	r3, r0
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f003 fbab 	bl	800ecf6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b5b6:	78fb      	ldrb	r3, [r7, #3]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f003 fbca 	bl	800ed54 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f836 	bl	800b648 <USBH_GetFreePipe>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b5e0:	89fb      	ldrh	r3, [r7, #14]
 800b5e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00a      	beq.n	800b600 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b5ea:	78fa      	ldrb	r2, [r7, #3]
 800b5ec:	89fb      	ldrh	r3, [r7, #14]
 800b5ee:	f003 030f 	and.w	r3, r3, #15
 800b5f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5f6:	6879      	ldr	r1, [r7, #4]
 800b5f8:	33e0      	adds	r3, #224	; 0xe0
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	440b      	add	r3, r1
 800b5fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b600:	89fb      	ldrh	r3, [r7, #14]
 800b602:	b2db      	uxtb	r3, r3
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	2b0a      	cmp	r3, #10
 800b61c:	d80d      	bhi.n	800b63a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b61e:	78fb      	ldrb	r3, [r7, #3]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	33e0      	adds	r3, #224	; 0xe0
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	33e0      	adds	r3, #224	; 0xe0
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	440b      	add	r3, r1
 800b638:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b650:	2300      	movs	r3, #0
 800b652:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b654:	2300      	movs	r3, #0
 800b656:	73fb      	strb	r3, [r7, #15]
 800b658:	e00f      	b.n	800b67a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	33e0      	adds	r3, #224	; 0xe0
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d102      	bne.n	800b674 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b66e:	7bfb      	ldrb	r3, [r7, #15]
 800b670:	b29b      	uxth	r3, r3
 800b672:	e007      	b.n	800b684 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	3301      	adds	r3, #1
 800b678:	73fb      	strb	r3, [r7, #15]
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	2b0a      	cmp	r3, #10
 800b67e:	d9ec      	bls.n	800b65a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b680:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <__NVIC_SetPriority>:
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b69c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	db0a      	blt.n	800b6ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	490c      	ldr	r1, [pc, #48]	; (800b6dc <__NVIC_SetPriority+0x4c>)
 800b6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ae:	0112      	lsls	r2, r2, #4
 800b6b0:	b2d2      	uxtb	r2, r2
 800b6b2:	440b      	add	r3, r1
 800b6b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b6b8:	e00a      	b.n	800b6d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	b2da      	uxtb	r2, r3
 800b6be:	4908      	ldr	r1, [pc, #32]	; (800b6e0 <__NVIC_SetPriority+0x50>)
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	f003 030f 	and.w	r3, r3, #15
 800b6c6:	3b04      	subs	r3, #4
 800b6c8:	0112      	lsls	r2, r2, #4
 800b6ca:	b2d2      	uxtb	r2, r2
 800b6cc:	440b      	add	r3, r1
 800b6ce:	761a      	strb	r2, [r3, #24]
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	e000e100 	.word	0xe000e100
 800b6e0:	e000ed00 	.word	0xe000ed00

0800b6e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b6e8:	4b05      	ldr	r3, [pc, #20]	; (800b700 <SysTick_Handler+0x1c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b6ec:	f002 f80a 	bl	800d704 <xTaskGetSchedulerState>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d001      	beq.n	800b6fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b6f6:	f002 feaf 	bl	800e458 <xPortSysTickHandler>
  }
}
 800b6fa:	bf00      	nop
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	e000e010 	.word	0xe000e010

0800b704 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b704:	b580      	push	{r7, lr}
 800b706:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b708:	2100      	movs	r1, #0
 800b70a:	f06f 0004 	mvn.w	r0, #4
 800b70e:	f7ff ffbf 	bl	800b690 <__NVIC_SetPriority>
#endif
}
 800b712:	bf00      	nop
 800b714:	bd80      	pop	{r7, pc}
	...

0800b718 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b71e:	f3ef 8305 	mrs	r3, IPSR
 800b722:	603b      	str	r3, [r7, #0]
  return(result);
 800b724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b72a:	f06f 0305 	mvn.w	r3, #5
 800b72e:	607b      	str	r3, [r7, #4]
 800b730:	e00c      	b.n	800b74c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b732:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <osKernelInitialize+0x44>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d105      	bne.n	800b746 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b73a:	4b08      	ldr	r3, [pc, #32]	; (800b75c <osKernelInitialize+0x44>)
 800b73c:	2201      	movs	r2, #1
 800b73e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b740:	2300      	movs	r3, #0
 800b742:	607b      	str	r3, [r7, #4]
 800b744:	e002      	b.n	800b74c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b746:	f04f 33ff 	mov.w	r3, #4294967295
 800b74a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b74c:	687b      	ldr	r3, [r7, #4]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000498 	.word	0x20000498

0800b760 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b766:	f3ef 8305 	mrs	r3, IPSR
 800b76a:	603b      	str	r3, [r7, #0]
  return(result);
 800b76c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d003      	beq.n	800b77a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b772:	f06f 0305 	mvn.w	r3, #5
 800b776:	607b      	str	r3, [r7, #4]
 800b778:	e010      	b.n	800b79c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b77a:	4b0b      	ldr	r3, [pc, #44]	; (800b7a8 <osKernelStart+0x48>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d109      	bne.n	800b796 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b782:	f7ff ffbf 	bl	800b704 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b786:	4b08      	ldr	r3, [pc, #32]	; (800b7a8 <osKernelStart+0x48>)
 800b788:	2202      	movs	r2, #2
 800b78a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b78c:	f001 fb72 	bl	800ce74 <vTaskStartScheduler>
      stat = osOK;
 800b790:	2300      	movs	r3, #0
 800b792:	607b      	str	r3, [r7, #4]
 800b794:	e002      	b.n	800b79c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b796:	f04f 33ff 	mov.w	r3, #4294967295
 800b79a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b79c:	687b      	ldr	r3, [r7, #4]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000498 	.word	0x20000498

0800b7ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08e      	sub	sp, #56	; 0x38
 800b7b0:	af04      	add	r7, sp, #16
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7bc:	f3ef 8305 	mrs	r3, IPSR
 800b7c0:	617b      	str	r3, [r7, #20]
  return(result);
 800b7c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d17e      	bne.n	800b8c6 <osThreadNew+0x11a>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d07b      	beq.n	800b8c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b7ce:	2380      	movs	r3, #128	; 0x80
 800b7d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b7d2:	2318      	movs	r3, #24
 800b7d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295
 800b7de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d045      	beq.n	800b872 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <osThreadNew+0x48>
        name = attr->name;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d008      	beq.n	800b81a <osThreadNew+0x6e>
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	2b38      	cmp	r3, #56	; 0x38
 800b80c:	d805      	bhi.n	800b81a <osThreadNew+0x6e>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	f003 0301 	and.w	r3, r3, #1
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <osThreadNew+0x72>
        return (NULL);
 800b81a:	2300      	movs	r3, #0
 800b81c:	e054      	b.n	800b8c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	089b      	lsrs	r3, r3, #2
 800b82c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00e      	beq.n	800b854 <osThreadNew+0xa8>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	2b5b      	cmp	r3, #91	; 0x5b
 800b83c:	d90a      	bls.n	800b854 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b842:	2b00      	cmp	r3, #0
 800b844:	d006      	beq.n	800b854 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <osThreadNew+0xa8>
        mem = 1;
 800b84e:	2301      	movs	r3, #1
 800b850:	61bb      	str	r3, [r7, #24]
 800b852:	e010      	b.n	800b876 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10c      	bne.n	800b876 <osThreadNew+0xca>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d108      	bne.n	800b876 <osThreadNew+0xca>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d104      	bne.n	800b876 <osThreadNew+0xca>
          mem = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	61bb      	str	r3, [r7, #24]
 800b870:	e001      	b.n	800b876 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d110      	bne.n	800b89e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b884:	9202      	str	r2, [sp, #8]
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	6a3a      	ldr	r2, [r7, #32]
 800b890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f001 f918 	bl	800cac8 <xTaskCreateStatic>
 800b898:	4603      	mov	r3, r0
 800b89a:	613b      	str	r3, [r7, #16]
 800b89c:	e013      	b.n	800b8c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d110      	bne.n	800b8c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	f107 0310 	add.w	r3, r7, #16
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f001 f963 	bl	800cb82 <xTaskCreate>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d001      	beq.n	800b8c6 <osThreadNew+0x11a>
            hTask = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b8c6:	693b      	ldr	r3, [r7, #16]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3728      	adds	r7, #40	; 0x28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8d8:	f3ef 8305 	mrs	r3, IPSR
 800b8dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <osDelay+0x1c>
    stat = osErrorISR;
 800b8e4:	f06f 0305 	mvn.w	r3, #5
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	e007      	b.n	800b8fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d002      	beq.n	800b8fc <osDelay+0x2c>
      vTaskDelay(ticks);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 fa88 	bl	800ce0c <vTaskDelay>
    }
  }

  return (stat);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b906:	b580      	push	{r7, lr}
 800b908:	b084      	sub	sp, #16
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f002 fbc0 	bl	800e094 <pvTimerGetTimerID>
 800b914:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d005      	beq.n	800b928 <TimerCallback+0x22>
    callb->func (callb->arg);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	6852      	ldr	r2, [r2, #4]
 800b924:	4610      	mov	r0, r2
 800b926:	4798      	blx	r3
  }
}
 800b928:	bf00      	nop
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b930:	b580      	push	{r7, lr}
 800b932:	b08c      	sub	sp, #48	; 0x30
 800b934:	af02      	add	r7, sp, #8
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	460b      	mov	r3, r1
 800b93e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b940:	2300      	movs	r3, #0
 800b942:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b944:	f3ef 8305 	mrs	r3, IPSR
 800b948:	613b      	str	r3, [r7, #16]
  return(result);
 800b94a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d163      	bne.n	800ba18 <osTimerNew+0xe8>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d060      	beq.n	800ba18 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b956:	2008      	movs	r0, #8
 800b958:	f002 fe0e 	bl	800e578 <pvPortMalloc>
 800b95c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d059      	beq.n	800ba18 <osTimerNew+0xe8>
      callb->func = func;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b970:	7afb      	ldrb	r3, [r7, #11]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <osTimerNew+0x4c>
        reload = pdFALSE;
 800b976:	2300      	movs	r3, #0
 800b978:	61fb      	str	r3, [r7, #28]
 800b97a:	e001      	b.n	800b980 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b980:	f04f 33ff 	mov.w	r3, #4294967295
 800b984:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b986:	2300      	movs	r3, #0
 800b988:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d01c      	beq.n	800b9ca <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <osTimerNew+0x6e>
          name = attr->name;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d006      	beq.n	800b9b4 <osTimerNew+0x84>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	2b2b      	cmp	r3, #43	; 0x2b
 800b9ac:	d902      	bls.n	800b9b4 <osTimerNew+0x84>
          mem = 1;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	61bb      	str	r3, [r7, #24]
 800b9b2:	e00c      	b.n	800b9ce <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d108      	bne.n	800b9ce <osTimerNew+0x9e>
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d104      	bne.n	800b9ce <osTimerNew+0x9e>
            mem = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	61bb      	str	r3, [r7, #24]
 800b9c8:	e001      	b.n	800b9ce <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d10c      	bne.n	800b9ee <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	9301      	str	r3, [sp, #4]
 800b9da:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <osTimerNew+0xf4>)
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9e6:	f001 ffd6 	bl	800d996 <xTimerCreateStatic>
 800b9ea:	6238      	str	r0, [r7, #32]
 800b9ec:	e00b      	b.n	800ba06 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d108      	bne.n	800ba06 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <osTimerNew+0xf4>)
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	69fa      	ldr	r2, [r7, #28]
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba00:	f001 ffa8 	bl	800d954 <xTimerCreate>
 800ba04:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d105      	bne.n	800ba18 <osTimerNew+0xe8>
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <osTimerNew+0xe8>
        vPortFree (callb);
 800ba12:	6978      	ldr	r0, [r7, #20]
 800ba14:	f002 fe7c 	bl	800e710 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ba18:	6a3b      	ldr	r3, [r7, #32]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3728      	adds	r7, #40	; 0x28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	0800b907 	.word	0x0800b907

0800ba28 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba34:	f3ef 8305 	mrs	r3, IPSR
 800ba38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba3a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d12d      	bne.n	800ba9c <osEventFlagsNew+0x74>
    mem = -1;
 800ba40:	f04f 33ff 	mov.w	r3, #4294967295
 800ba44:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d015      	beq.n	800ba78 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d006      	beq.n	800ba62 <osEventFlagsNew+0x3a>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	2b1f      	cmp	r3, #31
 800ba5a:	d902      	bls.n	800ba62 <osEventFlagsNew+0x3a>
        mem = 1;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	613b      	str	r3, [r7, #16]
 800ba60:	e00c      	b.n	800ba7c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d108      	bne.n	800ba7c <osEventFlagsNew+0x54>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d104      	bne.n	800ba7c <osEventFlagsNew+0x54>
          mem = 0;
 800ba72:	2300      	movs	r3, #0
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	e001      	b.n	800ba7c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d106      	bne.n	800ba90 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 f972 	bl	800bd70 <xEventGroupCreateStatic>
 800ba8c:	6178      	str	r0, [r7, #20]
 800ba8e:	e005      	b.n	800ba9c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d102      	bne.n	800ba9c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800ba96:	f000 f9a2 	bl	800bdde <xEventGroupCreate>
 800ba9a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ba9c:	697b      	ldr	r3, [r7, #20]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b08a      	sub	sp, #40	; 0x28
 800baaa:	af02      	add	r7, sp, #8
 800baac:	60f8      	str	r0, [r7, #12]
 800baae:	60b9      	str	r1, [r7, #8]
 800bab0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bab6:	f3ef 8305 	mrs	r3, IPSR
 800baba:	613b      	str	r3, [r7, #16]
  return(result);
 800babc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d15f      	bne.n	800bb82 <osMessageQueueNew+0xdc>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d05c      	beq.n	800bb82 <osMessageQueueNew+0xdc>
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d059      	beq.n	800bb82 <osMessageQueueNew+0xdc>
    mem = -1;
 800bace:	f04f 33ff 	mov.w	r3, #4294967295
 800bad2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d029      	beq.n	800bb2e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d012      	beq.n	800bb08 <osMessageQueueNew+0x62>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	2b4f      	cmp	r3, #79	; 0x4f
 800bae8:	d90e      	bls.n	800bb08 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00a      	beq.n	800bb08 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	695a      	ldr	r2, [r3, #20]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	68b9      	ldr	r1, [r7, #8]
 800bafa:	fb01 f303 	mul.w	r3, r1, r3
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d302      	bcc.n	800bb08 <osMessageQueueNew+0x62>
        mem = 1;
 800bb02:	2301      	movs	r3, #1
 800bb04:	61bb      	str	r3, [r7, #24]
 800bb06:	e014      	b.n	800bb32 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d110      	bne.n	800bb32 <osMessageQueueNew+0x8c>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10c      	bne.n	800bb32 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d108      	bne.n	800bb32 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d104      	bne.n	800bb32 <osMessageQueueNew+0x8c>
          mem = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	61bb      	str	r3, [r7, #24]
 800bb2c:	e001      	b.n	800bb32 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d10b      	bne.n	800bb50 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	691a      	ldr	r2, [r3, #16]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	2100      	movs	r1, #0
 800bb42:	9100      	str	r1, [sp, #0]
 800bb44:	68b9      	ldr	r1, [r7, #8]
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 fa80 	bl	800c04c <xQueueGenericCreateStatic>
 800bb4c:	61f8      	str	r0, [r7, #28]
 800bb4e:	e008      	b.n	800bb62 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d105      	bne.n	800bb62 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bb56:	2200      	movs	r2, #0
 800bb58:	68b9      	ldr	r1, [r7, #8]
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f000 faee 	bl	800c13c <xQueueGenericCreate>
 800bb60:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00c      	beq.n	800bb82 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d003      	beq.n	800bb76 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	e001      	b.n	800bb7a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bb7a:	6979      	ldr	r1, [r7, #20]
 800bb7c:	69f8      	ldr	r0, [r7, #28]
 800bb7e:	f000 ff45 	bl	800ca0c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bb82:	69fb      	ldr	r3, [r7, #28]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3720      	adds	r7, #32
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bba4:	f3ef 8305 	mrs	r3, IPSR
 800bba8:	617b      	str	r3, [r7, #20]
  return(result);
 800bbaa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d028      	beq.n	800bc02 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d005      	beq.n	800bbc2 <osMessageQueuePut+0x36>
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <osMessageQueuePut+0x36>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d003      	beq.n	800bbca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bbc2:	f06f 0303 	mvn.w	r3, #3
 800bbc6:	61fb      	str	r3, [r7, #28]
 800bbc8:	e038      	b.n	800bc3c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bbce:	f107 0210 	add.w	r2, r7, #16
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	68b9      	ldr	r1, [r7, #8]
 800bbd6:	69b8      	ldr	r0, [r7, #24]
 800bbd8:	f000 fc0c 	bl	800c3f4 <xQueueGenericSendFromISR>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d003      	beq.n	800bbea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bbe2:	f06f 0302 	mvn.w	r3, #2
 800bbe6:	61fb      	str	r3, [r7, #28]
 800bbe8:	e028      	b.n	800bc3c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d025      	beq.n	800bc3c <osMessageQueuePut+0xb0>
 800bbf0:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <osMessageQueuePut+0xbc>)
 800bbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	e01c      	b.n	800bc3c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d002      	beq.n	800bc0e <osMessageQueuePut+0x82>
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d103      	bne.n	800bc16 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bc0e:	f06f 0303 	mvn.w	r3, #3
 800bc12:	61fb      	str	r3, [r7, #28]
 800bc14:	e012      	b.n	800bc3c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc16:	2300      	movs	r3, #0
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	68b9      	ldr	r1, [r7, #8]
 800bc1c:	69b8      	ldr	r0, [r7, #24]
 800bc1e:	f000 faeb 	bl	800c1f8 <xQueueGenericSend>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d009      	beq.n	800bc3c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bc2e:	f06f 0301 	mvn.w	r3, #1
 800bc32:	61fb      	str	r3, [r7, #28]
 800bc34:	e002      	b.n	800bc3c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bc36:	f06f 0302 	mvn.w	r3, #2
 800bc3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bc3c:	69fb      	ldr	r3, [r7, #28]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3720      	adds	r7, #32
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	e000ed04 	.word	0xe000ed04

0800bc4c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc62:	f3ef 8305 	mrs	r3, IPSR
 800bc66:	617b      	str	r3, [r7, #20]
  return(result);
 800bc68:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d028      	beq.n	800bcc0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d005      	beq.n	800bc80 <osMessageQueueGet+0x34>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <osMessageQueueGet+0x34>
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d003      	beq.n	800bc88 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bc80:	f06f 0303 	mvn.w	r3, #3
 800bc84:	61fb      	str	r3, [r7, #28]
 800bc86:	e037      	b.n	800bcf8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bc8c:	f107 0310 	add.w	r3, r7, #16
 800bc90:	461a      	mov	r2, r3
 800bc92:	68b9      	ldr	r1, [r7, #8]
 800bc94:	69b8      	ldr	r0, [r7, #24]
 800bc96:	f000 fd29 	bl	800c6ec <xQueueReceiveFromISR>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d003      	beq.n	800bca8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bca0:	f06f 0302 	mvn.w	r3, #2
 800bca4:	61fb      	str	r3, [r7, #28]
 800bca6:	e027      	b.n	800bcf8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d024      	beq.n	800bcf8 <osMessageQueueGet+0xac>
 800bcae:	4b15      	ldr	r3, [pc, #84]	; (800bd04 <osMessageQueueGet+0xb8>)
 800bcb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	e01b      	b.n	800bcf8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d002      	beq.n	800bccc <osMessageQueueGet+0x80>
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d103      	bne.n	800bcd4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bccc:	f06f 0303 	mvn.w	r3, #3
 800bcd0:	61fb      	str	r3, [r7, #28]
 800bcd2:	e011      	b.n	800bcf8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	69b8      	ldr	r0, [r7, #24]
 800bcda:	f000 fc27 	bl	800c52c <xQueueReceive>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d009      	beq.n	800bcf8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bcea:	f06f 0301 	mvn.w	r3, #1
 800bcee:	61fb      	str	r3, [r7, #28]
 800bcf0:	e002      	b.n	800bcf8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bcf2:	f06f 0302 	mvn.w	r3, #2
 800bcf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bcf8:	69fb      	ldr	r3, [r7, #28]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3720      	adds	r7, #32
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	e000ed04 	.word	0xe000ed04

0800bd08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	4a07      	ldr	r2, [pc, #28]	; (800bd34 <vApplicationGetIdleTaskMemory+0x2c>)
 800bd18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	4a06      	ldr	r2, [pc, #24]	; (800bd38 <vApplicationGetIdleTaskMemory+0x30>)
 800bd1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2280      	movs	r2, #128	; 0x80
 800bd24:	601a      	str	r2, [r3, #0]
}
 800bd26:	bf00      	nop
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	2000049c 	.word	0x2000049c
 800bd38:	200004f8 	.word	0x200004f8

0800bd3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4a07      	ldr	r2, [pc, #28]	; (800bd68 <vApplicationGetTimerTaskMemory+0x2c>)
 800bd4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	4a06      	ldr	r2, [pc, #24]	; (800bd6c <vApplicationGetTimerTaskMemory+0x30>)
 800bd52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd5a:	601a      	str	r2, [r3, #0]
}
 800bd5c:	bf00      	nop
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	200006f8 	.word	0x200006f8
 800bd6c:	20000754 	.word	0x20000754

0800bd70 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd90:	bf00      	nop
 800bd92:	e7fe      	b.n	800bd92 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800bd94:	2320      	movs	r3, #32
 800bd96:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	d00a      	beq.n	800bdb4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	60fb      	str	r3, [r7, #12]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00a      	beq.n	800bdd4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 f822 	bl	800be12 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800bdd4:	697b      	ldr	r3, [r7, #20]
	}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800bde4:	2020      	movs	r0, #32
 800bde6:	f002 fbc7 	bl	800e578 <pvPortMalloc>
 800bdea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 f808 	bl	800be12 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800be08:	687b      	ldr	r3, [r7, #4]
	}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be12:	b480      	push	{r7}
 800be14:	b083      	sub	sp, #12
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f103 0208 	add.w	r2, r3, #8
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f04f 32ff 	mov.w	r2, #4294967295
 800be2a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f103 0208 	add.w	r2, r3, #8
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f103 0208 	add.w	r2, r3, #8
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be46:	bf00      	nop
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	689a      	ldr	r2, [r3, #8]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	601a      	str	r2, [r3, #0]
}
 800bea8:	bf00      	nop
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beca:	d103      	bne.n	800bed4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	60fb      	str	r3, [r7, #12]
 800bed2:	e00c      	b.n	800beee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3308      	adds	r3, #8
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	e002      	b.n	800bee2 <vListInsert+0x2e>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	60fb      	str	r3, [r7, #12]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	429a      	cmp	r2, r3
 800beec:	d2f6      	bcs.n	800bedc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	601a      	str	r2, [r3, #0]
}
 800bf1a:	bf00      	nop
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf26:	b480      	push	{r7}
 800bf28:	b085      	sub	sp, #20
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6892      	ldr	r2, [r2, #8]
 800bf3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	6852      	ldr	r2, [r2, #4]
 800bf46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d103      	bne.n	800bf5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	1e5a      	subs	r2, r3, #1
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3714      	adds	r7, #20
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
	...

0800bf7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <xQueueGenericReset+0x2a>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	60bb      	str	r3, [r7, #8]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bfa6:	f002 f9c5 	bl	800e334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb2:	68f9      	ldr	r1, [r7, #12]
 800bfb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfb6:	fb01 f303 	mul.w	r3, r1, r3
 800bfba:	441a      	add	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	68f9      	ldr	r1, [r7, #12]
 800bfda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfdc:	fb01 f303 	mul.w	r3, r1, r3
 800bfe0:	441a      	add	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	22ff      	movs	r2, #255	; 0xff
 800bfea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	22ff      	movs	r2, #255	; 0xff
 800bff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d114      	bne.n	800c026 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d01a      	beq.n	800c03a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3310      	adds	r3, #16
 800c008:	4618      	mov	r0, r3
 800c00a:	f001 f9bd 	bl	800d388 <xTaskRemoveFromEventList>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d012      	beq.n	800c03a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c014:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <xQueueGenericReset+0xcc>)
 800c016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	e009      	b.n	800c03a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3310      	adds	r3, #16
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7ff fef1 	bl	800be12 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	3324      	adds	r3, #36	; 0x24
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff feec 	bl	800be12 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c03a:	f002 f9ab 	bl	800e394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c03e:	2301      	movs	r3, #1
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08e      	sub	sp, #56	; 0x38
 800c050:	af02      	add	r7, sp, #8
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <xQueueGenericCreateStatic+0x52>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <xQueueGenericCreateStatic+0x56>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e000      	b.n	800c0a4 <xQueueGenericCreateStatic+0x58>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10a      	bne.n	800c0be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	623b      	str	r3, [r7, #32]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <xQueueGenericCreateStatic+0x7e>
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <xQueueGenericCreateStatic+0x82>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e000      	b.n	800c0d0 <xQueueGenericCreateStatic+0x84>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10a      	bne.n	800c0ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	61fb      	str	r3, [r7, #28]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0ea:	2350      	movs	r3, #80	; 0x50
 800c0ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b50      	cmp	r3, #80	; 0x50
 800c0f2:	d00a      	beq.n	800c10a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	61bb      	str	r3, [r7, #24]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c10a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00d      	beq.n	800c132 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c11e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	4613      	mov	r3, r2
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	68b9      	ldr	r1, [r7, #8]
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 f83f 	bl	800c1b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c134:	4618      	mov	r0, r3
 800c136:	3730      	adds	r7, #48	; 0x30
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08a      	sub	sp, #40	; 0x28
 800c140:	af02      	add	r7, sp, #8
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	4613      	mov	r3, r2
 800c148:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10a      	bne.n	800c166 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	613b      	str	r3, [r7, #16]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	fb02 f303 	mul.w	r3, r2, r3
 800c16e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	3350      	adds	r3, #80	; 0x50
 800c174:	4618      	mov	r0, r3
 800c176:	f002 f9ff 	bl	800e578 <pvPortMalloc>
 800c17a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d011      	beq.n	800c1a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	3350      	adds	r3, #80	; 0x50
 800c18a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	2200      	movs	r2, #0
 800c190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c194:	79fa      	ldrb	r2, [r7, #7]
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	4613      	mov	r3, r2
 800c19c:	697a      	ldr	r2, [r7, #20]
 800c19e:	68b9      	ldr	r1, [r7, #8]
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f000 f805 	bl	800c1b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
	}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
 800c1bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d103      	bne.n	800c1cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	69ba      	ldr	r2, [r7, #24]
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	e002      	b.n	800c1d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1de:	2101      	movs	r1, #1
 800c1e0:	69b8      	ldr	r0, [r7, #24]
 800c1e2:	f7ff fecb 	bl	800bf7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	78fa      	ldrb	r2, [r7, #3]
 800c1ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c1ee:	bf00      	nop
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
	...

0800c1f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08e      	sub	sp, #56	; 0x38
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c206:	2300      	movs	r3, #0
 800c208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <xQueueGenericSend+0x32>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d103      	bne.n	800c238 <xQueueGenericSend+0x40>
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c234:	2b00      	cmp	r3, #0
 800c236:	d101      	bne.n	800c23c <xQueueGenericSend+0x44>
 800c238:	2301      	movs	r3, #1
 800c23a:	e000      	b.n	800c23e <xQueueGenericSend+0x46>
 800c23c:	2300      	movs	r3, #0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10a      	bne.n	800c258 <xQueueGenericSend+0x60>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c254:	bf00      	nop
 800c256:	e7fe      	b.n	800c256 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d103      	bne.n	800c266 <xQueueGenericSend+0x6e>
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c262:	2b01      	cmp	r3, #1
 800c264:	d101      	bne.n	800c26a <xQueueGenericSend+0x72>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <xQueueGenericSend+0x74>
 800c26a:	2300      	movs	r3, #0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10a      	bne.n	800c286 <xQueueGenericSend+0x8e>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	623b      	str	r3, [r7, #32]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c286:	f001 fa3d 	bl	800d704 <xTaskGetSchedulerState>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d102      	bne.n	800c296 <xQueueGenericSend+0x9e>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <xQueueGenericSend+0xa2>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <xQueueGenericSend+0xa4>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10a      	bne.n	800c2b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	61fb      	str	r3, [r7, #28]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2b6:	f002 f83d 	bl	800e334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d302      	bcc.n	800c2cc <xQueueGenericSend+0xd4>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d129      	bne.n	800c320 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	68b9      	ldr	r1, [r7, #8]
 800c2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2d2:	f000 fa8b 	bl	800c7ec <prvCopyDataToQueue>
 800c2d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d010      	beq.n	800c302 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e2:	3324      	adds	r3, #36	; 0x24
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f001 f84f 	bl	800d388 <xTaskRemoveFromEventList>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d013      	beq.n	800c318 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2f0:	4b3f      	ldr	r3, [pc, #252]	; (800c3f0 <xQueueGenericSend+0x1f8>)
 800c2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	e00a      	b.n	800c318 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d007      	beq.n	800c318 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c308:	4b39      	ldr	r3, [pc, #228]	; (800c3f0 <xQueueGenericSend+0x1f8>)
 800c30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c318:	f002 f83c 	bl	800e394 <vPortExitCritical>
				return pdPASS;
 800c31c:	2301      	movs	r3, #1
 800c31e:	e063      	b.n	800c3e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d103      	bne.n	800c32e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c326:	f002 f835 	bl	800e394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	e05c      	b.n	800c3e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c330:	2b00      	cmp	r3, #0
 800c332:	d106      	bne.n	800c342 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c334:	f107 0314 	add.w	r3, r7, #20
 800c338:	4618      	mov	r0, r3
 800c33a:	f001 f889 	bl	800d450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c33e:	2301      	movs	r3, #1
 800c340:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c342:	f002 f827 	bl	800e394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c346:	f000 fdfb 	bl	800cf40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c34a:	f001 fff3 	bl	800e334 <vPortEnterCritical>
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c354:	b25b      	sxtb	r3, r3
 800c356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35a:	d103      	bne.n	800c364 <xQueueGenericSend+0x16c>
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c36a:	b25b      	sxtb	r3, r3
 800c36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c370:	d103      	bne.n	800c37a <xQueueGenericSend+0x182>
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	2200      	movs	r2, #0
 800c376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c37a:	f002 f80b 	bl	800e394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c37e:	1d3a      	adds	r2, r7, #4
 800c380:	f107 0314 	add.w	r3, r7, #20
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f001 f878 	bl	800d47c <xTaskCheckForTimeOut>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d124      	bne.n	800c3dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c394:	f000 fb22 	bl	800c9dc <prvIsQueueFull>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d018      	beq.n	800c3d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	3310      	adds	r3, #16
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 ff9e 	bl	800d2e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ae:	f000 faad 	bl	800c90c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c3b2:	f000 fdd3 	bl	800cf5c <xTaskResumeAll>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f47f af7c 	bne.w	800c2b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c3be:	4b0c      	ldr	r3, [pc, #48]	; (800c3f0 <xQueueGenericSend+0x1f8>)
 800c3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	e772      	b.n	800c2b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3d2:	f000 fa9b 	bl	800c90c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3d6:	f000 fdc1 	bl	800cf5c <xTaskResumeAll>
 800c3da:	e76c      	b.n	800c2b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3de:	f000 fa95 	bl	800c90c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3e2:	f000 fdbb 	bl	800cf5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3738      	adds	r7, #56	; 0x38
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	e000ed04 	.word	0xe000ed04

0800c3f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b090      	sub	sp, #64	; 0x40
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
 800c400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10a      	bne.n	800c422 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c41e:	bf00      	nop
 800c420:	e7fe      	b.n	800c420 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d103      	bne.n	800c430 <xQueueGenericSendFromISR+0x3c>
 800c428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <xQueueGenericSendFromISR+0x40>
 800c430:	2301      	movs	r3, #1
 800c432:	e000      	b.n	800c436 <xQueueGenericSendFromISR+0x42>
 800c434:	2300      	movs	r3, #0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10a      	bne.n	800c450 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2b02      	cmp	r3, #2
 800c454:	d103      	bne.n	800c45e <xQueueGenericSendFromISR+0x6a>
 800c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d101      	bne.n	800c462 <xQueueGenericSendFromISR+0x6e>
 800c45e:	2301      	movs	r3, #1
 800c460:	e000      	b.n	800c464 <xQueueGenericSendFromISR+0x70>
 800c462:	2300      	movs	r3, #0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10a      	bne.n	800c47e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	623b      	str	r3, [r7, #32]
}
 800c47a:	bf00      	nop
 800c47c:	e7fe      	b.n	800c47c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c47e:	f002 f83b 	bl	800e4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c482:	f3ef 8211 	mrs	r2, BASEPRI
 800c486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	61fa      	str	r2, [r7, #28]
 800c498:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c49a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c49c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d302      	bcc.n	800c4b0 <xQueueGenericSendFromISR+0xbc>
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d12f      	bne.n	800c510 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	68b9      	ldr	r1, [r7, #8]
 800c4c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4c6:	f000 f991 	bl	800c7ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d2:	d112      	bne.n	800c4fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d016      	beq.n	800c50a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	3324      	adds	r3, #36	; 0x24
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 ff51 	bl	800d388 <xTaskRemoveFromEventList>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00e      	beq.n	800c50a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	e007      	b.n	800c50a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4fe:	3301      	adds	r3, #1
 800c500:	b2db      	uxtb	r3, r3
 800c502:	b25a      	sxtb	r2, r3
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c50a:	2301      	movs	r3, #1
 800c50c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c50e:	e001      	b.n	800c514 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c510:	2300      	movs	r3, #0
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c516:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c51e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c522:	4618      	mov	r0, r3
 800c524:	3740      	adds	r7, #64	; 0x40
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b08c      	sub	sp, #48	; 0x30
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c538:	2300      	movs	r3, #0
 800c53a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10a      	bne.n	800c55c <xQueueReceive+0x30>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	623b      	str	r3, [r7, #32]
}
 800c558:	bf00      	nop
 800c55a:	e7fe      	b.n	800c55a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d103      	bne.n	800c56a <xQueueReceive+0x3e>
 800c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <xQueueReceive+0x42>
 800c56a:	2301      	movs	r3, #1
 800c56c:	e000      	b.n	800c570 <xQueueReceive+0x44>
 800c56e:	2300      	movs	r3, #0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10a      	bne.n	800c58a <xQueueReceive+0x5e>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	61fb      	str	r3, [r7, #28]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c58a:	f001 f8bb 	bl	800d704 <xTaskGetSchedulerState>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <xQueueReceive+0x6e>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d101      	bne.n	800c59e <xQueueReceive+0x72>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e000      	b.n	800c5a0 <xQueueReceive+0x74>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <xQueueReceive+0x8e>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	61bb      	str	r3, [r7, #24]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5ba:	f001 febb 	bl	800e334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d01f      	beq.n	800c60a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5ca:	68b9      	ldr	r1, [r7, #8]
 800c5cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ce:	f000 f977 	bl	800c8c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	1e5a      	subs	r2, r3, #1
 800c5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00f      	beq.n	800c602 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	3310      	adds	r3, #16
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 fece 	bl	800d388 <xTaskRemoveFromEventList>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d007      	beq.n	800c602 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5f2:	4b3d      	ldr	r3, [pc, #244]	; (800c6e8 <xQueueReceive+0x1bc>)
 800c5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c602:	f001 fec7 	bl	800e394 <vPortExitCritical>
				return pdPASS;
 800c606:	2301      	movs	r3, #1
 800c608:	e069      	b.n	800c6de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d103      	bne.n	800c618 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c610:	f001 fec0 	bl	800e394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c614:	2300      	movs	r3, #0
 800c616:	e062      	b.n	800c6de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c61e:	f107 0310 	add.w	r3, r7, #16
 800c622:	4618      	mov	r0, r3
 800c624:	f000 ff14 	bl	800d450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c628:	2301      	movs	r3, #1
 800c62a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c62c:	f001 feb2 	bl	800e394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c630:	f000 fc86 	bl	800cf40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c634:	f001 fe7e 	bl	800e334 <vPortEnterCritical>
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c63e:	b25b      	sxtb	r3, r3
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c644:	d103      	bne.n	800c64e <xQueueReceive+0x122>
 800c646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c654:	b25b      	sxtb	r3, r3
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d103      	bne.n	800c664 <xQueueReceive+0x138>
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c664:	f001 fe96 	bl	800e394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c668:	1d3a      	adds	r2, r7, #4
 800c66a:	f107 0310 	add.w	r3, r7, #16
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f000 ff03 	bl	800d47c <xTaskCheckForTimeOut>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d123      	bne.n	800c6c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c67e:	f000 f997 	bl	800c9b0 <prvIsQueueEmpty>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d017      	beq.n	800c6b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	3324      	adds	r3, #36	; 0x24
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	4611      	mov	r1, r2
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fe29 	bl	800d2e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c698:	f000 f938 	bl	800c90c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c69c:	f000 fc5e 	bl	800cf5c <xTaskResumeAll>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d189      	bne.n	800c5ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c6a6:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <xQueueReceive+0x1bc>)
 800c6a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	e780      	b.n	800c5ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ba:	f000 f927 	bl	800c90c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6be:	f000 fc4d 	bl	800cf5c <xTaskResumeAll>
 800c6c2:	e77a      	b.n	800c5ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c6:	f000 f921 	bl	800c90c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6ca:	f000 fc47 	bl	800cf5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6d0:	f000 f96e 	bl	800c9b0 <prvIsQueueEmpty>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f43f af6f 	beq.w	800c5ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3730      	adds	r7, #48	; 0x30
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	e000ed04 	.word	0xe000ed04

0800c6ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08e      	sub	sp, #56	; 0x38
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10a      	bne.n	800c718 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	623b      	str	r3, [r7, #32]
}
 800c714:	bf00      	nop
 800c716:	e7fe      	b.n	800c716 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d103      	bne.n	800c726 <xQueueReceiveFromISR+0x3a>
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <xQueueReceiveFromISR+0x3e>
 800c726:	2301      	movs	r3, #1
 800c728:	e000      	b.n	800c72c <xQueueReceiveFromISR+0x40>
 800c72a:	2300      	movs	r3, #0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10a      	bne.n	800c746 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	61fb      	str	r3, [r7, #28]
}
 800c742:	bf00      	nop
 800c744:	e7fe      	b.n	800c744 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c746:	f001 fed7 	bl	800e4f8 <vPortValidateInterruptPriority>
	__asm volatile
 800c74a:	f3ef 8211 	mrs	r2, BASEPRI
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	61ba      	str	r2, [r7, #24]
 800c760:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c762:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c764:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d02f      	beq.n	800c7d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c77c:	68b9      	ldr	r1, [r7, #8]
 800c77e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c780:	f000 f89e 	bl	800c8c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	1e5a      	subs	r2, r3, #1
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c78c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c794:	d112      	bne.n	800c7bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d016      	beq.n	800c7cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	3310      	adds	r3, #16
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 fdf0 	bl	800d388 <xTaskRemoveFromEventList>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00e      	beq.n	800c7cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00b      	beq.n	800c7cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	e007      	b.n	800c7cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	b25a      	sxtb	r2, r3
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c7d0:	e001      	b.n	800c7d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	f383 8811 	msr	BASEPRI, r3
}
 800c7e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3738      	adds	r7, #56	; 0x38
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c800:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10d      	bne.n	800c826 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d14d      	bne.n	800c8ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	4618      	mov	r0, r3
 800c818:	f000 ff92 	bl	800d740 <xTaskPriorityDisinherit>
 800c81c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	609a      	str	r2, [r3, #8]
 800c824:	e043      	b.n	800c8ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d119      	bne.n	800c860 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6858      	ldr	r0, [r3, #4]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c834:	461a      	mov	r2, r3
 800c836:	68b9      	ldr	r1, [r7, #8]
 800c838:	f002 fbc4 	bl	800efc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c844:	441a      	add	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	429a      	cmp	r2, r3
 800c854:	d32b      	bcc.n	800c8ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	605a      	str	r2, [r3, #4]
 800c85e:	e026      	b.n	800c8ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	68d8      	ldr	r0, [r3, #12]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c868:	461a      	mov	r2, r3
 800c86a:	68b9      	ldr	r1, [r7, #8]
 800c86c:	f002 fbaa 	bl	800efc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	68da      	ldr	r2, [r3, #12]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c878:	425b      	negs	r3, r3
 800c87a:	441a      	add	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	68da      	ldr	r2, [r3, #12]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d207      	bcs.n	800c89c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	689a      	ldr	r2, [r3, #8]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c894:	425b      	negs	r3, r3
 800c896:	441a      	add	r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d105      	bne.n	800c8ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	1c5a      	adds	r2, r3, #1
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c8b6:	697b      	ldr	r3, [r7, #20]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d018      	beq.n	800c904 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8da:	441a      	add	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	68da      	ldr	r2, [r3, #12]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d303      	bcc.n	800c8f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	68d9      	ldr	r1, [r3, #12]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6838      	ldr	r0, [r7, #0]
 800c900:	f002 fb60 	bl	800efc4 <memcpy>
	}
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c914:	f001 fd0e 	bl	800e334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c91e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c920:	e011      	b.n	800c946 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c926:	2b00      	cmp	r3, #0
 800c928:	d012      	beq.n	800c950 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	3324      	adds	r3, #36	; 0x24
 800c92e:	4618      	mov	r0, r3
 800c930:	f000 fd2a 	bl	800d388 <xTaskRemoveFromEventList>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d001      	beq.n	800c93e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c93a:	f000 fe01 	bl	800d540 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
 800c940:	3b01      	subs	r3, #1
 800c942:	b2db      	uxtb	r3, r3
 800c944:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	dce9      	bgt.n	800c922 <prvUnlockQueue+0x16>
 800c94e:	e000      	b.n	800c952 <prvUnlockQueue+0x46>
					break;
 800c950:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	22ff      	movs	r2, #255	; 0xff
 800c956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c95a:	f001 fd1b 	bl	800e394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c95e:	f001 fce9 	bl	800e334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c968:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c96a:	e011      	b.n	800c990 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d012      	beq.n	800c99a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	3310      	adds	r3, #16
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 fd05 	bl	800d388 <xTaskRemoveFromEventList>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c984:	f000 fddc 	bl	800d540 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c988:	7bbb      	ldrb	r3, [r7, #14]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c994:	2b00      	cmp	r3, #0
 800c996:	dce9      	bgt.n	800c96c <prvUnlockQueue+0x60>
 800c998:	e000      	b.n	800c99c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c99a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	22ff      	movs	r2, #255	; 0xff
 800c9a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c9a4:	f001 fcf6 	bl	800e394 <vPortExitCritical>
}
 800c9a8:	bf00      	nop
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9b8:	f001 fcbc 	bl	800e334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d102      	bne.n	800c9ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	60fb      	str	r3, [r7, #12]
 800c9c8:	e001      	b.n	800c9ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9ce:	f001 fce1 	bl	800e394 <vPortExitCritical>

	return xReturn;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9e4:	f001 fca6 	bl	800e334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d102      	bne.n	800c9fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	60fb      	str	r3, [r7, #12]
 800c9f8:	e001      	b.n	800c9fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9fe:	f001 fcc9 	bl	800e394 <vPortExitCritical>

	return xReturn;
 800ca02:	68fb      	ldr	r3, [r7, #12]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca16:	2300      	movs	r3, #0
 800ca18:	60fb      	str	r3, [r7, #12]
 800ca1a:	e014      	b.n	800ca46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca1c:	4a0f      	ldr	r2, [pc, #60]	; (800ca5c <vQueueAddToRegistry+0x50>)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10b      	bne.n	800ca40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca28:	490c      	ldr	r1, [pc, #48]	; (800ca5c <vQueueAddToRegistry+0x50>)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca32:	4a0a      	ldr	r2, [pc, #40]	; (800ca5c <vQueueAddToRegistry+0x50>)
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	4413      	add	r3, r2
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca3e:	e006      	b.n	800ca4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3301      	adds	r3, #1
 800ca44:	60fb      	str	r3, [r7, #12]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2b07      	cmp	r3, #7
 800ca4a:	d9e7      	bls.n	800ca1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca4c:	bf00      	nop
 800ca4e:	bf00      	nop
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	20004e24 	.word	0x20004e24

0800ca60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca70:	f001 fc60 	bl	800e334 <vPortEnterCritical>
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca7a:	b25b      	sxtb	r3, r3
 800ca7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca80:	d103      	bne.n	800ca8a <vQueueWaitForMessageRestricted+0x2a>
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca90:	b25b      	sxtb	r3, r3
 800ca92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca96:	d103      	bne.n	800caa0 <vQueueWaitForMessageRestricted+0x40>
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800caa0:	f001 fc78 	bl	800e394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d106      	bne.n	800caba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	3324      	adds	r3, #36	; 0x24
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	68b9      	ldr	r1, [r7, #8]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f000 fc3b 	bl	800d330 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800caba:	6978      	ldr	r0, [r7, #20]
 800cabc:	f7ff ff26 	bl	800c90c <prvUnlockQueue>
	}
 800cac0:	bf00      	nop
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b08e      	sub	sp, #56	; 0x38
 800cacc:	af04      	add	r7, sp, #16
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
 800cad4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10a      	bne.n	800caf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	623b      	str	r3, [r7, #32]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10a      	bne.n	800cb0e <xTaskCreateStatic+0x46>
	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	61fb      	str	r3, [r7, #28]
}
 800cb0a:	bf00      	nop
 800cb0c:	e7fe      	b.n	800cb0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb0e:	235c      	movs	r3, #92	; 0x5c
 800cb10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	2b5c      	cmp	r3, #92	; 0x5c
 800cb16:	d00a      	beq.n	800cb2e <xTaskCreateStatic+0x66>
	__asm volatile
 800cb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	61bb      	str	r3, [r7, #24]
}
 800cb2a:	bf00      	nop
 800cb2c:	e7fe      	b.n	800cb2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d01e      	beq.n	800cb74 <xTaskCreateStatic+0xac>
 800cb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d01b      	beq.n	800cb74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	2202      	movs	r2, #2
 800cb4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb4e:	2300      	movs	r3, #0
 800cb50:	9303      	str	r3, [sp, #12]
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	9302      	str	r3, [sp, #8]
 800cb56:	f107 0314 	add.w	r3, r7, #20
 800cb5a:	9301      	str	r3, [sp, #4]
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	68b9      	ldr	r1, [r7, #8]
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f000 f850 	bl	800cc0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb6e:	f000 f8dd 	bl	800cd2c <prvAddNewTaskToReadyList>
 800cb72:	e001      	b.n	800cb78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cb74:	2300      	movs	r3, #0
 800cb76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb78:	697b      	ldr	r3, [r7, #20]
	}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3728      	adds	r7, #40	; 0x28
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b08c      	sub	sp, #48	; 0x30
 800cb86:	af04      	add	r7, sp, #16
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	603b      	str	r3, [r7, #0]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb92:	88fb      	ldrh	r3, [r7, #6]
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4618      	mov	r0, r3
 800cb98:	f001 fcee 	bl	800e578 <pvPortMalloc>
 800cb9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00e      	beq.n	800cbc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cba4:	205c      	movs	r0, #92	; 0x5c
 800cba6:	f001 fce7 	bl	800e578 <pvPortMalloc>
 800cbaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d003      	beq.n	800cbba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	697a      	ldr	r2, [r7, #20]
 800cbb6:	631a      	str	r2, [r3, #48]	; 0x30
 800cbb8:	e005      	b.n	800cbc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbba:	6978      	ldr	r0, [r7, #20]
 800cbbc:	f001 fda8 	bl	800e710 <vPortFree>
 800cbc0:	e001      	b.n	800cbc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d017      	beq.n	800cbfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbd4:	88fa      	ldrh	r2, [r7, #6]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9303      	str	r3, [sp, #12]
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	9302      	str	r3, [sp, #8]
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f000 f80e 	bl	800cc0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbf0:	69f8      	ldr	r0, [r7, #28]
 800cbf2:	f000 f89b 	bl	800cd2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	61bb      	str	r3, [r7, #24]
 800cbfa:	e002      	b.n	800cc02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cbfc:	f04f 33ff 	mov.w	r3, #4294967295
 800cc00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc02:	69bb      	ldr	r3, [r7, #24]
	}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3720      	adds	r7, #32
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	461a      	mov	r2, r3
 800cc24:	21a5      	movs	r1, #165	; 0xa5
 800cc26:	f002 f9db 	bl	800efe0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc34:	3b01      	subs	r3, #1
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	f023 0307 	bic.w	r3, r3, #7
 800cc42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	f003 0307 	and.w	r3, r3, #7
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	617b      	str	r3, [r7, #20]
}
 800cc60:	bf00      	nop
 800cc62:	e7fe      	b.n	800cc62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d01f      	beq.n	800ccaa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	61fb      	str	r3, [r7, #28]
 800cc6e:	e012      	b.n	800cc96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc70:	68ba      	ldr	r2, [r7, #8]
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	4413      	add	r3, r2
 800cc76:	7819      	ldrb	r1, [r3, #0]
 800cc78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	3334      	adds	r3, #52	; 0x34
 800cc80:	460a      	mov	r2, r1
 800cc82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	4413      	add	r3, r2
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d006      	beq.n	800cc9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	3301      	adds	r3, #1
 800cc94:	61fb      	str	r3, [r7, #28]
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	2b0f      	cmp	r3, #15
 800cc9a:	d9e9      	bls.n	800cc70 <prvInitialiseNewTask+0x64>
 800cc9c:	e000      	b.n	800cca0 <prvInitialiseNewTask+0x94>
			{
				break;
 800cc9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca2:	2200      	movs	r2, #0
 800cca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cca8:	e003      	b.n	800ccb2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	2200      	movs	r2, #0
 800ccae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb4:	2b37      	cmp	r3, #55	; 0x37
 800ccb6:	d901      	bls.n	800ccbc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccb8:	2337      	movs	r3, #55	; 0x37
 800ccba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccca:	2200      	movs	r2, #0
 800cccc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff f8bd 	bl	800be52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccda:	3318      	adds	r3, #24
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7ff f8b8 	bl	800be52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cce6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ccee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccf6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ccf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	68f9      	ldr	r1, [r7, #12]
 800cd0a:	69b8      	ldr	r0, [r7, #24]
 800cd0c:	f001 f9e2 	bl	800e0d4 <pxPortInitialiseStack>
 800cd10:	4602      	mov	r2, r0
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd22:	bf00      	nop
 800cd24:	3720      	adds	r7, #32
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
	...

0800cd2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd34:	f001 fafe 	bl	800e334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd38:	4b2d      	ldr	r3, [pc, #180]	; (800cdf0 <prvAddNewTaskToReadyList+0xc4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	4a2c      	ldr	r2, [pc, #176]	; (800cdf0 <prvAddNewTaskToReadyList+0xc4>)
 800cd40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd42:	4b2c      	ldr	r3, [pc, #176]	; (800cdf4 <prvAddNewTaskToReadyList+0xc8>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d109      	bne.n	800cd5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd4a:	4a2a      	ldr	r2, [pc, #168]	; (800cdf4 <prvAddNewTaskToReadyList+0xc8>)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd50:	4b27      	ldr	r3, [pc, #156]	; (800cdf0 <prvAddNewTaskToReadyList+0xc4>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d110      	bne.n	800cd7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd58:	f000 fc16 	bl	800d588 <prvInitialiseTaskLists>
 800cd5c:	e00d      	b.n	800cd7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd5e:	4b26      	ldr	r3, [pc, #152]	; (800cdf8 <prvAddNewTaskToReadyList+0xcc>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d109      	bne.n	800cd7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd66:	4b23      	ldr	r3, [pc, #140]	; (800cdf4 <prvAddNewTaskToReadyList+0xc8>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d802      	bhi.n	800cd7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd74:	4a1f      	ldr	r2, [pc, #124]	; (800cdf4 <prvAddNewTaskToReadyList+0xc8>)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd7a:	4b20      	ldr	r3, [pc, #128]	; (800cdfc <prvAddNewTaskToReadyList+0xd0>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	4a1e      	ldr	r2, [pc, #120]	; (800cdfc <prvAddNewTaskToReadyList+0xd0>)
 800cd82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd84:	4b1d      	ldr	r3, [pc, #116]	; (800cdfc <prvAddNewTaskToReadyList+0xd0>)
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd90:	4b1b      	ldr	r3, [pc, #108]	; (800ce00 <prvAddNewTaskToReadyList+0xd4>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d903      	bls.n	800cda0 <prvAddNewTaskToReadyList+0x74>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9c:	4a18      	ldr	r2, [pc, #96]	; (800ce00 <prvAddNewTaskToReadyList+0xd4>)
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda4:	4613      	mov	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4a15      	ldr	r2, [pc, #84]	; (800ce04 <prvAddNewTaskToReadyList+0xd8>)
 800cdae:	441a      	add	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4610      	mov	r0, r2
 800cdb8:	f7ff f858 	bl	800be6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cdbc:	f001 faea 	bl	800e394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cdc0:	4b0d      	ldr	r3, [pc, #52]	; (800cdf8 <prvAddNewTaskToReadyList+0xcc>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00e      	beq.n	800cde6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdc8:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <prvAddNewTaskToReadyList+0xc8>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d207      	bcs.n	800cde6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <prvAddNewTaskToReadyList+0xdc>)
 800cdd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cde6:	bf00      	nop
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	20001028 	.word	0x20001028
 800cdf4:	20000b54 	.word	0x20000b54
 800cdf8:	20001034 	.word	0x20001034
 800cdfc:	20001044 	.word	0x20001044
 800ce00:	20001030 	.word	0x20001030
 800ce04:	20000b58 	.word	0x20000b58
 800ce08:	e000ed04 	.word	0xe000ed04

0800ce0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce14:	2300      	movs	r3, #0
 800ce16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d017      	beq.n	800ce4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce1e:	4b13      	ldr	r3, [pc, #76]	; (800ce6c <vTaskDelay+0x60>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00a      	beq.n	800ce3c <vTaskDelay+0x30>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	60bb      	str	r3, [r7, #8]
}
 800ce38:	bf00      	nop
 800ce3a:	e7fe      	b.n	800ce3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce3c:	f000 f880 	bl	800cf40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce40:	2100      	movs	r1, #0
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fcea 	bl	800d81c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce48:	f000 f888 	bl	800cf5c <xTaskResumeAll>
 800ce4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d107      	bne.n	800ce64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ce54:	4b06      	ldr	r3, [pc, #24]	; (800ce70 <vTaskDelay+0x64>)
 800ce56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce64:	bf00      	nop
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20001050 	.word	0x20001050
 800ce70:	e000ed04 	.word	0xe000ed04

0800ce74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08a      	sub	sp, #40	; 0x28
 800ce78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce82:	463a      	mov	r2, r7
 800ce84:	1d39      	adds	r1, r7, #4
 800ce86:	f107 0308 	add.w	r3, r7, #8
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe ff3c 	bl	800bd08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	9202      	str	r2, [sp, #8]
 800ce98:	9301      	str	r3, [sp, #4]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	2300      	movs	r3, #0
 800cea0:	460a      	mov	r2, r1
 800cea2:	4921      	ldr	r1, [pc, #132]	; (800cf28 <vTaskStartScheduler+0xb4>)
 800cea4:	4821      	ldr	r0, [pc, #132]	; (800cf2c <vTaskStartScheduler+0xb8>)
 800cea6:	f7ff fe0f 	bl	800cac8 <xTaskCreateStatic>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	4a20      	ldr	r2, [pc, #128]	; (800cf30 <vTaskStartScheduler+0xbc>)
 800ceae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ceb0:	4b1f      	ldr	r3, [pc, #124]	; (800cf30 <vTaskStartScheduler+0xbc>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	617b      	str	r3, [r7, #20]
 800cebc:	e001      	b.n	800cec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cebe:	2300      	movs	r3, #0
 800cec0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d102      	bne.n	800cece <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cec8:	f000 fcfc 	bl	800d8c4 <xTimerCreateTimerTask>
 800cecc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d116      	bne.n	800cf02 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	613b      	str	r3, [r7, #16]
}
 800cee6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cee8:	4b12      	ldr	r3, [pc, #72]	; (800cf34 <vTaskStartScheduler+0xc0>)
 800ceea:	f04f 32ff 	mov.w	r2, #4294967295
 800ceee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cef0:	4b11      	ldr	r3, [pc, #68]	; (800cf38 <vTaskStartScheduler+0xc4>)
 800cef2:	2201      	movs	r2, #1
 800cef4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cef6:	4b11      	ldr	r3, [pc, #68]	; (800cf3c <vTaskStartScheduler+0xc8>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cefc:	f001 f978 	bl	800e1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf00:	e00e      	b.n	800cf20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf08:	d10a      	bne.n	800cf20 <vTaskStartScheduler+0xac>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	60fb      	str	r3, [r7, #12]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <vTaskStartScheduler+0xaa>
}
 800cf20:	bf00      	nop
 800cf22:	3718      	adds	r7, #24
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	0800f224 	.word	0x0800f224
 800cf2c:	0800d559 	.word	0x0800d559
 800cf30:	2000104c 	.word	0x2000104c
 800cf34:	20001048 	.word	0x20001048
 800cf38:	20001034 	.word	0x20001034
 800cf3c:	2000102c 	.word	0x2000102c

0800cf40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf40:	b480      	push	{r7}
 800cf42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf44:	4b04      	ldr	r3, [pc, #16]	; (800cf58 <vTaskSuspendAll+0x18>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	4a03      	ldr	r2, [pc, #12]	; (800cf58 <vTaskSuspendAll+0x18>)
 800cf4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf4e:	bf00      	nop
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr
 800cf58:	20001050 	.word	0x20001050

0800cf5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf66:	2300      	movs	r3, #0
 800cf68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf6a:	4b42      	ldr	r3, [pc, #264]	; (800d074 <xTaskResumeAll+0x118>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10a      	bne.n	800cf88 <xTaskResumeAll+0x2c>
	__asm volatile
 800cf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	603b      	str	r3, [r7, #0]
}
 800cf84:	bf00      	nop
 800cf86:	e7fe      	b.n	800cf86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf88:	f001 f9d4 	bl	800e334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf8c:	4b39      	ldr	r3, [pc, #228]	; (800d074 <xTaskResumeAll+0x118>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	4a38      	ldr	r2, [pc, #224]	; (800d074 <xTaskResumeAll+0x118>)
 800cf94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf96:	4b37      	ldr	r3, [pc, #220]	; (800d074 <xTaskResumeAll+0x118>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d162      	bne.n	800d064 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf9e:	4b36      	ldr	r3, [pc, #216]	; (800d078 <xTaskResumeAll+0x11c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d05e      	beq.n	800d064 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfa6:	e02f      	b.n	800d008 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa8:	4b34      	ldr	r3, [pc, #208]	; (800d07c <xTaskResumeAll+0x120>)
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	3318      	adds	r3, #24
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe ffb6 	bl	800bf26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fe ffb1 	bl	800bf26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc8:	4b2d      	ldr	r3, [pc, #180]	; (800d080 <xTaskResumeAll+0x124>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d903      	bls.n	800cfd8 <xTaskResumeAll+0x7c>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd4:	4a2a      	ldr	r2, [pc, #168]	; (800d080 <xTaskResumeAll+0x124>)
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfdc:	4613      	mov	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4413      	add	r3, r2
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4a27      	ldr	r2, [pc, #156]	; (800d084 <xTaskResumeAll+0x128>)
 800cfe6:	441a      	add	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	3304      	adds	r3, #4
 800cfec:	4619      	mov	r1, r3
 800cfee:	4610      	mov	r0, r2
 800cff0:	f7fe ff3c 	bl	800be6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff8:	4b23      	ldr	r3, [pc, #140]	; (800d088 <xTaskResumeAll+0x12c>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffe:	429a      	cmp	r2, r3
 800d000:	d302      	bcc.n	800d008 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d002:	4b22      	ldr	r3, [pc, #136]	; (800d08c <xTaskResumeAll+0x130>)
 800d004:	2201      	movs	r2, #1
 800d006:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d008:	4b1c      	ldr	r3, [pc, #112]	; (800d07c <xTaskResumeAll+0x120>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1cb      	bne.n	800cfa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d016:	f000 fb55 	bl	800d6c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d01a:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <xTaskResumeAll+0x134>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d010      	beq.n	800d048 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d026:	f000 f847 	bl	800d0b8 <xTaskIncrementTick>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d030:	4b16      	ldr	r3, [pc, #88]	; (800d08c <xTaskResumeAll+0x130>)
 800d032:	2201      	movs	r2, #1
 800d034:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	3b01      	subs	r3, #1
 800d03a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1f1      	bne.n	800d026 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d042:	4b13      	ldr	r3, [pc, #76]	; (800d090 <xTaskResumeAll+0x134>)
 800d044:	2200      	movs	r2, #0
 800d046:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d048:	4b10      	ldr	r3, [pc, #64]	; (800d08c <xTaskResumeAll+0x130>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d009      	beq.n	800d064 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d050:	2301      	movs	r3, #1
 800d052:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d054:	4b0f      	ldr	r3, [pc, #60]	; (800d094 <xTaskResumeAll+0x138>)
 800d056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05a:	601a      	str	r2, [r3, #0]
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d064:	f001 f996 	bl	800e394 <vPortExitCritical>

	return xAlreadyYielded;
 800d068:	68bb      	ldr	r3, [r7, #8]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	20001050 	.word	0x20001050
 800d078:	20001028 	.word	0x20001028
 800d07c:	20000fe8 	.word	0x20000fe8
 800d080:	20001030 	.word	0x20001030
 800d084:	20000b58 	.word	0x20000b58
 800d088:	20000b54 	.word	0x20000b54
 800d08c:	2000103c 	.word	0x2000103c
 800d090:	20001038 	.word	0x20001038
 800d094:	e000ed04 	.word	0xe000ed04

0800d098 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d09e:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <xTaskGetTickCount+0x1c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d0a4:	687b      	ldr	r3, [r7, #4]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	370c      	adds	r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	2000102c 	.word	0x2000102c

0800d0b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0c2:	4b4f      	ldr	r3, [pc, #316]	; (800d200 <xTaskIncrementTick+0x148>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f040 808f 	bne.w	800d1ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0cc:	4b4d      	ldr	r3, [pc, #308]	; (800d204 <xTaskIncrementTick+0x14c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0d4:	4a4b      	ldr	r2, [pc, #300]	; (800d204 <xTaskIncrementTick+0x14c>)
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d120      	bne.n	800d122 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0e0:	4b49      	ldr	r3, [pc, #292]	; (800d208 <xTaskIncrementTick+0x150>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00a      	beq.n	800d100 <xTaskIncrementTick+0x48>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	603b      	str	r3, [r7, #0]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xTaskIncrementTick+0x46>
 800d100:	4b41      	ldr	r3, [pc, #260]	; (800d208 <xTaskIncrementTick+0x150>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	4b41      	ldr	r3, [pc, #260]	; (800d20c <xTaskIncrementTick+0x154>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a3f      	ldr	r2, [pc, #252]	; (800d208 <xTaskIncrementTick+0x150>)
 800d10c:	6013      	str	r3, [r2, #0]
 800d10e:	4a3f      	ldr	r2, [pc, #252]	; (800d20c <xTaskIncrementTick+0x154>)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	4b3e      	ldr	r3, [pc, #248]	; (800d210 <xTaskIncrementTick+0x158>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	4a3d      	ldr	r2, [pc, #244]	; (800d210 <xTaskIncrementTick+0x158>)
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	f000 fad1 	bl	800d6c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d122:	4b3c      	ldr	r3, [pc, #240]	; (800d214 <xTaskIncrementTick+0x15c>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	693a      	ldr	r2, [r7, #16]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d349      	bcc.n	800d1c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d12c:	4b36      	ldr	r3, [pc, #216]	; (800d208 <xTaskIncrementTick+0x150>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d104      	bne.n	800d140 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d136:	4b37      	ldr	r3, [pc, #220]	; (800d214 <xTaskIncrementTick+0x15c>)
 800d138:	f04f 32ff 	mov.w	r2, #4294967295
 800d13c:	601a      	str	r2, [r3, #0]
					break;
 800d13e:	e03f      	b.n	800d1c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d140:	4b31      	ldr	r3, [pc, #196]	; (800d208 <xTaskIncrementTick+0x150>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	429a      	cmp	r2, r3
 800d156:	d203      	bcs.n	800d160 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d158:	4a2e      	ldr	r2, [pc, #184]	; (800d214 <xTaskIncrementTick+0x15c>)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d15e:	e02f      	b.n	800d1c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	3304      	adds	r3, #4
 800d164:	4618      	mov	r0, r3
 800d166:	f7fe fede 	bl	800bf26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d004      	beq.n	800d17c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	3318      	adds	r3, #24
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe fed5 	bl	800bf26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d180:	4b25      	ldr	r3, [pc, #148]	; (800d218 <xTaskIncrementTick+0x160>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	429a      	cmp	r2, r3
 800d186:	d903      	bls.n	800d190 <xTaskIncrementTick+0xd8>
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18c:	4a22      	ldr	r2, [pc, #136]	; (800d218 <xTaskIncrementTick+0x160>)
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d194:	4613      	mov	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4a1f      	ldr	r2, [pc, #124]	; (800d21c <xTaskIncrementTick+0x164>)
 800d19e:	441a      	add	r2, r3
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4610      	mov	r0, r2
 800d1a8:	f7fe fe60 	bl	800be6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b0:	4b1b      	ldr	r3, [pc, #108]	; (800d220 <xTaskIncrementTick+0x168>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d3b8      	bcc.n	800d12c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1be:	e7b5      	b.n	800d12c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1c0:	4b17      	ldr	r3, [pc, #92]	; (800d220 <xTaskIncrementTick+0x168>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c6:	4915      	ldr	r1, [pc, #84]	; (800d21c <xTaskIncrementTick+0x164>)
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d901      	bls.n	800d1dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d1dc:	4b11      	ldr	r3, [pc, #68]	; (800d224 <xTaskIncrementTick+0x16c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	617b      	str	r3, [r7, #20]
 800d1e8:	e004      	b.n	800d1f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d1ea:	4b0f      	ldr	r3, [pc, #60]	; (800d228 <xTaskIncrementTick+0x170>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	4a0d      	ldr	r2, [pc, #52]	; (800d228 <xTaskIncrementTick+0x170>)
 800d1f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d1f4:	697b      	ldr	r3, [r7, #20]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3718      	adds	r7, #24
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20001050 	.word	0x20001050
 800d204:	2000102c 	.word	0x2000102c
 800d208:	20000fe0 	.word	0x20000fe0
 800d20c:	20000fe4 	.word	0x20000fe4
 800d210:	20001040 	.word	0x20001040
 800d214:	20001048 	.word	0x20001048
 800d218:	20001030 	.word	0x20001030
 800d21c:	20000b58 	.word	0x20000b58
 800d220:	20000b54 	.word	0x20000b54
 800d224:	2000103c 	.word	0x2000103c
 800d228:	20001038 	.word	0x20001038

0800d22c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d232:	4b28      	ldr	r3, [pc, #160]	; (800d2d4 <vTaskSwitchContext+0xa8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d003      	beq.n	800d242 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d23a:	4b27      	ldr	r3, [pc, #156]	; (800d2d8 <vTaskSwitchContext+0xac>)
 800d23c:	2201      	movs	r2, #1
 800d23e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d240:	e041      	b.n	800d2c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d242:	4b25      	ldr	r3, [pc, #148]	; (800d2d8 <vTaskSwitchContext+0xac>)
 800d244:	2200      	movs	r2, #0
 800d246:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d248:	4b24      	ldr	r3, [pc, #144]	; (800d2dc <vTaskSwitchContext+0xb0>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	e010      	b.n	800d272 <vTaskSwitchContext+0x46>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10a      	bne.n	800d26c <vTaskSwitchContext+0x40>
	__asm volatile
 800d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25a:	f383 8811 	msr	BASEPRI, r3
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	607b      	str	r3, [r7, #4]
}
 800d268:	bf00      	nop
 800d26a:	e7fe      	b.n	800d26a <vTaskSwitchContext+0x3e>
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	3b01      	subs	r3, #1
 800d270:	60fb      	str	r3, [r7, #12]
 800d272:	491b      	ldr	r1, [pc, #108]	; (800d2e0 <vTaskSwitchContext+0xb4>)
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	4613      	mov	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4413      	add	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	440b      	add	r3, r1
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d0e4      	beq.n	800d250 <vTaskSwitchContext+0x24>
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	4613      	mov	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4413      	add	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4a13      	ldr	r2, [pc, #76]	; (800d2e0 <vTaskSwitchContext+0xb4>)
 800d292:	4413      	add	r3, r2
 800d294:	60bb      	str	r3, [r7, #8]
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	605a      	str	r2, [r3, #4]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d104      	bne.n	800d2b6 <vTaskSwitchContext+0x8a>
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	685a      	ldr	r2, [r3, #4]
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	605a      	str	r2, [r3, #4]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	4a09      	ldr	r2, [pc, #36]	; (800d2e4 <vTaskSwitchContext+0xb8>)
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	4a06      	ldr	r2, [pc, #24]	; (800d2dc <vTaskSwitchContext+0xb0>)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6013      	str	r3, [r2, #0]
}
 800d2c6:	bf00      	nop
 800d2c8:	3714      	adds	r7, #20
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	20001050 	.word	0x20001050
 800d2d8:	2000103c 	.word	0x2000103c
 800d2dc:	20001030 	.word	0x20001030
 800d2e0:	20000b58 	.word	0x20000b58
 800d2e4:	20000b54 	.word	0x20000b54

0800d2e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10a      	bne.n	800d30e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	60fb      	str	r3, [r7, #12]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d30e:	4b07      	ldr	r3, [pc, #28]	; (800d32c <vTaskPlaceOnEventList+0x44>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	3318      	adds	r3, #24
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7fe fdcc 	bl	800beb4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d31c:	2101      	movs	r1, #1
 800d31e:	6838      	ldr	r0, [r7, #0]
 800d320:	f000 fa7c 	bl	800d81c <prvAddCurrentTaskToDelayedList>
}
 800d324:	bf00      	nop
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	20000b54 	.word	0x20000b54

0800d330 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10a      	bne.n	800d358 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	617b      	str	r3, [r7, #20]
}
 800d354:	bf00      	nop
 800d356:	e7fe      	b.n	800d356 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d358:	4b0a      	ldr	r3, [pc, #40]	; (800d384 <vTaskPlaceOnEventListRestricted+0x54>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3318      	adds	r3, #24
 800d35e:	4619      	mov	r1, r3
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7fe fd83 	bl	800be6c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d36c:	f04f 33ff 	mov.w	r3, #4294967295
 800d370:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d372:	6879      	ldr	r1, [r7, #4]
 800d374:	68b8      	ldr	r0, [r7, #8]
 800d376:	f000 fa51 	bl	800d81c <prvAddCurrentTaskToDelayedList>
	}
 800d37a:	bf00      	nop
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	20000b54 	.word	0x20000b54

0800d388 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10a      	bne.n	800d3b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	60fb      	str	r3, [r7, #12]
}
 800d3b0:	bf00      	nop
 800d3b2:	e7fe      	b.n	800d3b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	3318      	adds	r3, #24
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe fdb4 	bl	800bf26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3be:	4b1e      	ldr	r3, [pc, #120]	; (800d438 <xTaskRemoveFromEventList+0xb0>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d11d      	bne.n	800d402 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fdab 	bl	800bf26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d4:	4b19      	ldr	r3, [pc, #100]	; (800d43c <xTaskRemoveFromEventList+0xb4>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d903      	bls.n	800d3e4 <xTaskRemoveFromEventList+0x5c>
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e0:	4a16      	ldr	r2, [pc, #88]	; (800d43c <xTaskRemoveFromEventList+0xb4>)
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4a13      	ldr	r2, [pc, #76]	; (800d440 <xTaskRemoveFromEventList+0xb8>)
 800d3f2:	441a      	add	r2, r3
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	f7fe fd36 	bl	800be6c <vListInsertEnd>
 800d400:	e005      	b.n	800d40e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	3318      	adds	r3, #24
 800d406:	4619      	mov	r1, r3
 800d408:	480e      	ldr	r0, [pc, #56]	; (800d444 <xTaskRemoveFromEventList+0xbc>)
 800d40a:	f7fe fd2f 	bl	800be6c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d412:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <xTaskRemoveFromEventList+0xc0>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d418:	429a      	cmp	r2, r3
 800d41a:	d905      	bls.n	800d428 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d41c:	2301      	movs	r3, #1
 800d41e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d420:	4b0a      	ldr	r3, [pc, #40]	; (800d44c <xTaskRemoveFromEventList+0xc4>)
 800d422:	2201      	movs	r2, #1
 800d424:	601a      	str	r2, [r3, #0]
 800d426:	e001      	b.n	800d42c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d428:	2300      	movs	r3, #0
 800d42a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d42c:	697b      	ldr	r3, [r7, #20]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	20001050 	.word	0x20001050
 800d43c:	20001030 	.word	0x20001030
 800d440:	20000b58 	.word	0x20000b58
 800d444:	20000fe8 	.word	0x20000fe8
 800d448:	20000b54 	.word	0x20000b54
 800d44c:	2000103c 	.word	0x2000103c

0800d450 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d458:	4b06      	ldr	r3, [pc, #24]	; (800d474 <vTaskInternalSetTimeOutState+0x24>)
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d460:	4b05      	ldr	r3, [pc, #20]	; (800d478 <vTaskInternalSetTimeOutState+0x28>)
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	605a      	str	r2, [r3, #4]
}
 800d468:	bf00      	nop
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr
 800d474:	20001040 	.word	0x20001040
 800d478:	2000102c 	.word	0x2000102c

0800d47c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d10a      	bne.n	800d4a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	613b      	str	r3, [r7, #16]
}
 800d49e:	bf00      	nop
 800d4a0:	e7fe      	b.n	800d4a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10a      	bne.n	800d4be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ac:	f383 8811 	msr	BASEPRI, r3
 800d4b0:	f3bf 8f6f 	isb	sy
 800d4b4:	f3bf 8f4f 	dsb	sy
 800d4b8:	60fb      	str	r3, [r7, #12]
}
 800d4ba:	bf00      	nop
 800d4bc:	e7fe      	b.n	800d4bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d4be:	f000 ff39 	bl	800e334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4c2:	4b1d      	ldr	r3, [pc, #116]	; (800d538 <xTaskCheckForTimeOut+0xbc>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	69ba      	ldr	r2, [r7, #24]
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4da:	d102      	bne.n	800d4e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	61fb      	str	r3, [r7, #28]
 800d4e0:	e023      	b.n	800d52a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	4b15      	ldr	r3, [pc, #84]	; (800d53c <xTaskCheckForTimeOut+0xc0>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d007      	beq.n	800d4fe <xTaskCheckForTimeOut+0x82>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	69ba      	ldr	r2, [r7, #24]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d302      	bcc.n	800d4fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	61fb      	str	r3, [r7, #28]
 800d4fc:	e015      	b.n	800d52a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	429a      	cmp	r2, r3
 800d506:	d20b      	bcs.n	800d520 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	1ad2      	subs	r2, r2, r3
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7ff ff9b 	bl	800d450 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d51a:	2300      	movs	r3, #0
 800d51c:	61fb      	str	r3, [r7, #28]
 800d51e:	e004      	b.n	800d52a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2200      	movs	r2, #0
 800d524:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d526:	2301      	movs	r3, #1
 800d528:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d52a:	f000 ff33 	bl	800e394 <vPortExitCritical>

	return xReturn;
 800d52e:	69fb      	ldr	r3, [r7, #28]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3720      	adds	r7, #32
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	2000102c 	.word	0x2000102c
 800d53c:	20001040 	.word	0x20001040

0800d540 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d540:	b480      	push	{r7}
 800d542:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d544:	4b03      	ldr	r3, [pc, #12]	; (800d554 <vTaskMissedYield+0x14>)
 800d546:	2201      	movs	r2, #1
 800d548:	601a      	str	r2, [r3, #0]
}
 800d54a:	bf00      	nop
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	2000103c 	.word	0x2000103c

0800d558 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d560:	f000 f852 	bl	800d608 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d564:	4b06      	ldr	r3, [pc, #24]	; (800d580 <prvIdleTask+0x28>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d9f9      	bls.n	800d560 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d56c:	4b05      	ldr	r3, [pc, #20]	; (800d584 <prvIdleTask+0x2c>)
 800d56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d57c:	e7f0      	b.n	800d560 <prvIdleTask+0x8>
 800d57e:	bf00      	nop
 800d580:	20000b58 	.word	0x20000b58
 800d584:	e000ed04 	.word	0xe000ed04

0800d588 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d58e:	2300      	movs	r3, #0
 800d590:	607b      	str	r3, [r7, #4]
 800d592:	e00c      	b.n	800d5ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	4613      	mov	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4a12      	ldr	r2, [pc, #72]	; (800d5e8 <prvInitialiseTaskLists+0x60>)
 800d5a0:	4413      	add	r3, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fe fc35 	bl	800be12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	607b      	str	r3, [r7, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b37      	cmp	r3, #55	; 0x37
 800d5b2:	d9ef      	bls.n	800d594 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5b4:	480d      	ldr	r0, [pc, #52]	; (800d5ec <prvInitialiseTaskLists+0x64>)
 800d5b6:	f7fe fc2c 	bl	800be12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5ba:	480d      	ldr	r0, [pc, #52]	; (800d5f0 <prvInitialiseTaskLists+0x68>)
 800d5bc:	f7fe fc29 	bl	800be12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5c0:	480c      	ldr	r0, [pc, #48]	; (800d5f4 <prvInitialiseTaskLists+0x6c>)
 800d5c2:	f7fe fc26 	bl	800be12 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5c6:	480c      	ldr	r0, [pc, #48]	; (800d5f8 <prvInitialiseTaskLists+0x70>)
 800d5c8:	f7fe fc23 	bl	800be12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5cc:	480b      	ldr	r0, [pc, #44]	; (800d5fc <prvInitialiseTaskLists+0x74>)
 800d5ce:	f7fe fc20 	bl	800be12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5d2:	4b0b      	ldr	r3, [pc, #44]	; (800d600 <prvInitialiseTaskLists+0x78>)
 800d5d4:	4a05      	ldr	r2, [pc, #20]	; (800d5ec <prvInitialiseTaskLists+0x64>)
 800d5d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5d8:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <prvInitialiseTaskLists+0x7c>)
 800d5da:	4a05      	ldr	r2, [pc, #20]	; (800d5f0 <prvInitialiseTaskLists+0x68>)
 800d5dc:	601a      	str	r2, [r3, #0]
}
 800d5de:	bf00      	nop
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	20000b58 	.word	0x20000b58
 800d5ec:	20000fb8 	.word	0x20000fb8
 800d5f0:	20000fcc 	.word	0x20000fcc
 800d5f4:	20000fe8 	.word	0x20000fe8
 800d5f8:	20000ffc 	.word	0x20000ffc
 800d5fc:	20001014 	.word	0x20001014
 800d600:	20000fe0 	.word	0x20000fe0
 800d604:	20000fe4 	.word	0x20000fe4

0800d608 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d60e:	e019      	b.n	800d644 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d610:	f000 fe90 	bl	800e334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d614:	4b10      	ldr	r3, [pc, #64]	; (800d658 <prvCheckTasksWaitingTermination+0x50>)
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	3304      	adds	r3, #4
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe fc80 	bl	800bf26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d626:	4b0d      	ldr	r3, [pc, #52]	; (800d65c <prvCheckTasksWaitingTermination+0x54>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	4a0b      	ldr	r2, [pc, #44]	; (800d65c <prvCheckTasksWaitingTermination+0x54>)
 800d62e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d630:	4b0b      	ldr	r3, [pc, #44]	; (800d660 <prvCheckTasksWaitingTermination+0x58>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3b01      	subs	r3, #1
 800d636:	4a0a      	ldr	r2, [pc, #40]	; (800d660 <prvCheckTasksWaitingTermination+0x58>)
 800d638:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d63a:	f000 feab 	bl	800e394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f810 	bl	800d664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d644:	4b06      	ldr	r3, [pc, #24]	; (800d660 <prvCheckTasksWaitingTermination+0x58>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1e1      	bne.n	800d610 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d64c:	bf00      	nop
 800d64e:	bf00      	nop
 800d650:	3708      	adds	r7, #8
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	20000ffc 	.word	0x20000ffc
 800d65c:	20001028 	.word	0x20001028
 800d660:	20001010 	.word	0x20001010

0800d664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d672:	2b00      	cmp	r3, #0
 800d674:	d108      	bne.n	800d688 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67a:	4618      	mov	r0, r3
 800d67c:	f001 f848 	bl	800e710 <vPortFree>
				vPortFree( pxTCB );
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f001 f845 	bl	800e710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d686:	e018      	b.n	800d6ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d103      	bne.n	800d69a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f001 f83c 	bl	800e710 <vPortFree>
	}
 800d698:	e00f      	b.n	800d6ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d00a      	beq.n	800d6ba <prvDeleteTCB+0x56>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	60fb      	str	r3, [r7, #12]
}
 800d6b6:	bf00      	nop
 800d6b8:	e7fe      	b.n	800d6b8 <prvDeleteTCB+0x54>
	}
 800d6ba:	bf00      	nop
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
	...

0800d6c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6ca:	4b0c      	ldr	r3, [pc, #48]	; (800d6fc <prvResetNextTaskUnblockTime+0x38>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d104      	bne.n	800d6de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6d4:	4b0a      	ldr	r3, [pc, #40]	; (800d700 <prvResetNextTaskUnblockTime+0x3c>)
 800d6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6dc:	e008      	b.n	800d6f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6de:	4b07      	ldr	r3, [pc, #28]	; (800d6fc <prvResetNextTaskUnblockTime+0x38>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	4a04      	ldr	r2, [pc, #16]	; (800d700 <prvResetNextTaskUnblockTime+0x3c>)
 800d6ee:	6013      	str	r3, [r2, #0]
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	20000fe0 	.word	0x20000fe0
 800d700:	20001048 	.word	0x20001048

0800d704 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d70a:	4b0b      	ldr	r3, [pc, #44]	; (800d738 <xTaskGetSchedulerState+0x34>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d102      	bne.n	800d718 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d712:	2301      	movs	r3, #1
 800d714:	607b      	str	r3, [r7, #4]
 800d716:	e008      	b.n	800d72a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d718:	4b08      	ldr	r3, [pc, #32]	; (800d73c <xTaskGetSchedulerState+0x38>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d102      	bne.n	800d726 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d720:	2302      	movs	r3, #2
 800d722:	607b      	str	r3, [r7, #4]
 800d724:	e001      	b.n	800d72a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d726:	2300      	movs	r3, #0
 800d728:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d72a:	687b      	ldr	r3, [r7, #4]
	}
 800d72c:	4618      	mov	r0, r3
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	20001034 	.word	0x20001034
 800d73c:	20001050 	.word	0x20001050

0800d740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d74c:	2300      	movs	r3, #0
 800d74e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d056      	beq.n	800d804 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d756:	4b2e      	ldr	r3, [pc, #184]	; (800d810 <xTaskPriorityDisinherit+0xd0>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	693a      	ldr	r2, [r7, #16]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d00a      	beq.n	800d776 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	60fb      	str	r3, [r7, #12]
}
 800d772:	bf00      	nop
 800d774:	e7fe      	b.n	800d774 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10a      	bne.n	800d794 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	60bb      	str	r3, [r7, #8]
}
 800d790:	bf00      	nop
 800d792:	e7fe      	b.n	800d792 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d798:	1e5a      	subs	r2, r3, #1
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d02c      	beq.n	800d804 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d128      	bne.n	800d804 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe fbb5 	bl	800bf26 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d4:	4b0f      	ldr	r3, [pc, #60]	; (800d814 <xTaskPriorityDisinherit+0xd4>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d903      	bls.n	800d7e4 <xTaskPriorityDisinherit+0xa4>
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e0:	4a0c      	ldr	r2, [pc, #48]	; (800d814 <xTaskPriorityDisinherit+0xd4>)
 800d7e2:	6013      	str	r3, [r2, #0]
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4a09      	ldr	r2, [pc, #36]	; (800d818 <xTaskPriorityDisinherit+0xd8>)
 800d7f2:	441a      	add	r2, r3
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f7fe fb36 	bl	800be6c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d800:	2301      	movs	r3, #1
 800d802:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d804:	697b      	ldr	r3, [r7, #20]
	}
 800d806:	4618      	mov	r0, r3
 800d808:	3718      	adds	r7, #24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20000b54 	.word	0x20000b54
 800d814:	20001030 	.word	0x20001030
 800d818:	20000b58 	.word	0x20000b58

0800d81c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d826:	4b21      	ldr	r3, [pc, #132]	; (800d8ac <prvAddCurrentTaskToDelayedList+0x90>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d82c:	4b20      	ldr	r3, [pc, #128]	; (800d8b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3304      	adds	r3, #4
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fb77 	bl	800bf26 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83e:	d10a      	bne.n	800d856 <prvAddCurrentTaskToDelayedList+0x3a>
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d007      	beq.n	800d856 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d846:	4b1a      	ldr	r3, [pc, #104]	; (800d8b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3304      	adds	r3, #4
 800d84c:	4619      	mov	r1, r3
 800d84e:	4819      	ldr	r0, [pc, #100]	; (800d8b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d850:	f7fe fb0c 	bl	800be6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d854:	e026      	b.n	800d8a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4413      	add	r3, r2
 800d85c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d85e:	4b14      	ldr	r3, [pc, #80]	; (800d8b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d866:	68ba      	ldr	r2, [r7, #8]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d209      	bcs.n	800d882 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d86e:	4b12      	ldr	r3, [pc, #72]	; (800d8b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	3304      	adds	r3, #4
 800d878:	4619      	mov	r1, r3
 800d87a:	4610      	mov	r0, r2
 800d87c:	f7fe fb1a 	bl	800beb4 <vListInsert>
}
 800d880:	e010      	b.n	800d8a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d882:	4b0e      	ldr	r3, [pc, #56]	; (800d8bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	4b0a      	ldr	r3, [pc, #40]	; (800d8b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3304      	adds	r3, #4
 800d88c:	4619      	mov	r1, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	f7fe fb10 	bl	800beb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d894:	4b0a      	ldr	r3, [pc, #40]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d202      	bcs.n	800d8a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d89e:	4a08      	ldr	r2, [pc, #32]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	6013      	str	r3, [r2, #0]
}
 800d8a4:	bf00      	nop
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	2000102c 	.word	0x2000102c
 800d8b0:	20000b54 	.word	0x20000b54
 800d8b4:	20001014 	.word	0x20001014
 800d8b8:	20000fe4 	.word	0x20000fe4
 800d8bc:	20000fe0 	.word	0x20000fe0
 800d8c0:	20001048 	.word	0x20001048

0800d8c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b08a      	sub	sp, #40	; 0x28
 800d8c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8ce:	f000 fba1 	bl	800e014 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8d2:	4b1c      	ldr	r3, [pc, #112]	; (800d944 <xTimerCreateTimerTask+0x80>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d021      	beq.n	800d91e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8e2:	1d3a      	adds	r2, r7, #4
 800d8e4:	f107 0108 	add.w	r1, r7, #8
 800d8e8:	f107 030c 	add.w	r3, r7, #12
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7fe fa25 	bl	800bd3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d8f2:	6879      	ldr	r1, [r7, #4]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	9202      	str	r2, [sp, #8]
 800d8fa:	9301      	str	r3, [sp, #4]
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	2300      	movs	r3, #0
 800d902:	460a      	mov	r2, r1
 800d904:	4910      	ldr	r1, [pc, #64]	; (800d948 <xTimerCreateTimerTask+0x84>)
 800d906:	4811      	ldr	r0, [pc, #68]	; (800d94c <xTimerCreateTimerTask+0x88>)
 800d908:	f7ff f8de 	bl	800cac8 <xTaskCreateStatic>
 800d90c:	4603      	mov	r3, r0
 800d90e:	4a10      	ldr	r2, [pc, #64]	; (800d950 <xTimerCreateTimerTask+0x8c>)
 800d910:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d912:	4b0f      	ldr	r3, [pc, #60]	; (800d950 <xTimerCreateTimerTask+0x8c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d001      	beq.n	800d91e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d91a:	2301      	movs	r3, #1
 800d91c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10a      	bne.n	800d93a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	613b      	str	r3, [r7, #16]
}
 800d936:	bf00      	nop
 800d938:	e7fe      	b.n	800d938 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d93a:	697b      	ldr	r3, [r7, #20]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	20001084 	.word	0x20001084
 800d948:	0800f22c 	.word	0x0800f22c
 800d94c:	0800dbbd 	.word	0x0800dbbd
 800d950:	20001088 	.word	0x20001088

0800d954 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d954:	b580      	push	{r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af02      	add	r7, sp, #8
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]
 800d960:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d962:	202c      	movs	r0, #44	; 0x2c
 800d964:	f000 fe08 	bl	800e578 <pvPortMalloc>
 800d968:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00d      	beq.n	800d98c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2200      	movs	r2, #0
 800d974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	6a3b      	ldr	r3, [r7, #32]
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	68b9      	ldr	r1, [r7, #8]
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f000 f843 	bl	800da12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d98c:	697b      	ldr	r3, [r7, #20]
	}
 800d98e:	4618      	mov	r0, r3
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d996:	b580      	push	{r7, lr}
 800d998:	b08a      	sub	sp, #40	; 0x28
 800d99a:	af02      	add	r7, sp, #8
 800d99c:	60f8      	str	r0, [r7, #12]
 800d99e:	60b9      	str	r1, [r7, #8]
 800d9a0:	607a      	str	r2, [r7, #4]
 800d9a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d9a4:	232c      	movs	r3, #44	; 0x2c
 800d9a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	2b2c      	cmp	r3, #44	; 0x2c
 800d9ac:	d00a      	beq.n	800d9c4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	61bb      	str	r3, [r7, #24]
}
 800d9c0:	bf00      	nop
 800d9c2:	e7fe      	b.n	800d9c2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d9c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10a      	bne.n	800d9e2 <xTimerCreateStatic+0x4c>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	617b      	str	r3, [r7, #20]
}
 800d9de:	bf00      	nop
 800d9e0:	e7fe      	b.n	800d9e0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00d      	beq.n	800da08 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	2202      	movs	r2, #2
 800d9f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	68b9      	ldr	r1, [r7, #8]
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f000 f805 	bl	800da12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800da08:	69fb      	ldr	r3, [r7, #28]
	}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3720      	adds	r7, #32
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b086      	sub	sp, #24
 800da16:	af00      	add	r7, sp, #0
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	607a      	str	r2, [r7, #4]
 800da1e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d10a      	bne.n	800da3c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800da26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2a:	f383 8811 	msr	BASEPRI, r3
 800da2e:	f3bf 8f6f 	isb	sy
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	617b      	str	r3, [r7, #20]
}
 800da38:	bf00      	nop
 800da3a:	e7fe      	b.n	800da3a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d01e      	beq.n	800da80 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800da42:	f000 fae7 	bl	800e014 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	6a3a      	ldr	r2, [r7, #32]
 800da5c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da60:	3304      	adds	r3, #4
 800da62:	4618      	mov	r0, r3
 800da64:	f7fe f9f5 	bl	800be52 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d008      	beq.n	800da80 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800da6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da74:	f043 0304 	orr.w	r3, r3, #4
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800da80:	bf00      	nop
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08a      	sub	sp, #40	; 0x28
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
 800da94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da96:	2300      	movs	r3, #0
 800da98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10a      	bne.n	800dab6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800daa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	623b      	str	r3, [r7, #32]
}
 800dab2:	bf00      	nop
 800dab4:	e7fe      	b.n	800dab4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dab6:	4b1a      	ldr	r3, [pc, #104]	; (800db20 <xTimerGenericCommand+0x98>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d02a      	beq.n	800db14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	2b05      	cmp	r3, #5
 800dace:	dc18      	bgt.n	800db02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dad0:	f7ff fe18 	bl	800d704 <xTaskGetSchedulerState>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	d109      	bne.n	800daee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dada:	4b11      	ldr	r3, [pc, #68]	; (800db20 <xTimerGenericCommand+0x98>)
 800dadc:	6818      	ldr	r0, [r3, #0]
 800dade:	f107 0110 	add.w	r1, r7, #16
 800dae2:	2300      	movs	r3, #0
 800dae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dae6:	f7fe fb87 	bl	800c1f8 <xQueueGenericSend>
 800daea:	6278      	str	r0, [r7, #36]	; 0x24
 800daec:	e012      	b.n	800db14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800daee:	4b0c      	ldr	r3, [pc, #48]	; (800db20 <xTimerGenericCommand+0x98>)
 800daf0:	6818      	ldr	r0, [r3, #0]
 800daf2:	f107 0110 	add.w	r1, r7, #16
 800daf6:	2300      	movs	r3, #0
 800daf8:	2200      	movs	r2, #0
 800dafa:	f7fe fb7d 	bl	800c1f8 <xQueueGenericSend>
 800dafe:	6278      	str	r0, [r7, #36]	; 0x24
 800db00:	e008      	b.n	800db14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db02:	4b07      	ldr	r3, [pc, #28]	; (800db20 <xTimerGenericCommand+0x98>)
 800db04:	6818      	ldr	r0, [r3, #0]
 800db06:	f107 0110 	add.w	r1, r7, #16
 800db0a:	2300      	movs	r3, #0
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	f7fe fc71 	bl	800c3f4 <xQueueGenericSendFromISR>
 800db12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db16:	4618      	mov	r0, r3
 800db18:	3728      	adds	r7, #40	; 0x28
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20001084 	.word	0x20001084

0800db24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b088      	sub	sp, #32
 800db28:	af02      	add	r7, sp, #8
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db2e:	4b22      	ldr	r3, [pc, #136]	; (800dbb8 <prvProcessExpiredTimer+0x94>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	3304      	adds	r3, #4
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe f9f2 	bl	800bf26 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d022      	beq.n	800db96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	699a      	ldr	r2, [r3, #24]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	18d1      	adds	r1, r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	6978      	ldr	r0, [r7, #20]
 800db5e:	f000 f8d1 	bl	800dd04 <prvInsertTimerInActiveList>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d01f      	beq.n	800dba8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db68:	2300      	movs	r3, #0
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	2300      	movs	r3, #0
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	2100      	movs	r1, #0
 800db72:	6978      	ldr	r0, [r7, #20]
 800db74:	f7ff ff88 	bl	800da88 <xTimerGenericCommand>
 800db78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d113      	bne.n	800dba8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	60fb      	str	r3, [r7, #12]
}
 800db92:	bf00      	nop
 800db94:	e7fe      	b.n	800db94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db9c:	f023 0301 	bic.w	r3, r3, #1
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	6a1b      	ldr	r3, [r3, #32]
 800dbac:	6978      	ldr	r0, [r7, #20]
 800dbae:	4798      	blx	r3
}
 800dbb0:	bf00      	nop
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	2000107c 	.word	0x2000107c

0800dbbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbc4:	f107 0308 	add.w	r3, r7, #8
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f000 f857 	bl	800dc7c <prvGetNextExpireTime>
 800dbce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f000 f803 	bl	800dbe0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dbda:	f000 f8d5 	bl	800dd88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbde:	e7f1      	b.n	800dbc4 <prvTimerTask+0x8>

0800dbe0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dbea:	f7ff f9a9 	bl	800cf40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbee:	f107 0308 	add.w	r3, r7, #8
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 f866 	bl	800dcc4 <prvSampleTimeNow>
 800dbf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d130      	bne.n	800dc62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d10a      	bne.n	800dc1c <prvProcessTimerOrBlockTask+0x3c>
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d806      	bhi.n	800dc1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc0e:	f7ff f9a5 	bl	800cf5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc12:	68f9      	ldr	r1, [r7, #12]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7ff ff85 	bl	800db24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc1a:	e024      	b.n	800dc66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d008      	beq.n	800dc34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc22:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <prvProcessTimerOrBlockTask+0x90>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d101      	bne.n	800dc30 <prvProcessTimerOrBlockTask+0x50>
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e000      	b.n	800dc32 <prvProcessTimerOrBlockTask+0x52>
 800dc30:	2300      	movs	r3, #0
 800dc32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc34:	4b0f      	ldr	r3, [pc, #60]	; (800dc74 <prvProcessTimerOrBlockTask+0x94>)
 800dc36:	6818      	ldr	r0, [r3, #0]
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	1ad3      	subs	r3, r2, r3
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4619      	mov	r1, r3
 800dc42:	f7fe ff0d 	bl	800ca60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc46:	f7ff f989 	bl	800cf5c <xTaskResumeAll>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10a      	bne.n	800dc66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc50:	4b09      	ldr	r3, [pc, #36]	; (800dc78 <prvProcessTimerOrBlockTask+0x98>)
 800dc52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc56:	601a      	str	r2, [r3, #0]
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	f3bf 8f6f 	isb	sy
}
 800dc60:	e001      	b.n	800dc66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc62:	f7ff f97b 	bl	800cf5c <xTaskResumeAll>
}
 800dc66:	bf00      	nop
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20001080 	.word	0x20001080
 800dc74:	20001084 	.word	0x20001084
 800dc78:	e000ed04 	.word	0xe000ed04

0800dc7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc84:	4b0e      	ldr	r3, [pc, #56]	; (800dcc0 <prvGetNextExpireTime+0x44>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <prvGetNextExpireTime+0x16>
 800dc8e:	2201      	movs	r2, #1
 800dc90:	e000      	b.n	800dc94 <prvGetNextExpireTime+0x18>
 800dc92:	2200      	movs	r2, #0
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d105      	bne.n	800dcac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dca0:	4b07      	ldr	r3, [pc, #28]	; (800dcc0 <prvGetNextExpireTime+0x44>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	60fb      	str	r3, [r7, #12]
 800dcaa:	e001      	b.n	800dcb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dcac:	2300      	movs	r3, #0
 800dcae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3714      	adds	r7, #20
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	2000107c 	.word	0x2000107c

0800dcc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dccc:	f7ff f9e4 	bl	800d098 <xTaskGetTickCount>
 800dcd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dcd2:	4b0b      	ldr	r3, [pc, #44]	; (800dd00 <prvSampleTimeNow+0x3c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d205      	bcs.n	800dce8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dcdc:	f000 f936 	bl	800df4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2201      	movs	r2, #1
 800dce4:	601a      	str	r2, [r3, #0]
 800dce6:	e002      	b.n	800dcee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dcee:	4a04      	ldr	r2, [pc, #16]	; (800dd00 <prvSampleTimeNow+0x3c>)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	2000108c 	.word	0x2000108c

0800dd04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	607a      	str	r2, [r7, #4]
 800dd10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd12:	2300      	movs	r3, #0
 800dd14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d812      	bhi.n	800dd50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	1ad2      	subs	r2, r2, r3
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	699b      	ldr	r3, [r3, #24]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d302      	bcc.n	800dd3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	617b      	str	r3, [r7, #20]
 800dd3c:	e01b      	b.n	800dd76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd3e:	4b10      	ldr	r3, [pc, #64]	; (800dd80 <prvInsertTimerInActiveList+0x7c>)
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3304      	adds	r3, #4
 800dd46:	4619      	mov	r1, r3
 800dd48:	4610      	mov	r0, r2
 800dd4a:	f7fe f8b3 	bl	800beb4 <vListInsert>
 800dd4e:	e012      	b.n	800dd76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d206      	bcs.n	800dd66 <prvInsertTimerInActiveList+0x62>
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d302      	bcc.n	800dd66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd60:	2301      	movs	r3, #1
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	e007      	b.n	800dd76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd66:	4b07      	ldr	r3, [pc, #28]	; (800dd84 <prvInsertTimerInActiveList+0x80>)
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4610      	mov	r0, r2
 800dd72:	f7fe f89f 	bl	800beb4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd76:	697b      	ldr	r3, [r7, #20]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20001080 	.word	0x20001080
 800dd84:	2000107c 	.word	0x2000107c

0800dd88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b08e      	sub	sp, #56	; 0x38
 800dd8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd8e:	e0ca      	b.n	800df26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	da18      	bge.n	800ddc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd96:	1d3b      	adds	r3, r7, #4
 800dd98:	3304      	adds	r3, #4
 800dd9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d10a      	bne.n	800ddb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda6:	f383 8811 	msr	BASEPRI, r3
 800ddaa:	f3bf 8f6f 	isb	sy
 800ddae:	f3bf 8f4f 	dsb	sy
 800ddb2:	61fb      	str	r3, [r7, #28]
}
 800ddb4:	bf00      	nop
 800ddb6:	e7fe      	b.n	800ddb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddbe:	6850      	ldr	r0, [r2, #4]
 800ddc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddc2:	6892      	ldr	r2, [r2, #8]
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f2c0 80aa 	blt.w	800df24 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ddd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd6:	695b      	ldr	r3, [r3, #20]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d004      	beq.n	800dde6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddde:	3304      	adds	r3, #4
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fe f8a0 	bl	800bf26 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dde6:	463b      	mov	r3, r7
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7ff ff6b 	bl	800dcc4 <prvSampleTimeNow>
 800ddee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b09      	cmp	r3, #9
 800ddf4:	f200 8097 	bhi.w	800df26 <prvProcessReceivedCommands+0x19e>
 800ddf8:	a201      	add	r2, pc, #4	; (adr r2, 800de00 <prvProcessReceivedCommands+0x78>)
 800ddfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfe:	bf00      	nop
 800de00:	0800de29 	.word	0x0800de29
 800de04:	0800de29 	.word	0x0800de29
 800de08:	0800de29 	.word	0x0800de29
 800de0c:	0800de9d 	.word	0x0800de9d
 800de10:	0800deb1 	.word	0x0800deb1
 800de14:	0800defb 	.word	0x0800defb
 800de18:	0800de29 	.word	0x0800de29
 800de1c:	0800de29 	.word	0x0800de29
 800de20:	0800de9d 	.word	0x0800de9d
 800de24:	0800deb1 	.word	0x0800deb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de2e:	f043 0301 	orr.w	r3, r3, #1
 800de32:	b2da      	uxtb	r2, r3
 800de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800de3a:	68ba      	ldr	r2, [r7, #8]
 800de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	18d1      	adds	r1, r2, r3
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de48:	f7ff ff5c 	bl	800dd04 <prvInsertTimerInActiveList>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d069      	beq.n	800df26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de54:	6a1b      	ldr	r3, [r3, #32]
 800de56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de60:	f003 0304 	and.w	r3, r3, #4
 800de64:	2b00      	cmp	r3, #0
 800de66:	d05e      	beq.n	800df26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	441a      	add	r2, r3
 800de70:	2300      	movs	r3, #0
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	2300      	movs	r3, #0
 800de76:	2100      	movs	r1, #0
 800de78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de7a:	f7ff fe05 	bl	800da88 <xTimerGenericCommand>
 800de7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de80:	6a3b      	ldr	r3, [r7, #32]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d14f      	bne.n	800df26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8a:	f383 8811 	msr	BASEPRI, r3
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	61bb      	str	r3, [r7, #24]
}
 800de98:	bf00      	nop
 800de9a:	e7fe      	b.n	800de9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dea2:	f023 0301 	bic.w	r3, r3, #1
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800deae:	e03a      	b.n	800df26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deb6:	f043 0301 	orr.w	r3, r3, #1
 800deba:	b2da      	uxtb	r2, r3
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10a      	bne.n	800dee6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ded0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded4:	f383 8811 	msr	BASEPRI, r3
 800ded8:	f3bf 8f6f 	isb	sy
 800dedc:	f3bf 8f4f 	dsb	sy
 800dee0:	617b      	str	r3, [r7, #20]
}
 800dee2:	bf00      	nop
 800dee4:	e7fe      	b.n	800dee4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	699a      	ldr	r2, [r3, #24]
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	18d1      	adds	r1, r2, r3
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800def4:	f7ff ff06 	bl	800dd04 <prvInsertTimerInActiveList>
					break;
 800def8:	e015      	b.n	800df26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800defa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df00:	f003 0302 	and.w	r3, r3, #2
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800df08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df0a:	f000 fc01 	bl	800e710 <vPortFree>
 800df0e:	e00a      	b.n	800df26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df16:	f023 0301 	bic.w	r3, r3, #1
 800df1a:	b2da      	uxtb	r2, r3
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df22:	e000      	b.n	800df26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800df24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df26:	4b08      	ldr	r3, [pc, #32]	; (800df48 <prvProcessReceivedCommands+0x1c0>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	1d39      	adds	r1, r7, #4
 800df2c:	2200      	movs	r2, #0
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fe fafc 	bl	800c52c <xQueueReceive>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	f47f af2a 	bne.w	800dd90 <prvProcessReceivedCommands+0x8>
	}
}
 800df3c:	bf00      	nop
 800df3e:	bf00      	nop
 800df40:	3730      	adds	r7, #48	; 0x30
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	20001084 	.word	0x20001084

0800df4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b088      	sub	sp, #32
 800df50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df52:	e048      	b.n	800dfe6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df54:	4b2d      	ldr	r3, [pc, #180]	; (800e00c <prvSwitchTimerLists+0xc0>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df5e:	4b2b      	ldr	r3, [pc, #172]	; (800e00c <prvSwitchTimerLists+0xc0>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	3304      	adds	r3, #4
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fd ffda 	bl	800bf26 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a1b      	ldr	r3, [r3, #32]
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df80:	f003 0304 	and.w	r3, r3, #4
 800df84:	2b00      	cmp	r3, #0
 800df86:	d02e      	beq.n	800dfe6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	699b      	ldr	r3, [r3, #24]
 800df8c:	693a      	ldr	r2, [r7, #16]
 800df8e:	4413      	add	r3, r2
 800df90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df92:	68ba      	ldr	r2, [r7, #8]
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	429a      	cmp	r2, r3
 800df98:	d90e      	bls.n	800dfb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfa6:	4b19      	ldr	r3, [pc, #100]	; (800e00c <prvSwitchTimerLists+0xc0>)
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	3304      	adds	r3, #4
 800dfae:	4619      	mov	r1, r3
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	f7fd ff7f 	bl	800beb4 <vListInsert>
 800dfb6:	e016      	b.n	800dfe6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f7ff fd60 	bl	800da88 <xTimerGenericCommand>
 800dfc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10a      	bne.n	800dfe6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	603b      	str	r3, [r7, #0]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfe6:	4b09      	ldr	r3, [pc, #36]	; (800e00c <prvSwitchTimerLists+0xc0>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1b1      	bne.n	800df54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dff0:	4b06      	ldr	r3, [pc, #24]	; (800e00c <prvSwitchTimerLists+0xc0>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dff6:	4b06      	ldr	r3, [pc, #24]	; (800e010 <prvSwitchTimerLists+0xc4>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a04      	ldr	r2, [pc, #16]	; (800e00c <prvSwitchTimerLists+0xc0>)
 800dffc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dffe:	4a04      	ldr	r2, [pc, #16]	; (800e010 <prvSwitchTimerLists+0xc4>)
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	6013      	str	r3, [r2, #0]
}
 800e004:	bf00      	nop
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	2000107c 	.word	0x2000107c
 800e010:	20001080 	.word	0x20001080

0800e014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e01a:	f000 f98b 	bl	800e334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e01e:	4b15      	ldr	r3, [pc, #84]	; (800e074 <prvCheckForValidListAndQueue+0x60>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d120      	bne.n	800e068 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e026:	4814      	ldr	r0, [pc, #80]	; (800e078 <prvCheckForValidListAndQueue+0x64>)
 800e028:	f7fd fef3 	bl	800be12 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e02c:	4813      	ldr	r0, [pc, #76]	; (800e07c <prvCheckForValidListAndQueue+0x68>)
 800e02e:	f7fd fef0 	bl	800be12 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e032:	4b13      	ldr	r3, [pc, #76]	; (800e080 <prvCheckForValidListAndQueue+0x6c>)
 800e034:	4a10      	ldr	r2, [pc, #64]	; (800e078 <prvCheckForValidListAndQueue+0x64>)
 800e036:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e038:	4b12      	ldr	r3, [pc, #72]	; (800e084 <prvCheckForValidListAndQueue+0x70>)
 800e03a:	4a10      	ldr	r2, [pc, #64]	; (800e07c <prvCheckForValidListAndQueue+0x68>)
 800e03c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e03e:	2300      	movs	r3, #0
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	4b11      	ldr	r3, [pc, #68]	; (800e088 <prvCheckForValidListAndQueue+0x74>)
 800e044:	4a11      	ldr	r2, [pc, #68]	; (800e08c <prvCheckForValidListAndQueue+0x78>)
 800e046:	2110      	movs	r1, #16
 800e048:	200a      	movs	r0, #10
 800e04a:	f7fd ffff 	bl	800c04c <xQueueGenericCreateStatic>
 800e04e:	4603      	mov	r3, r0
 800e050:	4a08      	ldr	r2, [pc, #32]	; (800e074 <prvCheckForValidListAndQueue+0x60>)
 800e052:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e054:	4b07      	ldr	r3, [pc, #28]	; (800e074 <prvCheckForValidListAndQueue+0x60>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d005      	beq.n	800e068 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e05c:	4b05      	ldr	r3, [pc, #20]	; (800e074 <prvCheckForValidListAndQueue+0x60>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	490b      	ldr	r1, [pc, #44]	; (800e090 <prvCheckForValidListAndQueue+0x7c>)
 800e062:	4618      	mov	r0, r3
 800e064:	f7fe fcd2 	bl	800ca0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e068:	f000 f994 	bl	800e394 <vPortExitCritical>
}
 800e06c:	bf00      	nop
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20001084 	.word	0x20001084
 800e078:	20001054 	.word	0x20001054
 800e07c:	20001068 	.word	0x20001068
 800e080:	2000107c 	.word	0x2000107c
 800e084:	20001080 	.word	0x20001080
 800e088:	20001130 	.word	0x20001130
 800e08c:	20001090 	.word	0x20001090
 800e090:	0800f234 	.word	0x0800f234

0800e094 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10a      	bne.n	800e0bc <pvTimerGetTimerID+0x28>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	60fb      	str	r3, [r7, #12]
}
 800e0b8:	bf00      	nop
 800e0ba:	e7fe      	b.n	800e0ba <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e0bc:	f000 f93a 	bl	800e334 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	69db      	ldr	r3, [r3, #28]
 800e0c4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e0c6:	f000 f965 	bl	800e394 <vPortExitCritical>

	return pvReturn;
 800e0ca:	693b      	ldr	r3, [r7, #16]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3718      	adds	r7, #24
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	3b04      	subs	r3, #4
 800e0e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	3b04      	subs	r3, #4
 800e0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	f023 0201 	bic.w	r2, r3, #1
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	3b04      	subs	r3, #4
 800e102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e104:	4a0c      	ldr	r2, [pc, #48]	; (800e138 <pxPortInitialiseStack+0x64>)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	3b14      	subs	r3, #20
 800e10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3b04      	subs	r3, #4
 800e11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f06f 0202 	mvn.w	r2, #2
 800e122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3b20      	subs	r3, #32
 800e128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e12a:	68fb      	ldr	r3, [r7, #12]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	0800e13d 	.word	0x0800e13d

0800e13c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e142:	2300      	movs	r3, #0
 800e144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e146:	4b12      	ldr	r3, [pc, #72]	; (800e190 <prvTaskExitError+0x54>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14e:	d00a      	beq.n	800e166 <prvTaskExitError+0x2a>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <prvTaskExitError+0x28>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	60bb      	str	r3, [r7, #8]
}
 800e178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e17a:	bf00      	nop
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d0fc      	beq.n	800e17c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e182:	bf00      	nop
 800e184:	bf00      	nop
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	2000002c 	.word	0x2000002c
	...

0800e1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1a0:	4b07      	ldr	r3, [pc, #28]	; (800e1c0 <pxCurrentTCBConst2>)
 800e1a2:	6819      	ldr	r1, [r3, #0]
 800e1a4:	6808      	ldr	r0, [r1, #0]
 800e1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1aa:	f380 8809 	msr	PSP, r0
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f04f 0000 	mov.w	r0, #0
 800e1b6:	f380 8811 	msr	BASEPRI, r0
 800e1ba:	4770      	bx	lr
 800e1bc:	f3af 8000 	nop.w

0800e1c0 <pxCurrentTCBConst2>:
 800e1c0:	20000b54 	.word	0x20000b54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1c4:	bf00      	nop
 800e1c6:	bf00      	nop

0800e1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1c8:	4808      	ldr	r0, [pc, #32]	; (800e1ec <prvPortStartFirstTask+0x24>)
 800e1ca:	6800      	ldr	r0, [r0, #0]
 800e1cc:	6800      	ldr	r0, [r0, #0]
 800e1ce:	f380 8808 	msr	MSP, r0
 800e1d2:	f04f 0000 	mov.w	r0, #0
 800e1d6:	f380 8814 	msr	CONTROL, r0
 800e1da:	b662      	cpsie	i
 800e1dc:	b661      	cpsie	f
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	df00      	svc	0
 800e1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1ea:	bf00      	nop
 800e1ec:	e000ed08 	.word	0xe000ed08

0800e1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e1f6:	4b46      	ldr	r3, [pc, #280]	; (800e310 <xPortStartScheduler+0x120>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a46      	ldr	r2, [pc, #280]	; (800e314 <xPortStartScheduler+0x124>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d10a      	bne.n	800e216 <xPortStartScheduler+0x26>
	__asm volatile
 800e200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	613b      	str	r3, [r7, #16]
}
 800e212:	bf00      	nop
 800e214:	e7fe      	b.n	800e214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e216:	4b3e      	ldr	r3, [pc, #248]	; (800e310 <xPortStartScheduler+0x120>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a3f      	ldr	r2, [pc, #252]	; (800e318 <xPortStartScheduler+0x128>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d10a      	bne.n	800e236 <xPortStartScheduler+0x46>
	__asm volatile
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	60fb      	str	r3, [r7, #12]
}
 800e232:	bf00      	nop
 800e234:	e7fe      	b.n	800e234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e236:	4b39      	ldr	r3, [pc, #228]	; (800e31c <xPortStartScheduler+0x12c>)
 800e238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	22ff      	movs	r2, #255	; 0xff
 800e246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e250:	78fb      	ldrb	r3, [r7, #3]
 800e252:	b2db      	uxtb	r3, r3
 800e254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	4b31      	ldr	r3, [pc, #196]	; (800e320 <xPortStartScheduler+0x130>)
 800e25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e25e:	4b31      	ldr	r3, [pc, #196]	; (800e324 <xPortStartScheduler+0x134>)
 800e260:	2207      	movs	r2, #7
 800e262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e264:	e009      	b.n	800e27a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e266:	4b2f      	ldr	r3, [pc, #188]	; (800e324 <xPortStartScheduler+0x134>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3b01      	subs	r3, #1
 800e26c:	4a2d      	ldr	r2, [pc, #180]	; (800e324 <xPortStartScheduler+0x134>)
 800e26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	b2db      	uxtb	r3, r3
 800e278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e27a:	78fb      	ldrb	r3, [r7, #3]
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e282:	2b80      	cmp	r3, #128	; 0x80
 800e284:	d0ef      	beq.n	800e266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e286:	4b27      	ldr	r3, [pc, #156]	; (800e324 <xPortStartScheduler+0x134>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f1c3 0307 	rsb	r3, r3, #7
 800e28e:	2b04      	cmp	r3, #4
 800e290:	d00a      	beq.n	800e2a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	60bb      	str	r3, [r7, #8]
}
 800e2a4:	bf00      	nop
 800e2a6:	e7fe      	b.n	800e2a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2a8:	4b1e      	ldr	r3, [pc, #120]	; (800e324 <xPortStartScheduler+0x134>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	021b      	lsls	r3, r3, #8
 800e2ae:	4a1d      	ldr	r2, [pc, #116]	; (800e324 <xPortStartScheduler+0x134>)
 800e2b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2b2:	4b1c      	ldr	r3, [pc, #112]	; (800e324 <xPortStartScheduler+0x134>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2ba:	4a1a      	ldr	r2, [pc, #104]	; (800e324 <xPortStartScheduler+0x134>)
 800e2bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	b2da      	uxtb	r2, r3
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2c6:	4b18      	ldr	r3, [pc, #96]	; (800e328 <xPortStartScheduler+0x138>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a17      	ldr	r2, [pc, #92]	; (800e328 <xPortStartScheduler+0x138>)
 800e2cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2d2:	4b15      	ldr	r3, [pc, #84]	; (800e328 <xPortStartScheduler+0x138>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a14      	ldr	r2, [pc, #80]	; (800e328 <xPortStartScheduler+0x138>)
 800e2d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2de:	f000 f8dd 	bl	800e49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2e2:	4b12      	ldr	r3, [pc, #72]	; (800e32c <xPortStartScheduler+0x13c>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2e8:	f000 f8fc 	bl	800e4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2ec:	4b10      	ldr	r3, [pc, #64]	; (800e330 <xPortStartScheduler+0x140>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a0f      	ldr	r2, [pc, #60]	; (800e330 <xPortStartScheduler+0x140>)
 800e2f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e2f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2f8:	f7ff ff66 	bl	800e1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e2fc:	f7fe ff96 	bl	800d22c <vTaskSwitchContext>
	prvTaskExitError();
 800e300:	f7ff ff1c 	bl	800e13c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	e000ed00 	.word	0xe000ed00
 800e314:	410fc271 	.word	0x410fc271
 800e318:	410fc270 	.word	0x410fc270
 800e31c:	e000e400 	.word	0xe000e400
 800e320:	20001180 	.word	0x20001180
 800e324:	20001184 	.word	0x20001184
 800e328:	e000ed20 	.word	0xe000ed20
 800e32c:	2000002c 	.word	0x2000002c
 800e330:	e000ef34 	.word	0xe000ef34

0800e334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	607b      	str	r3, [r7, #4]
}
 800e34c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e34e:	4b0f      	ldr	r3, [pc, #60]	; (800e38c <vPortEnterCritical+0x58>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	3301      	adds	r3, #1
 800e354:	4a0d      	ldr	r2, [pc, #52]	; (800e38c <vPortEnterCritical+0x58>)
 800e356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e358:	4b0c      	ldr	r3, [pc, #48]	; (800e38c <vPortEnterCritical+0x58>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d10f      	bne.n	800e380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e360:	4b0b      	ldr	r3, [pc, #44]	; (800e390 <vPortEnterCritical+0x5c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <vPortEnterCritical+0x4c>
	__asm volatile
 800e36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36e:	f383 8811 	msr	BASEPRI, r3
 800e372:	f3bf 8f6f 	isb	sy
 800e376:	f3bf 8f4f 	dsb	sy
 800e37a:	603b      	str	r3, [r7, #0]
}
 800e37c:	bf00      	nop
 800e37e:	e7fe      	b.n	800e37e <vPortEnterCritical+0x4a>
	}
}
 800e380:	bf00      	nop
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr
 800e38c:	2000002c 	.word	0x2000002c
 800e390:	e000ed04 	.word	0xe000ed04

0800e394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e39a:	4b12      	ldr	r3, [pc, #72]	; (800e3e4 <vPortExitCritical+0x50>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10a      	bne.n	800e3b8 <vPortExitCritical+0x24>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	607b      	str	r3, [r7, #4]
}
 800e3b4:	bf00      	nop
 800e3b6:	e7fe      	b.n	800e3b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e3b8:	4b0a      	ldr	r3, [pc, #40]	; (800e3e4 <vPortExitCritical+0x50>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3b01      	subs	r3, #1
 800e3be:	4a09      	ldr	r2, [pc, #36]	; (800e3e4 <vPortExitCritical+0x50>)
 800e3c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3c2:	4b08      	ldr	r3, [pc, #32]	; (800e3e4 <vPortExitCritical+0x50>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d105      	bne.n	800e3d6 <vPortExitCritical+0x42>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	f383 8811 	msr	BASEPRI, r3
}
 800e3d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3d6:	bf00      	nop
 800e3d8:	370c      	adds	r7, #12
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	2000002c 	.word	0x2000002c
	...

0800e3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3f0:	f3ef 8009 	mrs	r0, PSP
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	4b15      	ldr	r3, [pc, #84]	; (800e450 <pxCurrentTCBConst>)
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	f01e 0f10 	tst.w	lr, #16
 800e400:	bf08      	it	eq
 800e402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40a:	6010      	str	r0, [r2, #0]
 800e40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e410:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e414:	f380 8811 	msr	BASEPRI, r0
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f7fe ff04 	bl	800d22c <vTaskSwitchContext>
 800e424:	f04f 0000 	mov.w	r0, #0
 800e428:	f380 8811 	msr	BASEPRI, r0
 800e42c:	bc09      	pop	{r0, r3}
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	6808      	ldr	r0, [r1, #0]
 800e432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e436:	f01e 0f10 	tst.w	lr, #16
 800e43a:	bf08      	it	eq
 800e43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e440:	f380 8809 	msr	PSP, r0
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	f3af 8000 	nop.w

0800e450 <pxCurrentTCBConst>:
 800e450:	20000b54 	.word	0x20000b54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e454:	bf00      	nop
 800e456:	bf00      	nop

0800e458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	607b      	str	r3, [r7, #4]
}
 800e470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e472:	f7fe fe21 	bl	800d0b8 <xTaskIncrementTick>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d003      	beq.n	800e484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e47c:	4b06      	ldr	r3, [pc, #24]	; (800e498 <xPortSysTickHandler+0x40>)
 800e47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	2300      	movs	r3, #0
 800e486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	f383 8811 	msr	BASEPRI, r3
}
 800e48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e490:	bf00      	nop
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	e000ed04 	.word	0xe000ed04

0800e49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e49c:	b480      	push	{r7}
 800e49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e4a0:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <vPortSetupTimerInterrupt+0x34>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e4a6:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <vPortSetupTimerInterrupt+0x38>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e4ac:	4b0a      	ldr	r3, [pc, #40]	; (800e4d8 <vPortSetupTimerInterrupt+0x3c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a0a      	ldr	r2, [pc, #40]	; (800e4dc <vPortSetupTimerInterrupt+0x40>)
 800e4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b6:	099b      	lsrs	r3, r3, #6
 800e4b8:	4a09      	ldr	r2, [pc, #36]	; (800e4e0 <vPortSetupTimerInterrupt+0x44>)
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4be:	4b04      	ldr	r3, [pc, #16]	; (800e4d0 <vPortSetupTimerInterrupt+0x34>)
 800e4c0:	2207      	movs	r2, #7
 800e4c2:	601a      	str	r2, [r3, #0]
}
 800e4c4:	bf00      	nop
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	e000e010 	.word	0xe000e010
 800e4d4:	e000e018 	.word	0xe000e018
 800e4d8:	20000000 	.word	0x20000000
 800e4dc:	10624dd3 	.word	0x10624dd3
 800e4e0:	e000e014 	.word	0xe000e014

0800e4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e4f4 <vPortEnableVFP+0x10>
 800e4e8:	6801      	ldr	r1, [r0, #0]
 800e4ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4ee:	6001      	str	r1, [r0, #0]
 800e4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4f2:	bf00      	nop
 800e4f4:	e000ed88 	.word	0xe000ed88

0800e4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4fe:	f3ef 8305 	mrs	r3, IPSR
 800e502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2b0f      	cmp	r3, #15
 800e508:	d914      	bls.n	800e534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e50a:	4a17      	ldr	r2, [pc, #92]	; (800e568 <vPortValidateInterruptPriority+0x70>)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	4413      	add	r3, r2
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e514:	4b15      	ldr	r3, [pc, #84]	; (800e56c <vPortValidateInterruptPriority+0x74>)
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	7afa      	ldrb	r2, [r7, #11]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d20a      	bcs.n	800e534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	607b      	str	r3, [r7, #4]
}
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e534:	4b0e      	ldr	r3, [pc, #56]	; (800e570 <vPortValidateInterruptPriority+0x78>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e53c:	4b0d      	ldr	r3, [pc, #52]	; (800e574 <vPortValidateInterruptPriority+0x7c>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	429a      	cmp	r2, r3
 800e542:	d90a      	bls.n	800e55a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	603b      	str	r3, [r7, #0]
}
 800e556:	bf00      	nop
 800e558:	e7fe      	b.n	800e558 <vPortValidateInterruptPriority+0x60>
	}
 800e55a:	bf00      	nop
 800e55c:	3714      	adds	r7, #20
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	e000e3f0 	.word	0xe000e3f0
 800e56c:	20001180 	.word	0x20001180
 800e570:	e000ed0c 	.word	0xe000ed0c
 800e574:	20001184 	.word	0x20001184

0800e578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08a      	sub	sp, #40	; 0x28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e580:	2300      	movs	r3, #0
 800e582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e584:	f7fe fcdc 	bl	800cf40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e588:	4b5b      	ldr	r3, [pc, #364]	; (800e6f8 <pvPortMalloc+0x180>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e590:	f000 f920 	bl	800e7d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e594:	4b59      	ldr	r3, [pc, #356]	; (800e6fc <pvPortMalloc+0x184>)
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	4013      	ands	r3, r2
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f040 8093 	bne.w	800e6c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d01d      	beq.n	800e5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e5a8:	2208      	movs	r2, #8
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f003 0307 	and.w	r3, r3, #7
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d014      	beq.n	800e5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f023 0307 	bic.w	r3, r3, #7
 800e5c0:	3308      	adds	r3, #8
 800e5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f003 0307 	and.w	r3, r3, #7
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00a      	beq.n	800e5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	617b      	str	r3, [r7, #20]
}
 800e5e0:	bf00      	nop
 800e5e2:	e7fe      	b.n	800e5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d06e      	beq.n	800e6c8 <pvPortMalloc+0x150>
 800e5ea:	4b45      	ldr	r3, [pc, #276]	; (800e700 <pvPortMalloc+0x188>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d869      	bhi.n	800e6c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5f4:	4b43      	ldr	r3, [pc, #268]	; (800e704 <pvPortMalloc+0x18c>)
 800e5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e5f8:	4b42      	ldr	r3, [pc, #264]	; (800e704 <pvPortMalloc+0x18c>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5fe:	e004      	b.n	800e60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	429a      	cmp	r2, r3
 800e612:	d903      	bls.n	800e61c <pvPortMalloc+0xa4>
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1f1      	bne.n	800e600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e61c:	4b36      	ldr	r3, [pc, #216]	; (800e6f8 <pvPortMalloc+0x180>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e622:	429a      	cmp	r2, r3
 800e624:	d050      	beq.n	800e6c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e626:	6a3b      	ldr	r3, [r7, #32]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2208      	movs	r2, #8
 800e62c:	4413      	add	r3, r2
 800e62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	685a      	ldr	r2, [r3, #4]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	2308      	movs	r3, #8
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	429a      	cmp	r2, r3
 800e646:	d91f      	bls.n	800e688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4413      	add	r3, r2
 800e64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	f003 0307 	and.w	r3, r3, #7
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00a      	beq.n	800e670 <pvPortMalloc+0xf8>
	__asm volatile
 800e65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65e:	f383 8811 	msr	BASEPRI, r3
 800e662:	f3bf 8f6f 	isb	sy
 800e666:	f3bf 8f4f 	dsb	sy
 800e66a:	613b      	str	r3, [r7, #16]
}
 800e66c:	bf00      	nop
 800e66e:	e7fe      	b.n	800e66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	685a      	ldr	r2, [r3, #4]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	1ad2      	subs	r2, r2, r3
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e682:	69b8      	ldr	r0, [r7, #24]
 800e684:	f000 f908 	bl	800e898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e688:	4b1d      	ldr	r3, [pc, #116]	; (800e700 <pvPortMalloc+0x188>)
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	4a1b      	ldr	r2, [pc, #108]	; (800e700 <pvPortMalloc+0x188>)
 800e694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e696:	4b1a      	ldr	r3, [pc, #104]	; (800e700 <pvPortMalloc+0x188>)
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	4b1b      	ldr	r3, [pc, #108]	; (800e708 <pvPortMalloc+0x190>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d203      	bcs.n	800e6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e6a2:	4b17      	ldr	r3, [pc, #92]	; (800e700 <pvPortMalloc+0x188>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a18      	ldr	r2, [pc, #96]	; (800e708 <pvPortMalloc+0x190>)
 800e6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	685a      	ldr	r2, [r3, #4]
 800e6ae:	4b13      	ldr	r3, [pc, #76]	; (800e6fc <pvPortMalloc+0x184>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	431a      	orrs	r2, r3
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e6be:	4b13      	ldr	r3, [pc, #76]	; (800e70c <pvPortMalloc+0x194>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	4a11      	ldr	r2, [pc, #68]	; (800e70c <pvPortMalloc+0x194>)
 800e6c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e6c8:	f7fe fc48 	bl	800cf5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	f003 0307 	and.w	r3, r3, #7
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00a      	beq.n	800e6ec <pvPortMalloc+0x174>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	60fb      	str	r3, [r7, #12]
}
 800e6e8:	bf00      	nop
 800e6ea:	e7fe      	b.n	800e6ea <pvPortMalloc+0x172>
	return pvReturn;
 800e6ec:	69fb      	ldr	r3, [r7, #28]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3728      	adds	r7, #40	; 0x28
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20004d90 	.word	0x20004d90
 800e6fc:	20004da4 	.word	0x20004da4
 800e700:	20004d94 	.word	0x20004d94
 800e704:	20004d88 	.word	0x20004d88
 800e708:	20004d98 	.word	0x20004d98
 800e70c:	20004d9c 	.word	0x20004d9c

0800e710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d04d      	beq.n	800e7be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e722:	2308      	movs	r3, #8
 800e724:	425b      	negs	r3, r3
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	4413      	add	r3, r2
 800e72a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	685a      	ldr	r2, [r3, #4]
 800e734:	4b24      	ldr	r3, [pc, #144]	; (800e7c8 <vPortFree+0xb8>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4013      	ands	r3, r2
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10a      	bne.n	800e754 <vPortFree+0x44>
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	60fb      	str	r3, [r7, #12]
}
 800e750:	bf00      	nop
 800e752:	e7fe      	b.n	800e752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00a      	beq.n	800e772 <vPortFree+0x62>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	60bb      	str	r3, [r7, #8]
}
 800e76e:	bf00      	nop
 800e770:	e7fe      	b.n	800e770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	685a      	ldr	r2, [r3, #4]
 800e776:	4b14      	ldr	r3, [pc, #80]	; (800e7c8 <vPortFree+0xb8>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4013      	ands	r3, r2
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d01e      	beq.n	800e7be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d11a      	bne.n	800e7be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	4b0e      	ldr	r3, [pc, #56]	; (800e7c8 <vPortFree+0xb8>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	43db      	mvns	r3, r3
 800e792:	401a      	ands	r2, r3
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e798:	f7fe fbd2 	bl	800cf40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	4b0a      	ldr	r3, [pc, #40]	; (800e7cc <vPortFree+0xbc>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	4a09      	ldr	r2, [pc, #36]	; (800e7cc <vPortFree+0xbc>)
 800e7a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7aa:	6938      	ldr	r0, [r7, #16]
 800e7ac:	f000 f874 	bl	800e898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e7b0:	4b07      	ldr	r3, [pc, #28]	; (800e7d0 <vPortFree+0xc0>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	4a06      	ldr	r2, [pc, #24]	; (800e7d0 <vPortFree+0xc0>)
 800e7b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e7ba:	f7fe fbcf 	bl	800cf5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7be:	bf00      	nop
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20004da4 	.word	0x20004da4
 800e7cc:	20004d94 	.word	0x20004d94
 800e7d0:	20004da0 	.word	0x20004da0

0800e7d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e7de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7e0:	4b27      	ldr	r3, [pc, #156]	; (800e880 <prvHeapInit+0xac>)
 800e7e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f003 0307 	and.w	r3, r3, #7
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00c      	beq.n	800e808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	3307      	adds	r3, #7
 800e7f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f023 0307 	bic.w	r3, r3, #7
 800e7fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	4a1f      	ldr	r2, [pc, #124]	; (800e880 <prvHeapInit+0xac>)
 800e804:	4413      	add	r3, r2
 800e806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e80c:	4a1d      	ldr	r2, [pc, #116]	; (800e884 <prvHeapInit+0xb0>)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e812:	4b1c      	ldr	r3, [pc, #112]	; (800e884 <prvHeapInit+0xb0>)
 800e814:	2200      	movs	r2, #0
 800e816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	4413      	add	r3, r2
 800e81e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e820:	2208      	movs	r2, #8
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	1a9b      	subs	r3, r3, r2
 800e826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f023 0307 	bic.w	r3, r3, #7
 800e82e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	4a15      	ldr	r2, [pc, #84]	; (800e888 <prvHeapInit+0xb4>)
 800e834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e836:	4b14      	ldr	r3, [pc, #80]	; (800e888 <prvHeapInit+0xb4>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2200      	movs	r2, #0
 800e83c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e83e:	4b12      	ldr	r3, [pc, #72]	; (800e888 <prvHeapInit+0xb4>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2200      	movs	r2, #0
 800e844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	1ad2      	subs	r2, r2, r3
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e854:	4b0c      	ldr	r3, [pc, #48]	; (800e888 <prvHeapInit+0xb4>)
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	4a0a      	ldr	r2, [pc, #40]	; (800e88c <prvHeapInit+0xb8>)
 800e862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	4a09      	ldr	r2, [pc, #36]	; (800e890 <prvHeapInit+0xbc>)
 800e86a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e86c:	4b09      	ldr	r3, [pc, #36]	; (800e894 <prvHeapInit+0xc0>)
 800e86e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e872:	601a      	str	r2, [r3, #0]
}
 800e874:	bf00      	nop
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr
 800e880:	20001188 	.word	0x20001188
 800e884:	20004d88 	.word	0x20004d88
 800e888:	20004d90 	.word	0x20004d90
 800e88c:	20004d98 	.word	0x20004d98
 800e890:	20004d94 	.word	0x20004d94
 800e894:	20004da4 	.word	0x20004da4

0800e898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e898:	b480      	push	{r7}
 800e89a:	b085      	sub	sp, #20
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8a0:	4b28      	ldr	r3, [pc, #160]	; (800e944 <prvInsertBlockIntoFreeList+0xac>)
 800e8a2:	60fb      	str	r3, [r7, #12]
 800e8a4:	e002      	b.n	800e8ac <prvInsertBlockIntoFreeList+0x14>
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	60fb      	str	r3, [r7, #12]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d8f7      	bhi.n	800e8a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d108      	bne.n	800e8da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	685a      	ldr	r2, [r3, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	441a      	add	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	441a      	add	r2, r3
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d118      	bne.n	800e920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	4b15      	ldr	r3, [pc, #84]	; (800e948 <prvInsertBlockIntoFreeList+0xb0>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d00d      	beq.n	800e916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	441a      	add	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	601a      	str	r2, [r3, #0]
 800e914:	e008      	b.n	800e928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e916:	4b0c      	ldr	r3, [pc, #48]	; (800e948 <prvInsertBlockIntoFreeList+0xb0>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	601a      	str	r2, [r3, #0]
 800e91e:	e003      	b.n	800e928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d002      	beq.n	800e936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e936:	bf00      	nop
 800e938:	3714      	adds	r7, #20
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop
 800e944:	20004d88 	.word	0x20004d88
 800e948:	20004d90 	.word	0x20004d90

0800e94c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e950:	2201      	movs	r2, #1
 800e952:	490e      	ldr	r1, [pc, #56]	; (800e98c <MX_USB_HOST_Init+0x40>)
 800e954:	480e      	ldr	r0, [pc, #56]	; (800e990 <MX_USB_HOST_Init+0x44>)
 800e956:	f7fb f913 	bl	8009b80 <USBH_Init>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e960:	f7f2 fcac 	bl	80012bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e964:	490b      	ldr	r1, [pc, #44]	; (800e994 <MX_USB_HOST_Init+0x48>)
 800e966:	480a      	ldr	r0, [pc, #40]	; (800e990 <MX_USB_HOST_Init+0x44>)
 800e968:	f7fb f9ba 	bl	8009ce0 <USBH_RegisterClass>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e972:	f7f2 fca3 	bl	80012bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e976:	4806      	ldr	r0, [pc, #24]	; (800e990 <MX_USB_HOST_Init+0x44>)
 800e978:	f7fb fa3e 	bl	8009df8 <USBH_Start>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d001      	beq.n	800e986 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e982:	f7f2 fc9b 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e986:	bf00      	nop
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	0800e999 	.word	0x0800e999
 800e990:	20004e64 	.word	0x20004e64
 800e994:	2000000c 	.word	0x2000000c

0800e998 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e9a4:	78fb      	ldrb	r3, [r7, #3]
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	2b04      	cmp	r3, #4
 800e9aa:	d819      	bhi.n	800e9e0 <USBH_UserProcess+0x48>
 800e9ac:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <USBH_UserProcess+0x1c>)
 800e9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b2:	bf00      	nop
 800e9b4:	0800e9e1 	.word	0x0800e9e1
 800e9b8:	0800e9d1 	.word	0x0800e9d1
 800e9bc:	0800e9e1 	.word	0x0800e9e1
 800e9c0:	0800e9d9 	.word	0x0800e9d9
 800e9c4:	0800e9c9 	.word	0x0800e9c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e9c8:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <USBH_UserProcess+0x58>)
 800e9ca:	2203      	movs	r2, #3
 800e9cc:	701a      	strb	r2, [r3, #0]
  break;
 800e9ce:	e008      	b.n	800e9e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e9d0:	4b07      	ldr	r3, [pc, #28]	; (800e9f0 <USBH_UserProcess+0x58>)
 800e9d2:	2202      	movs	r2, #2
 800e9d4:	701a      	strb	r2, [r3, #0]
  break;
 800e9d6:	e004      	b.n	800e9e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e9d8:	4b05      	ldr	r3, [pc, #20]	; (800e9f0 <USBH_UserProcess+0x58>)
 800e9da:	2201      	movs	r2, #1
 800e9dc:	701a      	strb	r2, [r3, #0]
  break;
 800e9de:	e000      	b.n	800e9e2 <USBH_UserProcess+0x4a>

  default:
  break;
 800e9e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e9e2:	bf00      	nop
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	20004da8 	.word	0x20004da8

0800e9f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b08a      	sub	sp, #40	; 0x28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9fc:	f107 0314 	add.w	r3, r7, #20
 800ea00:	2200      	movs	r2, #0
 800ea02:	601a      	str	r2, [r3, #0]
 800ea04:	605a      	str	r2, [r3, #4]
 800ea06:	609a      	str	r2, [r3, #8]
 800ea08:	60da      	str	r2, [r3, #12]
 800ea0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea14:	d147      	bne.n	800eaa6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea16:	2300      	movs	r3, #0
 800ea18:	613b      	str	r3, [r7, #16]
 800ea1a:	4b25      	ldr	r3, [pc, #148]	; (800eab0 <HAL_HCD_MspInit+0xbc>)
 800ea1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea1e:	4a24      	ldr	r2, [pc, #144]	; (800eab0 <HAL_HCD_MspInit+0xbc>)
 800ea20:	f043 0301 	orr.w	r3, r3, #1
 800ea24:	6313      	str	r3, [r2, #48]	; 0x30
 800ea26:	4b22      	ldr	r3, [pc, #136]	; (800eab0 <HAL_HCD_MspInit+0xbc>)
 800ea28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea2a:	f003 0301 	and.w	r3, r3, #1
 800ea2e:	613b      	str	r3, [r7, #16]
 800ea30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800ea32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ea40:	f107 0314 	add.w	r3, r7, #20
 800ea44:	4619      	mov	r1, r3
 800ea46:	481b      	ldr	r0, [pc, #108]	; (800eab4 <HAL_HCD_MspInit+0xc0>)
 800ea48:	f7f4 f800 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800ea4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ea50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea52:	2302      	movs	r3, #2
 800ea54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea56:	2300      	movs	r3, #0
 800ea58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea5a:	2303      	movs	r3, #3
 800ea5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ea5e:	230a      	movs	r3, #10
 800ea60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea62:	f107 0314 	add.w	r3, r7, #20
 800ea66:	4619      	mov	r1, r3
 800ea68:	4812      	ldr	r0, [pc, #72]	; (800eab4 <HAL_HCD_MspInit+0xc0>)
 800ea6a:	f7f3 ffef 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ea6e:	4b10      	ldr	r3, [pc, #64]	; (800eab0 <HAL_HCD_MspInit+0xbc>)
 800ea70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea72:	4a0f      	ldr	r2, [pc, #60]	; (800eab0 <HAL_HCD_MspInit+0xbc>)
 800ea74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea78:	6353      	str	r3, [r2, #52]	; 0x34
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	60fb      	str	r3, [r7, #12]
 800ea7e:	4b0c      	ldr	r3, [pc, #48]	; (800eab0 <HAL_HCD_MspInit+0xbc>)
 800ea80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea82:	4a0b      	ldr	r2, [pc, #44]	; (800eab0 <HAL_HCD_MspInit+0xbc>)
 800ea84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea88:	6453      	str	r3, [r2, #68]	; 0x44
 800ea8a:	4b09      	ldr	r3, [pc, #36]	; (800eab0 <HAL_HCD_MspInit+0xbc>)
 800ea8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ea96:	2200      	movs	r2, #0
 800ea98:	2105      	movs	r1, #5
 800ea9a:	2043      	movs	r0, #67	; 0x43
 800ea9c:	f7f3 fd7e 	bl	800259c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eaa0:	2043      	movs	r0, #67	; 0x43
 800eaa2:	f7f3 fd97 	bl	80025d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eaa6:	bf00      	nop
 800eaa8:	3728      	adds	r7, #40	; 0x28
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	40023800 	.word	0x40023800
 800eab4:	40020000 	.word	0x40020000

0800eab8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7fb fe43 	bl	800a752 <USBH_LL_IncTimer>
}
 800eacc:	bf00      	nop
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fb fe87 	bl	800a7f6 <USBH_LL_Connect>
}
 800eae8:	bf00      	nop
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fb fe9c 	bl	800a83c <USBH_LL_Disconnect>
}
 800eb04:	bf00      	nop
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	460b      	mov	r3, r1
 800eb16:	70fb      	strb	r3, [r7, #3]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fb fed3 	bl	800a8ce <USBH_LL_NotifyURBChange>
#endif
}
 800eb28:	bf00      	nop
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fb fe31 	bl	800a7a6 <USBH_LL_PortEnabled>
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fb fe3d 	bl	800a7da <USBH_LL_PortDisabled>
}
 800eb60:	bf00      	nop
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d12a      	bne.n	800ebd0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800eb7a:	4a18      	ldr	r2, [pc, #96]	; (800ebdc <USBH_LL_Init+0x74>)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4a15      	ldr	r2, [pc, #84]	; (800ebdc <USBH_LL_Init+0x74>)
 800eb86:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb8a:	4b14      	ldr	r3, [pc, #80]	; (800ebdc <USBH_LL_Init+0x74>)
 800eb8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800eb92:	4b12      	ldr	r3, [pc, #72]	; (800ebdc <USBH_LL_Init+0x74>)
 800eb94:	220c      	movs	r2, #12
 800eb96:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800eb98:	4b10      	ldr	r3, [pc, #64]	; (800ebdc <USBH_LL_Init+0x74>)
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <USBH_LL_Init+0x74>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800eba4:	4b0d      	ldr	r3, [pc, #52]	; (800ebdc <USBH_LL_Init+0x74>)
 800eba6:	2202      	movs	r2, #2
 800eba8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ebaa:	4b0c      	ldr	r3, [pc, #48]	; (800ebdc <USBH_LL_Init+0x74>)
 800ebac:	2200      	movs	r2, #0
 800ebae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ebb0:	480a      	ldr	r0, [pc, #40]	; (800ebdc <USBH_LL_Init+0x74>)
 800ebb2:	f7f4 f8f8 	bl	8002da6 <HAL_HCD_Init>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d001      	beq.n	800ebc0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ebbc:	f7f2 fb7e 	bl	80012bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ebc0:	4806      	ldr	r0, [pc, #24]	; (800ebdc <USBH_LL_Init+0x74>)
 800ebc2:	f7f4 fcd5 	bl	8003570 <HAL_HCD_GetCurrentFrame>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f7fb fdb2 	bl	800a734 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	20005248 	.word	0x20005248

0800ebe0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7f4 fc44 	bl	8003484 <HAL_HCD_Start>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 f95c 	bl	800eec0 <USBH_Get_USB_Status>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b084      	sub	sp, #16
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7f4 fc4c 	bl	80034ca <HAL_HCD_Stop>
 800ec32:	4603      	mov	r3, r0
 800ec34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f000 f941 	bl	800eec0 <USBH_Get_USB_Status>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3710      	adds	r7, #16
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ec54:	2301      	movs	r3, #1
 800ec56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7f4 fc94 	bl	800358c <HAL_HCD_GetCurrentSpeed>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d00c      	beq.n	800ec84 <USBH_LL_GetSpeed+0x38>
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d80d      	bhi.n	800ec8a <USBH_LL_GetSpeed+0x3e>
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d002      	beq.n	800ec78 <USBH_LL_GetSpeed+0x2c>
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d003      	beq.n	800ec7e <USBH_LL_GetSpeed+0x32>
 800ec76:	e008      	b.n	800ec8a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec7c:	e008      	b.n	800ec90 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	73fb      	strb	r3, [r7, #15]
    break;
 800ec82:	e005      	b.n	800ec90 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ec84:	2302      	movs	r3, #2
 800ec86:	73fb      	strb	r3, [r7, #15]
    break;
 800ec88:	e002      	b.n	800ec90 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ec8e:	bf00      	nop
  }
  return  speed;
 800ec90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3710      	adds	r7, #16
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b084      	sub	sp, #16
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eca6:	2300      	movs	r3, #0
 800eca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f4 fc27 	bl	8003504 <HAL_HCD_ResetPort>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f000 f8ff 	bl	800eec0 <USBH_Get_USB_Status>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	460b      	mov	r3, r1
 800ecda:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ece2:	78fa      	ldrb	r2, [r7, #3]
 800ece4:	4611      	mov	r1, r2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7f4 fc2e 	bl	8003548 <HAL_HCD_HC_GetXferCount>
 800ecec:	4603      	mov	r3, r0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ecf6:	b590      	push	{r4, r7, lr}
 800ecf8:	b089      	sub	sp, #36	; 0x24
 800ecfa:	af04      	add	r7, sp, #16
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	4608      	mov	r0, r1
 800ed00:	4611      	mov	r1, r2
 800ed02:	461a      	mov	r2, r3
 800ed04:	4603      	mov	r3, r0
 800ed06:	70fb      	strb	r3, [r7, #3]
 800ed08:	460b      	mov	r3, r1
 800ed0a:	70bb      	strb	r3, [r7, #2]
 800ed0c:	4613      	mov	r3, r2
 800ed0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed14:	2300      	movs	r3, #0
 800ed16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ed1e:	787c      	ldrb	r4, [r7, #1]
 800ed20:	78ba      	ldrb	r2, [r7, #2]
 800ed22:	78f9      	ldrb	r1, [r7, #3]
 800ed24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed26:	9302      	str	r3, [sp, #8]
 800ed28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ed2c:	9301      	str	r3, [sp, #4]
 800ed2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed32:	9300      	str	r3, [sp, #0]
 800ed34:	4623      	mov	r3, r4
 800ed36:	f7f4 f898 	bl	8002e6a <HAL_HCD_HC_Init>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed3e:	7bfb      	ldrb	r3, [r7, #15]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f000 f8bd 	bl	800eec0 <USBH_Get_USB_Status>
 800ed46:	4603      	mov	r3, r0
 800ed48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd90      	pop	{r4, r7, pc}

0800ed54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed60:	2300      	movs	r3, #0
 800ed62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed6e:	78fa      	ldrb	r2, [r7, #3]
 800ed70:	4611      	mov	r1, r2
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7f4 f908 	bl	8002f88 <HAL_HCD_HC_Halt>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f000 f89e 	bl	800eec0 <USBH_Get_USB_Status>
 800ed84:	4603      	mov	r3, r0
 800ed86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ed92:	b590      	push	{r4, r7, lr}
 800ed94:	b089      	sub	sp, #36	; 0x24
 800ed96:	af04      	add	r7, sp, #16
 800ed98:	6078      	str	r0, [r7, #4]
 800ed9a:	4608      	mov	r0, r1
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4603      	mov	r3, r0
 800eda2:	70fb      	strb	r3, [r7, #3]
 800eda4:	460b      	mov	r3, r1
 800eda6:	70bb      	strb	r3, [r7, #2]
 800eda8:	4613      	mov	r3, r2
 800edaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edac:	2300      	movs	r3, #0
 800edae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edb0:	2300      	movs	r3, #0
 800edb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800edba:	787c      	ldrb	r4, [r7, #1]
 800edbc:	78ba      	ldrb	r2, [r7, #2]
 800edbe:	78f9      	ldrb	r1, [r7, #3]
 800edc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800edc4:	9303      	str	r3, [sp, #12]
 800edc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800edc8:	9302      	str	r3, [sp, #8]
 800edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edcc:	9301      	str	r3, [sp, #4]
 800edce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	4623      	mov	r3, r4
 800edd6:	f7f4 f8fb 	bl	8002fd0 <HAL_HCD_HC_SubmitRequest>
 800edda:	4603      	mov	r3, r0
 800eddc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800edde:	7bfb      	ldrb	r3, [r7, #15]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 f86d 	bl	800eec0 <USBH_Get_USB_Status>
 800ede6:	4603      	mov	r3, r0
 800ede8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edea:	7bbb      	ldrb	r3, [r7, #14]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3714      	adds	r7, #20
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd90      	pop	{r4, r7, pc}

0800edf4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	460b      	mov	r3, r1
 800edfe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee06:	78fa      	ldrb	r2, [r7, #3]
 800ee08:	4611      	mov	r1, r2
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7f4 fb88 	bl	8003520 <HAL_HCD_HC_GetURBState>
 800ee10:	4603      	mov	r3, r0
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}

0800ee1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
 800ee22:	460b      	mov	r3, r1
 800ee24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d103      	bne.n	800ee38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ee30:	78fb      	ldrb	r3, [r7, #3]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 f870 	bl	800ef18 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ee38:	20c8      	movs	r0, #200	; 0xc8
 800ee3a:	f7f3 f861 	bl	8001f00 <HAL_Delay>
  return USBH_OK;
 800ee3e:	2300      	movs	r3, #0
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	70fb      	strb	r3, [r7, #3]
 800ee54:	4613      	mov	r3, r2
 800ee56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ee60:	78fb      	ldrb	r3, [r7, #3]
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	212c      	movs	r1, #44	; 0x2c
 800ee66:	fb01 f303 	mul.w	r3, r1, r3
 800ee6a:	4413      	add	r3, r2
 800ee6c:	333b      	adds	r3, #59	; 0x3b
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d009      	beq.n	800ee88 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ee74:	78fb      	ldrb	r3, [r7, #3]
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	212c      	movs	r1, #44	; 0x2c
 800ee7a:	fb01 f303 	mul.w	r3, r1, r3
 800ee7e:	4413      	add	r3, r2
 800ee80:	3354      	adds	r3, #84	; 0x54
 800ee82:	78ba      	ldrb	r2, [r7, #2]
 800ee84:	701a      	strb	r2, [r3, #0]
 800ee86:	e008      	b.n	800ee9a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	68fa      	ldr	r2, [r7, #12]
 800ee8c:	212c      	movs	r1, #44	; 0x2c
 800ee8e:	fb01 f303 	mul.w	r3, r1, r3
 800ee92:	4413      	add	r3, r2
 800ee94:	3355      	adds	r3, #85	; 0x55
 800ee96:	78ba      	ldrb	r2, [r7, #2]
 800ee98:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7f3 f825 	bl	8001f00 <HAL_Delay>
}
 800eeb6:	bf00      	nop
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
	...

0800eec0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	4603      	mov	r3, r0
 800eec8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eeca:	2300      	movs	r3, #0
 800eecc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eece:	79fb      	ldrb	r3, [r7, #7]
 800eed0:	2b03      	cmp	r3, #3
 800eed2:	d817      	bhi.n	800ef04 <USBH_Get_USB_Status+0x44>
 800eed4:	a201      	add	r2, pc, #4	; (adr r2, 800eedc <USBH_Get_USB_Status+0x1c>)
 800eed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeda:	bf00      	nop
 800eedc:	0800eeed 	.word	0x0800eeed
 800eee0:	0800eef3 	.word	0x0800eef3
 800eee4:	0800eef9 	.word	0x0800eef9
 800eee8:	0800eeff 	.word	0x0800eeff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	73fb      	strb	r3, [r7, #15]
    break;
 800eef0:	e00b      	b.n	800ef0a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800eef2:	2302      	movs	r3, #2
 800eef4:	73fb      	strb	r3, [r7, #15]
    break;
 800eef6:	e008      	b.n	800ef0a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800eef8:	2301      	movs	r3, #1
 800eefa:	73fb      	strb	r3, [r7, #15]
    break;
 800eefc:	e005      	b.n	800ef0a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800eefe:	2302      	movs	r3, #2
 800ef00:	73fb      	strb	r3, [r7, #15]
    break;
 800ef02:	e002      	b.n	800ef0a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ef04:	2302      	movs	r3, #2
 800ef06:	73fb      	strb	r3, [r7, #15]
    break;
 800ef08:	bf00      	nop
  }
  return usb_status;
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3714      	adds	r7, #20
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	4603      	mov	r3, r0
 800ef20:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ef22:	79fb      	ldrb	r3, [r7, #7]
 800ef24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ef26:	79fb      	ldrb	r3, [r7, #7]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	73fb      	strb	r3, [r7, #15]
 800ef30:	e001      	b.n	800ef36 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ef32:	2300      	movs	r3, #0
 800ef34:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ef3e:	4803      	ldr	r0, [pc, #12]	; (800ef4c <MX_DriverVbusFS+0x34>)
 800ef40:	f7f3 ff18 	bl	8002d74 <HAL_GPIO_WritePin>
}
 800ef44:	bf00      	nop
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	40021800 	.word	0x40021800

0800ef50 <__errno>:
 800ef50:	4b01      	ldr	r3, [pc, #4]	; (800ef58 <__errno+0x8>)
 800ef52:	6818      	ldr	r0, [r3, #0]
 800ef54:	4770      	bx	lr
 800ef56:	bf00      	nop
 800ef58:	20000030 	.word	0x20000030

0800ef5c <__libc_init_array>:
 800ef5c:	b570      	push	{r4, r5, r6, lr}
 800ef5e:	4d0d      	ldr	r5, [pc, #52]	; (800ef94 <__libc_init_array+0x38>)
 800ef60:	4c0d      	ldr	r4, [pc, #52]	; (800ef98 <__libc_init_array+0x3c>)
 800ef62:	1b64      	subs	r4, r4, r5
 800ef64:	10a4      	asrs	r4, r4, #2
 800ef66:	2600      	movs	r6, #0
 800ef68:	42a6      	cmp	r6, r4
 800ef6a:	d109      	bne.n	800ef80 <__libc_init_array+0x24>
 800ef6c:	4d0b      	ldr	r5, [pc, #44]	; (800ef9c <__libc_init_array+0x40>)
 800ef6e:	4c0c      	ldr	r4, [pc, #48]	; (800efa0 <__libc_init_array+0x44>)
 800ef70:	f000 f906 	bl	800f180 <_init>
 800ef74:	1b64      	subs	r4, r4, r5
 800ef76:	10a4      	asrs	r4, r4, #2
 800ef78:	2600      	movs	r6, #0
 800ef7a:	42a6      	cmp	r6, r4
 800ef7c:	d105      	bne.n	800ef8a <__libc_init_array+0x2e>
 800ef7e:	bd70      	pop	{r4, r5, r6, pc}
 800ef80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef84:	4798      	blx	r3
 800ef86:	3601      	adds	r6, #1
 800ef88:	e7ee      	b.n	800ef68 <__libc_init_array+0xc>
 800ef8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef8e:	4798      	blx	r3
 800ef90:	3601      	adds	r6, #1
 800ef92:	e7f2      	b.n	800ef7a <__libc_init_array+0x1e>
 800ef94:	0800f33c 	.word	0x0800f33c
 800ef98:	0800f33c 	.word	0x0800f33c
 800ef9c:	0800f33c 	.word	0x0800f33c
 800efa0:	0800f340 	.word	0x0800f340

0800efa4 <malloc>:
 800efa4:	4b02      	ldr	r3, [pc, #8]	; (800efb0 <malloc+0xc>)
 800efa6:	4601      	mov	r1, r0
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	f000 b871 	b.w	800f090 <_malloc_r>
 800efae:	bf00      	nop
 800efb0:	20000030 	.word	0x20000030

0800efb4 <free>:
 800efb4:	4b02      	ldr	r3, [pc, #8]	; (800efc0 <free+0xc>)
 800efb6:	4601      	mov	r1, r0
 800efb8:	6818      	ldr	r0, [r3, #0]
 800efba:	f000 b819 	b.w	800eff0 <_free_r>
 800efbe:	bf00      	nop
 800efc0:	20000030 	.word	0x20000030

0800efc4 <memcpy>:
 800efc4:	440a      	add	r2, r1
 800efc6:	4291      	cmp	r1, r2
 800efc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800efcc:	d100      	bne.n	800efd0 <memcpy+0xc>
 800efce:	4770      	bx	lr
 800efd0:	b510      	push	{r4, lr}
 800efd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efda:	4291      	cmp	r1, r2
 800efdc:	d1f9      	bne.n	800efd2 <memcpy+0xe>
 800efde:	bd10      	pop	{r4, pc}

0800efe0 <memset>:
 800efe0:	4402      	add	r2, r0
 800efe2:	4603      	mov	r3, r0
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d100      	bne.n	800efea <memset+0xa>
 800efe8:	4770      	bx	lr
 800efea:	f803 1b01 	strb.w	r1, [r3], #1
 800efee:	e7f9      	b.n	800efe4 <memset+0x4>

0800eff0 <_free_r>:
 800eff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eff2:	2900      	cmp	r1, #0
 800eff4:	d048      	beq.n	800f088 <_free_r+0x98>
 800eff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800effa:	9001      	str	r0, [sp, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	f1a1 0404 	sub.w	r4, r1, #4
 800f002:	bfb8      	it	lt
 800f004:	18e4      	addlt	r4, r4, r3
 800f006:	f000 f8ad 	bl	800f164 <__malloc_lock>
 800f00a:	4a20      	ldr	r2, [pc, #128]	; (800f08c <_free_r+0x9c>)
 800f00c:	9801      	ldr	r0, [sp, #4]
 800f00e:	6813      	ldr	r3, [r2, #0]
 800f010:	4615      	mov	r5, r2
 800f012:	b933      	cbnz	r3, 800f022 <_free_r+0x32>
 800f014:	6063      	str	r3, [r4, #4]
 800f016:	6014      	str	r4, [r2, #0]
 800f018:	b003      	add	sp, #12
 800f01a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f01e:	f000 b8a7 	b.w	800f170 <__malloc_unlock>
 800f022:	42a3      	cmp	r3, r4
 800f024:	d90b      	bls.n	800f03e <_free_r+0x4e>
 800f026:	6821      	ldr	r1, [r4, #0]
 800f028:	1862      	adds	r2, r4, r1
 800f02a:	4293      	cmp	r3, r2
 800f02c:	bf04      	itt	eq
 800f02e:	681a      	ldreq	r2, [r3, #0]
 800f030:	685b      	ldreq	r3, [r3, #4]
 800f032:	6063      	str	r3, [r4, #4]
 800f034:	bf04      	itt	eq
 800f036:	1852      	addeq	r2, r2, r1
 800f038:	6022      	streq	r2, [r4, #0]
 800f03a:	602c      	str	r4, [r5, #0]
 800f03c:	e7ec      	b.n	800f018 <_free_r+0x28>
 800f03e:	461a      	mov	r2, r3
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	b10b      	cbz	r3, 800f048 <_free_r+0x58>
 800f044:	42a3      	cmp	r3, r4
 800f046:	d9fa      	bls.n	800f03e <_free_r+0x4e>
 800f048:	6811      	ldr	r1, [r2, #0]
 800f04a:	1855      	adds	r5, r2, r1
 800f04c:	42a5      	cmp	r5, r4
 800f04e:	d10b      	bne.n	800f068 <_free_r+0x78>
 800f050:	6824      	ldr	r4, [r4, #0]
 800f052:	4421      	add	r1, r4
 800f054:	1854      	adds	r4, r2, r1
 800f056:	42a3      	cmp	r3, r4
 800f058:	6011      	str	r1, [r2, #0]
 800f05a:	d1dd      	bne.n	800f018 <_free_r+0x28>
 800f05c:	681c      	ldr	r4, [r3, #0]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	6053      	str	r3, [r2, #4]
 800f062:	4421      	add	r1, r4
 800f064:	6011      	str	r1, [r2, #0]
 800f066:	e7d7      	b.n	800f018 <_free_r+0x28>
 800f068:	d902      	bls.n	800f070 <_free_r+0x80>
 800f06a:	230c      	movs	r3, #12
 800f06c:	6003      	str	r3, [r0, #0]
 800f06e:	e7d3      	b.n	800f018 <_free_r+0x28>
 800f070:	6825      	ldr	r5, [r4, #0]
 800f072:	1961      	adds	r1, r4, r5
 800f074:	428b      	cmp	r3, r1
 800f076:	bf04      	itt	eq
 800f078:	6819      	ldreq	r1, [r3, #0]
 800f07a:	685b      	ldreq	r3, [r3, #4]
 800f07c:	6063      	str	r3, [r4, #4]
 800f07e:	bf04      	itt	eq
 800f080:	1949      	addeq	r1, r1, r5
 800f082:	6021      	streq	r1, [r4, #0]
 800f084:	6054      	str	r4, [r2, #4]
 800f086:	e7c7      	b.n	800f018 <_free_r+0x28>
 800f088:	b003      	add	sp, #12
 800f08a:	bd30      	pop	{r4, r5, pc}
 800f08c:	20004dac 	.word	0x20004dac

0800f090 <_malloc_r>:
 800f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f092:	1ccd      	adds	r5, r1, #3
 800f094:	f025 0503 	bic.w	r5, r5, #3
 800f098:	3508      	adds	r5, #8
 800f09a:	2d0c      	cmp	r5, #12
 800f09c:	bf38      	it	cc
 800f09e:	250c      	movcc	r5, #12
 800f0a0:	2d00      	cmp	r5, #0
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	db01      	blt.n	800f0aa <_malloc_r+0x1a>
 800f0a6:	42a9      	cmp	r1, r5
 800f0a8:	d903      	bls.n	800f0b2 <_malloc_r+0x22>
 800f0aa:	230c      	movs	r3, #12
 800f0ac:	6033      	str	r3, [r6, #0]
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0b2:	f000 f857 	bl	800f164 <__malloc_lock>
 800f0b6:	4921      	ldr	r1, [pc, #132]	; (800f13c <_malloc_r+0xac>)
 800f0b8:	680a      	ldr	r2, [r1, #0]
 800f0ba:	4614      	mov	r4, r2
 800f0bc:	b99c      	cbnz	r4, 800f0e6 <_malloc_r+0x56>
 800f0be:	4f20      	ldr	r7, [pc, #128]	; (800f140 <_malloc_r+0xb0>)
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	b923      	cbnz	r3, 800f0ce <_malloc_r+0x3e>
 800f0c4:	4621      	mov	r1, r4
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f000 f83c 	bl	800f144 <_sbrk_r>
 800f0cc:	6038      	str	r0, [r7, #0]
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	f000 f837 	bl	800f144 <_sbrk_r>
 800f0d6:	1c43      	adds	r3, r0, #1
 800f0d8:	d123      	bne.n	800f122 <_malloc_r+0x92>
 800f0da:	230c      	movs	r3, #12
 800f0dc:	6033      	str	r3, [r6, #0]
 800f0de:	4630      	mov	r0, r6
 800f0e0:	f000 f846 	bl	800f170 <__malloc_unlock>
 800f0e4:	e7e3      	b.n	800f0ae <_malloc_r+0x1e>
 800f0e6:	6823      	ldr	r3, [r4, #0]
 800f0e8:	1b5b      	subs	r3, r3, r5
 800f0ea:	d417      	bmi.n	800f11c <_malloc_r+0x8c>
 800f0ec:	2b0b      	cmp	r3, #11
 800f0ee:	d903      	bls.n	800f0f8 <_malloc_r+0x68>
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	441c      	add	r4, r3
 800f0f4:	6025      	str	r5, [r4, #0]
 800f0f6:	e004      	b.n	800f102 <_malloc_r+0x72>
 800f0f8:	6863      	ldr	r3, [r4, #4]
 800f0fa:	42a2      	cmp	r2, r4
 800f0fc:	bf0c      	ite	eq
 800f0fe:	600b      	streq	r3, [r1, #0]
 800f100:	6053      	strne	r3, [r2, #4]
 800f102:	4630      	mov	r0, r6
 800f104:	f000 f834 	bl	800f170 <__malloc_unlock>
 800f108:	f104 000b 	add.w	r0, r4, #11
 800f10c:	1d23      	adds	r3, r4, #4
 800f10e:	f020 0007 	bic.w	r0, r0, #7
 800f112:	1ac2      	subs	r2, r0, r3
 800f114:	d0cc      	beq.n	800f0b0 <_malloc_r+0x20>
 800f116:	1a1b      	subs	r3, r3, r0
 800f118:	50a3      	str	r3, [r4, r2]
 800f11a:	e7c9      	b.n	800f0b0 <_malloc_r+0x20>
 800f11c:	4622      	mov	r2, r4
 800f11e:	6864      	ldr	r4, [r4, #4]
 800f120:	e7cc      	b.n	800f0bc <_malloc_r+0x2c>
 800f122:	1cc4      	adds	r4, r0, #3
 800f124:	f024 0403 	bic.w	r4, r4, #3
 800f128:	42a0      	cmp	r0, r4
 800f12a:	d0e3      	beq.n	800f0f4 <_malloc_r+0x64>
 800f12c:	1a21      	subs	r1, r4, r0
 800f12e:	4630      	mov	r0, r6
 800f130:	f000 f808 	bl	800f144 <_sbrk_r>
 800f134:	3001      	adds	r0, #1
 800f136:	d1dd      	bne.n	800f0f4 <_malloc_r+0x64>
 800f138:	e7cf      	b.n	800f0da <_malloc_r+0x4a>
 800f13a:	bf00      	nop
 800f13c:	20004dac 	.word	0x20004dac
 800f140:	20004db0 	.word	0x20004db0

0800f144 <_sbrk_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	4d06      	ldr	r5, [pc, #24]	; (800f160 <_sbrk_r+0x1c>)
 800f148:	2300      	movs	r3, #0
 800f14a:	4604      	mov	r4, r0
 800f14c:	4608      	mov	r0, r1
 800f14e:	602b      	str	r3, [r5, #0]
 800f150:	f7f2 fe22 	bl	8001d98 <_sbrk>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_sbrk_r+0x1a>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_sbrk_r+0x1a>
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	2000554c 	.word	0x2000554c

0800f164 <__malloc_lock>:
 800f164:	4801      	ldr	r0, [pc, #4]	; (800f16c <__malloc_lock+0x8>)
 800f166:	f000 b809 	b.w	800f17c <__retarget_lock_acquire_recursive>
 800f16a:	bf00      	nop
 800f16c:	20005554 	.word	0x20005554

0800f170 <__malloc_unlock>:
 800f170:	4801      	ldr	r0, [pc, #4]	; (800f178 <__malloc_unlock+0x8>)
 800f172:	f000 b804 	b.w	800f17e <__retarget_lock_release_recursive>
 800f176:	bf00      	nop
 800f178:	20005554 	.word	0x20005554

0800f17c <__retarget_lock_acquire_recursive>:
 800f17c:	4770      	bx	lr

0800f17e <__retarget_lock_release_recursive>:
 800f17e:	4770      	bx	lr

0800f180 <_init>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	bf00      	nop
 800f184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f186:	bc08      	pop	{r3}
 800f188:	469e      	mov	lr, r3
 800f18a:	4770      	bx	lr

0800f18c <_fini>:
 800f18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18e:	bf00      	nop
 800f190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f192:	bc08      	pop	{r3}
 800f194:	469e      	mov	lr, r3
 800f196:	4770      	bx	lr
